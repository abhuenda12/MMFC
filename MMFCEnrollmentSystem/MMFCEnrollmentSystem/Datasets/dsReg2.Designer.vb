'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsReg2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsReg2
    Inherits Global.System.Data.DataSet
    
    Private tableStudents As StudentsDataTable
    
    Private tableStudentsbyPK As StudentsbyPKDataTable
    
    Private tableGradesbyStudentSubject As GradesbyStudentSubjectDataTable
    
    Private tableCurriculum As CurriculumDataTable
    
    Private tableCurriculumbyCourse As CurriculumbyCourseDataTable
    
    Private tableStudentsbyType As StudentsbyTypeDataTable
    
    Private tablePreviousSchoolsByStudentPK As PreviousSchoolsByStudentPKDataTable
    
    Private tablePreviousSchools As PreviousSchoolsDataTable
    
    Private tableCourseEnrolledByStudentPK As CourseEnrolledByStudentPKDataTable
    
    Private tableSubjectCountInCurriculumbyCourse As SubjectCountInCurriculumbyCourseDataTable
    
    Private tableRegistrationNumbers As RegistrationNumbersDataTable
    
    Private tableRegistrationNumbersBySemYearPK As RegistrationNumbersBySemYearPKDataTable
    
    Private tableRegistrationNumbersByStudentSemYearPK As RegistrationNumbersByStudentSemYearPKDataTable
    
    Private tableCurriculumbyCoursebySubject As CurriculumbyCoursebySubjectDataTable
    
    Private tableFusedSubjectsByRootSubject As FusedSubjectsByRootSubjectDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("StudentsbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyPKDataTable(ds.Tables("StudentsbyPK")))
            End If
            If (Not (ds.Tables("GradesbyStudentSubject")) Is Nothing) Then
                MyBase.Tables.Add(New GradesbyStudentSubjectDataTable(ds.Tables("GradesbyStudentSubject")))
            End If
            If (Not (ds.Tables("Curriculum")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumDataTable(ds.Tables("Curriculum")))
            End If
            If (Not (ds.Tables("CurriculumbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumbyCourseDataTable(ds.Tables("CurriculumbyCourse")))
            End If
            If (Not (ds.Tables("StudentsbyType")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyTypeDataTable(ds.Tables("StudentsbyType")))
            End If
            If (Not (ds.Tables("PreviousSchoolsByStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New PreviousSchoolsByStudentPKDataTable(ds.Tables("PreviousSchoolsByStudentPK")))
            End If
            If (Not (ds.Tables("PreviousSchools")) Is Nothing) Then
                MyBase.Tables.Add(New PreviousSchoolsDataTable(ds.Tables("PreviousSchools")))
            End If
            If (Not (ds.Tables("CourseEnrolledByStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New CourseEnrolledByStudentPKDataTable(ds.Tables("CourseEnrolledByStudentPK")))
            End If
            If (Not (ds.Tables("SubjectCountInCurriculumbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectCountInCurriculumbyCourseDataTable(ds.Tables("SubjectCountInCurriculumbyCourse")))
            End If
            If (Not (ds.Tables("RegistrationNumbers")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersDataTable(ds.Tables("RegistrationNumbers")))
            End If
            If (Not (ds.Tables("RegistrationNumbersBySemYearPK")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersBySemYearPKDataTable(ds.Tables("RegistrationNumbersBySemYearPK")))
            End If
            If (Not (ds.Tables("RegistrationNumbersByStudentSemYearPK")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersByStudentSemYearPKDataTable(ds.Tables("RegistrationNumbersByStudentSemYearPK")))
            End If
            If (Not (ds.Tables("CurriculumbyCoursebySubject")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumbyCoursebySubjectDataTable(ds.Tables("CurriculumbyCoursebySubject")))
            End If
            If (Not (ds.Tables("FusedSubjectsByRootSubject")) Is Nothing) Then
                MyBase.Tables.Add(New FusedSubjectsByRootSubjectDataTable(ds.Tables("FusedSubjectsByRootSubject")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Students() As StudentsDataTable
        Get
            Return Me.tableStudents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentsbyPK() As StudentsbyPKDataTable
        Get
            Return Me.tableStudentsbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GradesbyStudentSubject() As GradesbyStudentSubjectDataTable
        Get
            Return Me.tableGradesbyStudentSubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Curriculum() As CurriculumDataTable
        Get
            Return Me.tableCurriculum
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CurriculumbyCourse() As CurriculumbyCourseDataTable
        Get
            Return Me.tableCurriculumbyCourse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentsbyType() As StudentsbyTypeDataTable
        Get
            Return Me.tableStudentsbyType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PreviousSchoolsByStudentPK() As PreviousSchoolsByStudentPKDataTable
        Get
            Return Me.tablePreviousSchoolsByStudentPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PreviousSchools() As PreviousSchoolsDataTable
        Get
            Return Me.tablePreviousSchools
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CourseEnrolledByStudentPK() As CourseEnrolledByStudentPKDataTable
        Get
            Return Me.tableCourseEnrolledByStudentPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubjectCountInCurriculumbyCourse() As SubjectCountInCurriculumbyCourseDataTable
        Get
            Return Me.tableSubjectCountInCurriculumbyCourse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrationNumbers() As RegistrationNumbersDataTable
        Get
            Return Me.tableRegistrationNumbers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrationNumbersBySemYearPK() As RegistrationNumbersBySemYearPKDataTable
        Get
            Return Me.tableRegistrationNumbersBySemYearPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrationNumbersByStudentSemYearPK() As RegistrationNumbersByStudentSemYearPKDataTable
        Get
            Return Me.tableRegistrationNumbersByStudentSemYearPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CurriculumbyCoursebySubject() As CurriculumbyCoursebySubjectDataTable
        Get
            Return Me.tableCurriculumbyCoursebySubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FusedSubjectsByRootSubject() As FusedSubjectsByRootSubjectDataTable
        Get
            Return Me.tableFusedSubjectsByRootSubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsReg2 = CType(MyBase.Clone,dsReg2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("StudentsbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyPKDataTable(ds.Tables("StudentsbyPK")))
            End If
            If (Not (ds.Tables("GradesbyStudentSubject")) Is Nothing) Then
                MyBase.Tables.Add(New GradesbyStudentSubjectDataTable(ds.Tables("GradesbyStudentSubject")))
            End If
            If (Not (ds.Tables("Curriculum")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumDataTable(ds.Tables("Curriculum")))
            End If
            If (Not (ds.Tables("CurriculumbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumbyCourseDataTable(ds.Tables("CurriculumbyCourse")))
            End If
            If (Not (ds.Tables("StudentsbyType")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyTypeDataTable(ds.Tables("StudentsbyType")))
            End If
            If (Not (ds.Tables("PreviousSchoolsByStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New PreviousSchoolsByStudentPKDataTable(ds.Tables("PreviousSchoolsByStudentPK")))
            End If
            If (Not (ds.Tables("PreviousSchools")) Is Nothing) Then
                MyBase.Tables.Add(New PreviousSchoolsDataTable(ds.Tables("PreviousSchools")))
            End If
            If (Not (ds.Tables("CourseEnrolledByStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New CourseEnrolledByStudentPKDataTable(ds.Tables("CourseEnrolledByStudentPK")))
            End If
            If (Not (ds.Tables("SubjectCountInCurriculumbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectCountInCurriculumbyCourseDataTable(ds.Tables("SubjectCountInCurriculumbyCourse")))
            End If
            If (Not (ds.Tables("RegistrationNumbers")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersDataTable(ds.Tables("RegistrationNumbers")))
            End If
            If (Not (ds.Tables("RegistrationNumbersBySemYearPK")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersBySemYearPKDataTable(ds.Tables("RegistrationNumbersBySemYearPK")))
            End If
            If (Not (ds.Tables("RegistrationNumbersByStudentSemYearPK")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrationNumbersByStudentSemYearPKDataTable(ds.Tables("RegistrationNumbersByStudentSemYearPK")))
            End If
            If (Not (ds.Tables("CurriculumbyCoursebySubject")) Is Nothing) Then
                MyBase.Tables.Add(New CurriculumbyCoursebySubjectDataTable(ds.Tables("CurriculumbyCoursebySubject")))
            End If
            If (Not (ds.Tables("FusedSubjectsByRootSubject")) Is Nothing) Then
                MyBase.Tables.Add(New FusedSubjectsByRootSubjectDataTable(ds.Tables("FusedSubjectsByRootSubject")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableStudents = CType(MyBase.Tables("Students"),StudentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudents) Is Nothing) Then
                Me.tableStudents.InitVars
            End If
        End If
        Me.tableStudentsbyPK = CType(MyBase.Tables("StudentsbyPK"),StudentsbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentsbyPK) Is Nothing) Then
                Me.tableStudentsbyPK.InitVars
            End If
        End If
        Me.tableGradesbyStudentSubject = CType(MyBase.Tables("GradesbyStudentSubject"),GradesbyStudentSubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGradesbyStudentSubject) Is Nothing) Then
                Me.tableGradesbyStudentSubject.InitVars
            End If
        End If
        Me.tableCurriculum = CType(MyBase.Tables("Curriculum"),CurriculumDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCurriculum) Is Nothing) Then
                Me.tableCurriculum.InitVars
            End If
        End If
        Me.tableCurriculumbyCourse = CType(MyBase.Tables("CurriculumbyCourse"),CurriculumbyCourseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCurriculumbyCourse) Is Nothing) Then
                Me.tableCurriculumbyCourse.InitVars
            End If
        End If
        Me.tableStudentsbyType = CType(MyBase.Tables("StudentsbyType"),StudentsbyTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentsbyType) Is Nothing) Then
                Me.tableStudentsbyType.InitVars
            End If
        End If
        Me.tablePreviousSchoolsByStudentPK = CType(MyBase.Tables("PreviousSchoolsByStudentPK"),PreviousSchoolsByStudentPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePreviousSchoolsByStudentPK) Is Nothing) Then
                Me.tablePreviousSchoolsByStudentPK.InitVars
            End If
        End If
        Me.tablePreviousSchools = CType(MyBase.Tables("PreviousSchools"),PreviousSchoolsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePreviousSchools) Is Nothing) Then
                Me.tablePreviousSchools.InitVars
            End If
        End If
        Me.tableCourseEnrolledByStudentPK = CType(MyBase.Tables("CourseEnrolledByStudentPK"),CourseEnrolledByStudentPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCourseEnrolledByStudentPK) Is Nothing) Then
                Me.tableCourseEnrolledByStudentPK.InitVars
            End If
        End If
        Me.tableSubjectCountInCurriculumbyCourse = CType(MyBase.Tables("SubjectCountInCurriculumbyCourse"),SubjectCountInCurriculumbyCourseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjectCountInCurriculumbyCourse) Is Nothing) Then
                Me.tableSubjectCountInCurriculumbyCourse.InitVars
            End If
        End If
        Me.tableRegistrationNumbers = CType(MyBase.Tables("RegistrationNumbers"),RegistrationNumbersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrationNumbers) Is Nothing) Then
                Me.tableRegistrationNumbers.InitVars
            End If
        End If
        Me.tableRegistrationNumbersBySemYearPK = CType(MyBase.Tables("RegistrationNumbersBySemYearPK"),RegistrationNumbersBySemYearPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrationNumbersBySemYearPK) Is Nothing) Then
                Me.tableRegistrationNumbersBySemYearPK.InitVars
            End If
        End If
        Me.tableRegistrationNumbersByStudentSemYearPK = CType(MyBase.Tables("RegistrationNumbersByStudentSemYearPK"),RegistrationNumbersByStudentSemYearPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrationNumbersByStudentSemYearPK) Is Nothing) Then
                Me.tableRegistrationNumbersByStudentSemYearPK.InitVars
            End If
        End If
        Me.tableCurriculumbyCoursebySubject = CType(MyBase.Tables("CurriculumbyCoursebySubject"),CurriculumbyCoursebySubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCurriculumbyCoursebySubject) Is Nothing) Then
                Me.tableCurriculumbyCoursebySubject.InitVars
            End If
        End If
        Me.tableFusedSubjectsByRootSubject = CType(MyBase.Tables("FusedSubjectsByRootSubject"),FusedSubjectsByRootSubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFusedSubjectsByRootSubject) Is Nothing) Then
                Me.tableFusedSubjectsByRootSubject.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsReg2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReg2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableStudents = New StudentsDataTable
        MyBase.Tables.Add(Me.tableStudents)
        Me.tableStudentsbyPK = New StudentsbyPKDataTable
        MyBase.Tables.Add(Me.tableStudentsbyPK)
        Me.tableGradesbyStudentSubject = New GradesbyStudentSubjectDataTable
        MyBase.Tables.Add(Me.tableGradesbyStudentSubject)
        Me.tableCurriculum = New CurriculumDataTable
        MyBase.Tables.Add(Me.tableCurriculum)
        Me.tableCurriculumbyCourse = New CurriculumbyCourseDataTable
        MyBase.Tables.Add(Me.tableCurriculumbyCourse)
        Me.tableStudentsbyType = New StudentsbyTypeDataTable
        MyBase.Tables.Add(Me.tableStudentsbyType)
        Me.tablePreviousSchoolsByStudentPK = New PreviousSchoolsByStudentPKDataTable
        MyBase.Tables.Add(Me.tablePreviousSchoolsByStudentPK)
        Me.tablePreviousSchools = New PreviousSchoolsDataTable
        MyBase.Tables.Add(Me.tablePreviousSchools)
        Me.tableCourseEnrolledByStudentPK = New CourseEnrolledByStudentPKDataTable
        MyBase.Tables.Add(Me.tableCourseEnrolledByStudentPK)
        Me.tableSubjectCountInCurriculumbyCourse = New SubjectCountInCurriculumbyCourseDataTable
        MyBase.Tables.Add(Me.tableSubjectCountInCurriculumbyCourse)
        Me.tableRegistrationNumbers = New RegistrationNumbersDataTable
        MyBase.Tables.Add(Me.tableRegistrationNumbers)
        Me.tableRegistrationNumbersBySemYearPK = New RegistrationNumbersBySemYearPKDataTable
        MyBase.Tables.Add(Me.tableRegistrationNumbersBySemYearPK)
        Me.tableRegistrationNumbersByStudentSemYearPK = New RegistrationNumbersByStudentSemYearPKDataTable
        MyBase.Tables.Add(Me.tableRegistrationNumbersByStudentSemYearPK)
        Me.tableCurriculumbyCoursebySubject = New CurriculumbyCoursebySubjectDataTable
        MyBase.Tables.Add(Me.tableCurriculumbyCoursebySubject)
        Me.tableFusedSubjectsByRootSubject = New FusedSubjectsByRootSubjectDataTable
        MyBase.Tables.Add(Me.tableFusedSubjectsByRootSubject)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentsbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGradesbyStudentSubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCurriculum() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCurriculumbyCourse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentsbyType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePreviousSchoolsByStudentPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePreviousSchools() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCourseEnrolledByStudentPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjectCountInCurriculumbyCourse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegistrationNumbers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegistrationNumbersBySemYearPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegistrationNumbersByStudentSemYearPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCurriculumbyCoursebySubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFusedSubjectsByRootSubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsReg2 = New dsReg2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub StudentsRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsRowChangeEvent)
    
    Public Delegate Sub StudentsbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsbyPKRowChangeEvent)
    
    Public Delegate Sub GradesbyStudentSubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As GradesbyStudentSubjectRowChangeEvent)
    
    Public Delegate Sub CurriculumRowChangeEventHandler(ByVal sender As Object, ByVal e As CurriculumRowChangeEvent)
    
    Public Delegate Sub CurriculumbyCourseRowChangeEventHandler(ByVal sender As Object, ByVal e As CurriculumbyCourseRowChangeEvent)
    
    Public Delegate Sub StudentsbyTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsbyTypeRowChangeEvent)
    
    Public Delegate Sub PreviousSchoolsByStudentPKRowChangeEventHandler(ByVal sender As Object, ByVal e As PreviousSchoolsByStudentPKRowChangeEvent)
    
    Public Delegate Sub PreviousSchoolsRowChangeEventHandler(ByVal sender As Object, ByVal e As PreviousSchoolsRowChangeEvent)
    
    Public Delegate Sub CourseEnrolledByStudentPKRowChangeEventHandler(ByVal sender As Object, ByVal e As CourseEnrolledByStudentPKRowChangeEvent)
    
    Public Delegate Sub SubjectCountInCurriculumbyCourseRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectCountInCurriculumbyCourseRowChangeEvent)
    
    Public Delegate Sub RegistrationNumbersRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrationNumbersRowChangeEvent)
    
    Public Delegate Sub RegistrationNumbersBySemYearPKRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrationNumbersBySemYearPKRowChangeEvent)
    
    Public Delegate Sub RegistrationNumbersByStudentSemYearPKRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrationNumbersByStudentSemYearPKRowChangeEvent)
    
    Public Delegate Sub CurriculumbyCoursebySubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As CurriculumbyCoursebySubjectRowChangeEvent)
    
    Public Delegate Sub FusedSubjectsByRootSubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As FusedSubjectsByRootSubjectRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnbirthplace As Global.System.Data.DataColumn
        
        Private columngradDate As Global.System.Data.DataColumn
        
        Private columngradCollege As Global.System.Data.DataColumn
        
        Private columngradCourse As Global.System.Data.DataColumn
        
        Private columngradConcentration As Global.System.Data.DataColumn
        
        Private columnEdubackground5 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate5 As Global.System.Data.DataColumn
        
        Private columnEdubackground6 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate6 As Global.System.Data.DataColumn
        
        Private columnSecondCourser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Students"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthplaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthplace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradConcentrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradConcentration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondCourserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondCourser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsRow
            Get
                Return CType(Me.Rows(index),StudentsRow)
            End Get
        End Property
        
        Public Event StudentsRowChanging As StudentsRowChangeEventHandler
        
        Public Event StudentsRowChanged As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleting As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleted As StudentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal regDate As Date,  _
                    ByVal Gender As String,  _
                    ByVal birthplace As String,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Boolean) As StudentsRow
            Dim rowStudentsRow As StudentsRow = CType(Me.NewRow,StudentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, regDate, Gender, birthplace, gradDate, gradCollege, gradCourse, gradConcentration, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, SecondCourser}
            rowStudentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsRow)
            Return rowStudentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsDataTable = CType(MyBase.Clone,StudentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columnregDate = MyBase.Columns("regDate")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnbirthplace = MyBase.Columns("birthplace")
            Me.columngradDate = MyBase.Columns("gradDate")
            Me.columngradCollege = MyBase.Columns("gradCollege")
            Me.columngradCourse = MyBase.Columns("gradCourse")
            Me.columngradConcentration = MyBase.Columns("gradConcentration")
            Me.columnEdubackground5 = MyBase.Columns("Edubackground5")
            Me.columnEdubackgrounddate5 = MyBase.Columns("Edubackgrounddate5")
            Me.columnEdubackground6 = MyBase.Columns("Edubackground6")
            Me.columnEdubackgrounddate6 = MyBase.Columns("Edubackgrounddate6")
            Me.columnSecondCourser = MyBase.Columns("SecondCourser")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnbirthplace = New Global.System.Data.DataColumn("birthplace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthplace)
            Me.columngradDate = New Global.System.Data.DataColumn("gradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradDate)
            Me.columngradCollege = New Global.System.Data.DataColumn("gradCollege", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCollege)
            Me.columngradCourse = New Global.System.Data.DataColumn("gradCourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCourse)
            Me.columngradConcentration = New Global.System.Data.DataColumn("gradConcentration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradConcentration)
            Me.columnEdubackground5 = New Global.System.Data.DataColumn("Edubackground5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground5)
            Me.columnEdubackgrounddate5 = New Global.System.Data.DataColumn("Edubackgrounddate5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate5)
            Me.columnEdubackground6 = New Global.System.Data.DataColumn("Edubackground6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground6)
            Me.columnEdubackgrounddate6 = New Global.System.Data.DataColumn("Edubackgrounddate6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate6)
            Me.columnSecondCourser = New Global.System.Data.DataColumn("SecondCourser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondCourser)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 1000
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 1000
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 1000
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 300
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 300
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 300
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 300
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
            Me.columnStudentType.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnbirthplace.MaxLength = 50
            Me.columngradDate.MaxLength = 50
            Me.columngradCollege.MaxLength = 50
            Me.columngradCourse.MaxLength = 50
            Me.columngradConcentration.MaxLength = 50
            Me.columnEdubackground5.MaxLength = 300
            Me.columnEdubackgrounddate5.MaxLength = 50
            Me.columnEdubackground6.MaxLength = 300
            Me.columnEdubackgrounddate6.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsRow() As StudentsRow
            Return CType(Me.NewRow,StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanged(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanging(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleted(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleting(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsbyPKRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnbirthplace As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        Private columngradDate As Global.System.Data.DataColumn
        
        Private columngradCollege As Global.System.Data.DataColumn
        
        Private columngradCourse As Global.System.Data.DataColumn
        
        Private columngradConcentration As Global.System.Data.DataColumn
        
        Private columnEdubackground5 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate5 As Global.System.Data.DataColumn
        
        Private columnEdubackground6 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate6 As Global.System.Data.DataColumn
        
        Private columnSecondCourser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentsbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthplaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthplace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradConcentrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradConcentration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondCourserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondCourser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsbyPKRow
            Get
                Return CType(Me.Rows(index),StudentsbyPKRow)
            End Get
        End Property
        
        Public Event StudentsbyPKRowChanging As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowChanged As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowDeleting As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowDeleted As StudentsbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsbyPKRow(ByVal row As StudentsbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsbyPKRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Date,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Boolean) As StudentsbyPKRow
            Dim rowStudentsbyPKRow As StudentsbyPKRow = CType(Me.NewRow,StudentsbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, birthplace, Gender, regDate, gradDate, gradCollege, gradCourse, gradConcentration, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, SecondCourser}
            rowStudentsbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsbyPKRow)
            Return rowStudentsbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsbyPKRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsbyPKDataTable = CType(MyBase.Clone,StudentsbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnbirthplace = MyBase.Columns("birthplace")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnregDate = MyBase.Columns("regDate")
            Me.columngradDate = MyBase.Columns("gradDate")
            Me.columngradCollege = MyBase.Columns("gradCollege")
            Me.columngradCourse = MyBase.Columns("gradCourse")
            Me.columngradConcentration = MyBase.Columns("gradConcentration")
            Me.columnEdubackground5 = MyBase.Columns("Edubackground5")
            Me.columnEdubackgrounddate5 = MyBase.Columns("Edubackgrounddate5")
            Me.columnEdubackground6 = MyBase.Columns("Edubackground6")
            Me.columnEdubackgrounddate6 = MyBase.Columns("Edubackgrounddate6")
            Me.columnSecondCourser = MyBase.Columns("SecondCourser")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnbirthplace = New Global.System.Data.DataColumn("birthplace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthplace)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.columngradDate = New Global.System.Data.DataColumn("gradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradDate)
            Me.columngradCollege = New Global.System.Data.DataColumn("gradCollege", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCollege)
            Me.columngradCourse = New Global.System.Data.DataColumn("gradCourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCourse)
            Me.columngradConcentration = New Global.System.Data.DataColumn("gradConcentration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradConcentration)
            Me.columnEdubackground5 = New Global.System.Data.DataColumn("Edubackground5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground5)
            Me.columnEdubackgrounddate5 = New Global.System.Data.DataColumn("Edubackgrounddate5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate5)
            Me.columnEdubackground6 = New Global.System.Data.DataColumn("Edubackground6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground6)
            Me.columnEdubackgrounddate6 = New Global.System.Data.DataColumn("Edubackgrounddate6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate6)
            Me.columnSecondCourser = New Global.System.Data.DataColumn("SecondCourser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondCourser)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 300
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 300
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 300
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 300
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
            Me.columnStudentType.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 1000
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 1000
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 1000
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnbirthplace.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columngradDate.MaxLength = 50
            Me.columngradCollege.MaxLength = 50
            Me.columngradCourse.MaxLength = 50
            Me.columngradConcentration.MaxLength = 50
            Me.columnEdubackground5.MaxLength = 300
            Me.columnEdubackgrounddate5.MaxLength = 50
            Me.columnEdubackground6.MaxLength = 300
            Me.columnEdubackgrounddate6.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsbyPKRow() As StudentsbyPKRow
            Return CType(Me.NewRow,StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowChanged(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowChanging(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowDeleted(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowDeleting(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsbyPKRow(ByVal row As StudentsbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GradesbyStudentSubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of GradesbyStudentSubjectRow)
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnexSubjectUnits As Global.System.Data.DataColumn
        
        Private columnexCreditGroup As Global.System.Data.DataColumn
        
        Private columnisPrevSchoolGrade As Global.System.Data.DataColumn
        
        Private columnexCompletionGrade As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GradesbyStudentSubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isPrevSchoolGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisPrevSchoolGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GradesbyStudentSubjectRow
            Get
                Return CType(Me.Rows(index),GradesbyStudentSubjectRow)
            End Get
        End Property
        
        Public Event GradesbyStudentSubjectRowChanging As GradesbyStudentSubjectRowChangeEventHandler
        
        Public Event GradesbyStudentSubjectRowChanged As GradesbyStudentSubjectRowChangeEventHandler
        
        Public Event GradesbyStudentSubjectRowDeleting As GradesbyStudentSubjectRowChangeEventHandler
        
        Public Event GradesbyStudentSubjectRowDeleted As GradesbyStudentSubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGradesbyStudentSubjectRow(ByVal row As GradesbyStudentSubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGradesbyStudentSubjectRow( _
                    ByVal SubjectName As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Integer,  _
                    ByVal exCreditGroup As Integer,  _
                    ByVal isPrevSchoolGrade As Boolean,  _
                    ByVal exCompletionGrade As Decimal) As GradesbyStudentSubjectRow
            Dim rowGradesbyStudentSubjectRow As GradesbyStudentSubjectRow = CType(Me.NewRow,GradesbyStudentSubjectRow)
            Dim columnValuesArray() As Object = New Object() {SubjectName, SubjectCode, Nothing, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, isPrevSchoolGrade, exCompletionGrade}
            rowGradesbyStudentSubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGradesbyStudentSubjectRow)
            Return rowGradesbyStudentSubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As GradesbyStudentSubjectRow
            Return CType(Me.Rows.Find(New Object() {pk}),GradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GradesbyStudentSubjectDataTable = CType(MyBase.Clone,GradesbyStudentSubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GradesbyStudentSubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnexSubjectUnits = MyBase.Columns("exSubjectUnits")
            Me.columnexCreditGroup = MyBase.Columns("exCreditGroup")
            Me.columnisPrevSchoolGrade = MyBase.Columns("isPrevSchoolGrade")
            Me.columnexCompletionGrade = MyBase.Columns("exCompletionGrade")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnexSubjectUnits = New Global.System.Data.DataColumn("exSubjectUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectUnits)
            Me.columnexCreditGroup = New Global.System.Data.DataColumn("exCreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCreditGroup)
            Me.columnisPrevSchoolGrade = New Global.System.Data.DataColumn("isPrevSchoolGrade", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisPrevSchoolGrade)
            Me.columnexCompletionGrade = New Global.System.Data.DataColumn("exCompletionGrade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCompletionGrade)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnSubjectName.MaxLength = 1000
            Me.columnSubjectCode.MaxLength = 1000
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGradesbyStudentSubjectRow() As GradesbyStudentSubjectRow
            Return CType(Me.NewRow,GradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GradesbyStudentSubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GradesbyStudentSubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentSubjectRowChanged(Me, New GradesbyStudentSubjectRowChangeEvent(CType(e.Row,GradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GradesbyStudentSubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentSubjectRowChanging(Me, New GradesbyStudentSubjectRowChangeEvent(CType(e.Row,GradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GradesbyStudentSubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentSubjectRowDeleted(Me, New GradesbyStudentSubjectRowChangeEvent(CType(e.Row,GradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GradesbyStudentSubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentSubjectRowDeleting(Me, New GradesbyStudentSubjectRowChangeEvent(CType(e.Row,GradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGradesbyStudentSubjectRow(ByVal row As GradesbyStudentSubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GradesbyStudentSubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CurriculumDataTable
        Inherits Global.System.Data.TypedTableBase(Of CurriculumRow)
        
        Private columnCurriculumpk As Global.System.Data.DataColumn
        
        Private columnCoursepk As Global.System.Data.DataColumn
        
        Private columnYearLevelid As Global.System.Data.DataColumn
        
        Private columnSemesterid As Global.System.Data.DataColumn
        
        Private columnSubjectpk As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Curriculum"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurriculumpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurriculumpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevelid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesteridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CurriculumRow
            Get
                Return CType(Me.Rows(index),CurriculumRow)
            End Get
        End Property
        
        Public Event CurriculumRowChanging As CurriculumRowChangeEventHandler
        
        Public Event CurriculumRowChanged As CurriculumRowChangeEventHandler
        
        Public Event CurriculumRowDeleting As CurriculumRowChangeEventHandler
        
        Public Event CurriculumRowDeleted As CurriculumRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCurriculumRow(ByVal row As CurriculumRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCurriculumRow(ByVal Coursepk As Integer, ByVal YearLevelid As Integer, ByVal Semesterid As Integer, ByVal Subjectpk As Integer, ByVal Remarks As String) As CurriculumRow
            Dim rowCurriculumRow As CurriculumRow = CType(Me.NewRow,CurriculumRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks}
            rowCurriculumRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCurriculumRow)
            Return rowCurriculumRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCurriculumpk(ByVal Curriculumpk As Integer) As CurriculumRow
            Return CType(Me.Rows.Find(New Object() {Curriculumpk}),CurriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CurriculumDataTable = CType(MyBase.Clone,CurriculumDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CurriculumDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurriculumpk = MyBase.Columns("Curriculumpk")
            Me.columnCoursepk = MyBase.Columns("Coursepk")
            Me.columnYearLevelid = MyBase.Columns("YearLevelid")
            Me.columnSemesterid = MyBase.Columns("Semesterid")
            Me.columnSubjectpk = MyBase.Columns("Subjectpk")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurriculumpk = New Global.System.Data.DataColumn("Curriculumpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurriculumpk)
            Me.columnCoursepk = New Global.System.Data.DataColumn("Coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoursepk)
            Me.columnYearLevelid = New Global.System.Data.DataColumn("YearLevelid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevelid)
            Me.columnSemesterid = New Global.System.Data.DataColumn("Semesterid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterid)
            Me.columnSubjectpk = New Global.System.Data.DataColumn("Subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectpk)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCurriculumpk}, true))
            Me.columnCurriculumpk.AutoIncrement = true
            Me.columnCurriculumpk.AllowDBNull = false
            Me.columnCurriculumpk.ReadOnly = true
            Me.columnCurriculumpk.Unique = true
            Me.columnRemarks.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCurriculumRow() As CurriculumRow
            Return CType(Me.NewRow,CurriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CurriculumRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CurriculumRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CurriculumRowChangedEvent) Is Nothing) Then
                RaiseEvent CurriculumRowChanged(Me, New CurriculumRowChangeEvent(CType(e.Row,CurriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CurriculumRowChangingEvent) Is Nothing) Then
                RaiseEvent CurriculumRowChanging(Me, New CurriculumRowChangeEvent(CType(e.Row,CurriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CurriculumRowDeletedEvent) Is Nothing) Then
                RaiseEvent CurriculumRowDeleted(Me, New CurriculumRowChangeEvent(CType(e.Row,CurriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CurriculumRowDeletingEvent) Is Nothing) Then
                RaiseEvent CurriculumRowDeleting(Me, New CurriculumRowChangeEvent(CType(e.Row,CurriculumRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCurriculumRow(ByVal row As CurriculumRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CurriculumDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CurriculumbyCourseDataTable
        Inherits Global.System.Data.TypedTableBase(Of CurriculumbyCourseRow)
        
        Private columnCurriculumpk As Global.System.Data.DataColumn
        
        Private columnCoursepk As Global.System.Data.DataColumn
        
        Private columnYearLevelid As Global.System.Data.DataColumn
        
        Private columnSemesterid As Global.System.Data.DataColumn
        
        Private columnSubjectpk As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CurriculumbyCourse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurriculumpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurriculumpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevelid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesteridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CurriculumbyCourseRow
            Get
                Return CType(Me.Rows(index),CurriculumbyCourseRow)
            End Get
        End Property
        
        Public Event CurriculumbyCourseRowChanging As CurriculumbyCourseRowChangeEventHandler
        
        Public Event CurriculumbyCourseRowChanged As CurriculumbyCourseRowChangeEventHandler
        
        Public Event CurriculumbyCourseRowDeleting As CurriculumbyCourseRowChangeEventHandler
        
        Public Event CurriculumbyCourseRowDeleted As CurriculumbyCourseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCurriculumbyCourseRow(ByVal row As CurriculumbyCourseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCurriculumbyCourseRow(ByVal Coursepk As Integer, ByVal YearLevelid As Integer, ByVal Semesterid As Integer, ByVal Subjectpk As Integer, ByVal Remarks As String) As CurriculumbyCourseRow
            Dim rowCurriculumbyCourseRow As CurriculumbyCourseRow = CType(Me.NewRow,CurriculumbyCourseRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks}
            rowCurriculumbyCourseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCurriculumbyCourseRow)
            Return rowCurriculumbyCourseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCurriculumpk(ByVal Curriculumpk As Integer) As CurriculumbyCourseRow
            Return CType(Me.Rows.Find(New Object() {Curriculumpk}),CurriculumbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CurriculumbyCourseDataTable = CType(MyBase.Clone,CurriculumbyCourseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CurriculumbyCourseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurriculumpk = MyBase.Columns("Curriculumpk")
            Me.columnCoursepk = MyBase.Columns("Coursepk")
            Me.columnYearLevelid = MyBase.Columns("YearLevelid")
            Me.columnSemesterid = MyBase.Columns("Semesterid")
            Me.columnSubjectpk = MyBase.Columns("Subjectpk")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurriculumpk = New Global.System.Data.DataColumn("Curriculumpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurriculumpk)
            Me.columnCoursepk = New Global.System.Data.DataColumn("Coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoursepk)
            Me.columnYearLevelid = New Global.System.Data.DataColumn("YearLevelid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevelid)
            Me.columnSemesterid = New Global.System.Data.DataColumn("Semesterid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterid)
            Me.columnSubjectpk = New Global.System.Data.DataColumn("Subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectpk)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCurriculumpk}, true))
            Me.columnCurriculumpk.AutoIncrement = true
            Me.columnCurriculumpk.AllowDBNull = false
            Me.columnCurriculumpk.ReadOnly = true
            Me.columnCurriculumpk.Unique = true
            Me.columnRemarks.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCurriculumbyCourseRow() As CurriculumbyCourseRow
            Return CType(Me.NewRow,CurriculumbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CurriculumbyCourseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CurriculumbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CurriculumbyCourseRowChangedEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCourseRowChanged(Me, New CurriculumbyCourseRowChangeEvent(CType(e.Row,CurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CurriculumbyCourseRowChangingEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCourseRowChanging(Me, New CurriculumbyCourseRowChangeEvent(CType(e.Row,CurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CurriculumbyCourseRowDeletedEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCourseRowDeleted(Me, New CurriculumbyCourseRowChangeEvent(CType(e.Row,CurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CurriculumbyCourseRowDeletingEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCourseRowDeleting(Me, New CurriculumbyCourseRowChangeEvent(CType(e.Row,CurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCurriculumbyCourseRow(ByVal row As CurriculumbyCourseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CurriculumbyCourseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsbyTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsbyTypeRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnbirthplace As Global.System.Data.DataColumn
        
        Private columngradDate As Global.System.Data.DataColumn
        
        Private columngradCollege As Global.System.Data.DataColumn
        
        Private columngradCourse As Global.System.Data.DataColumn
        
        Private columngradConcentration As Global.System.Data.DataColumn
        
        Private columnEdubackground5 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate5 As Global.System.Data.DataColumn
        
        Private columnEdubackground6 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate6 As Global.System.Data.DataColumn
        
        Private columnSecondCourser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentsbyType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birthplaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirthplace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradConcentrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngradConcentration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondCourserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondCourser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsbyTypeRow
            Get
                Return CType(Me.Rows(index),StudentsbyTypeRow)
            End Get
        End Property
        
        Public Event StudentsbyTypeRowChanging As StudentsbyTypeRowChangeEventHandler
        
        Public Event StudentsbyTypeRowChanged As StudentsbyTypeRowChangeEventHandler
        
        Public Event StudentsbyTypeRowDeleting As StudentsbyTypeRowChangeEventHandler
        
        Public Event StudentsbyTypeRowDeleted As StudentsbyTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsbyTypeRow(ByVal row As StudentsbyTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsbyTypeRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal regDate As Date,  _
                    ByVal Gender As String,  _
                    ByVal birthplace As String,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Boolean) As StudentsbyTypeRow
            Dim rowStudentsbyTypeRow As StudentsbyTypeRow = CType(Me.NewRow,StudentsbyTypeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, regDate, Gender, birthplace, gradDate, gradCollege, gradCourse, gradConcentration, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, SecondCourser}
            rowStudentsbyTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsbyTypeRow)
            Return rowStudentsbyTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsbyTypeRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsbyTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsbyTypeDataTable = CType(MyBase.Clone,StudentsbyTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsbyTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columnregDate = MyBase.Columns("regDate")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnbirthplace = MyBase.Columns("birthplace")
            Me.columngradDate = MyBase.Columns("gradDate")
            Me.columngradCollege = MyBase.Columns("gradCollege")
            Me.columngradCourse = MyBase.Columns("gradCourse")
            Me.columngradConcentration = MyBase.Columns("gradConcentration")
            Me.columnEdubackground5 = MyBase.Columns("Edubackground5")
            Me.columnEdubackgrounddate5 = MyBase.Columns("Edubackgrounddate5")
            Me.columnEdubackground6 = MyBase.Columns("Edubackground6")
            Me.columnEdubackgrounddate6 = MyBase.Columns("Edubackgrounddate6")
            Me.columnSecondCourser = MyBase.Columns("SecondCourser")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnbirthplace = New Global.System.Data.DataColumn("birthplace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirthplace)
            Me.columngradDate = New Global.System.Data.DataColumn("gradDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradDate)
            Me.columngradCollege = New Global.System.Data.DataColumn("gradCollege", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCollege)
            Me.columngradCourse = New Global.System.Data.DataColumn("gradCourse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradCourse)
            Me.columngradConcentration = New Global.System.Data.DataColumn("gradConcentration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngradConcentration)
            Me.columnEdubackground5 = New Global.System.Data.DataColumn("Edubackground5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground5)
            Me.columnEdubackgrounddate5 = New Global.System.Data.DataColumn("Edubackgrounddate5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate5)
            Me.columnEdubackground6 = New Global.System.Data.DataColumn("Edubackground6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground6)
            Me.columnEdubackgrounddate6 = New Global.System.Data.DataColumn("Edubackgrounddate6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate6)
            Me.columnSecondCourser = New Global.System.Data.DataColumn("SecondCourser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondCourser)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 50
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 50
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 50
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 50
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 50
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 50
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 50
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
            Me.columnStudentType.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnbirthplace.MaxLength = 50
            Me.columngradDate.MaxLength = 50
            Me.columngradCollege.MaxLength = 50
            Me.columngradCourse.MaxLength = 50
            Me.columngradConcentration.MaxLength = 50
            Me.columnEdubackground5.MaxLength = 50
            Me.columnEdubackgrounddate5.MaxLength = 50
            Me.columnEdubackground6.MaxLength = 50
            Me.columnEdubackgrounddate6.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsbyTypeRow() As StudentsbyTypeRow
            Return CType(Me.NewRow,StudentsbyTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsbyTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsbyTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsbyTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsbyTypeRowChanged(Me, New StudentsbyTypeRowChangeEvent(CType(e.Row,StudentsbyTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsbyTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsbyTypeRowChanging(Me, New StudentsbyTypeRowChangeEvent(CType(e.Row,StudentsbyTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsbyTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsbyTypeRowDeleted(Me, New StudentsbyTypeRowChangeEvent(CType(e.Row,StudentsbyTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsbyTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsbyTypeRowDeleting(Me, New StudentsbyTypeRowChangeEvent(CType(e.Row,StudentsbyTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsbyTypeRow(ByVal row As StudentsbyTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsbyTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PreviousSchoolsByStudentPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of PreviousSchoolsByStudentPKRow)
        
        Private columnprevSchoolRecordID As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnYearAttend As Global.System.Data.DataColumn
        
        Private columnstudentPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PreviousSchoolsByStudentPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevSchoolRecordIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevSchoolRecordID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearAttendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearAttend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PreviousSchoolsByStudentPKRow
            Get
                Return CType(Me.Rows(index),PreviousSchoolsByStudentPKRow)
            End Get
        End Property
        
        Public Event PreviousSchoolsByStudentPKRowChanging As PreviousSchoolsByStudentPKRowChangeEventHandler
        
        Public Event PreviousSchoolsByStudentPKRowChanged As PreviousSchoolsByStudentPKRowChangeEventHandler
        
        Public Event PreviousSchoolsByStudentPKRowDeleting As PreviousSchoolsByStudentPKRowChangeEventHandler
        
        Public Event PreviousSchoolsByStudentPKRowDeleted As PreviousSchoolsByStudentPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPreviousSchoolsByStudentPKRow(ByVal row As PreviousSchoolsByStudentPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPreviousSchoolsByStudentPKRow(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer) As PreviousSchoolsByStudentPKRow
            Dim rowPreviousSchoolsByStudentPKRow As PreviousSchoolsByStudentPKRow = CType(Me.NewRow,PreviousSchoolsByStudentPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolName, YearAttend, studentPK}
            rowPreviousSchoolsByStudentPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPreviousSchoolsByStudentPKRow)
            Return rowPreviousSchoolsByStudentPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByprevSchoolRecordID(ByVal prevSchoolRecordID As Integer) As PreviousSchoolsByStudentPKRow
            Return CType(Me.Rows.Find(New Object() {prevSchoolRecordID}),PreviousSchoolsByStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PreviousSchoolsByStudentPKDataTable = CType(MyBase.Clone,PreviousSchoolsByStudentPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PreviousSchoolsByStudentPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnprevSchoolRecordID = MyBase.Columns("prevSchoolRecordID")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnYearAttend = MyBase.Columns("YearAttend")
            Me.columnstudentPK = MyBase.Columns("studentPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnprevSchoolRecordID = New Global.System.Data.DataColumn("prevSchoolRecordID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevSchoolRecordID)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnYearAttend = New Global.System.Data.DataColumn("YearAttend", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearAttend)
            Me.columnstudentPK = New Global.System.Data.DataColumn("studentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnprevSchoolRecordID}, true))
            Me.columnprevSchoolRecordID.AutoIncrement = true
            Me.columnprevSchoolRecordID.AllowDBNull = false
            Me.columnprevSchoolRecordID.ReadOnly = true
            Me.columnprevSchoolRecordID.Unique = true
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.DefaultValue = CType("",String)
            Me.columnSchoolName.MaxLength = 300
            Me.columnYearAttend.DefaultValue = CType("",String)
            Me.columnYearAttend.MaxLength = 50
            Me.columnstudentPK.AllowDBNull = false
            Me.columnstudentPK.DefaultValue = CType(-1,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPreviousSchoolsByStudentPKRow() As PreviousSchoolsByStudentPKRow
            Return CType(Me.NewRow,PreviousSchoolsByStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PreviousSchoolsByStudentPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PreviousSchoolsByStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PreviousSchoolsByStudentPKRowChangedEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsByStudentPKRowChanged(Me, New PreviousSchoolsByStudentPKRowChangeEvent(CType(e.Row,PreviousSchoolsByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PreviousSchoolsByStudentPKRowChangingEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsByStudentPKRowChanging(Me, New PreviousSchoolsByStudentPKRowChangeEvent(CType(e.Row,PreviousSchoolsByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PreviousSchoolsByStudentPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsByStudentPKRowDeleted(Me, New PreviousSchoolsByStudentPKRowChangeEvent(CType(e.Row,PreviousSchoolsByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PreviousSchoolsByStudentPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsByStudentPKRowDeleting(Me, New PreviousSchoolsByStudentPKRowChangeEvent(CType(e.Row,PreviousSchoolsByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePreviousSchoolsByStudentPKRow(ByVal row As PreviousSchoolsByStudentPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PreviousSchoolsByStudentPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PreviousSchoolsDataTable
        Inherits Global.System.Data.TypedTableBase(Of PreviousSchoolsRow)
        
        Private columnprevSchoolRecordID As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnYearAttend As Global.System.Data.DataColumn
        
        Private columnstudentPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PreviousSchools"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevSchoolRecordIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevSchoolRecordID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearAttendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearAttend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PreviousSchoolsRow
            Get
                Return CType(Me.Rows(index),PreviousSchoolsRow)
            End Get
        End Property
        
        Public Event PreviousSchoolsRowChanging As PreviousSchoolsRowChangeEventHandler
        
        Public Event PreviousSchoolsRowChanged As PreviousSchoolsRowChangeEventHandler
        
        Public Event PreviousSchoolsRowDeleting As PreviousSchoolsRowChangeEventHandler
        
        Public Event PreviousSchoolsRowDeleted As PreviousSchoolsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPreviousSchoolsRow(ByVal row As PreviousSchoolsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPreviousSchoolsRow(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer) As PreviousSchoolsRow
            Dim rowPreviousSchoolsRow As PreviousSchoolsRow = CType(Me.NewRow,PreviousSchoolsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolName, YearAttend, studentPK}
            rowPreviousSchoolsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPreviousSchoolsRow)
            Return rowPreviousSchoolsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByprevSchoolRecordID(ByVal prevSchoolRecordID As Integer) As PreviousSchoolsRow
            Return CType(Me.Rows.Find(New Object() {prevSchoolRecordID}),PreviousSchoolsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PreviousSchoolsDataTable = CType(MyBase.Clone,PreviousSchoolsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PreviousSchoolsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnprevSchoolRecordID = MyBase.Columns("prevSchoolRecordID")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnYearAttend = MyBase.Columns("YearAttend")
            Me.columnstudentPK = MyBase.Columns("studentPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnprevSchoolRecordID = New Global.System.Data.DataColumn("prevSchoolRecordID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevSchoolRecordID)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnYearAttend = New Global.System.Data.DataColumn("YearAttend", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearAttend)
            Me.columnstudentPK = New Global.System.Data.DataColumn("studentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnprevSchoolRecordID}, true))
            Me.columnprevSchoolRecordID.AutoIncrement = true
            Me.columnprevSchoolRecordID.AllowDBNull = false
            Me.columnprevSchoolRecordID.ReadOnly = true
            Me.columnprevSchoolRecordID.Unique = true
            Me.columnSchoolName.AllowDBNull = false
            Me.columnSchoolName.DefaultValue = CType("",String)
            Me.columnSchoolName.MaxLength = 300
            Me.columnYearAttend.DefaultValue = CType("",String)
            Me.columnYearAttend.MaxLength = 50
            Me.columnstudentPK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPreviousSchoolsRow() As PreviousSchoolsRow
            Return CType(Me.NewRow,PreviousSchoolsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PreviousSchoolsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PreviousSchoolsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PreviousSchoolsRowChangedEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsRowChanged(Me, New PreviousSchoolsRowChangeEvent(CType(e.Row,PreviousSchoolsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PreviousSchoolsRowChangingEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsRowChanging(Me, New PreviousSchoolsRowChangeEvent(CType(e.Row,PreviousSchoolsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PreviousSchoolsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsRowDeleted(Me, New PreviousSchoolsRowChangeEvent(CType(e.Row,PreviousSchoolsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PreviousSchoolsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PreviousSchoolsRowDeleting(Me, New PreviousSchoolsRowChangeEvent(CType(e.Row,PreviousSchoolsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePreviousSchoolsRow(ByVal row As PreviousSchoolsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PreviousSchoolsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CourseEnrolledByStudentPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of CourseEnrolledByStudentPKRow)
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CourseEnrolledByStudentPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CourseEnrolledByStudentPKRow
            Get
                Return CType(Me.Rows(index),CourseEnrolledByStudentPKRow)
            End Get
        End Property
        
        Public Event CourseEnrolledByStudentPKRowChanging As CourseEnrolledByStudentPKRowChangeEventHandler
        
        Public Event CourseEnrolledByStudentPKRowChanged As CourseEnrolledByStudentPKRowChangeEventHandler
        
        Public Event CourseEnrolledByStudentPKRowDeleting As CourseEnrolledByStudentPKRowChangeEventHandler
        
        Public Event CourseEnrolledByStudentPKRowDeleted As CourseEnrolledByStudentPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCourseEnrolledByStudentPKRow(ByVal row As CourseEnrolledByStudentPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCourseEnrolledByStudentPKRow(ByVal coursepk As Integer) As CourseEnrolledByStudentPKRow
            Dim rowCourseEnrolledByStudentPKRow As CourseEnrolledByStudentPKRow = CType(Me.NewRow,CourseEnrolledByStudentPKRow)
            Dim columnValuesArray() As Object = New Object() {coursepk}
            rowCourseEnrolledByStudentPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCourseEnrolledByStudentPKRow)
            Return rowCourseEnrolledByStudentPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CourseEnrolledByStudentPKDataTable = CType(MyBase.Clone,CourseEnrolledByStudentPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CourseEnrolledByStudentPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCourseEnrolledByStudentPKRow() As CourseEnrolledByStudentPKRow
            Return CType(Me.NewRow,CourseEnrolledByStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CourseEnrolledByStudentPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CourseEnrolledByStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CourseEnrolledByStudentPKRowChangedEvent) Is Nothing) Then
                RaiseEvent CourseEnrolledByStudentPKRowChanged(Me, New CourseEnrolledByStudentPKRowChangeEvent(CType(e.Row,CourseEnrolledByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CourseEnrolledByStudentPKRowChangingEvent) Is Nothing) Then
                RaiseEvent CourseEnrolledByStudentPKRowChanging(Me, New CourseEnrolledByStudentPKRowChangeEvent(CType(e.Row,CourseEnrolledByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CourseEnrolledByStudentPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent CourseEnrolledByStudentPKRowDeleted(Me, New CourseEnrolledByStudentPKRowChangeEvent(CType(e.Row,CourseEnrolledByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CourseEnrolledByStudentPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent CourseEnrolledByStudentPKRowDeleting(Me, New CourseEnrolledByStudentPKRowChangeEvent(CType(e.Row,CourseEnrolledByStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCourseEnrolledByStudentPKRow(ByVal row As CourseEnrolledByStudentPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CourseEnrolledByStudentPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectCountInCurriculumbyCourseDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectCountInCurriculumbyCourseRow)
        
        Private columnResultCount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubjectCountInCurriculumbyCourse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResultCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResultCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectCountInCurriculumbyCourseRow
            Get
                Return CType(Me.Rows(index),SubjectCountInCurriculumbyCourseRow)
            End Get
        End Property
        
        Public Event SubjectCountInCurriculumbyCourseRowChanging As SubjectCountInCurriculumbyCourseRowChangeEventHandler
        
        Public Event SubjectCountInCurriculumbyCourseRowChanged As SubjectCountInCurriculumbyCourseRowChangeEventHandler
        
        Public Event SubjectCountInCurriculumbyCourseRowDeleting As SubjectCountInCurriculumbyCourseRowChangeEventHandler
        
        Public Event SubjectCountInCurriculumbyCourseRowDeleted As SubjectCountInCurriculumbyCourseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectCountInCurriculumbyCourseRow(ByVal row As SubjectCountInCurriculumbyCourseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectCountInCurriculumbyCourseRow(ByVal ResultCount As Integer) As SubjectCountInCurriculumbyCourseRow
            Dim rowSubjectCountInCurriculumbyCourseRow As SubjectCountInCurriculumbyCourseRow = CType(Me.NewRow,SubjectCountInCurriculumbyCourseRow)
            Dim columnValuesArray() As Object = New Object() {ResultCount}
            rowSubjectCountInCurriculumbyCourseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectCountInCurriculumbyCourseRow)
            Return rowSubjectCountInCurriculumbyCourseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectCountInCurriculumbyCourseDataTable = CType(MyBase.Clone,SubjectCountInCurriculumbyCourseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectCountInCurriculumbyCourseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnResultCount = MyBase.Columns("ResultCount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnResultCount = New Global.System.Data.DataColumn("ResultCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResultCount)
            Me.columnResultCount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectCountInCurriculumbyCourseRow() As SubjectCountInCurriculumbyCourseRow
            Return CType(Me.NewRow,SubjectCountInCurriculumbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectCountInCurriculumbyCourseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectCountInCurriculumbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectCountInCurriculumbyCourseRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectCountInCurriculumbyCourseRowChanged(Me, New SubjectCountInCurriculumbyCourseRowChangeEvent(CType(e.Row,SubjectCountInCurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectCountInCurriculumbyCourseRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectCountInCurriculumbyCourseRowChanging(Me, New SubjectCountInCurriculumbyCourseRowChangeEvent(CType(e.Row,SubjectCountInCurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectCountInCurriculumbyCourseRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectCountInCurriculumbyCourseRowDeleted(Me, New SubjectCountInCurriculumbyCourseRowChangeEvent(CType(e.Row,SubjectCountInCurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectCountInCurriculumbyCourseRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectCountInCurriculumbyCourseRowDeleting(Me, New SubjectCountInCurriculumbyCourseRowChangeEvent(CType(e.Row,SubjectCountInCurriculumbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectCountInCurriculumbyCourseRow(ByVal row As SubjectCountInCurriculumbyCourseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectCountInCurriculumbyCourseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrationNumbersDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrationNumbersRow)
        
        Private columnRegistrationPK As Global.System.Data.DataColumn
        
        Private columnReceiptHeaderFK As Global.System.Data.DataColumn
        
        Private columnSemPK As Global.System.Data.DataColumn
        
        Private columnYearPK As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnRegNumber As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrationNumbers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptHeaderFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptHeaderFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrationNumbersRow
            Get
                Return CType(Me.Rows(index),RegistrationNumbersRow)
            End Get
        End Property
        
        Public Event RegistrationNumbersRowChanging As RegistrationNumbersRowChangeEventHandler
        
        Public Event RegistrationNumbersRowChanged As RegistrationNumbersRowChangeEventHandler
        
        Public Event RegistrationNumbersRowDeleting As RegistrationNumbersRowChangeEventHandler
        
        Public Event RegistrationNumbersRowDeleted As RegistrationNumbersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegistrationNumbersRow(ByVal row As RegistrationNumbersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegistrationNumbersRow(ByVal ReceiptHeaderFK As Integer, ByVal SemPK As Integer, ByVal YearPK As Integer, ByVal StudentPK As Integer, ByVal RegNumber As Integer, ByVal DateCreated As Date) As RegistrationNumbersRow
            Dim rowRegistrationNumbersRow As RegistrationNumbersRow = CType(Me.NewRow,RegistrationNumbersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated}
            rowRegistrationNumbersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrationNumbersRow)
            Return rowRegistrationNumbersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRegistrationPK(ByVal RegistrationPK As Integer) As RegistrationNumbersRow
            Return CType(Me.Rows.Find(New Object() {RegistrationPK}),RegistrationNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrationNumbersDataTable = CType(MyBase.Clone,RegistrationNumbersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrationNumbersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegistrationPK = MyBase.Columns("RegistrationPK")
            Me.columnReceiptHeaderFK = MyBase.Columns("ReceiptHeaderFK")
            Me.columnSemPK = MyBase.Columns("SemPK")
            Me.columnYearPK = MyBase.Columns("YearPK")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnRegNumber = MyBase.Columns("RegNumber")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegistrationPK = New Global.System.Data.DataColumn("RegistrationPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationPK)
            Me.columnReceiptHeaderFK = New Global.System.Data.DataColumn("ReceiptHeaderFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptHeaderFK)
            Me.columnSemPK = New Global.System.Data.DataColumn("SemPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemPK)
            Me.columnYearPK = New Global.System.Data.DataColumn("YearPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearPK)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnRegNumber = New Global.System.Data.DataColumn("RegNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegNumber)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRegistrationPK}, true))
            Me.columnRegistrationPK.AutoIncrement = true
            Me.columnRegistrationPK.AutoIncrementSeed = -1
            Me.columnRegistrationPK.AutoIncrementStep = -1
            Me.columnRegistrationPK.AllowDBNull = false
            Me.columnRegistrationPK.ReadOnly = true
            Me.columnRegistrationPK.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegistrationNumbersRow() As RegistrationNumbersRow
            Return CType(Me.NewRow,RegistrationNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrationNumbersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrationNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrationNumbersRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersRowChanged(Me, New RegistrationNumbersRowChangeEvent(CType(e.Row,RegistrationNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrationNumbersRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersRowChanging(Me, New RegistrationNumbersRowChangeEvent(CType(e.Row,RegistrationNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrationNumbersRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersRowDeleted(Me, New RegistrationNumbersRowChangeEvent(CType(e.Row,RegistrationNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrationNumbersRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersRowDeleting(Me, New RegistrationNumbersRowChangeEvent(CType(e.Row,RegistrationNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegistrationNumbersRow(ByVal row As RegistrationNumbersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrationNumbersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrationNumbersBySemYearPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrationNumbersBySemYearPKRow)
        
        Private columnRegistrationPK As Global.System.Data.DataColumn
        
        Private columnReceiptHeaderFK As Global.System.Data.DataColumn
        
        Private columnSemPK As Global.System.Data.DataColumn
        
        Private columnYearPK As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnRegNumber As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrationNumbersBySemYearPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptHeaderFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptHeaderFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrationNumbersBySemYearPKRow
            Get
                Return CType(Me.Rows(index),RegistrationNumbersBySemYearPKRow)
            End Get
        End Property
        
        Public Event RegistrationNumbersBySemYearPKRowChanging As RegistrationNumbersBySemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersBySemYearPKRowChanged As RegistrationNumbersBySemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersBySemYearPKRowDeleting As RegistrationNumbersBySemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersBySemYearPKRowDeleted As RegistrationNumbersBySemYearPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegistrationNumbersBySemYearPKRow(ByVal row As RegistrationNumbersBySemYearPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegistrationNumbersBySemYearPKRow(ByVal ReceiptHeaderFK As Integer, ByVal SemPK As Integer, ByVal YearPK As Integer, ByVal StudentPK As Integer, ByVal RegNumber As Integer, ByVal DateCreated As Date) As RegistrationNumbersBySemYearPKRow
            Dim rowRegistrationNumbersBySemYearPKRow As RegistrationNumbersBySemYearPKRow = CType(Me.NewRow,RegistrationNumbersBySemYearPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated}
            rowRegistrationNumbersBySemYearPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrationNumbersBySemYearPKRow)
            Return rowRegistrationNumbersBySemYearPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRegistrationPK(ByVal RegistrationPK As Integer) As RegistrationNumbersBySemYearPKRow
            Return CType(Me.Rows.Find(New Object() {RegistrationPK}),RegistrationNumbersBySemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrationNumbersBySemYearPKDataTable = CType(MyBase.Clone,RegistrationNumbersBySemYearPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrationNumbersBySemYearPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegistrationPK = MyBase.Columns("RegistrationPK")
            Me.columnReceiptHeaderFK = MyBase.Columns("ReceiptHeaderFK")
            Me.columnSemPK = MyBase.Columns("SemPK")
            Me.columnYearPK = MyBase.Columns("YearPK")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnRegNumber = MyBase.Columns("RegNumber")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegistrationPK = New Global.System.Data.DataColumn("RegistrationPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationPK)
            Me.columnReceiptHeaderFK = New Global.System.Data.DataColumn("ReceiptHeaderFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptHeaderFK)
            Me.columnSemPK = New Global.System.Data.DataColumn("SemPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemPK)
            Me.columnYearPK = New Global.System.Data.DataColumn("YearPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearPK)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnRegNumber = New Global.System.Data.DataColumn("RegNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegNumber)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRegistrationPK}, true))
            Me.columnRegistrationPK.AutoIncrement = true
            Me.columnRegistrationPK.AutoIncrementSeed = -1
            Me.columnRegistrationPK.AutoIncrementStep = -1
            Me.columnRegistrationPK.AllowDBNull = false
            Me.columnRegistrationPK.ReadOnly = true
            Me.columnRegistrationPK.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegistrationNumbersBySemYearPKRow() As RegistrationNumbersBySemYearPKRow
            Return CType(Me.NewRow,RegistrationNumbersBySemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrationNumbersBySemYearPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrationNumbersBySemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrationNumbersBySemYearPKRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersBySemYearPKRowChanged(Me, New RegistrationNumbersBySemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersBySemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrationNumbersBySemYearPKRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersBySemYearPKRowChanging(Me, New RegistrationNumbersBySemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersBySemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrationNumbersBySemYearPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersBySemYearPKRowDeleted(Me, New RegistrationNumbersBySemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersBySemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrationNumbersBySemYearPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersBySemYearPKRowDeleting(Me, New RegistrationNumbersBySemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersBySemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegistrationNumbersBySemYearPKRow(ByVal row As RegistrationNumbersBySemYearPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrationNumbersBySemYearPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrationNumbersByStudentSemYearPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrationNumbersByStudentSemYearPKRow)
        
        Private columnRegistrationPK As Global.System.Data.DataColumn
        
        Private columnReceiptHeaderFK As Global.System.Data.DataColumn
        
        Private columnSemPK As Global.System.Data.DataColumn
        
        Private columnYearPK As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnRegNumber As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrationNumbersByStudentSemYearPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptHeaderFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptHeaderFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrationNumbersByStudentSemYearPKRow
            Get
                Return CType(Me.Rows(index),RegistrationNumbersByStudentSemYearPKRow)
            End Get
        End Property
        
        Public Event RegistrationNumbersByStudentSemYearPKRowChanging As RegistrationNumbersByStudentSemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersByStudentSemYearPKRowChanged As RegistrationNumbersByStudentSemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersByStudentSemYearPKRowDeleting As RegistrationNumbersByStudentSemYearPKRowChangeEventHandler
        
        Public Event RegistrationNumbersByStudentSemYearPKRowDeleted As RegistrationNumbersByStudentSemYearPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegistrationNumbersByStudentSemYearPKRow(ByVal row As RegistrationNumbersByStudentSemYearPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegistrationNumbersByStudentSemYearPKRow(ByVal ReceiptHeaderFK As Integer, ByVal SemPK As Integer, ByVal YearPK As Integer, ByVal StudentPK As Integer, ByVal RegNumber As Integer, ByVal DateCreated As Date) As RegistrationNumbersByStudentSemYearPKRow
            Dim rowRegistrationNumbersByStudentSemYearPKRow As RegistrationNumbersByStudentSemYearPKRow = CType(Me.NewRow,RegistrationNumbersByStudentSemYearPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated}
            rowRegistrationNumbersByStudentSemYearPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrationNumbersByStudentSemYearPKRow)
            Return rowRegistrationNumbersByStudentSemYearPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRegistrationPK(ByVal RegistrationPK As Integer) As RegistrationNumbersByStudentSemYearPKRow
            Return CType(Me.Rows.Find(New Object() {RegistrationPK}),RegistrationNumbersByStudentSemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrationNumbersByStudentSemYearPKDataTable = CType(MyBase.Clone,RegistrationNumbersByStudentSemYearPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrationNumbersByStudentSemYearPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegistrationPK = MyBase.Columns("RegistrationPK")
            Me.columnReceiptHeaderFK = MyBase.Columns("ReceiptHeaderFK")
            Me.columnSemPK = MyBase.Columns("SemPK")
            Me.columnYearPK = MyBase.Columns("YearPK")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnRegNumber = MyBase.Columns("RegNumber")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegistrationPK = New Global.System.Data.DataColumn("RegistrationPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationPK)
            Me.columnReceiptHeaderFK = New Global.System.Data.DataColumn("ReceiptHeaderFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptHeaderFK)
            Me.columnSemPK = New Global.System.Data.DataColumn("SemPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemPK)
            Me.columnYearPK = New Global.System.Data.DataColumn("YearPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearPK)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnRegNumber = New Global.System.Data.DataColumn("RegNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegNumber)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRegistrationPK}, true))
            Me.columnRegistrationPK.AutoIncrement = true
            Me.columnRegistrationPK.AutoIncrementSeed = -1
            Me.columnRegistrationPK.AutoIncrementStep = -1
            Me.columnRegistrationPK.AllowDBNull = false
            Me.columnRegistrationPK.ReadOnly = true
            Me.columnRegistrationPK.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegistrationNumbersByStudentSemYearPKRow() As RegistrationNumbersByStudentSemYearPKRow
            Return CType(Me.NewRow,RegistrationNumbersByStudentSemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrationNumbersByStudentSemYearPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrationNumbersByStudentSemYearPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrationNumbersByStudentSemYearPKRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersByStudentSemYearPKRowChanged(Me, New RegistrationNumbersByStudentSemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersByStudentSemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrationNumbersByStudentSemYearPKRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersByStudentSemYearPKRowChanging(Me, New RegistrationNumbersByStudentSemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersByStudentSemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrationNumbersByStudentSemYearPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersByStudentSemYearPKRowDeleted(Me, New RegistrationNumbersByStudentSemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersByStudentSemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrationNumbersByStudentSemYearPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrationNumbersByStudentSemYearPKRowDeleting(Me, New RegistrationNumbersByStudentSemYearPKRowChangeEvent(CType(e.Row,RegistrationNumbersByStudentSemYearPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegistrationNumbersByStudentSemYearPKRow(ByVal row As RegistrationNumbersByStudentSemYearPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrationNumbersByStudentSemYearPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CurriculumbyCoursebySubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of CurriculumbyCoursebySubjectRow)
        
        Private columnCurriculumpk As Global.System.Data.DataColumn
        
        Private columnCoursepk As Global.System.Data.DataColumn
        
        Private columnYearLevelid As Global.System.Data.DataColumn
        
        Private columnSemesterid As Global.System.Data.DataColumn
        
        Private columnSubjectpk As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CurriculumbyCoursebySubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurriculumpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurriculumpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevelid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesteridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CurriculumbyCoursebySubjectRow
            Get
                Return CType(Me.Rows(index),CurriculumbyCoursebySubjectRow)
            End Get
        End Property
        
        Public Event CurriculumbyCoursebySubjectRowChanging As CurriculumbyCoursebySubjectRowChangeEventHandler
        
        Public Event CurriculumbyCoursebySubjectRowChanged As CurriculumbyCoursebySubjectRowChangeEventHandler
        
        Public Event CurriculumbyCoursebySubjectRowDeleting As CurriculumbyCoursebySubjectRowChangeEventHandler
        
        Public Event CurriculumbyCoursebySubjectRowDeleted As CurriculumbyCoursebySubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCurriculumbyCoursebySubjectRow(ByVal row As CurriculumbyCoursebySubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCurriculumbyCoursebySubjectRow(ByVal Coursepk As Integer, ByVal YearLevelid As Integer, ByVal Semesterid As Integer, ByVal Subjectpk As Integer, ByVal Remarks As String) As CurriculumbyCoursebySubjectRow
            Dim rowCurriculumbyCoursebySubjectRow As CurriculumbyCoursebySubjectRow = CType(Me.NewRow,CurriculumbyCoursebySubjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks}
            rowCurriculumbyCoursebySubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCurriculumbyCoursebySubjectRow)
            Return rowCurriculumbyCoursebySubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCurriculumpk(ByVal Curriculumpk As Integer) As CurriculumbyCoursebySubjectRow
            Return CType(Me.Rows.Find(New Object() {Curriculumpk}),CurriculumbyCoursebySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CurriculumbyCoursebySubjectDataTable = CType(MyBase.Clone,CurriculumbyCoursebySubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CurriculumbyCoursebySubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCurriculumpk = MyBase.Columns("Curriculumpk")
            Me.columnCoursepk = MyBase.Columns("Coursepk")
            Me.columnYearLevelid = MyBase.Columns("YearLevelid")
            Me.columnSemesterid = MyBase.Columns("Semesterid")
            Me.columnSubjectpk = MyBase.Columns("Subjectpk")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCurriculumpk = New Global.System.Data.DataColumn("Curriculumpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurriculumpk)
            Me.columnCoursepk = New Global.System.Data.DataColumn("Coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoursepk)
            Me.columnYearLevelid = New Global.System.Data.DataColumn("YearLevelid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevelid)
            Me.columnSemesterid = New Global.System.Data.DataColumn("Semesterid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterid)
            Me.columnSubjectpk = New Global.System.Data.DataColumn("Subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectpk)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCurriculumpk}, true))
            Me.columnCurriculumpk.AutoIncrement = true
            Me.columnCurriculumpk.AllowDBNull = false
            Me.columnCurriculumpk.ReadOnly = true
            Me.columnCurriculumpk.Unique = true
            Me.columnRemarks.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCurriculumbyCoursebySubjectRow() As CurriculumbyCoursebySubjectRow
            Return CType(Me.NewRow,CurriculumbyCoursebySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CurriculumbyCoursebySubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CurriculumbyCoursebySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CurriculumbyCoursebySubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCoursebySubjectRowChanged(Me, New CurriculumbyCoursebySubjectRowChangeEvent(CType(e.Row,CurriculumbyCoursebySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CurriculumbyCoursebySubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCoursebySubjectRowChanging(Me, New CurriculumbyCoursebySubjectRowChangeEvent(CType(e.Row,CurriculumbyCoursebySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CurriculumbyCoursebySubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCoursebySubjectRowDeleted(Me, New CurriculumbyCoursebySubjectRowChangeEvent(CType(e.Row,CurriculumbyCoursebySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CurriculumbyCoursebySubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent CurriculumbyCoursebySubjectRowDeleting(Me, New CurriculumbyCoursebySubjectRowChangeEvent(CType(e.Row,CurriculumbyCoursebySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCurriculumbyCoursebySubjectRow(ByVal row As CurriculumbyCoursebySubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CurriculumbyCoursebySubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FusedSubjectsByRootSubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of FusedSubjectsByRootSubjectRow)
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnclosed As Global.System.Data.DataColumn
        
        Private columnrequested As Global.System.Data.DataColumn
        
        Private columnIsFused As Global.System.Data.DataColumn
        
        Private columnIsSpecialTutorial As Global.System.Data.DataColumn
        
        Private columnIsDeleted As Global.System.Data.DataColumn
        
        Private columnRootSubject As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FusedSubjectsByRootSubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property closedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property requestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsFusedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsFused
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSpecialTutorialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSpecialTutorial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RootSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRootSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FusedSubjectsByRootSubjectRow
            Get
                Return CType(Me.Rows(index),FusedSubjectsByRootSubjectRow)
            End Get
        End Property
        
        Public Event FusedSubjectsByRootSubjectRowChanging As FusedSubjectsByRootSubjectRowChangeEventHandler
        
        Public Event FusedSubjectsByRootSubjectRowChanged As FusedSubjectsByRootSubjectRowChangeEventHandler
        
        Public Event FusedSubjectsByRootSubjectRowDeleting As FusedSubjectsByRootSubjectRowChangeEventHandler
        
        Public Event FusedSubjectsByRootSubjectRowDeleted As FusedSubjectsByRootSubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFusedSubjectsByRootSubjectRow(ByVal row As FusedSubjectsByRootSubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFusedSubjectsByRootSubjectRow( _
                    ByVal Remarks As String,  _
                    ByVal syofferingpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Boolean,  _
                    ByVal requested As Boolean,  _
                    ByVal IsFused As Boolean,  _
                    ByVal IsSpecialTutorial As Boolean,  _
                    ByVal IsDeleted As Boolean,  _
                    ByVal RootSubject As Integer) As FusedSubjectsByRootSubjectRow
            Dim rowFusedSubjectsByRootSubjectRow As FusedSubjectsByRootSubjectRow = CType(Me.NewRow,FusedSubjectsByRootSubjectRow)
            Dim columnValuesArray() As Object = New Object() {Remarks, syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, MinStudents, MaxStudents, closed, requested, IsFused, IsSpecialTutorial, IsDeleted, RootSubject}
            rowFusedSubjectsByRootSubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFusedSubjectsByRootSubjectRow)
            Return rowFusedSubjectsByRootSubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FusedSubjectsByRootSubjectDataTable = CType(MyBase.Clone,FusedSubjectsByRootSubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FusedSubjectsByRootSubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnclosed = MyBase.Columns("closed")
            Me.columnrequested = MyBase.Columns("requested")
            Me.columnIsFused = MyBase.Columns("IsFused")
            Me.columnIsSpecialTutorial = MyBase.Columns("IsSpecialTutorial")
            Me.columnIsDeleted = MyBase.Columns("IsDeleted")
            Me.columnRootSubject = MyBase.Columns("RootSubject")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnclosed = New Global.System.Data.DataColumn("closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosed)
            Me.columnrequested = New Global.System.Data.DataColumn("requested", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequested)
            Me.columnIsFused = New Global.System.Data.DataColumn("IsFused", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsFused)
            Me.columnIsSpecialTutorial = New Global.System.Data.DataColumn("IsSpecialTutorial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSpecialTutorial)
            Me.columnIsDeleted = New Global.System.Data.DataColumn("IsDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDeleted)
            Me.columnRootSubject = New Global.System.Data.DataColumn("RootSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRootSubject)
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnsyofferingpk.AutoIncrementSeed = -1
            Me.columnsyofferingpk.AutoIncrementStep = -1
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFusedSubjectsByRootSubjectRow() As FusedSubjectsByRootSubjectRow
            Return CType(Me.NewRow,FusedSubjectsByRootSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FusedSubjectsByRootSubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FusedSubjectsByRootSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FusedSubjectsByRootSubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent FusedSubjectsByRootSubjectRowChanged(Me, New FusedSubjectsByRootSubjectRowChangeEvent(CType(e.Row,FusedSubjectsByRootSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FusedSubjectsByRootSubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent FusedSubjectsByRootSubjectRowChanging(Me, New FusedSubjectsByRootSubjectRowChangeEvent(CType(e.Row,FusedSubjectsByRootSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FusedSubjectsByRootSubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent FusedSubjectsByRootSubjectRowDeleted(Me, New FusedSubjectsByRootSubjectRowChangeEvent(CType(e.Row,FusedSubjectsByRootSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FusedSubjectsByRootSubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent FusedSubjectsByRootSubjectRowDeleting(Me, New FusedSubjectsByRootSubjectRowChangeEvent(CType(e.Row,FusedSubjectsByRootSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFusedSubjectsByRootSubjectRow(ByVal row As FusedSubjectsByRootSubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReg2 = New dsReg2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FusedSubjectsByRootSubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudents As StudentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudents = CType(Me.Table,StudentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudents.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudents.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudents.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudents.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudents.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudents.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudents.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudents.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudents.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudents.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudents.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudents.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudents.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudents.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudents.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStudents.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthplace() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.birthplaceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birthplace' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.birthplaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.gradDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradDate' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.gradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCollege() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.gradCollegeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCollege' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.gradCollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCourse() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.gradCourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCourse' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.gradCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradConcentration() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.gradConcentrationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradConcentration' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.gradConcentrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.Edubackground5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground5' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.Edubackground5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.Edubackgrounddate5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate5' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.Edubackground6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground6' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.Edubackground6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.Edubackgrounddate6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate6' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondCourser() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudents.SecondCourserColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondCourser' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.SecondCourserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudents.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudents.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableStudents.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableStudents.regDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudents.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudents.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbirthplaceNull() As Boolean
            Return Me.IsNull(Me.tableStudents.birthplaceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbirthplaceNull()
            Me(Me.tableStudents.birthplaceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradDateNull() As Boolean
            Return Me.IsNull(Me.tableStudents.gradDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradDateNull()
            Me(Me.tableStudents.gradDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCollegeNull() As Boolean
            Return Me.IsNull(Me.tableStudents.gradCollegeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCollegeNull()
            Me(Me.tableStudents.gradCollegeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCourseNull() As Boolean
            Return Me.IsNull(Me.tableStudents.gradCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCourseNull()
            Me(Me.tableStudents.gradCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradConcentrationNull() As Boolean
            Return Me.IsNull(Me.tableStudents.gradConcentrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradConcentrationNull()
            Me(Me.tableStudents.gradConcentrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground5Null() As Boolean
            Return Me.IsNull(Me.tableStudents.Edubackground5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground5Null()
            Me(Me.tableStudents.Edubackground5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate5Null() As Boolean
            Return Me.IsNull(Me.tableStudents.Edubackgrounddate5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate5Null()
            Me(Me.tableStudents.Edubackgrounddate5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground6Null() As Boolean
            Return Me.IsNull(Me.tableStudents.Edubackground6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground6Null()
            Me(Me.tableStudents.Edubackground6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate6Null() As Boolean
            Return Me.IsNull(Me.tableStudents.Edubackgrounddate6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate6Null()
            Me(Me.tableStudents.Edubackgrounddate6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondCourserNull() As Boolean
            Return Me.IsNull(Me.tableStudents.SecondCourserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondCourserNull()
            Me(Me.tableStudents.SecondCourserColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentsbyPK As StudentsbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentsbyPK = CType(Me.Table,StudentsbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthplace() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.birthplaceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birthplace' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.birthplaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.gradDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradDate' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.gradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCollege() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.gradCollegeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCollege' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.gradCollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCourse() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.gradCourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCourse' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.gradCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradConcentration() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.gradConcentrationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradConcentration' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.gradConcentrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.Edubackground5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground5' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate5' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.Edubackground6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground6' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate6' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondCourser() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.SecondCourserColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondCourser' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.SecondCourserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudentsbyPK.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbirthplaceNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.birthplaceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbirthplaceNull()
            Me(Me.tableStudentsbyPK.birthplaceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudentsbyPK.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableStudentsbyPK.regDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradDateNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.gradDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradDateNull()
            Me(Me.tableStudentsbyPK.gradDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCollegeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.gradCollegeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCollegeNull()
            Me(Me.tableStudentsbyPK.gradCollegeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCourseNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.gradCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCourseNull()
            Me(Me.tableStudentsbyPK.gradCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradConcentrationNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.gradConcentrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradConcentrationNull()
            Me(Me.tableStudentsbyPK.gradConcentrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground5Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.Edubackground5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground5Null()
            Me(Me.tableStudentsbyPK.Edubackground5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate5Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.Edubackgrounddate5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate5Null()
            Me(Me.tableStudentsbyPK.Edubackgrounddate5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground6Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.Edubackground6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground6Null()
            Me(Me.tableStudentsbyPK.Edubackground6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate6Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.Edubackgrounddate6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate6Null()
            Me(Me.tableStudentsbyPK.Edubackgrounddate6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondCourserNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.SecondCourserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondCourserNull()
            Me(Me.tableStudentsbyPK.SecondCourserColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GradesbyStudentSubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableGradesbyStudentSubject As GradesbyStudentSubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGradesbyStudentSubject = CType(Me.Table,GradesbyStudentSubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.SubjectNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectName' in table 'GradesbyStudentSubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'GradesbyStudentSubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentSubject.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.exSubjectUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectUnits' in table 'GradesbyStudentSubject' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.exSubjectUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.exCreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCreditGroup' in table 'GradesbyStudentSubject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.exCreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isPrevSchoolGrade() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.isPrevSchoolGradeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isPrevSchoolGrade' in table 'GradesbyStudentSubject' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.isPrevSchoolGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCompletionGrade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentSubject.exCompletionGradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCompletionGrade' in table 'GradesbyStudentSubject' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentSubject.exCompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNameNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.SubjectNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNameNull()
            Me(Me.tableGradesbyStudentSubject.SubjectNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableGradesbyStudentSubject.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectUnitsNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.exSubjectUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectUnitsNull()
            Me(Me.tableGradesbyStudentSubject.exSubjectUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.exCreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCreditGroupNull()
            Me(Me.tableGradesbyStudentSubject.exCreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisPrevSchoolGradeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.isPrevSchoolGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisPrevSchoolGradeNull()
            Me(Me.tableGradesbyStudentSubject.isPrevSchoolGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentSubject.exCompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCompletionGradeNull()
            Me(Me.tableGradesbyStudentSubject.exCompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CurriculumRow
        Inherits Global.System.Data.DataRow
        
        Private tableCurriculum As CurriculumDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCurriculum = CType(Me.Table,CurriculumDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curriculumpk() As Integer
            Get
                Return CType(Me(Me.tableCurriculum.CurriculumpkColumn),Integer)
            End Get
            Set
                Me(Me.tableCurriculum.CurriculumpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coursepk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculum.CoursepkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Coursepk' in table 'Curriculum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculum.CoursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevelid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculum.YearLevelidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevelid' in table 'Curriculum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculum.YearLevelidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semesterid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculum.SemesteridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semesterid' in table 'Curriculum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculum.SemesteridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subjectpk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculum.SubjectpkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subjectpk' in table 'Curriculum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculum.SubjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableCurriculum.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'Curriculum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculum.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoursepkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculum.CoursepkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoursepkNull()
            Me(Me.tableCurriculum.CoursepkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelidNull() As Boolean
            Return Me.IsNull(Me.tableCurriculum.YearLevelidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelidNull()
            Me(Me.tableCurriculum.YearLevelidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesteridNull() As Boolean
            Return Me.IsNull(Me.tableCurriculum.SemesteridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesteridNull()
            Me(Me.tableCurriculum.SemesteridColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectpkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculum.SubjectpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectpkNull()
            Me(Me.tableCurriculum.SubjectpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableCurriculum.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableCurriculum.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CurriculumbyCourseRow
        Inherits Global.System.Data.DataRow
        
        Private tableCurriculumbyCourse As CurriculumbyCourseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCurriculumbyCourse = CType(Me.Table,CurriculumbyCourseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curriculumpk() As Integer
            Get
                Return CType(Me(Me.tableCurriculumbyCourse.CurriculumpkColumn),Integer)
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.CurriculumpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coursepk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCourse.CoursepkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Coursepk' in table 'CurriculumbyCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.CoursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevelid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCourse.YearLevelidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevelid' in table 'CurriculumbyCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.YearLevelidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semesterid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCourse.SemesteridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semesterid' in table 'CurriculumbyCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.SemesteridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subjectpk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCourse.SubjectpkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subjectpk' in table 'CurriculumbyCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.SubjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCourse.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'CurriculumbyCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCourse.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoursepkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCourse.CoursepkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoursepkNull()
            Me(Me.tableCurriculumbyCourse.CoursepkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelidNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCourse.YearLevelidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelidNull()
            Me(Me.tableCurriculumbyCourse.YearLevelidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesteridNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCourse.SemesteridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesteridNull()
            Me(Me.tableCurriculumbyCourse.SemesteridColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectpkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCourse.SubjectpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectpkNull()
            Me(Me.tableCurriculumbyCourse.SubjectpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCourse.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableCurriculumbyCourse.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsbyTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentsbyType As StudentsbyTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentsbyType = CType(Me.Table,StudentsbyTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudentsbyType.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentsbyType.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birthplace() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.birthplaceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birthplace' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.birthplaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.gradDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradDate' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.gradDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCollege() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.gradCollegeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCollege' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.gradCollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradCourse() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.gradCourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradCourse' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.gradCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gradConcentration() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.gradConcentrationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gradConcentration' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.gradConcentrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.Edubackground5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground5' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate5' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.Edubackground6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackground6' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackground6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate6() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.Edubackgrounddate6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edubackgrounddate6' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.Edubackgrounddate6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondCourser() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyType.SecondCourserColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondCourser' in table 'StudentsbyType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyType.SecondCourserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudentsbyType.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableStudentsbyType.regDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudentsbyType.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbirthplaceNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.birthplaceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbirthplaceNull()
            Me(Me.tableStudentsbyType.birthplaceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradDateNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.gradDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradDateNull()
            Me(Me.tableStudentsbyType.gradDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCollegeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.gradCollegeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCollegeNull()
            Me(Me.tableStudentsbyType.gradCollegeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradCourseNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.gradCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradCourseNull()
            Me(Me.tableStudentsbyType.gradCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradConcentrationNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.gradConcentrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradConcentrationNull()
            Me(Me.tableStudentsbyType.gradConcentrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground5Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.Edubackground5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground5Null()
            Me(Me.tableStudentsbyType.Edubackground5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate5Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.Edubackgrounddate5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate5Null()
            Me(Me.tableStudentsbyType.Edubackgrounddate5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackground6Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.Edubackground6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackground6Null()
            Me(Me.tableStudentsbyType.Edubackground6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdubackgrounddate6Null() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.Edubackgrounddate6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdubackgrounddate6Null()
            Me(Me.tableStudentsbyType.Edubackgrounddate6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondCourserNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyType.SecondCourserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondCourserNull()
            Me(Me.tableStudentsbyType.SecondCourserColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PreviousSchoolsByStudentPKRow
        Inherits Global.System.Data.DataRow
        
        Private tablePreviousSchoolsByStudentPK As PreviousSchoolsByStudentPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePreviousSchoolsByStudentPK = CType(Me.Table,PreviousSchoolsByStudentPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevSchoolRecordID() As Integer
            Get
                Return CType(Me(Me.tablePreviousSchoolsByStudentPK.prevSchoolRecordIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePreviousSchoolsByStudentPK.prevSchoolRecordIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablePreviousSchoolsByStudentPK.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablePreviousSchoolsByStudentPK.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearAttend() As String
            Get
                Try 
                    Return CType(Me(Me.tablePreviousSchoolsByStudentPK.YearAttendColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearAttend' in table 'PreviousSchoolsByStudentPK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePreviousSchoolsByStudentPK.YearAttendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentPK() As Integer
            Get
                Return CType(Me(Me.tablePreviousSchoolsByStudentPK.studentPKColumn),Integer)
            End Get
            Set
                Me(Me.tablePreviousSchoolsByStudentPK.studentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearAttendNull() As Boolean
            Return Me.IsNull(Me.tablePreviousSchoolsByStudentPK.YearAttendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearAttendNull()
            Me(Me.tablePreviousSchoolsByStudentPK.YearAttendColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PreviousSchoolsRow
        Inherits Global.System.Data.DataRow
        
        Private tablePreviousSchools As PreviousSchoolsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePreviousSchools = CType(Me.Table,PreviousSchoolsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevSchoolRecordID() As Integer
            Get
                Return CType(Me(Me.tablePreviousSchools.prevSchoolRecordIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePreviousSchools.prevSchoolRecordIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Return CType(Me(Me.tablePreviousSchools.SchoolNameColumn),String)
            End Get
            Set
                Me(Me.tablePreviousSchools.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearAttend() As String
            Get
                Try 
                    Return CType(Me(Me.tablePreviousSchools.YearAttendColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearAttend' in table 'PreviousSchools' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePreviousSchools.YearAttendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentPK() As Integer
            Get
                Return CType(Me(Me.tablePreviousSchools.studentPKColumn),Integer)
            End Get
            Set
                Me(Me.tablePreviousSchools.studentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearAttendNull() As Boolean
            Return Me.IsNull(Me.tablePreviousSchools.YearAttendColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearAttendNull()
            Me(Me.tablePreviousSchools.YearAttendColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CourseEnrolledByStudentPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableCourseEnrolledByStudentPK As CourseEnrolledByStudentPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCourseEnrolledByStudentPK = CType(Me.Table,CourseEnrolledByStudentPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableCourseEnrolledByStudentPK.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableCourseEnrolledByStudentPK.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectCountInCurriculumbyCourseRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjectCountInCurriculumbyCourse As SubjectCountInCurriculumbyCourseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjectCountInCurriculumbyCourse = CType(Me.Table,SubjectCountInCurriculumbyCourseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResultCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectCountInCurriculumbyCourse.ResultCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResultCount' in table 'SubjectCountInCurriculumbyCourse' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectCountInCurriculumbyCourse.ResultCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResultCountNull() As Boolean
            Return Me.IsNull(Me.tableSubjectCountInCurriculumbyCourse.ResultCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResultCountNull()
            Me(Me.tableSubjectCountInCurriculumbyCourse.ResultCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegistrationNumbersRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrationNumbers As RegistrationNumbersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrationNumbers = CType(Me.Table,RegistrationNumbersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationPK() As Integer
            Get
                Return CType(Me(Me.tableRegistrationNumbers.RegistrationPKColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrationNumbers.RegistrationPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptHeaderFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.ReceiptHeaderFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptHeaderFK' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.ReceiptHeaderFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.SemPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemPK' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.SemPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.YearPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearPK' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.YearPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.StudentPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.RegNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegNumber' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.RegNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbers.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'RegistrationNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbers.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptHeaderFKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.ReceiptHeaderFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptHeaderFKNull()
            Me(Me.tableRegistrationNumbers.ReceiptHeaderFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.SemPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemPKNull()
            Me(Me.tableRegistrationNumbers.SemPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.YearPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearPKNull()
            Me(Me.tableRegistrationNumbers.YearPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableRegistrationNumbers.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegNumberNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.RegNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegNumberNull()
            Me(Me.tableRegistrationNumbers.RegNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbers.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableRegistrationNumbers.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegistrationNumbersBySemYearPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrationNumbersBySemYearPK As RegistrationNumbersBySemYearPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrationNumbersBySemYearPK = CType(Me.Table,RegistrationNumbersBySemYearPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationPK() As Integer
            Get
                Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.RegistrationPKColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.RegistrationPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptHeaderFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.ReceiptHeaderFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptHeaderFK' in table 'RegistrationNumbersBySemYearPK' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.ReceiptHeaderFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.SemPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemPK' in table 'RegistrationNumbersBySemYearPK' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.SemPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.YearPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearPK' in table 'RegistrationNumbersBySemYearPK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.YearPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.StudentPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'RegistrationNumbersBySemYearPK' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.RegNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegNumber' in table 'RegistrationNumbersBySemYearPK' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.RegNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersBySemYearPK.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'RegistrationNumbersBySemYearPK' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersBySemYearPK.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptHeaderFKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.ReceiptHeaderFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptHeaderFKNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.ReceiptHeaderFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.SemPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemPKNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.SemPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.YearPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearPKNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.YearPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegNumberNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.RegNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegNumberNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.RegNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersBySemYearPK.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableRegistrationNumbersBySemYearPK.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegistrationNumbersByStudentSemYearPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrationNumbersByStudentSemYearPK As RegistrationNumbersByStudentSemYearPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrationNumbersByStudentSemYearPK = CType(Me.Table,RegistrationNumbersByStudentSemYearPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationPK() As Integer
            Get
                Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.RegistrationPKColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.RegistrationPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptHeaderFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.ReceiptHeaderFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptHeaderFK' in table 'RegistrationNumbersByStudentSemY"& _ 
                            "earPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.ReceiptHeaderFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.SemPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemPK' in table 'RegistrationNumbersByStudentSemYearPK' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.SemPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.YearPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearPK' in table 'RegistrationNumbersByStudentSemYearPK' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.YearPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.StudentPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'RegistrationNumbersByStudentSemYearPK'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.RegNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegNumber' in table 'RegistrationNumbersByStudentSemYearPK'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.RegNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRegistrationNumbersByStudentSemYearPK.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'RegistrationNumbersByStudentSemYearP"& _ 
                            "K' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistrationNumbersByStudentSemYearPK.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptHeaderFKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.ReceiptHeaderFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptHeaderFKNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.ReceiptHeaderFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.SemPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemPKNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.SemPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.YearPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearPKNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.YearPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegNumberNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.RegNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegNumberNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.RegNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableRegistrationNumbersByStudentSemYearPK.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableRegistrationNumbersByStudentSemYearPK.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CurriculumbyCoursebySubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableCurriculumbyCoursebySubject As CurriculumbyCoursebySubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCurriculumbyCoursebySubject = CType(Me.Table,CurriculumbyCoursebySubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curriculumpk() As Integer
            Get
                Return CType(Me(Me.tableCurriculumbyCoursebySubject.CurriculumpkColumn),Integer)
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.CurriculumpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Coursepk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCoursebySubject.CoursepkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Coursepk' in table 'CurriculumbyCoursebySubject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.CoursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevelid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCoursebySubject.YearLevelidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevelid' in table 'CurriculumbyCoursebySubject' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.YearLevelidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semesterid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCoursebySubject.SemesteridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semesterid' in table 'CurriculumbyCoursebySubject' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.SemesteridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subjectpk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCoursebySubject.SubjectpkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subjectpk' in table 'CurriculumbyCoursebySubject' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.SubjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableCurriculumbyCoursebySubject.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'CurriculumbyCoursebySubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCurriculumbyCoursebySubject.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoursepkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCoursebySubject.CoursepkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoursepkNull()
            Me(Me.tableCurriculumbyCoursebySubject.CoursepkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelidNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCoursebySubject.YearLevelidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelidNull()
            Me(Me.tableCurriculumbyCoursebySubject.YearLevelidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesteridNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCoursebySubject.SemesteridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesteridNull()
            Me(Me.tableCurriculumbyCoursebySubject.SemesteridColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectpkNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCoursebySubject.SubjectpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectpkNull()
            Me(Me.tableCurriculumbyCoursebySubject.SubjectpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableCurriculumbyCoursebySubject.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableCurriculumbyCoursebySubject.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FusedSubjectsByRootSubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableFusedSubjectsByRootSubject As FusedSubjectsByRootSubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFusedSubjectsByRootSubject = CType(Me.Table,FusedSubjectsByRootSubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.syofferingpkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'syofferingpk' in table 'FusedSubjectsByRootSubject' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.suntoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.monfromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.montoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.thufromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.thutoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.frifromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.fritoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.satfromColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.sattoColumn),String)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableFusedSubjectsByRootSubject.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.closedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'closed' in table 'FusedSubjectsByRootSubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.closedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property requested() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.requestedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'requested' in table 'FusedSubjectsByRootSubject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.requestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsFused() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.IsFusedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsFused' in table 'FusedSubjectsByRootSubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.IsFusedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSpecialTutorial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.IsSpecialTutorialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsSpecialTutorial' in table 'FusedSubjectsByRootSubject' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.IsSpecialTutorialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.IsDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsDeleted' in table 'FusedSubjectsByRootSubject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.IsDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RootSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFusedSubjectsByRootSubject.RootSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RootSubject' in table 'FusedSubjectsByRootSubject' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFusedSubjectsByRootSubject.RootSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssyofferingpkNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.syofferingpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsyofferingpkNull()
            Me(Me.tableFusedSubjectsByRootSubject.syofferingpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclosedNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.closedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclosedNull()
            Me(Me.tableFusedSubjectsByRootSubject.closedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrequestedNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.requestedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrequestedNull()
            Me(Me.tableFusedSubjectsByRootSubject.requestedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsFusedNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.IsFusedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsFusedNull()
            Me(Me.tableFusedSubjectsByRootSubject.IsFusedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsSpecialTutorialNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.IsSpecialTutorialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsSpecialTutorialNull()
            Me(Me.tableFusedSubjectsByRootSubject.IsSpecialTutorialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsDeletedNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.IsDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsDeletedNull()
            Me(Me.tableFusedSubjectsByRootSubject.IsDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRootSubjectNull() As Boolean
            Return Me.IsNull(Me.tableFusedSubjectsByRootSubject.RootSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRootSubjectNull()
            Me(Me.tableFusedSubjectsByRootSubject.RootSubjectColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GradesbyStudentSubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GradesbyStudentSubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GradesbyStudentSubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GradesbyStudentSubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CurriculumRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CurriculumRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CurriculumRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CurriculumRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CurriculumbyCourseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CurriculumbyCourseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CurriculumbyCourseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CurriculumbyCourseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsbyTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsbyTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsbyTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsbyTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PreviousSchoolsByStudentPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PreviousSchoolsByStudentPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PreviousSchoolsByStudentPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PreviousSchoolsByStudentPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PreviousSchoolsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PreviousSchoolsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PreviousSchoolsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PreviousSchoolsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CourseEnrolledByStudentPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CourseEnrolledByStudentPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CourseEnrolledByStudentPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CourseEnrolledByStudentPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectCountInCurriculumbyCourseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectCountInCurriculumbyCourseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectCountInCurriculumbyCourseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectCountInCurriculumbyCourseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegistrationNumbersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrationNumbersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegistrationNumbersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegistrationNumbersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegistrationNumbersBySemYearPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrationNumbersBySemYearPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegistrationNumbersBySemYearPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegistrationNumbersBySemYearPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegistrationNumbersByStudentSemYearPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrationNumbersByStudentSemYearPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegistrationNumbersByStudentSemYearPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegistrationNumbersByStudentSemYearPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CurriculumbyCoursebySubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CurriculumbyCoursebySubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CurriculumbyCoursebySubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CurriculumbyCoursebySubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FusedSubjectsByRootSubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FusedSubjectsByRootSubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FusedSubjectsByRootSubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FusedSubjectsByRootSubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsReg2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Students"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            tableMapping.ColumnMappings.Add("regDate", "regDate")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("birthplace", "birthplace")
            tableMapping.ColumnMappings.Add("gradDate", "gradDate")
            tableMapping.ColumnMappings.Add("gradCollege", "gradCollege")
            tableMapping.ColumnMappings.Add("gradCourse", "gradCourse")
            tableMapping.ColumnMappings.Add("gradConcentration", "gradConcentration")
            tableMapping.ColumnMappings.Add("Edubackground5", "Edubackground5")
            tableMapping.ColumnMappings.Add("Edubackgrounddate5", "Edubackgrounddate5")
            tableMapping.ColumnMappings.Add("Edubackground6", "Edubackground6")
            tableMapping.ColumnMappings.Add("Edubackgrounddate6", "Edubackgrounddate6")
            tableMapping.ColumnMappings.Add("SecondCourser", "SecondCourser")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID"& _ 
                "] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ([Addre"& _ 
                "ss1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Address3]"& _ 
                " = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Orig"& _ 
                "inal_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guardian] = @Or"& _ 
                "iginal_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] ="& _ 
                " @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Edubackgroundda"& _ 
                "te1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgrounddate2]"& _ 
                " = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edubackground"& _ 
                "3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edubackground"& _ 
                "4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_Edubackgrou"& _ 
                "nddate4) AND ((@IsNull_Edubackground5 = 1 AND [Edubackground5] IS NULL) OR ([Edu"& _ 
                "background5] = @Original_Edubackground5)) AND ((@IsNull_Edubackgrounddate5 = 1 A"& _ 
                "ND [Edubackgrounddate5] IS NULL) OR ([Edubackgrounddate5] = @Original_Edubackgro"& _ 
                "unddate5)) AND ((@IsNull_Edubackground6 = 1 AND [Edubackground6] IS NULL) OR ([E"& _ 
                "dubackground6] = @Original_Edubackground6)) AND ((@IsNull_Edubackgrounddate6 = 1"& _ 
                " AND [Edubackgrounddate6] IS NULL) OR ([Edubackgrounddate6] = @Original_Edubackg"& _ 
                "rounddate6)) AND ((@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([Stude"& _ 
                "ntType] = @Original_StudentType)) AND ((@IsNull_birthplace = 1 AND [birthplace] "& _ 
                "IS NULL) OR ([birthplace] = @Original_birthplace)) AND ((@IsNull_Gender = 1 AND "& _ 
                "[Gender] IS NULL) OR ([Gender] = @Original_Gender)) AND ((@IsNull_regDate = 1 AN"& _ 
                "D [regDate] IS NULL) OR ([regDate] = @Original_regDate)) AND ((@IsNull_gradDate "& _ 
                "= 1 AND [gradDate] IS NULL) OR ([gradDate] = @Original_gradDate)) AND ((@IsNull_"& _ 
                "gradCollege = 1 AND [gradCollege] IS NULL) OR ([gradCollege] = @Original_gradCol"& _ 
                "lege)) AND ((@IsNull_gradCourse = 1 AND [gradCourse] IS NULL) OR ([gradCourse] ="& _ 
                " @Original_gradCourse)) AND ((@IsNull_gradConcentration = 1 AND [gradConcentrati"& _ 
                "on] IS NULL) OR ([gradConcentration] = @Original_gradConcentration)) AND ((@IsNu"& _ 
                "ll_SecondCourser = 1 AND [SecondCourser] IS NULL) OR ([SecondCourser] = @Origina"& _ 
                "l_SecondCourser)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Students] ([StudentID], [StudentName], [Address1], [Address2], [Addr"& _ 
                "ess3], [Phone], [MotherName], [FatherName], [Guardian], [Birthdate], [Edubackgro"& _ 
                "und1], [Edubackgrounddate1], [Edubackground2], [Edubackgrounddate2], [Edubackgro"& _ 
                "und3], [Edubackgrounddate3], [Edubackground4], [Edubackgrounddate4], [Edubackgro"& _ 
                "und5], [Edubackgrounddate5], [Edubackground6], [Edubackgrounddate6], [StudentTyp"& _ 
                "e], [birthplace], [Gender], [regDate], [gradDate], [gradCollege], [gradCourse], "& _ 
                "[gradConcentration], [SecondCourser]) VALUES (@StudentID, @StudentName, @Address"& _ 
                "1, @Address2, @Address3, @Phone, @MotherName, @FatherName, @Guardian, @Birthdate"& _ 
                ", @Edubackground1, @Edubackgrounddate1, @Edubackground2, @Edubackgrounddate2, @E"& _ 
                "dubackground3, @Edubackgrounddate3, @Edubackground4, @Edubackgrounddate4, @Eduba"& _ 
                "ckground5, @Edubackgrounddate5, @Edubackground6, @Edubackgrounddate6, @StudentTy"& _ 
                "pe, @birthplace, @Gender, @regDate, @gradDate, @gradCollege, @gradCourse, @gradC"& _ 
                "oncentration, @SecondCourser);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Addres"& _ 
                "s1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edub"& _ 
                "ackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackgroun"& _ 
                "d3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edubackground5, Edub"& _ 
                "ackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType, birthplace, Gen"& _ 
                "der, regDate, gradDate, gradCollege, gradCourse, gradConcentration, SecondCourse"& _ 
                "r FROM Students WHERE (StudentPK = SCOPE_IDENTITY()) ORDER BY StudentName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Students] SET [StudentID] = @StudentID, [StudentName] = @StudentName, [Ad"& _ 
                "dress1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [Phone] = @"& _ 
                "Phone, [MotherName] = @MotherName, [FatherName] = @FatherName, [Guardian] = @Gua"& _ 
                "rdian, [Birthdate] = @Birthdate, [Edubackground1] = @Edubackground1, [Edubackgro"& _ 
                "unddate1] = @Edubackgrounddate1, [Edubackground2] = @Edubackground2, [Edubackgro"& _ 
                "unddate2] = @Edubackgrounddate2, [Edubackground3] = @Edubackground3, [Edubackgro"& _ 
                "unddate3] = @Edubackgrounddate3, [Edubackground4] = @Edubackground4, [Edubackgro"& _ 
                "unddate4] = @Edubackgrounddate4, [Edubackground5] = @Edubackground5, [Edubackgro"& _ 
                "unddate5] = @Edubackgrounddate5, [Edubackground6] = @Edubackground6, [Edubackgro"& _ 
                "unddate6] = @Edubackgrounddate6, [StudentType] = @StudentType, [birthplace] = @b"& _ 
                "irthplace, [Gender] = @Gender, [regDate] = @regDate, [gradDate] = @gradDate, [gr"& _ 
                "adCollege] = @gradCollege, [gradCourse] = @gradCourse, [gradConcentration] = @gr"& _ 
                "adConcentration, [SecondCourser] = @SecondCourser WHERE (([StudentPK] = @Origina"& _ 
                "l_StudentPK) AND ([StudentID] = @Original_StudentID) AND ([StudentName] = @Origi"& _ 
                "nal_StudentName) AND ([Address1] = @Original_Address1) AND ([Address2] = @Origin"& _ 
                "al_Address2) AND ([Address3] = @Original_Address3) AND ([Phone] = @Original_Phon"& _ 
                "e) AND ([MotherName] = @Original_MotherName) AND ([FatherName] = @Original_Fathe"& _ 
                "rName) AND ([Guardian] = @Original_Guardian) AND ([Birthdate] = @Original_Birthd"& _ 
                "ate) AND ([Edubackground1] = @Original_Edubackground1) AND ([Edubackgrounddate1]"& _ 
                " = @Original_Edubackgrounddate1) AND ([Edubackground2] = @Original_Edubackground"& _ 
                "2) AND ([Edubackgrounddate2] = @Original_Edubackgrounddate2) AND ([Edubackground"& _ 
                "3] = @Original_Edubackground3) AND ([Edubackgrounddate3] = @Original_Edubackgrou"& _ 
                "nddate3) AND ([Edubackground4] = @Original_Edubackground4) AND ([Edubackgroundda"& _ 
                "te4] = @Original_Edubackgrounddate4) AND ((@IsNull_Edubackground5 = 1 AND [Eduba"& _ 
                "ckground5] IS NULL) OR ([Edubackground5] = @Original_Edubackground5)) AND ((@IsN"& _ 
                "ull_Edubackgrounddate5 = 1 AND [Edubackgrounddate5] IS NULL) OR ([Edubackgroundd"& _ 
                "ate5] = @Original_Edubackgrounddate5)) AND ((@IsNull_Edubackground6 = 1 AND [Edu"& _ 
                "background6] IS NULL) OR ([Edubackground6] = @Original_Edubackground6)) AND ((@I"& _ 
                "sNull_Edubackgrounddate6 = 1 AND [Edubackgrounddate6] IS NULL) OR ([Edubackgroun"& _ 
                "ddate6] = @Original_Edubackgrounddate6)) AND ((@IsNull_StudentType = 1 AND [Stud"& _ 
                "entType] IS NULL) OR ([StudentType] = @Original_StudentType)) AND ((@IsNull_birt"& _ 
                "hplace = 1 AND [birthplace] IS NULL) OR ([birthplace] = @Original_birthplace)) A"& _ 
                "ND ((@IsNull_Gender = 1 AND [Gender] IS NULL) OR ([Gender] = @Original_Gender)) "& _ 
                "AND ((@IsNull_regDate = 1 AND [regDate] IS NULL) OR ([regDate] = @Original_regDa"& _ 
                "te)) AND ((@IsNull_gradDate = 1 AND [gradDate] IS NULL) OR ([gradDate] = @Origin"& _ 
                "al_gradDate)) AND ((@IsNull_gradCollege = 1 AND [gradCollege] IS NULL) OR ([grad"& _ 
                "College] = @Original_gradCollege)) AND ((@IsNull_gradCourse = 1 AND [gradCourse]"& _ 
                " IS NULL) OR ([gradCourse] = @Original_gradCourse)) AND ((@IsNull_gradConcentrat"& _ 
                "ion = 1 AND [gradConcentration] IS NULL) OR ([gradConcentration] = @Original_gra"& _ 
                "dConcentration)) AND ((@IsNull_SecondCourser = 1 AND [SecondCourser] IS NULL) OR"& _ 
                " ([SecondCourser] = @Original_SecondCourser)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, St"& _ 
                "udentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian"& _ 
                ", Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgroundda"& _ 
                "te2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edu"& _ 
                "background5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType"& _ 
                ", birthplace, Gender, regDate, gradDate, gradCollege, gradCourse, gradConcentrat"& _ 
                "ion, SecondCourser FROM Students WHERE (StudentPK = @StudentPK) ORDER BY Student"& _ 
                "Name"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT    *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Students"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (StudentName LIKE @name)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY "& _ 
                "StudentName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.StudentsDataTable, ByVal name As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(name,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal name As String) As dsReg2.StudentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(name,String)
            End If
            Dim dataTable As dsReg2.StudentsDataTable = New dsReg2.StudentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.StudentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "Students")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_StudentType,String)
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_birthplace,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Edubackgrounddate6,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(StudentType,String)
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(birthplace,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(gradConcentration,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Edubackgrounddate6,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(StudentType,String)
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(birthplace,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(gradConcentration,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_StudentType,String)
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_birthplace,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(76).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType, birthplace, Gender, regDate, gradDate, gradCollege, gradCourse, gradConcentration, SecondCourser, Original_StudentPK, Original_StudentID, Original_StudentName, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_Edubackground5, Original_Edubackgrounddate5, Original_Edubackground6, Original_Edubackgrounddate6, Original_StudentType, Original_birthplace, Original_Gender, Original_regDate, Original_gradDate, Original_gradCollege, Original_gradCourse, Original_gradConcentration, Original_SecondCourser, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentsbyPK"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("birthplace", "birthplace")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("regDate", "regDate")
            tableMapping.ColumnMappings.Add("gradDate", "gradDate")
            tableMapping.ColumnMappings.Add("gradCollege", "gradCollege")
            tableMapping.ColumnMappings.Add("gradCourse", "gradCourse")
            tableMapping.ColumnMappings.Add("gradConcentration", "gradConcentration")
            tableMapping.ColumnMappings.Add("Edubackground5", "Edubackground5")
            tableMapping.ColumnMappings.Add("Edubackgrounddate5", "Edubackgrounddate5")
            tableMapping.ColumnMappings.Add("Edubackground6", "Edubackground6")
            tableMapping.ColumnMappings.Add("Edubackgrounddate6", "Edubackgrounddate6")
            tableMapping.ColumnMappings.Add("SecondCourser", "SecondCourser")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID"& _ 
                "] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ([Addre"& _ 
                "ss1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Address3]"& _ 
                " = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Orig"& _ 
                "inal_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guardian] = @Or"& _ 
                "iginal_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] ="& _ 
                " @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Edubackgroundda"& _ 
                "te1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgrounddate2]"& _ 
                " = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edubackground"& _ 
                "3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edubackground"& _ 
                "4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_Edubackgrou"& _ 
                "nddate4) AND ((@IsNull_Edubackground5 = 1 AND [Edubackground5] IS NULL) OR ([Edu"& _ 
                "background5] = @Original_Edubackground5)) AND ((@IsNull_Edubackgrounddate5 = 1 A"& _ 
                "ND [Edubackgrounddate5] IS NULL) OR ([Edubackgrounddate5] = @Original_Edubackgro"& _ 
                "unddate5)) AND ((@IsNull_Edubackground6 = 1 AND [Edubackground6] IS NULL) OR ([E"& _ 
                "dubackground6] = @Original_Edubackground6)) AND ((@IsNull_Edubackgrounddate6 = 1"& _ 
                " AND [Edubackgrounddate6] IS NULL) OR ([Edubackgrounddate6] = @Original_Edubackg"& _ 
                "rounddate6)) AND ((@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([Stude"& _ 
                "ntType] = @Original_StudentType)) AND ((@IsNull_birthplace = 1 AND [birthplace] "& _ 
                "IS NULL) OR ([birthplace] = @Original_birthplace)) AND ((@IsNull_Gender = 1 AND "& _ 
                "[Gender] IS NULL) OR ([Gender] = @Original_Gender)) AND ((@IsNull_regDate = 1 AN"& _ 
                "D [regDate] IS NULL) OR ([regDate] = @Original_regDate)) AND ((@IsNull_gradDate "& _ 
                "= 1 AND [gradDate] IS NULL) OR ([gradDate] = @Original_gradDate)) AND ((@IsNull_"& _ 
                "gradCollege = 1 AND [gradCollege] IS NULL) OR ([gradCollege] = @Original_gradCol"& _ 
                "lege)) AND ((@IsNull_gradCourse = 1 AND [gradCourse] IS NULL) OR ([gradCourse] ="& _ 
                " @Original_gradCourse)) AND ((@IsNull_gradConcentration = 1 AND [gradConcentrati"& _ 
                "on] IS NULL) OR ([gradConcentration] = @Original_gradConcentration)) AND ((@IsNu"& _ 
                "ll_SecondCourser = 1 AND [SecondCourser] IS NULL) OR ([SecondCourser] = @Origina"& _ 
                "l_SecondCourser)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Students] ([StudentID], [StudentName], [Address1], [Address2], [Addr"& _ 
                "ess3], [Phone], [MotherName], [FatherName], [Guardian], [Birthdate], [Edubackgro"& _ 
                "und1], [Edubackgrounddate1], [Edubackground2], [Edubackgrounddate2], [Edubackgro"& _ 
                "und3], [Edubackgrounddate3], [Edubackground4], [Edubackgrounddate4], [Edubackgro"& _ 
                "und5], [Edubackgrounddate5], [Edubackground6], [Edubackgrounddate6], [StudentTyp"& _ 
                "e], [birthplace], [Gender], [regDate], [gradDate], [gradCollege], [gradCourse], "& _ 
                "[gradConcentration], [SecondCourser]) VALUES (@StudentID, @StudentName, @Address"& _ 
                "1, @Address2, @Address3, @Phone, @MotherName, @FatherName, @Guardian, @Birthdate"& _ 
                ", @Edubackground1, @Edubackgrounddate1, @Edubackground2, @Edubackgrounddate2, @E"& _ 
                "dubackground3, @Edubackgrounddate3, @Edubackground4, @Edubackgrounddate4, @Eduba"& _ 
                "ckground5, @Edubackgrounddate5, @Edubackground6, @Edubackgrounddate6, @StudentTy"& _ 
                "pe, @birthplace, @Gender, @regDate, @gradDate, @gradCollege, @gradCourse, @gradC"& _ 
                "oncentration, @SecondCourser);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Addres"& _ 
                "s1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edub"& _ 
                "ackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackgroun"& _ 
                "d3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edubackground5, Edub"& _ 
                "ackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType, birthplace, Gen"& _ 
                "der, regDate, gradDate, gradCollege, gradCourse, gradConcentration, SecondCourse"& _ 
                "r FROM Students WHERE (StudentPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Students] SET [StudentID] = @StudentID, [StudentName] = @StudentName, [Ad"& _ 
                "dress1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [Phone] = @"& _ 
                "Phone, [MotherName] = @MotherName, [FatherName] = @FatherName, [Guardian] = @Gua"& _ 
                "rdian, [Birthdate] = @Birthdate, [Edubackground1] = @Edubackground1, [Edubackgro"& _ 
                "unddate1] = @Edubackgrounddate1, [Edubackground2] = @Edubackground2, [Edubackgro"& _ 
                "unddate2] = @Edubackgrounddate2, [Edubackground3] = @Edubackground3, [Edubackgro"& _ 
                "unddate3] = @Edubackgrounddate3, [Edubackground4] = @Edubackground4, [Edubackgro"& _ 
                "unddate4] = @Edubackgrounddate4, [Edubackground5] = @Edubackground5, [Edubackgro"& _ 
                "unddate5] = @Edubackgrounddate5, [Edubackground6] = @Edubackground6, [Edubackgro"& _ 
                "unddate6] = @Edubackgrounddate6, [StudentType] = @StudentType, [birthplace] = @b"& _ 
                "irthplace, [Gender] = @Gender, [regDate] = @regDate, [gradDate] = @gradDate, [gr"& _ 
                "adCollege] = @gradCollege, [gradCourse] = @gradCourse, [gradConcentration] = @gr"& _ 
                "adConcentration, [SecondCourser] = @SecondCourser WHERE (([StudentPK] = @Origina"& _ 
                "l_StudentPK) AND ([StudentID] = @Original_StudentID) AND ([StudentName] = @Origi"& _ 
                "nal_StudentName) AND ([Address1] = @Original_Address1) AND ([Address2] = @Origin"& _ 
                "al_Address2) AND ([Address3] = @Original_Address3) AND ([Phone] = @Original_Phon"& _ 
                "e) AND ([MotherName] = @Original_MotherName) AND ([FatherName] = @Original_Fathe"& _ 
                "rName) AND ([Guardian] = @Original_Guardian) AND ([Birthdate] = @Original_Birthd"& _ 
                "ate) AND ([Edubackground1] = @Original_Edubackground1) AND ([Edubackgrounddate1]"& _ 
                " = @Original_Edubackgrounddate1) AND ([Edubackground2] = @Original_Edubackground"& _ 
                "2) AND ([Edubackgrounddate2] = @Original_Edubackgrounddate2) AND ([Edubackground"& _ 
                "3] = @Original_Edubackground3) AND ([Edubackgrounddate3] = @Original_Edubackgrou"& _ 
                "nddate3) AND ([Edubackground4] = @Original_Edubackground4) AND ([Edubackgroundda"& _ 
                "te4] = @Original_Edubackgrounddate4) AND ((@IsNull_Edubackground5 = 1 AND [Eduba"& _ 
                "ckground5] IS NULL) OR ([Edubackground5] = @Original_Edubackground5)) AND ((@IsN"& _ 
                "ull_Edubackgrounddate5 = 1 AND [Edubackgrounddate5] IS NULL) OR ([Edubackgroundd"& _ 
                "ate5] = @Original_Edubackgrounddate5)) AND ((@IsNull_Edubackground6 = 1 AND [Edu"& _ 
                "background6] IS NULL) OR ([Edubackground6] = @Original_Edubackground6)) AND ((@I"& _ 
                "sNull_Edubackgrounddate6 = 1 AND [Edubackgrounddate6] IS NULL) OR ([Edubackgroun"& _ 
                "ddate6] = @Original_Edubackgrounddate6)) AND ((@IsNull_StudentType = 1 AND [Stud"& _ 
                "entType] IS NULL) OR ([StudentType] = @Original_StudentType)) AND ((@IsNull_birt"& _ 
                "hplace = 1 AND [birthplace] IS NULL) OR ([birthplace] = @Original_birthplace)) A"& _ 
                "ND ((@IsNull_Gender = 1 AND [Gender] IS NULL) OR ([Gender] = @Original_Gender)) "& _ 
                "AND ((@IsNull_regDate = 1 AND [regDate] IS NULL) OR ([regDate] = @Original_regDa"& _ 
                "te)) AND ((@IsNull_gradDate = 1 AND [gradDate] IS NULL) OR ([gradDate] = @Origin"& _ 
                "al_gradDate)) AND ((@IsNull_gradCollege = 1 AND [gradCollege] IS NULL) OR ([grad"& _ 
                "College] = @Original_gradCollege)) AND ((@IsNull_gradCourse = 1 AND [gradCourse]"& _ 
                " IS NULL) OR ([gradCourse] = @Original_gradCourse)) AND ((@IsNull_gradConcentrat"& _ 
                "ion = 1 AND [gradConcentration] IS NULL) OR ([gradConcentration] = @Original_gra"& _ 
                "dConcentration)) AND ((@IsNull_SecondCourser = 1 AND [SecondCourser] IS NULL) OR"& _ 
                " ([SecondCourser] = @Original_SecondCourser)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, St"& _ 
                "udentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian"& _ 
                ", Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgroundda"& _ 
                "te2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edu"& _ 
                "background5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType"& _ 
                ", birthplace, Gender, regDate, gradDate, gradCollege, gradCourse, gradConcentrat"& _ 
                "ion, SecondCourser FROM Students WHERE (StudentPK = @StudentPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Students"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (StudentPK = @studentpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.StudentsbyPKDataTable, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer) As dsReg2.StudentsbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            Dim dataTable As dsReg2.StudentsbyPKDataTable = New dsReg2.StudentsbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.StudentsbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "StudentsbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_StudentType,String)
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_birthplace,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Edubackgrounddate6,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(StudentType,String)
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(birthplace,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(gradConcentration,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Edubackgrounddate6,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(StudentType,String)
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(birthplace,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(gradConcentration,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_StudentType,String)
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_birthplace,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(76).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal StudentType As String,  _
                    ByVal birthplace As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, StudentType, birthplace, Gender, regDate, gradDate, gradCollege, gradCourse, gradConcentration, SecondCourser, Original_StudentPK, Original_StudentID, Original_StudentName, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_Edubackground5, Original_Edubackgrounddate5, Original_Edubackground6, Original_Edubackgrounddate6, Original_StudentType, Original_birthplace, Original_Gender, Original_regDate, Original_gradDate, Original_gradCollege, Original_gradCourse, Original_gradConcentration, Original_SecondCourser, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GradesbyStudentSubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GradesbyStudentSubject"
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("exSubjectUnits", "exSubjectUnits")
            tableMapping.ColumnMappings.Add("exCreditGroup", "exCreditGroup")
            tableMapping.ColumnMappings.Add("isPrevSchoolGrade", "isPrevSchoolGrade")
            tableMapping.ColumnMappings.Add("exCompletionGrade", "exCompletionGrade")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     isnull(a.SubjectName,'') as SubjectName , isnull(a.SubjectCode,'') as "& _ 
                "SubjectCode, b.pk, b.datein, b.grade, b.keythrough, b.subjectpk, b.sypk, b.sempk"& _ 
                ", b.teacherpk, b.studentpk, b.extSubjectID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      b.exSubjectD"& _ 
                "esc, b.exSubjectGrade, b.coursepk, b.exSubjectUnits, b.exCreditGroup, b.isPrevSc"& _ 
                "hoolGrade, b.exCompletionGrade"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Subjects AS a RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   StudentGrades AS b ON a.SubjectPriKey = b.subjectpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   "& _ 
                "  (b.studentpk = @studentpk) AND (a.SubjectName LIKE @subject) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         (b.studentpk = @studentpk) AND (a.SubjectCode LIKE @subject) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                (b.studentpk = @studentpk) AND (b.exSubjectDesc LIKE @subject)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.GradesbyStudentSubjectDataTable, ByVal studentpk As Integer, ByVal subject As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("subject")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer, ByVal subject As String) As dsReg2.GradesbyStudentSubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("subject")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,String)
            End If
            Dim dataTable As dsReg2.GradesbyStudentSubjectDataTable = New dsReg2.GradesbyStudentSubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CurriculumTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Curriculum"
            tableMapping.ColumnMappings.Add("Curriculumpk", "Curriculumpk")
            tableMapping.ColumnMappings.Add("Coursepk", "Coursepk")
            tableMapping.ColumnMappings.Add("YearLevelid", "YearLevelid")
            tableMapping.ColumnMappings.Add("Semesterid", "Semesterid")
            tableMapping.ColumnMappings.Add("Subjectpk", "Subjectpk")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Curriculum] WHERE (([Curriculumpk] = @Original_Curriculumpk) A"& _ 
                "ND ((@IsNull_Coursepk = 1 AND [Coursepk] IS NULL) OR ([Coursepk] = @Original_Cou"& _ 
                "rsepk)) AND ((@IsNull_YearLevelid = 1 AND [YearLevelid] IS NULL) OR ([YearLeveli"& _ 
                "d] = @Original_YearLevelid)) AND ((@IsNull_Semesterid = 1 AND [Semesterid] IS NU"& _ 
                "LL) OR ([Semesterid] = @Original_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [S"& _ 
                "ubjectpk] IS NULL) OR ([Subjectpk] = @Original_Subjectpk)) AND ((@IsNull_Remarks"& _ 
                " = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Curriculum] ([Coursepk], [YearLevelid], [Semesterid], [Subject"& _ 
                "pk], [Remarks]) VALUES (@Coursepk, @YearLevelid, @Semesterid, @Subjectpk, @Remar"& _ 
                "ks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks"& _ 
                " FROM Curriculum WHERE (Curriculumpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Curriculum] SET [Coursepk] = @Coursepk, [YearLevelid] = @YearLeveli"& _ 
                "d, [Semesterid] = @Semesterid, [Subjectpk] = @Subjectpk, [Remarks] = @Remarks WH"& _ 
                "ERE (([Curriculumpk] = @Original_Curriculumpk) AND ((@IsNull_Coursepk = 1 AND [C"& _ 
                "oursepk] IS NULL) OR ([Coursepk] = @Original_Coursepk)) AND ((@IsNull_YearLeveli"& _ 
                "d = 1 AND [YearLevelid] IS NULL) OR ([YearLevelid] = @Original_YearLevelid)) AND"& _ 
                " ((@IsNull_Semesterid = 1 AND [Semesterid] IS NULL) OR ([Semesterid] = @Original"& _ 
                "_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [Subjectpk] IS NULL) OR ([Subjectp"& _ 
                "k] = @Original_Subjectpk)) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ("& _ 
                "[Remarks] = @Original_Remarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, S"& _ 
                "emesterid, Subjectpk, Remarks FROM Curriculum WHERE (Curriculumpk = @Curriculump"& _ 
                "k)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Curriculumpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks FROM d"& _ 
                "bo.Curriculum"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.CurriculumDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReg2.CurriculumDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReg2.CurriculumDataTable = New dsReg2.CurriculumDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.CurriculumDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "Curriculum")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String, ByVal Curriculumpk As Integer) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Curriculumpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Return Me.Update(Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks, Original_Curriculumpk, Original_Coursepk, Original_YearLevelid, Original_Semesterid, Original_Subjectpk, Original_Remarks, Original_Curriculumpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CurriculumbyCourseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CurriculumbyCourse"
            tableMapping.ColumnMappings.Add("Curriculumpk", "Curriculumpk")
            tableMapping.ColumnMappings.Add("Coursepk", "Coursepk")
            tableMapping.ColumnMappings.Add("YearLevelid", "YearLevelid")
            tableMapping.ColumnMappings.Add("Semesterid", "Semesterid")
            tableMapping.ColumnMappings.Add("Subjectpk", "Subjectpk")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Curriculum] WHERE (([Curriculumpk] = @Original_Curriculumpk) A"& _ 
                "ND ((@IsNull_Coursepk = 1 AND [Coursepk] IS NULL) OR ([Coursepk] = @Original_Cou"& _ 
                "rsepk)) AND ((@IsNull_YearLevelid = 1 AND [YearLevelid] IS NULL) OR ([YearLeveli"& _ 
                "d] = @Original_YearLevelid)) AND ((@IsNull_Semesterid = 1 AND [Semesterid] IS NU"& _ 
                "LL) OR ([Semesterid] = @Original_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [S"& _ 
                "ubjectpk] IS NULL) OR ([Subjectpk] = @Original_Subjectpk)) AND ((@IsNull_Remarks"& _ 
                " = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Curriculum] ([Coursepk], [YearLevelid], [Semesterid], [Subject"& _ 
                "pk], [Remarks]) VALUES (@Coursepk, @YearLevelid, @Semesterid, @Subjectpk, @Remar"& _ 
                "ks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks"& _ 
                " FROM Curriculum WHERE (Curriculumpk = SCOPE_IDENTITY()) ORDER BY YearLevelid, S"& _ 
                "emesterid"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Curriculum] SET [Coursepk] = @Coursepk, [YearLevelid] = @YearLeveli"& _ 
                "d, [Semesterid] = @Semesterid, [Subjectpk] = @Subjectpk, [Remarks] = @Remarks WH"& _ 
                "ERE (([Curriculumpk] = @Original_Curriculumpk) AND ((@IsNull_Coursepk = 1 AND [C"& _ 
                "oursepk] IS NULL) OR ([Coursepk] = @Original_Coursepk)) AND ((@IsNull_YearLeveli"& _ 
                "d = 1 AND [YearLevelid] IS NULL) OR ([YearLevelid] = @Original_YearLevelid)) AND"& _ 
                " ((@IsNull_Semesterid = 1 AND [Semesterid] IS NULL) OR ([Semesterid] = @Original"& _ 
                "_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [Subjectpk] IS NULL) OR ([Subjectp"& _ 
                "k] = @Original_Subjectpk)) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ("& _ 
                "[Remarks] = @Original_Remarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, S"& _ 
                "emesterid, Subjectpk, Remarks FROM Curriculum WHERE (Curriculumpk = @Curriculump"& _ 
                "k) ORDER BY YearLevelid, Semesterid"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Curriculumpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks FROM d"& _ 
                "bo.Curriculum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE coursepk = @coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY YearLevelid,Semesterid"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.CurriculumbyCourseDataTable, ByVal coursepk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal coursepk As Global.System.Nullable(Of Integer)) As dsReg2.CurriculumbyCourseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.CurriculumbyCourseDataTable = New dsReg2.CurriculumbyCourseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.CurriculumbyCourseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "CurriculumbyCourse")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String, ByVal Curriculumpk As Integer) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Curriculumpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Return Me.Update(Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks, Original_Curriculumpk, Original_Coursepk, Original_YearLevelid, Original_Semesterid, Original_Subjectpk, Original_Remarks, Original_Curriculumpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsbyTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentsbyType"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            tableMapping.ColumnMappings.Add("regDate", "regDate")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("birthplace", "birthplace")
            tableMapping.ColumnMappings.Add("gradDate", "gradDate")
            tableMapping.ColumnMappings.Add("gradCollege", "gradCollege")
            tableMapping.ColumnMappings.Add("gradCourse", "gradCourse")
            tableMapping.ColumnMappings.Add("gradConcentration", "gradConcentration")
            tableMapping.ColumnMappings.Add("Edubackground5", "Edubackground5")
            tableMapping.ColumnMappings.Add("Edubackgrounddate5", "Edubackgrounddate5")
            tableMapping.ColumnMappings.Add("Edubackground6", "Edubackground6")
            tableMapping.ColumnMappings.Add("Edubackgrounddate6", "Edubackgrounddate6")
            tableMapping.ColumnMappings.Add("SecondCourser", "SecondCourser")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID"& _ 
                "] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ([Addre"& _ 
                "ss1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Address3]"& _ 
                " = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Orig"& _ 
                "inal_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guardian] = @Or"& _ 
                "iginal_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] ="& _ 
                " @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Edubackgroundda"& _ 
                "te1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgrounddate2]"& _ 
                " = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edubackground"& _ 
                "3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edubackground"& _ 
                "4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_Edubackgrou"& _ 
                "nddate4) AND ((@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([StudentTy"& _ 
                "pe] = @Original_StudentType)) AND ((@IsNull_Gender = 1 AND [Gender] IS NULL) OR "& _ 
                "([Gender] = @Original_Gender)) AND ((@IsNull_regDate = 1 AND [regDate] IS NULL) "& _ 
                "OR ([regDate] = @Original_regDate)) AND ((@IsNull_birthplace = 1 AND [birthplace"& _ 
                "] IS NULL) OR ([birthplace] = @Original_birthplace)) AND ((@IsNull_gradDate = 1 "& _ 
                "AND [gradDate] IS NULL) OR ([gradDate] = @Original_gradDate)) AND ((@IsNull_grad"& _ 
                "College = 1 AND [gradCollege] IS NULL) OR ([gradCollege] = @Original_gradCollege"& _ 
                ")) AND ((@IsNull_gradCourse = 1 AND [gradCourse] IS NULL) OR ([gradCourse] = @Or"& _ 
                "iginal_gradCourse)) AND ((@IsNull_gradConcentration = 1 AND [gradConcentration] "& _ 
                "IS NULL) OR ([gradConcentration] = @Original_gradConcentration)) AND ((@IsNull_E"& _ 
                "dubackground5 = 1 AND [Edubackground5] IS NULL) OR ([Edubackground5] = @Original"& _ 
                "_Edubackground5)) AND ((@IsNull_Edubackgrounddate5 = 1 AND [Edubackgrounddate5] "& _ 
                "IS NULL) OR ([Edubackgrounddate5] = @Original_Edubackgrounddate5)) AND ((@IsNull"& _ 
                "_Edubackground6 = 1 AND [Edubackground6] IS NULL) OR ([Edubackground6] = @Origin"& _ 
                "al_Edubackground6)) AND ((@IsNull_Edubackgrounddate6 = 1 AND [Edubackgrounddate6"& _ 
                "] IS NULL) OR ([Edubackgrounddate6] = @Original_Edubackgrounddate6)) AND ((@IsNu"& _ 
                "ll_SecondCourser = 1 AND [SecondCourser] IS NULL) OR ([SecondCourser] = @Origina"& _ 
                "l_SecondCourser)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Students] ([StudentID], [StudentName], [Address1], [Address2], [Addr"& _ 
                "ess3], [Phone], [MotherName], [FatherName], [Guardian], [Birthdate], [Edubackgro"& _ 
                "und1], [Edubackgrounddate1], [Edubackground2], [Edubackgrounddate2], [Edubackgro"& _ 
                "und3], [Edubackgrounddate3], [Edubackground4], [Edubackgrounddate4], [StudentTyp"& _ 
                "e], [Gender], [regDate], [birthplace], [gradDate], [gradCollege], [gradCourse], "& _ 
                "[gradConcentration], [Edubackground5], [Edubackgrounddate5], [Edubackground6], ["& _ 
                "Edubackgrounddate6], [SecondCourser]) VALUES (@StudentID, @StudentName, @Address"& _ 
                "1, @Address2, @Address3, @Phone, @MotherName, @FatherName, @Guardian, @Birthdate"& _ 
                ", @Edubackground1, @Edubackgrounddate1, @Edubackground2, @Edubackgrounddate2, @E"& _ 
                "dubackground3, @Edubackgrounddate3, @Edubackground4, @Edubackgrounddate4, @Stude"& _ 
                "ntType, @Gender, @regDate, @birthplace, @gradDate, @gradCollege, @gradCourse, @g"& _ 
                "radConcentration, @Edubackground5, @Edubackgrounddate5, @Edubackground6, @Edubac"& _ 
                "kgrounddate6, @SecondCourser);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Addres"& _ 
                "s1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edub"& _ 
                "ackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackgroun"& _ 
                "d3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, Gender,"& _ 
                " regDate, birthplace, gradDate, gradCollege, gradCourse, gradConcentration, Edub"& _ 
                "ackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, SecondCourse"& _ 
                "r FROM Students WHERE (StudentPK = SCOPE_IDENTITY()) ORDER BY StudentName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Students] SET [StudentID] = @StudentID, [StudentName] = @StudentName, [Ad"& _ 
                "dress1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [Phone] = @"& _ 
                "Phone, [MotherName] = @MotherName, [FatherName] = @FatherName, [Guardian] = @Gua"& _ 
                "rdian, [Birthdate] = @Birthdate, [Edubackground1] = @Edubackground1, [Edubackgro"& _ 
                "unddate1] = @Edubackgrounddate1, [Edubackground2] = @Edubackground2, [Edubackgro"& _ 
                "unddate2] = @Edubackgrounddate2, [Edubackground3] = @Edubackground3, [Edubackgro"& _ 
                "unddate3] = @Edubackgrounddate3, [Edubackground4] = @Edubackground4, [Edubackgro"& _ 
                "unddate4] = @Edubackgrounddate4, [StudentType] = @StudentType, [Gender] = @Gende"& _ 
                "r, [regDate] = @regDate, [birthplace] = @birthplace, [gradDate] = @gradDate, [gr"& _ 
                "adCollege] = @gradCollege, [gradCourse] = @gradCourse, [gradConcentration] = @gr"& _ 
                "adConcentration, [Edubackground5] = @Edubackground5, [Edubackgrounddate5] = @Edu"& _ 
                "backgrounddate5, [Edubackground6] = @Edubackground6, [Edubackgrounddate6] = @Edu"& _ 
                "backgrounddate6, [SecondCourser] = @SecondCourser WHERE (([StudentPK] = @Origina"& _ 
                "l_StudentPK) AND ([StudentID] = @Original_StudentID) AND ([StudentName] = @Origi"& _ 
                "nal_StudentName) AND ([Address1] = @Original_Address1) AND ([Address2] = @Origin"& _ 
                "al_Address2) AND ([Address3] = @Original_Address3) AND ([Phone] = @Original_Phon"& _ 
                "e) AND ([MotherName] = @Original_MotherName) AND ([FatherName] = @Original_Fathe"& _ 
                "rName) AND ([Guardian] = @Original_Guardian) AND ([Birthdate] = @Original_Birthd"& _ 
                "ate) AND ([Edubackground1] = @Original_Edubackground1) AND ([Edubackgrounddate1]"& _ 
                " = @Original_Edubackgrounddate1) AND ([Edubackground2] = @Original_Edubackground"& _ 
                "2) AND ([Edubackgrounddate2] = @Original_Edubackgrounddate2) AND ([Edubackground"& _ 
                "3] = @Original_Edubackground3) AND ([Edubackgrounddate3] = @Original_Edubackgrou"& _ 
                "nddate3) AND ([Edubackground4] = @Original_Edubackground4) AND ([Edubackgroundda"& _ 
                "te4] = @Original_Edubackgrounddate4) AND ((@IsNull_StudentType = 1 AND [StudentT"& _ 
                "ype] IS NULL) OR ([StudentType] = @Original_StudentType)) AND ((@IsNull_Gender ="& _ 
                " 1 AND [Gender] IS NULL) OR ([Gender] = @Original_Gender)) AND ((@IsNull_regDate"& _ 
                " = 1 AND [regDate] IS NULL) OR ([regDate] = @Original_regDate)) AND ((@IsNull_bi"& _ 
                "rthplace = 1 AND [birthplace] IS NULL) OR ([birthplace] = @Original_birthplace))"& _ 
                " AND ((@IsNull_gradDate = 1 AND [gradDate] IS NULL) OR ([gradDate] = @Original_g"& _ 
                "radDate)) AND ((@IsNull_gradCollege = 1 AND [gradCollege] IS NULL) OR ([gradColl"& _ 
                "ege] = @Original_gradCollege)) AND ((@IsNull_gradCourse = 1 AND [gradCourse] IS "& _ 
                "NULL) OR ([gradCourse] = @Original_gradCourse)) AND ((@IsNull_gradConcentration "& _ 
                "= 1 AND [gradConcentration] IS NULL) OR ([gradConcentration] = @Original_gradCon"& _ 
                "centration)) AND ((@IsNull_Edubackground5 = 1 AND [Edubackground5] IS NULL) OR ("& _ 
                "[Edubackground5] = @Original_Edubackground5)) AND ((@IsNull_Edubackgrounddate5 ="& _ 
                " 1 AND [Edubackgrounddate5] IS NULL) OR ([Edubackgrounddate5] = @Original_Edubac"& _ 
                "kgrounddate5)) AND ((@IsNull_Edubackground6 = 1 AND [Edubackground6] IS NULL) OR"& _ 
                " ([Edubackground6] = @Original_Edubackground6)) AND ((@IsNull_Edubackgrounddate6"& _ 
                " = 1 AND [Edubackgrounddate6] IS NULL) OR ([Edubackgrounddate6] = @Original_Edub"& _ 
                "ackgrounddate6)) AND ((@IsNull_SecondCourser = 1 AND [SecondCourser] IS NULL) OR"& _ 
                " ([SecondCourser] = @Original_SecondCourser)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, St"& _ 
                "udentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian"& _ 
                ", Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgroundda"& _ 
                "te2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Stu"& _ 
                "dentType, Gender, regDate, birthplace, gradDate, gradCollege, gradCourse, gradCo"& _ 
                "ncentration, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgroundda"& _ 
                "te6, SecondCourser FROM Students WHERE (StudentPK = @StudentPK) ORDER BY Student"& _ 
                "Name"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_birthplace", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_birthplace", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "birthplace", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCollege", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCollege", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCollege", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradCourse", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gradConcentration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gradConcentration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gradConcentration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackground6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Edubackgrounddate6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondCourser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondCourser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondCourser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT    *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Students"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (StudentType = @type)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Stu"& _ 
                "dentName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.StudentsbyTypeDataTable, ByVal type As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(type,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal type As String) As dsReg2.StudentsbyTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(type,String)
            End If
            Dim dataTable As dsReg2.StudentsbyTypeDataTable = New dsReg2.StudentsbyTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.StudentsbyTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "StudentsbyType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_StudentType,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_birthplace,String)
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal birthplace As String,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(StudentType,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(birthplace,String)
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(gradConcentration,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Edubackgrounddate6,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal birthplace As String,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(StudentType,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(birthplace,String)
            End If
            If (gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(gradDate,String)
            End If
            If (gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(gradCollege,String)
            End If
            If (gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(gradCourse,String)
            End If
            If (gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(gradConcentration,String)
            End If
            If (Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Edubackground5,String)
            End If
            If (Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Edubackgrounddate5,String)
            End If
            If (Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Edubackground6,String)
            End If
            If (Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Edubackgrounddate6,String)
            End If
            If (SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_StudentType,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_birthplace Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_birthplace,String)
            End If
            If (Original_gradDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_gradDate,String)
            End If
            If (Original_gradCollege Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_gradCollege,String)
            End If
            If (Original_gradCourse Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_gradCourse,String)
            End If
            If (Original_gradConcentration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_gradConcentration,String)
            End If
            If (Original_Edubackground5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_Edubackground5,String)
            End If
            If (Original_Edubackgrounddate5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_Edubackgrounddate5,String)
            End If
            If (Original_Edubackground6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_Edubackground6,String)
            End If
            If (Original_Edubackgrounddate6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_Edubackgrounddate6,String)
            End If
            If (Original_SecondCourser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_SecondCourser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(76).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal Gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal birthplace As String,  _
                    ByVal gradDate As String,  _
                    ByVal gradCollege As String,  _
                    ByVal gradCourse As String,  _
                    ByVal gradConcentration As String,  _
                    ByVal Edubackground5 As String,  _
                    ByVal Edubackgrounddate5 As String,  _
                    ByVal Edubackground6 As String,  _
                    ByVal Edubackgrounddate6 As String,  _
                    ByVal SecondCourser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_birthplace As String,  _
                    ByVal Original_gradDate As String,  _
                    ByVal Original_gradCollege As String,  _
                    ByVal Original_gradCourse As String,  _
                    ByVal Original_gradConcentration As String,  _
                    ByVal Original_Edubackground5 As String,  _
                    ByVal Original_Edubackgrounddate5 As String,  _
                    ByVal Original_Edubackground6 As String,  _
                    ByVal Original_Edubackgrounddate6 As String,  _
                    ByVal Original_SecondCourser As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, Gender, regDate, birthplace, gradDate, gradCollege, gradCourse, gradConcentration, Edubackground5, Edubackgrounddate5, Edubackground6, Edubackgrounddate6, SecondCourser, Original_StudentPK, Original_StudentID, Original_StudentName, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_StudentType, Original_Gender, Original_regDate, Original_birthplace, Original_gradDate, Original_gradCollege, Original_gradCourse, Original_gradConcentration, Original_Edubackground5, Original_Edubackgrounddate5, Original_Edubackground6, Original_Edubackgrounddate6, Original_SecondCourser, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PreviousSchoolsByStudentPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PreviousSchoolsByStudentPK"
            tableMapping.ColumnMappings.Add("prevSchoolRecordID", "prevSchoolRecordID")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("YearAttend", "YearAttend")
            tableMapping.ColumnMappings.Add("studentPK", "studentPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [PreviousSchools] WHERE (([prevSchoolRecordID] = @Original_prevSchool"& _ 
                "RecordID) AND ([SchoolName] = @Original_SchoolName) AND ((@IsNull_YearAttend = 1"& _ 
                " AND [YearAttend] IS NULL) OR ([YearAttend] = @Original_YearAttend)) AND ([stude"& _ 
                "ntPK] = @Original_studentPK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearAttend", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [PreviousSchools] ([SchoolName], [YearAttend], [studentPK]) VALUES (@"& _ 
                "SchoolName, @YearAttend, @studentPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prevSchoolRecordID, SchoolName, Ye"& _ 
                "arAttend, studentPK FROM PreviousSchools WHERE (prevSchoolRecordID = SCOPE_IDENT"& _ 
                "ITY()) ORDER BY YearAttend DESC"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [PreviousSchools] SET [SchoolName] = @SchoolName, [YearAttend] = @YearAtte"& _ 
                "nd, [studentPK] = @studentPK WHERE (([prevSchoolRecordID] = @Original_prevSchool"& _ 
                "RecordID) AND ([SchoolName] = @Original_SchoolName) AND ((@IsNull_YearAttend = 1"& _ 
                " AND [YearAttend] IS NULL) OR ([YearAttend] = @Original_YearAttend)) AND ([stude"& _ 
                "ntPK] = @Original_studentPK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prevSchoolRecordID, SchoolName, YearAtten"& _ 
                "d, studentPK FROM PreviousSchools WHERE (prevSchoolRecordID = @prevSchoolRecordI"& _ 
                "D) ORDER BY YearAttend DESC"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearAttend", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prevSchoolRecordID, SchoolName, YearAttend, studentPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Pr"& _ 
                "eviousSchools"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE studentPK = @studentpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY YearAttend DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.PreviousSchoolsByStudentPKDataTable, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer) As dsReg2.PreviousSchoolsByStudentPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            Dim dataTable As dsReg2.PreviousSchoolsByStudentPKDataTable = New dsReg2.PreviousSchoolsByStudentPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.PreviousSchoolsByStudentPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "PreviousSchoolsByStudentPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_prevSchoolRecordID,Integer)
            If (Original_SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolName,String)
            End If
            If (Original_YearAttend Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_YearAttend,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_studentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer) As Integer
            If (SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolName,String)
            End If
            If (YearAttend Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearAttend,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(studentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer, ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer, ByVal prevSchoolRecordID As Integer) As Integer
            If (SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolName,String)
            End If
            If (YearAttend Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearAttend,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(studentPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_prevSchoolRecordID,Integer)
            If (Original_SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolName")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SchoolName,String)
            End If
            If (Original_YearAttend Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_YearAttend,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_studentPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prevSchoolRecordID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer, ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer) As Integer
            Return Me.Update(SchoolName, YearAttend, studentPK, Original_prevSchoolRecordID, Original_SchoolName, Original_YearAttend, Original_studentPK, Original_prevSchoolRecordID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PreviousSchoolsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PreviousSchools"
            tableMapping.ColumnMappings.Add("prevSchoolRecordID", "prevSchoolRecordID")
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName")
            tableMapping.ColumnMappings.Add("YearAttend", "YearAttend")
            tableMapping.ColumnMappings.Add("studentPK", "studentPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [PreviousSchools] WHERE (([prevSchoolRecordID] = @Original_prevSchool"& _ 
                "RecordID) AND ([SchoolName] = @Original_SchoolName) AND ((@IsNull_YearAttend = 1"& _ 
                " AND [YearAttend] IS NULL) OR ([YearAttend] = @Original_YearAttend)) AND ([stude"& _ 
                "ntPK] = @Original_studentPK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearAttend", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [PreviousSchools] ([SchoolName], [YearAttend], [studentPK]) VALUES (@"& _ 
                "SchoolName, @YearAttend, @studentPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prevSchoolRecordID, SchoolName, Ye"& _ 
                "arAttend, studentPK FROM PreviousSchools WHERE (prevSchoolRecordID = SCOPE_IDENT"& _ 
                "ITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [PreviousSchools] SET [SchoolName] = @SchoolName, [YearAttend] = @YearAtte"& _ 
                "nd, [studentPK] = @studentPK WHERE (([prevSchoolRecordID] = @Original_prevSchool"& _ 
                "RecordID) AND ([SchoolName] = @Original_SchoolName) AND ((@IsNull_YearAttend = 1"& _ 
                " AND [YearAttend] IS NULL) OR ([YearAttend] = @Original_YearAttend)) AND ([stude"& _ 
                "ntPK] = @Original_studentPK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prevSchoolRecordID, SchoolName, YearAtten"& _ 
                "d, studentPK FROM PreviousSchools WHERE (prevSchoolRecordID = @prevSchoolRecordI"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearAttend", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearAttend", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearAttend", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prevSchoolRecordID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "prevSchoolRecordID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prevSchoolRecordID, SchoolName, YearAttend, studentPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Pr"& _ 
                "eviousSchools"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.PreviousSchoolsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReg2.PreviousSchoolsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReg2.PreviousSchoolsDataTable = New dsReg2.PreviousSchoolsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.PreviousSchoolsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "PreviousSchools")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_prevSchoolRecordID,Integer)
            If (Original_SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolName,String)
            End If
            If (Original_YearAttend Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_YearAttend,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_studentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer) As Integer
            If (SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolName,String)
            End If
            If (YearAttend Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearAttend,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(studentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer, ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer, ByVal prevSchoolRecordID As Integer) As Integer
            If (SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolName,String)
            End If
            If (YearAttend Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearAttend,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(studentPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_prevSchoolRecordID,Integer)
            If (Original_SchoolName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolName")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SchoolName,String)
            End If
            If (Original_YearAttend Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_YearAttend,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_studentPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prevSchoolRecordID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolName As String, ByVal YearAttend As String, ByVal studentPK As Integer, ByVal Original_prevSchoolRecordID As Integer, ByVal Original_SchoolName As String, ByVal Original_YearAttend As String, ByVal Original_studentPK As Integer) As Integer
            Return Me.Update(SchoolName, YearAttend, studentPK, Original_prevSchoolRecordID, Original_SchoolName, Original_YearAttend, Original_studentPK, Original_prevSchoolRecordID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CourseEnrolledByStudentPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CourseEnrolledByStudentPK"
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (studentpk = @student"& _ 
                "pk) AND (status = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY date DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.CourseEnrolledByStudentPKDataTable, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer) As dsReg2.CourseEnrolledByStudentPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            Dim dataTable As dsReg2.CourseEnrolledByStudentPKDataTable = New dsReg2.CourseEnrolledByStudentPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectCountInCurriculumbyCourseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubjectCountInCurriculumbyCourse"
            tableMapping.ColumnMappings.Add("ResultCount", "ResultCount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COUNT(*) as ResultCount FROM dbo.Curriculum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE coursepk = @coursepk an"& _ 
                "d subjectpk = @subjectpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.SubjectCountInCurriculumbyCourseDataTable, ByVal coursepk As Global.System.Nullable(Of Integer), ByVal subjectpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal coursepk As Global.System.Nullable(Of Integer), ByVal subjectpk As Global.System.Nullable(Of Integer)) As dsReg2.SubjectCountInCurriculumbyCourseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.SubjectCountInCurriculumbyCourseDataTable = New dsReg2.SubjectCountInCurriculumbyCourseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrationNumbersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrationNumbers"
            tableMapping.ColumnMappings.Add("RegistrationPK", "RegistrationPK")
            tableMapping.ColumnMappings.Add("ReceiptHeaderFK", "ReceiptHeaderFK")
            tableMapping.ColumnMappings.Add("SemPK", "SemPK")
            tableMapping.ColumnMappings.Add("YearPK", "YearPK")
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("RegNumber", "RegNumber")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RegistrationNumbers] WHERE (([RegistrationPK] = @Original_Registrati"& _ 
                "onPK) AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([Rece"& _ 
                "iptHeaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] I"& _ 
                "S NULL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS"& _ 
                " NULL) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [Studen"& _ 
                "tPK] IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = "& _ 
                "1 AND [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull"& _ 
                "_DateCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCr"& _ 
                "eated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RegistrationNumbers] ([ReceiptHeaderFK], [SemPK], [YearPK], [Student"& _ 
                "PK], [RegNumber], [DateCreated]) VALUES (@ReceiptHeaderFK, @SemPK, @YearPK, @Stu"& _ 
                "dentPK, @RegNumber, @DateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemP"& _ 
                "K, YearPK, StudentPK, RegNumber, DateCreated FROM RegistrationNumbers WHERE (Reg"& _ 
                "istrationPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RegistrationNumbers] SET [ReceiptHeaderFK] = @ReceiptHeaderFK, [SemPK] = "& _ 
                "@SemPK, [YearPK] = @YearPK, [StudentPK] = @StudentPK, [RegNumber] = @RegNumber, "& _ 
                "[DateCreated] = @DateCreated WHERE (([RegistrationPK] = @Original_RegistrationPK"& _ 
                ") AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([ReceiptH"& _ 
                "eaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] IS NU"& _ 
                "LL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS NUL"& _ 
                "L) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [StudentPK]"& _ 
                " IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = 1 AN"& _ 
                "D [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull_Dat"& _ 
                "eCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreate"& _ 
                "d)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumb"& _ 
                "er, DateCreated FROM RegistrationNumbers WHERE (RegistrationPK = @RegistrationPK"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumbe"& _ 
                "r, DateCreated"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RegistrationNumbers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.RegistrationNumbersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReg2.RegistrationNumbersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReg2.RegistrationNumbersDataTable = New dsReg2.RegistrationNumbersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.RegistrationNumbersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrationNumbers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date)) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date), ByVal RegistrationPK As Integer) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RegistrationPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated, Original_RegistrationPK, Original_ReceiptHeaderFK, Original_SemPK, Original_YearPK, Original_StudentPK, Original_RegNumber, Original_DateCreated, Original_RegistrationPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrationNumbersBySemYearPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrationNumbersBySemYearPK"
            tableMapping.ColumnMappings.Add("RegistrationPK", "RegistrationPK")
            tableMapping.ColumnMappings.Add("ReceiptHeaderFK", "ReceiptHeaderFK")
            tableMapping.ColumnMappings.Add("SemPK", "SemPK")
            tableMapping.ColumnMappings.Add("YearPK", "YearPK")
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("RegNumber", "RegNumber")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RegistrationNumbers] WHERE (([RegistrationPK] = @Original_Registrati"& _ 
                "onPK) AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([Rece"& _ 
                "iptHeaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] I"& _ 
                "S NULL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS"& _ 
                " NULL) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [Studen"& _ 
                "tPK] IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = "& _ 
                "1 AND [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull"& _ 
                "_DateCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCr"& _ 
                "eated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RegistrationNumbers] ([ReceiptHeaderFK], [SemPK], [YearPK], [Student"& _ 
                "PK], [RegNumber], [DateCreated]) VALUES (@ReceiptHeaderFK, @SemPK, @YearPK, @Stu"& _ 
                "dentPK, @RegNumber, @DateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemP"& _ 
                "K, YearPK, StudentPK, RegNumber, DateCreated FROM RegistrationNumbers WHERE (Reg"& _ 
                "istrationPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RegistrationNumbers] SET [ReceiptHeaderFK] = @ReceiptHeaderFK, [SemPK] = "& _ 
                "@SemPK, [YearPK] = @YearPK, [StudentPK] = @StudentPK, [RegNumber] = @RegNumber, "& _ 
                "[DateCreated] = @DateCreated WHERE (([RegistrationPK] = @Original_RegistrationPK"& _ 
                ") AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([ReceiptH"& _ 
                "eaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] IS NU"& _ 
                "LL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS NUL"& _ 
                "L) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [StudentPK]"& _ 
                " IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = 1 AN"& _ 
                "D [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull_Dat"& _ 
                "eCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreate"& _ 
                "d)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumb"& _ 
                "er, DateCreated FROM RegistrationNumbers WHERE (RegistrationPK = @RegistrationPK"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumbe"& _ 
                "r, DateCreated"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RegistrationNumbers"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE SemPK = @sempk AND Ye"& _ 
                "arPK = @yearpk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.RegistrationNumbersBySemYearPKDataTable, ByVal sempk As Global.System.Nullable(Of Integer), ByVal yearpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (sempk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(sempk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yearpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yearpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sempk As Global.System.Nullable(Of Integer), ByVal yearpk As Global.System.Nullable(Of Integer)) As dsReg2.RegistrationNumbersBySemYearPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (sempk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(sempk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yearpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yearpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.RegistrationNumbersBySemYearPKDataTable = New dsReg2.RegistrationNumbersBySemYearPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.RegistrationNumbersBySemYearPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrationNumbersBySemYearPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date)) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date), ByVal RegistrationPK As Integer) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RegistrationPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated, Original_RegistrationPK, Original_ReceiptHeaderFK, Original_SemPK, Original_YearPK, Original_StudentPK, Original_RegNumber, Original_DateCreated, Original_RegistrationPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrationNumbersByStudentSemYearPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrationNumbersByStudentSemYearPK"
            tableMapping.ColumnMappings.Add("RegistrationPK", "RegistrationPK")
            tableMapping.ColumnMappings.Add("ReceiptHeaderFK", "ReceiptHeaderFK")
            tableMapping.ColumnMappings.Add("SemPK", "SemPK")
            tableMapping.ColumnMappings.Add("YearPK", "YearPK")
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("RegNumber", "RegNumber")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RegistrationNumbers] WHERE (([RegistrationPK] = @Original_Registrati"& _ 
                "onPK) AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([Rece"& _ 
                "iptHeaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] I"& _ 
                "S NULL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS"& _ 
                " NULL) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [Studen"& _ 
                "tPK] IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = "& _ 
                "1 AND [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull"& _ 
                "_DateCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCr"& _ 
                "eated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RegistrationNumbers] ([ReceiptHeaderFK], [SemPK], [YearPK], [Student"& _ 
                "PK], [RegNumber], [DateCreated]) VALUES (@ReceiptHeaderFK, @SemPK, @YearPK, @Stu"& _ 
                "dentPK, @RegNumber, @DateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemP"& _ 
                "K, YearPK, StudentPK, RegNumber, DateCreated FROM RegistrationNumbers WHERE (Reg"& _ 
                "istrationPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RegistrationNumbers] SET [ReceiptHeaderFK] = @ReceiptHeaderFK, [SemPK] = "& _ 
                "@SemPK, [YearPK] = @YearPK, [StudentPK] = @StudentPK, [RegNumber] = @RegNumber, "& _ 
                "[DateCreated] = @DateCreated WHERE (([RegistrationPK] = @Original_RegistrationPK"& _ 
                ") AND ((@IsNull_ReceiptHeaderFK = 1 AND [ReceiptHeaderFK] IS NULL) OR ([ReceiptH"& _ 
                "eaderFK] = @Original_ReceiptHeaderFK)) AND ((@IsNull_SemPK = 1 AND [SemPK] IS NU"& _ 
                "LL) OR ([SemPK] = @Original_SemPK)) AND ((@IsNull_YearPK = 1 AND [YearPK] IS NUL"& _ 
                "L) OR ([YearPK] = @Original_YearPK)) AND ((@IsNull_StudentPK = 1 AND [StudentPK]"& _ 
                " IS NULL) OR ([StudentPK] = @Original_StudentPK)) AND ((@IsNull_RegNumber = 1 AN"& _ 
                "D [RegNumber] IS NULL) OR ([RegNumber] = @Original_RegNumber)) AND ((@IsNull_Dat"& _ 
                "eCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreate"& _ 
                "d)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumb"& _ 
                "er, DateCreated FROM RegistrationNumbers WHERE (RegistrationPK = @RegistrationPK"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceiptHeaderFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceiptHeaderFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        RegistrationPK, ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumbe"& _ 
                "r, DateCreated"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RegistrationNumbers"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE SemPK = @sempk AND Ye"& _ 
                "arPK = @yearpk AND StudentPK = @studentPK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "YearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.RegistrationNumbersByStudentSemYearPKDataTable, ByVal sempk As Global.System.Nullable(Of Integer), ByVal yearpk As Global.System.Nullable(Of Integer), ByVal studentPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (sempk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(sempk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yearpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yearpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (studentPK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentPK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sempk As Global.System.Nullable(Of Integer), ByVal yearpk As Global.System.Nullable(Of Integer), ByVal studentPK As Global.System.Nullable(Of Integer)) As dsReg2.RegistrationNumbersByStudentSemYearPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (sempk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(sempk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yearpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yearpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (studentPK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentPK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.RegistrationNumbersByStudentSemYearPKDataTable = New dsReg2.RegistrationNumbersByStudentSemYearPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.RegistrationNumbersByStudentSemYearPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrationNumbersByStudentSemYearPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date)) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date), ByVal RegistrationPK As Integer) As Integer
            If (ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RegistrationPK,Integer)
            If (Original_ReceiptHeaderFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ReceiptHeaderFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_SemPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SemPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_YearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_YearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_StudentPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_StudentPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_RegNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_RegNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RegistrationPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal SemPK As Global.System.Nullable(Of Integer), ByVal YearPK As Global.System.Nullable(Of Integer), ByVal StudentPK As Global.System.Nullable(Of Integer), ByVal RegNumber As Global.System.Nullable(Of Integer), ByVal DateCreated As Global.System.Nullable(Of Date), ByVal Original_RegistrationPK As Integer, ByVal Original_ReceiptHeaderFK As Global.System.Nullable(Of Integer), ByVal Original_SemPK As Global.System.Nullable(Of Integer), ByVal Original_YearPK As Global.System.Nullable(Of Integer), ByVal Original_StudentPK As Global.System.Nullable(Of Integer), ByVal Original_RegNumber As Global.System.Nullable(Of Integer), ByVal Original_DateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ReceiptHeaderFK, SemPK, YearPK, StudentPK, RegNumber, DateCreated, Original_RegistrationPK, Original_ReceiptHeaderFK, Original_SemPK, Original_YearPK, Original_StudentPK, Original_RegNumber, Original_DateCreated, Original_RegistrationPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CurriculumbyCoursebySubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CurriculumbyCoursebySubject"
            tableMapping.ColumnMappings.Add("Curriculumpk", "Curriculumpk")
            tableMapping.ColumnMappings.Add("Coursepk", "Coursepk")
            tableMapping.ColumnMappings.Add("YearLevelid", "YearLevelid")
            tableMapping.ColumnMappings.Add("Semesterid", "Semesterid")
            tableMapping.ColumnMappings.Add("Subjectpk", "Subjectpk")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Curriculum] WHERE (([Curriculumpk] = @Original_Curriculumpk) A"& _ 
                "ND ((@IsNull_Coursepk = 1 AND [Coursepk] IS NULL) OR ([Coursepk] = @Original_Cou"& _ 
                "rsepk)) AND ((@IsNull_YearLevelid = 1 AND [YearLevelid] IS NULL) OR ([YearLeveli"& _ 
                "d] = @Original_YearLevelid)) AND ((@IsNull_Semesterid = 1 AND [Semesterid] IS NU"& _ 
                "LL) OR ([Semesterid] = @Original_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [S"& _ 
                "ubjectpk] IS NULL) OR ([Subjectpk] = @Original_Subjectpk)) AND ((@IsNull_Remarks"& _ 
                " = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Curriculum] ([Coursepk], [YearLevelid], [Semesterid], [Subject"& _ 
                "pk], [Remarks]) VALUES (@Coursepk, @YearLevelid, @Semesterid, @Subjectpk, @Remar"& _ 
                "ks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks"& _ 
                " FROM Curriculum WHERE (Curriculumpk = SCOPE_IDENTITY()) ORDER BY YearLevelid, S"& _ 
                "emesterid"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Curriculum] SET [Coursepk] = @Coursepk, [YearLevelid] = @YearLeveli"& _ 
                "d, [Semesterid] = @Semesterid, [Subjectpk] = @Subjectpk, [Remarks] = @Remarks WH"& _ 
                "ERE (([Curriculumpk] = @Original_Curriculumpk) AND ((@IsNull_Coursepk = 1 AND [C"& _ 
                "oursepk] IS NULL) OR ([Coursepk] = @Original_Coursepk)) AND ((@IsNull_YearLeveli"& _ 
                "d = 1 AND [YearLevelid] IS NULL) OR ([YearLevelid] = @Original_YearLevelid)) AND"& _ 
                " ((@IsNull_Semesterid = 1 AND [Semesterid] IS NULL) OR ([Semesterid] = @Original"& _ 
                "_Semesterid)) AND ((@IsNull_Subjectpk = 1 AND [Subjectpk] IS NULL) OR ([Subjectp"& _ 
                "k] = @Original_Subjectpk)) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ("& _ 
                "[Remarks] = @Original_Remarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Curriculumpk, Coursepk, YearLevelid, S"& _ 
                "emesterid, Subjectpk, Remarks FROM Curriculum WHERE (Curriculumpk = @Curriculump"& _ 
                "k) ORDER BY YearLevelid, Semesterid"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Curriculumpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YearLevelid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YearLevelid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semesterid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semesterid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Curriculumpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Curriculumpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Curriculumpk, Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks FROM d"& _ 
                "bo.Curriculum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE coursepk = @coursepk and Subjectpk = @subjectpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Y"& _ 
                "earLevelid,Semesterid"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.CurriculumbyCoursebySubjectDataTable, ByVal coursepk As Global.System.Nullable(Of Integer), ByVal subjectpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal coursepk As Global.System.Nullable(Of Integer), ByVal subjectpk As Global.System.Nullable(Of Integer)) As dsReg2.CurriculumbyCoursebySubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.CurriculumbyCoursebySubjectDataTable = New dsReg2.CurriculumbyCoursebySubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReg2.CurriculumbyCoursebySubjectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReg2) As Integer
            Return Me.Adapter.Update(dataSet, "CurriculumbyCoursebySubject")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String, ByVal Curriculumpk As Integer) As Integer
            If (Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Curriculumpk,Integer)
            If (Original_Coursepk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Coursepk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_YearLevelid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_YearLevelid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Semesterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Semesterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_Subjectpk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Subjectpk.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Curriculumpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Coursepk As Global.System.Nullable(Of Integer), ByVal YearLevelid As Global.System.Nullable(Of Integer), ByVal Semesterid As Global.System.Nullable(Of Integer), ByVal Subjectpk As Global.System.Nullable(Of Integer), ByVal Remarks As String, ByVal Original_Curriculumpk As Integer, ByVal Original_Coursepk As Global.System.Nullable(Of Integer), ByVal Original_YearLevelid As Global.System.Nullable(Of Integer), ByVal Original_Semesterid As Global.System.Nullable(Of Integer), ByVal Original_Subjectpk As Global.System.Nullable(Of Integer), ByVal Original_Remarks As String) As Integer
            Return Me.Update(Coursepk, YearLevelid, Semesterid, Subjectpk, Remarks, Original_Curriculumpk, Original_Coursepk, Original_YearLevelid, Original_Semesterid, Original_Subjectpk, Original_Remarks, Original_Curriculumpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FusedSubjectsByRootSubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FusedSubjectsByRootSubject"
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("closed", "closed")
            tableMapping.ColumnMappings.Add("requested", "requested")
            tableMapping.ColumnMappings.Add("IsFused", "IsFused")
            tableMapping.ColumnMappings.Add("IsSpecialTutorial", "IsSpecialTutorial")
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted")
            tableMapping.ColumnMappings.Add("RootSubject", "RootSubject")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SYOffering.*, SYOfferingFusedSubjects.subjectPK AS RootSubject"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       SYOfferingFusedSubjects INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SYOffering ON S"& _ 
                "YOfferingFusedSubjects.syofferingFK = SYOffering.syofferingpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (SYOffe"& _ 
                "ringFusedSubjects.subjectPK = @rootSubject)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rootSubject", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RootSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReg2.FusedSubjectsByRootSubjectDataTable, ByVal rootSubject As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (rootSubject.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(rootSubject.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal rootSubject As Global.System.Nullable(Of Integer)) As dsReg2.FusedSubjectsByRootSubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (rootSubject.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(rootSubject.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReg2.FusedSubjectsByRootSubjectDataTable = New dsReg2.FusedSubjectsByRootSubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _studentsTableAdapter As StudentsTableAdapter
        
        Private _studentsbyPKTableAdapter As StudentsbyPKTableAdapter
        
        Private _curriculumTableAdapter As CurriculumTableAdapter
        
        Private _curriculumbyCourseTableAdapter As CurriculumbyCourseTableAdapter
        
        Private _studentsbyTypeTableAdapter As StudentsbyTypeTableAdapter
        
        Private _previousSchoolsByStudentPKTableAdapter As PreviousSchoolsByStudentPKTableAdapter
        
        Private _previousSchoolsTableAdapter As PreviousSchoolsTableAdapter
        
        Private _registrationNumbersTableAdapter As RegistrationNumbersTableAdapter
        
        Private _registrationNumbersBySemYearPKTableAdapter As RegistrationNumbersBySemYearPKTableAdapter
        
        Private _registrationNumbersByStudentSemYearPKTableAdapter As RegistrationNumbersByStudentSemYearPKTableAdapter
        
        Private _curriculumbyCoursebySubjectTableAdapter As CurriculumbyCoursebySubjectTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsTableAdapter() As StudentsTableAdapter
            Get
                Return Me._studentsTableAdapter
            End Get
            Set
                Me._studentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsbyPKTableAdapter() As StudentsbyPKTableAdapter
            Get
                Return Me._studentsbyPKTableAdapter
            End Get
            Set
                Me._studentsbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CurriculumTableAdapter() As CurriculumTableAdapter
            Get
                Return Me._curriculumTableAdapter
            End Get
            Set
                Me._curriculumTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CurriculumbyCourseTableAdapter() As CurriculumbyCourseTableAdapter
            Get
                Return Me._curriculumbyCourseTableAdapter
            End Get
            Set
                Me._curriculumbyCourseTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsbyTypeTableAdapter() As StudentsbyTypeTableAdapter
            Get
                Return Me._studentsbyTypeTableAdapter
            End Get
            Set
                Me._studentsbyTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PreviousSchoolsByStudentPKTableAdapter() As PreviousSchoolsByStudentPKTableAdapter
            Get
                Return Me._previousSchoolsByStudentPKTableAdapter
            End Get
            Set
                Me._previousSchoolsByStudentPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PreviousSchoolsTableAdapter() As PreviousSchoolsTableAdapter
            Get
                Return Me._previousSchoolsTableAdapter
            End Get
            Set
                Me._previousSchoolsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrationNumbersTableAdapter() As RegistrationNumbersTableAdapter
            Get
                Return Me._registrationNumbersTableAdapter
            End Get
            Set
                Me._registrationNumbersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrationNumbersBySemYearPKTableAdapter() As RegistrationNumbersBySemYearPKTableAdapter
            Get
                Return Me._registrationNumbersBySemYearPKTableAdapter
            End Get
            Set
                Me._registrationNumbersBySemYearPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrationNumbersByStudentSemYearPKTableAdapter() As RegistrationNumbersByStudentSemYearPKTableAdapter
            Get
                Return Me._registrationNumbersByStudentSemYearPKTableAdapter
            End Get
            Set
                Me._registrationNumbersByStudentSemYearPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CurriculumbyCoursebySubjectTableAdapter() As CurriculumbyCoursebySubjectTableAdapter
            Get
                Return Me._curriculumbyCoursebySubjectTableAdapter
            End Get
            Set
                Me._curriculumbyCoursebySubjectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsTableAdapter.Connection
                End If
                If ((Not (Me._studentsbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsbyPKTableAdapter.Connection
                End If
                If ((Not (Me._curriculumTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._curriculumTableAdapter.Connection) Is Nothing)) Then
                    Return Me._curriculumTableAdapter.Connection
                End If
                If ((Not (Me._curriculumbyCourseTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._curriculumbyCourseTableAdapter.Connection) Is Nothing)) Then
                    Return Me._curriculumbyCourseTableAdapter.Connection
                End If
                If ((Not (Me._studentsbyTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsbyTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsbyTypeTableAdapter.Connection
                End If
                If ((Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._previousSchoolsByStudentPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._previousSchoolsByStudentPKTableAdapter.Connection
                End If
                If ((Not (Me._previousSchoolsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._previousSchoolsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._previousSchoolsTableAdapter.Connection
                End If
                If ((Not (Me._registrationNumbersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrationNumbersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrationNumbersTableAdapter.Connection
                End If
                If ((Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrationNumbersBySemYearPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrationNumbersBySemYearPKTableAdapter.Connection
                End If
                If ((Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection
                End If
                If ((Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._curriculumbyCoursebySubjectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._curriculumbyCoursebySubjectTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsReg2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrationNumbersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersBySemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrationNumbersBySemYearPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCoursebySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._curriculumbyCoursebySubjectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersByStudentSemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrationNumbersByStudentSemYearPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PreviousSchools.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._previousSchoolsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Curriculum.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._curriculumTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PreviousSchoolsByStudentPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._previousSchoolsByStudentPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentsbyType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsbyTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._curriculumbyCourseTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsReg2, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrationNumbersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersBySemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrationNumbersBySemYearPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCoursebySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._curriculumbyCoursebySubjectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersByStudentSemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrationNumbersByStudentSemYearPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PreviousSchools.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._previousSchoolsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Curriculum.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._curriculumTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PreviousSchoolsByStudentPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._previousSchoolsByStudentPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentsbyType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsbyTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._curriculumbyCourseTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsReg2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._curriculumbyCourseTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentsbyType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsbyTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PreviousSchoolsByStudentPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._previousSchoolsByStudentPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Curriculum.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._curriculumTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PreviousSchools.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._previousSchoolsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersByStudentSemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrationNumbersByStudentSemYearPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CurriculumbyCoursebySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._curriculumbyCoursebySubjectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbersBySemYearPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrationNumbersBySemYearPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrationNumbers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrationNumbersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsReg2) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentsbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._curriculumTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._curriculumTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._curriculumbyCourseTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._curriculumbyCourseTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentsbyTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsbyTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._previousSchoolsByStudentPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._previousSchoolsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._previousSchoolsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._registrationNumbersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrationNumbersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrationNumbersBySemYearPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._curriculumbyCoursebySubjectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsTableAdapter, Me._studentsTableAdapter.Connection)
                    Me._studentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsbyPKTableAdapter, Me._studentsbyPKTableAdapter.Connection)
                    Me._studentsbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._curriculumTableAdapter, Me._curriculumTableAdapter.Connection)
                    Me._curriculumTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._curriculumTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._curriculumTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._curriculumTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._curriculumbyCourseTableAdapter, Me._curriculumbyCourseTableAdapter.Connection)
                    Me._curriculumbyCourseTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumbyCourseTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._curriculumbyCourseTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._curriculumbyCourseTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._curriculumbyCourseTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsbyTypeTableAdapter, Me._studentsbyTypeTableAdapter.Connection)
                    Me._studentsbyTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsbyTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsbyTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsbyTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._previousSchoolsByStudentPKTableAdapter, Me._previousSchoolsByStudentPKTableAdapter.Connection)
                    Me._previousSchoolsByStudentPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._previousSchoolsByStudentPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._previousSchoolsByStudentPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._previousSchoolsByStudentPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._previousSchoolsByStudentPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._previousSchoolsTableAdapter, Me._previousSchoolsTableAdapter.Connection)
                    Me._previousSchoolsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._previousSchoolsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._previousSchoolsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._previousSchoolsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._previousSchoolsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrationNumbersTableAdapter, Me._registrationNumbersTableAdapter.Connection)
                    Me._registrationNumbersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrationNumbersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrationNumbersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrationNumbersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrationNumbersBySemYearPKTableAdapter, Me._registrationNumbersBySemYearPKTableAdapter.Connection)
                    Me._registrationNumbersBySemYearPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersBySemYearPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrationNumbersBySemYearPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrationNumbersBySemYearPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrationNumbersBySemYearPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrationNumbersByStudentSemYearPKTableAdapter, Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection)
                    Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersByStudentSemYearPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrationNumbersByStudentSemYearPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrationNumbersByStudentSemYearPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrationNumbersByStudentSemYearPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._curriculumbyCoursebySubjectTableAdapter, Me._curriculumbyCoursebySubjectTableAdapter.Connection)
                    Me._curriculumbyCoursebySubjectTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumbyCoursebySubjectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._curriculumbyCoursebySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._curriculumbyCoursebySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._curriculumbyCoursebySubjectTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    Me._studentsTableAdapter.Connection = CType(revertConnections(Me._studentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    Me._studentsbyPKTableAdapter.Connection = CType(revertConnections(Me._studentsbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._curriculumTableAdapter) Is Nothing) Then
                    Me._curriculumTableAdapter.Connection = CType(revertConnections(Me._curriculumTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._curriculumbyCourseTableAdapter) Is Nothing) Then
                    Me._curriculumbyCourseTableAdapter.Connection = CType(revertConnections(Me._curriculumbyCourseTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumbyCourseTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentsbyTypeTableAdapter) Is Nothing) Then
                    Me._studentsbyTypeTableAdapter.Connection = CType(revertConnections(Me._studentsbyTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._previousSchoolsByStudentPKTableAdapter) Is Nothing) Then
                    Me._previousSchoolsByStudentPKTableAdapter.Connection = CType(revertConnections(Me._previousSchoolsByStudentPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._previousSchoolsByStudentPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._previousSchoolsTableAdapter) Is Nothing) Then
                    Me._previousSchoolsTableAdapter.Connection = CType(revertConnections(Me._previousSchoolsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._previousSchoolsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrationNumbersTableAdapter) Is Nothing) Then
                    Me._registrationNumbersTableAdapter.Connection = CType(revertConnections(Me._registrationNumbersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrationNumbersBySemYearPKTableAdapter) Is Nothing) Then
                    Me._registrationNumbersBySemYearPKTableAdapter.Connection = CType(revertConnections(Me._registrationNumbersBySemYearPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersBySemYearPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrationNumbersByStudentSemYearPKTableAdapter) Is Nothing) Then
                    Me._registrationNumbersByStudentSemYearPKTableAdapter.Connection = CType(revertConnections(Me._registrationNumbersByStudentSemYearPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrationNumbersByStudentSemYearPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._curriculumbyCoursebySubjectTableAdapter) Is Nothing) Then
                    Me._curriculumbyCoursebySubjectTableAdapter.Connection = CType(revertConnections(Me._curriculumbyCoursebySubjectTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._curriculumbyCoursebySubjectTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
