'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSchool"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSchool
    Inherits Global.System.Data.DataSet
    
    Private tableSchoolYear As SchoolYearDataTable
    
    Private tableSemester As SemesterDataTable
    
    Private tableSchoolResources As SchoolResourcesDataTable
    
    Private tableSubjects As SubjectsDataTable
    
    Private tableSubjectsByPriKey As SubjectsByPriKeyDataTable
    
    Private tableTeachers As TeachersDataTable
    
    Private tableCourses As CoursesDataTable
    
    Private tableBlockSectionTuition As BlockSectionTuitionDataTable
    
    Private tablePrefTable As PrefTableDataTable
    
    Private tableSchoolYearbyPK As SchoolYearbyPKDataTable
    
    Private tableBlockSectionTuitionbyPK As BlockSectionTuitionbyPKDataTable
    
    Private tableSYOffering As SYOfferingDataTable
    
    Private tableSubjectsByCName As SubjectsByCNameDataTable
    
    Private tableSchoolResourcesbyCName As SchoolResourcesbyCNameDataTable
    
    Private tableTeachersbyCName As TeachersbyCNameDataTable
    
    Private tableSYOfferingTeacherMon As SYOfferingTeacherMonDataTable
    
    Private tableTeachersbyID As TeachersbyIDDataTable
    
    Private tableSYOfferingTeacherTue As SYOfferingTeacherTueDataTable
    
    Private tableSYOfferingTeacherWed As SYOfferingTeacherWedDataTable
    
    Private tableSYOfferingTeacherThurs As SYOfferingTeacherThursDataTable
    
    Private tableSYOfferingTeacherFri As SYOfferingTeacherFriDataTable
    
    Private tableSYOfferingTeacherSat As SYOfferingTeacherSatDataTable
    
    Private tableSYOfferingTeacherSun As SYOfferingTeacherSunDataTable
    
    Private tableSYOfferingResourceMon As SYOfferingResourceMonDataTable
    
    Private tableSYOfferingResourceTues As SYOfferingResourceTuesDataTable
    
    Private tableSYOfferingResourceWed As SYOfferingResourceWedDataTable
    
    Private tableSYOfferingResourceThurs As SYOfferingResourceThursDataTable
    
    Private tableSYOfferingResourceFri As SYOfferingResourceFriDataTable
    
    Private tableSYOfferingResourceSat As SYOfferingResourceSatDataTable
    
    Private tableSYOfferingResourceSun As SYOfferingResourceSunDataTable
    
    Private tableSchoolResourcesbyPk As SchoolResourcesbyPkDataTable
    
    Private tableSYOfferingbyTeacher As SYOfferingbyTeacherDataTable
    
    Private tableTRTypes As TRTypesDataTable
    
    Private tableTRTypesbyName As TRTypesbyNameDataTable
    
    Private tableTRTypesbyPK As TRTypesbyPKDataTable
    
    Private tableCoursesbyPk As CoursesbyPkDataTable
    
    Private tableTemplateTeacherLoad As TemplateTeacherLoadDataTable
    
    Private tableSemesterbyPk As SemesterbyPkDataTable
    
    Private tableSubjectsByPreReq As SubjectsByPreReqDataTable
    
    Private tableTRTypesbyCodeandCourse As TRTypesbyCodeandCourseDataTable
    
    Private tableTRTypesbySubject As TRTypesbySubjectDataTable
    
    Private tableCoursesbyName As CoursesbyNameDataTable
    
    Private tableSubjectsorderedbyName As SubjectsorderedbyNameDataTable
    
    Private tableExams As ExamsDataTable
    
    Private tableExamsBySemSY As ExamsBySemSYDataTable
    
    Private tableTemplateTeacherLoadReport As TemplateTeacherLoadReportDataTable
    
    Private tableTemplateTeacherLoadExtraHours As TemplateTeacherLoadExtraHoursDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SchoolYear")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolYearDataTable(ds.Tables("SchoolYear")))
            End If
            If (Not (ds.Tables("Semester")) Is Nothing) Then
                MyBase.Tables.Add(New SemesterDataTable(ds.Tables("Semester")))
            End If
            If (Not (ds.Tables("SchoolResources")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesDataTable(ds.Tables("SchoolResources")))
            End If
            If (Not (ds.Tables("Subjects")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsDataTable(ds.Tables("Subjects")))
            End If
            If (Not (ds.Tables("SubjectsByPriKey")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByPriKeyDataTable(ds.Tables("SubjectsByPriKey")))
            End If
            If (Not (ds.Tables("Teachers")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersDataTable(ds.Tables("Teachers")))
            End If
            If (Not (ds.Tables("Courses")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesDataTable(ds.Tables("Courses")))
            End If
            If (Not (ds.Tables("BlockSectionTuition")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionDataTable(ds.Tables("BlockSectionTuition")))
            End If
            If (Not (ds.Tables("PrefTable")) Is Nothing) Then
                MyBase.Tables.Add(New PrefTableDataTable(ds.Tables("PrefTable")))
            End If
            If (Not (ds.Tables("SchoolYearbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolYearbyPKDataTable(ds.Tables("SchoolYearbyPK")))
            End If
            If (Not (ds.Tables("BlockSectionTuitionbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionbyPKDataTable(ds.Tables("BlockSectionTuitionbyPK")))
            End If
            If (Not (ds.Tables("SYOffering")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingDataTable(ds.Tables("SYOffering")))
            End If
            If (Not (ds.Tables("SubjectsByCName")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByCNameDataTable(ds.Tables("SubjectsByCName")))
            End If
            If (Not (ds.Tables("SchoolResourcesbyCName")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesbyCNameDataTable(ds.Tables("SchoolResourcesbyCName")))
            End If
            If (Not (ds.Tables("TeachersbyCName")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersbyCNameDataTable(ds.Tables("TeachersbyCName")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherMon")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherMonDataTable(ds.Tables("SYOfferingTeacherMon")))
            End If
            If (Not (ds.Tables("TeachersbyID")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersbyIDDataTable(ds.Tables("TeachersbyID")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherTue")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherTueDataTable(ds.Tables("SYOfferingTeacherTue")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherWed")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherWedDataTable(ds.Tables("SYOfferingTeacherWed")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherThurs")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherThursDataTable(ds.Tables("SYOfferingTeacherThurs")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherFri")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherFriDataTable(ds.Tables("SYOfferingTeacherFri")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherSat")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherSatDataTable(ds.Tables("SYOfferingTeacherSat")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherSun")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherSunDataTable(ds.Tables("SYOfferingTeacherSun")))
            End If
            If (Not (ds.Tables("SYOfferingResourceMon")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceMonDataTable(ds.Tables("SYOfferingResourceMon")))
            End If
            If (Not (ds.Tables("SYOfferingResourceTues")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceTuesDataTable(ds.Tables("SYOfferingResourceTues")))
            End If
            If (Not (ds.Tables("SYOfferingResourceWed")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceWedDataTable(ds.Tables("SYOfferingResourceWed")))
            End If
            If (Not (ds.Tables("SYOfferingResourceThurs")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceThursDataTable(ds.Tables("SYOfferingResourceThurs")))
            End If
            If (Not (ds.Tables("SYOfferingResourceFri")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceFriDataTable(ds.Tables("SYOfferingResourceFri")))
            End If
            If (Not (ds.Tables("SYOfferingResourceSat")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceSatDataTable(ds.Tables("SYOfferingResourceSat")))
            End If
            If (Not (ds.Tables("SYOfferingResourceSun")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceSunDataTable(ds.Tables("SYOfferingResourceSun")))
            End If
            If (Not (ds.Tables("SchoolResourcesbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesbyPkDataTable(ds.Tables("SchoolResourcesbyPk")))
            End If
            If (Not (ds.Tables("SYOfferingbyTeacher")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyTeacherDataTable(ds.Tables("SYOfferingbyTeacher")))
            End If
            If (Not (ds.Tables("TRTypes")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesDataTable(ds.Tables("TRTypes")))
            End If
            If (Not (ds.Tables("TRTypesbyName")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyNameDataTable(ds.Tables("TRTypesbyName")))
            End If
            If (Not (ds.Tables("TRTypesbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyPKDataTable(ds.Tables("TRTypesbyPK")))
            End If
            If (Not (ds.Tables("CoursesbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesbyPkDataTable(ds.Tables("CoursesbyPk")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadDataTable(ds.Tables("TemplateTeacherLoad")))
            End If
            If (Not (ds.Tables("SemesterbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New SemesterbyPkDataTable(ds.Tables("SemesterbyPk")))
            End If
            If (Not (ds.Tables("SubjectsByPreReq")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByPreReqDataTable(ds.Tables("SubjectsByPreReq")))
            End If
            If (Not (ds.Tables("TRTypesbyCodeandCourse")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyCodeandCourseDataTable(ds.Tables("TRTypesbyCodeandCourse")))
            End If
            If (Not (ds.Tables("TRTypesbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbySubjectDataTable(ds.Tables("TRTypesbySubject")))
            End If
            If (Not (ds.Tables("CoursesbyName")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesbyNameDataTable(ds.Tables("CoursesbyName")))
            End If
            If (Not (ds.Tables("SubjectsorderedbyName")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsorderedbyNameDataTable(ds.Tables("SubjectsorderedbyName")))
            End If
            If (Not (ds.Tables("Exams")) Is Nothing) Then
                MyBase.Tables.Add(New ExamsDataTable(ds.Tables("Exams")))
            End If
            If (Not (ds.Tables("ExamsBySemSY")) Is Nothing) Then
                MyBase.Tables.Add(New ExamsBySemSYDataTable(ds.Tables("ExamsBySemSY")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadReportDataTable(ds.Tables("TemplateTeacherLoadReport")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoadExtraHours")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadExtraHoursDataTable(ds.Tables("TemplateTeacherLoadExtraHours")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchoolYear() As SchoolYearDataTable
        Get
            Return Me.tableSchoolYear
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Semester() As SemesterDataTable
        Get
            Return Me.tableSemester
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchoolResources() As SchoolResourcesDataTable
        Get
            Return Me.tableSchoolResources
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Subjects() As SubjectsDataTable
        Get
            Return Me.tableSubjects
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubjectsByPriKey() As SubjectsByPriKeyDataTable
        Get
            Return Me.tableSubjectsByPriKey
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Teachers() As TeachersDataTable
        Get
            Return Me.tableTeachers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Courses() As CoursesDataTable
        Get
            Return Me.tableCourses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlockSectionTuition() As BlockSectionTuitionDataTable
        Get
            Return Me.tableBlockSectionTuition
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrefTable() As PrefTableDataTable
        Get
            Return Me.tablePrefTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchoolYearbyPK() As SchoolYearbyPKDataTable
        Get
            Return Me.tableSchoolYearbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlockSectionTuitionbyPK() As BlockSectionTuitionbyPKDataTable
        Get
            Return Me.tableBlockSectionTuitionbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOffering() As SYOfferingDataTable
        Get
            Return Me.tableSYOffering
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubjectsByCName() As SubjectsByCNameDataTable
        Get
            Return Me.tableSubjectsByCName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchoolResourcesbyCName() As SchoolResourcesbyCNameDataTable
        Get
            Return Me.tableSchoolResourcesbyCName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TeachersbyCName() As TeachersbyCNameDataTable
        Get
            Return Me.tableTeachersbyCName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherMon() As SYOfferingTeacherMonDataTable
        Get
            Return Me.tableSYOfferingTeacherMon
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TeachersbyID() As TeachersbyIDDataTable
        Get
            Return Me.tableTeachersbyID
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherTue() As SYOfferingTeacherTueDataTable
        Get
            Return Me.tableSYOfferingTeacherTue
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherWed() As SYOfferingTeacherWedDataTable
        Get
            Return Me.tableSYOfferingTeacherWed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherThurs() As SYOfferingTeacherThursDataTable
        Get
            Return Me.tableSYOfferingTeacherThurs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherFri() As SYOfferingTeacherFriDataTable
        Get
            Return Me.tableSYOfferingTeacherFri
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherSat() As SYOfferingTeacherSatDataTable
        Get
            Return Me.tableSYOfferingTeacherSat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingTeacherSun() As SYOfferingTeacherSunDataTable
        Get
            Return Me.tableSYOfferingTeacherSun
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceMon() As SYOfferingResourceMonDataTable
        Get
            Return Me.tableSYOfferingResourceMon
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceTues() As SYOfferingResourceTuesDataTable
        Get
            Return Me.tableSYOfferingResourceTues
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceWed() As SYOfferingResourceWedDataTable
        Get
            Return Me.tableSYOfferingResourceWed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceThurs() As SYOfferingResourceThursDataTable
        Get
            Return Me.tableSYOfferingResourceThurs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceFri() As SYOfferingResourceFriDataTable
        Get
            Return Me.tableSYOfferingResourceFri
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceSat() As SYOfferingResourceSatDataTable
        Get
            Return Me.tableSYOfferingResourceSat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingResourceSun() As SYOfferingResourceSunDataTable
        Get
            Return Me.tableSYOfferingResourceSun
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchoolResourcesbyPk() As SchoolResourcesbyPkDataTable
        Get
            Return Me.tableSchoolResourcesbyPk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingbyTeacher() As SYOfferingbyTeacherDataTable
        Get
            Return Me.tableSYOfferingbyTeacher
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRTypes() As TRTypesDataTable
        Get
            Return Me.tableTRTypes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRTypesbyName() As TRTypesbyNameDataTable
        Get
            Return Me.tableTRTypesbyName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRTypesbyPK() As TRTypesbyPKDataTable
        Get
            Return Me.tableTRTypesbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CoursesbyPk() As CoursesbyPkDataTable
        Get
            Return Me.tableCoursesbyPk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateTeacherLoad() As TemplateTeacherLoadDataTable
        Get
            Return Me.tableTemplateTeacherLoad
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SemesterbyPk() As SemesterbyPkDataTable
        Get
            Return Me.tableSemesterbyPk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubjectsByPreReq() As SubjectsByPreReqDataTable
        Get
            Return Me.tableSubjectsByPreReq
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRTypesbyCodeandCourse() As TRTypesbyCodeandCourseDataTable
        Get
            Return Me.tableTRTypesbyCodeandCourse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRTypesbySubject() As TRTypesbySubjectDataTable
        Get
            Return Me.tableTRTypesbySubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CoursesbyName() As CoursesbyNameDataTable
        Get
            Return Me.tableCoursesbyName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubjectsorderedbyName() As SubjectsorderedbyNameDataTable
        Get
            Return Me.tableSubjectsorderedbyName
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Exams() As ExamsDataTable
        Get
            Return Me.tableExams
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExamsBySemSY() As ExamsBySemSYDataTable
        Get
            Return Me.tableExamsBySemSY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateTeacherLoadReport() As TemplateTeacherLoadReportDataTable
        Get
            Return Me.tableTemplateTeacherLoadReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateTeacherLoadExtraHours() As TemplateTeacherLoadExtraHoursDataTable
        Get
            Return Me.tableTemplateTeacherLoadExtraHours
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSchool = CType(MyBase.Clone,dsSchool)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SchoolYear")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolYearDataTable(ds.Tables("SchoolYear")))
            End If
            If (Not (ds.Tables("Semester")) Is Nothing) Then
                MyBase.Tables.Add(New SemesterDataTable(ds.Tables("Semester")))
            End If
            If (Not (ds.Tables("SchoolResources")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesDataTable(ds.Tables("SchoolResources")))
            End If
            If (Not (ds.Tables("Subjects")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsDataTable(ds.Tables("Subjects")))
            End If
            If (Not (ds.Tables("SubjectsByPriKey")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByPriKeyDataTable(ds.Tables("SubjectsByPriKey")))
            End If
            If (Not (ds.Tables("Teachers")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersDataTable(ds.Tables("Teachers")))
            End If
            If (Not (ds.Tables("Courses")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesDataTable(ds.Tables("Courses")))
            End If
            If (Not (ds.Tables("BlockSectionTuition")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionDataTable(ds.Tables("BlockSectionTuition")))
            End If
            If (Not (ds.Tables("PrefTable")) Is Nothing) Then
                MyBase.Tables.Add(New PrefTableDataTable(ds.Tables("PrefTable")))
            End If
            If (Not (ds.Tables("SchoolYearbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolYearbyPKDataTable(ds.Tables("SchoolYearbyPK")))
            End If
            If (Not (ds.Tables("BlockSectionTuitionbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionbyPKDataTable(ds.Tables("BlockSectionTuitionbyPK")))
            End If
            If (Not (ds.Tables("SYOffering")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingDataTable(ds.Tables("SYOffering")))
            End If
            If (Not (ds.Tables("SubjectsByCName")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByCNameDataTable(ds.Tables("SubjectsByCName")))
            End If
            If (Not (ds.Tables("SchoolResourcesbyCName")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesbyCNameDataTable(ds.Tables("SchoolResourcesbyCName")))
            End If
            If (Not (ds.Tables("TeachersbyCName")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersbyCNameDataTable(ds.Tables("TeachersbyCName")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherMon")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherMonDataTable(ds.Tables("SYOfferingTeacherMon")))
            End If
            If (Not (ds.Tables("TeachersbyID")) Is Nothing) Then
                MyBase.Tables.Add(New TeachersbyIDDataTable(ds.Tables("TeachersbyID")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherTue")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherTueDataTable(ds.Tables("SYOfferingTeacherTue")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherWed")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherWedDataTable(ds.Tables("SYOfferingTeacherWed")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherThurs")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherThursDataTable(ds.Tables("SYOfferingTeacherThurs")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherFri")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherFriDataTable(ds.Tables("SYOfferingTeacherFri")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherSat")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherSatDataTable(ds.Tables("SYOfferingTeacherSat")))
            End If
            If (Not (ds.Tables("SYOfferingTeacherSun")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingTeacherSunDataTable(ds.Tables("SYOfferingTeacherSun")))
            End If
            If (Not (ds.Tables("SYOfferingResourceMon")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceMonDataTable(ds.Tables("SYOfferingResourceMon")))
            End If
            If (Not (ds.Tables("SYOfferingResourceTues")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceTuesDataTable(ds.Tables("SYOfferingResourceTues")))
            End If
            If (Not (ds.Tables("SYOfferingResourceWed")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceWedDataTable(ds.Tables("SYOfferingResourceWed")))
            End If
            If (Not (ds.Tables("SYOfferingResourceThurs")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceThursDataTable(ds.Tables("SYOfferingResourceThurs")))
            End If
            If (Not (ds.Tables("SYOfferingResourceFri")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceFriDataTable(ds.Tables("SYOfferingResourceFri")))
            End If
            If (Not (ds.Tables("SYOfferingResourceSat")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceSatDataTable(ds.Tables("SYOfferingResourceSat")))
            End If
            If (Not (ds.Tables("SYOfferingResourceSun")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingResourceSunDataTable(ds.Tables("SYOfferingResourceSun")))
            End If
            If (Not (ds.Tables("SchoolResourcesbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New SchoolResourcesbyPkDataTable(ds.Tables("SchoolResourcesbyPk")))
            End If
            If (Not (ds.Tables("SYOfferingbyTeacher")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyTeacherDataTable(ds.Tables("SYOfferingbyTeacher")))
            End If
            If (Not (ds.Tables("TRTypes")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesDataTable(ds.Tables("TRTypes")))
            End If
            If (Not (ds.Tables("TRTypesbyName")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyNameDataTable(ds.Tables("TRTypesbyName")))
            End If
            If (Not (ds.Tables("TRTypesbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyPKDataTable(ds.Tables("TRTypesbyPK")))
            End If
            If (Not (ds.Tables("CoursesbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesbyPkDataTable(ds.Tables("CoursesbyPk")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadDataTable(ds.Tables("TemplateTeacherLoad")))
            End If
            If (Not (ds.Tables("SemesterbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New SemesterbyPkDataTable(ds.Tables("SemesterbyPk")))
            End If
            If (Not (ds.Tables("SubjectsByPreReq")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsByPreReqDataTable(ds.Tables("SubjectsByPreReq")))
            End If
            If (Not (ds.Tables("TRTypesbyCodeandCourse")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbyCodeandCourseDataTable(ds.Tables("TRTypesbyCodeandCourse")))
            End If
            If (Not (ds.Tables("TRTypesbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New TRTypesbySubjectDataTable(ds.Tables("TRTypesbySubject")))
            End If
            If (Not (ds.Tables("CoursesbyName")) Is Nothing) Then
                MyBase.Tables.Add(New CoursesbyNameDataTable(ds.Tables("CoursesbyName")))
            End If
            If (Not (ds.Tables("SubjectsorderedbyName")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsorderedbyNameDataTable(ds.Tables("SubjectsorderedbyName")))
            End If
            If (Not (ds.Tables("Exams")) Is Nothing) Then
                MyBase.Tables.Add(New ExamsDataTable(ds.Tables("Exams")))
            End If
            If (Not (ds.Tables("ExamsBySemSY")) Is Nothing) Then
                MyBase.Tables.Add(New ExamsBySemSYDataTable(ds.Tables("ExamsBySemSY")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadReportDataTable(ds.Tables("TemplateTeacherLoadReport")))
            End If
            If (Not (ds.Tables("TemplateTeacherLoadExtraHours")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateTeacherLoadExtraHoursDataTable(ds.Tables("TemplateTeacherLoadExtraHours")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSchoolYear = CType(MyBase.Tables("SchoolYear"),SchoolYearDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchoolYear) Is Nothing) Then
                Me.tableSchoolYear.InitVars
            End If
        End If
        Me.tableSemester = CType(MyBase.Tables("Semester"),SemesterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSemester) Is Nothing) Then
                Me.tableSemester.InitVars
            End If
        End If
        Me.tableSchoolResources = CType(MyBase.Tables("SchoolResources"),SchoolResourcesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchoolResources) Is Nothing) Then
                Me.tableSchoolResources.InitVars
            End If
        End If
        Me.tableSubjects = CType(MyBase.Tables("Subjects"),SubjectsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjects) Is Nothing) Then
                Me.tableSubjects.InitVars
            End If
        End If
        Me.tableSubjectsByPriKey = CType(MyBase.Tables("SubjectsByPriKey"),SubjectsByPriKeyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjectsByPriKey) Is Nothing) Then
                Me.tableSubjectsByPriKey.InitVars
            End If
        End If
        Me.tableTeachers = CType(MyBase.Tables("Teachers"),TeachersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTeachers) Is Nothing) Then
                Me.tableTeachers.InitVars
            End If
        End If
        Me.tableCourses = CType(MyBase.Tables("Courses"),CoursesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCourses) Is Nothing) Then
                Me.tableCourses.InitVars
            End If
        End If
        Me.tableBlockSectionTuition = CType(MyBase.Tables("BlockSectionTuition"),BlockSectionTuitionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBlockSectionTuition) Is Nothing) Then
                Me.tableBlockSectionTuition.InitVars
            End If
        End If
        Me.tablePrefTable = CType(MyBase.Tables("PrefTable"),PrefTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrefTable) Is Nothing) Then
                Me.tablePrefTable.InitVars
            End If
        End If
        Me.tableSchoolYearbyPK = CType(MyBase.Tables("SchoolYearbyPK"),SchoolYearbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchoolYearbyPK) Is Nothing) Then
                Me.tableSchoolYearbyPK.InitVars
            End If
        End If
        Me.tableBlockSectionTuitionbyPK = CType(MyBase.Tables("BlockSectionTuitionbyPK"),BlockSectionTuitionbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBlockSectionTuitionbyPK) Is Nothing) Then
                Me.tableBlockSectionTuitionbyPK.InitVars
            End If
        End If
        Me.tableSYOffering = CType(MyBase.Tables("SYOffering"),SYOfferingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOffering) Is Nothing) Then
                Me.tableSYOffering.InitVars
            End If
        End If
        Me.tableSubjectsByCName = CType(MyBase.Tables("SubjectsByCName"),SubjectsByCNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjectsByCName) Is Nothing) Then
                Me.tableSubjectsByCName.InitVars
            End If
        End If
        Me.tableSchoolResourcesbyCName = CType(MyBase.Tables("SchoolResourcesbyCName"),SchoolResourcesbyCNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchoolResourcesbyCName) Is Nothing) Then
                Me.tableSchoolResourcesbyCName.InitVars
            End If
        End If
        Me.tableTeachersbyCName = CType(MyBase.Tables("TeachersbyCName"),TeachersbyCNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTeachersbyCName) Is Nothing) Then
                Me.tableTeachersbyCName.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherMon = CType(MyBase.Tables("SYOfferingTeacherMon"),SYOfferingTeacherMonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherMon) Is Nothing) Then
                Me.tableSYOfferingTeacherMon.InitVars
            End If
        End If
        Me.tableTeachersbyID = CType(MyBase.Tables("TeachersbyID"),TeachersbyIDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTeachersbyID) Is Nothing) Then
                Me.tableTeachersbyID.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherTue = CType(MyBase.Tables("SYOfferingTeacherTue"),SYOfferingTeacherTueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherTue) Is Nothing) Then
                Me.tableSYOfferingTeacherTue.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherWed = CType(MyBase.Tables("SYOfferingTeacherWed"),SYOfferingTeacherWedDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherWed) Is Nothing) Then
                Me.tableSYOfferingTeacherWed.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherThurs = CType(MyBase.Tables("SYOfferingTeacherThurs"),SYOfferingTeacherThursDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherThurs) Is Nothing) Then
                Me.tableSYOfferingTeacherThurs.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherFri = CType(MyBase.Tables("SYOfferingTeacherFri"),SYOfferingTeacherFriDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherFri) Is Nothing) Then
                Me.tableSYOfferingTeacherFri.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherSat = CType(MyBase.Tables("SYOfferingTeacherSat"),SYOfferingTeacherSatDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherSat) Is Nothing) Then
                Me.tableSYOfferingTeacherSat.InitVars
            End If
        End If
        Me.tableSYOfferingTeacherSun = CType(MyBase.Tables("SYOfferingTeacherSun"),SYOfferingTeacherSunDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingTeacherSun) Is Nothing) Then
                Me.tableSYOfferingTeacherSun.InitVars
            End If
        End If
        Me.tableSYOfferingResourceMon = CType(MyBase.Tables("SYOfferingResourceMon"),SYOfferingResourceMonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceMon) Is Nothing) Then
                Me.tableSYOfferingResourceMon.InitVars
            End If
        End If
        Me.tableSYOfferingResourceTues = CType(MyBase.Tables("SYOfferingResourceTues"),SYOfferingResourceTuesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceTues) Is Nothing) Then
                Me.tableSYOfferingResourceTues.InitVars
            End If
        End If
        Me.tableSYOfferingResourceWed = CType(MyBase.Tables("SYOfferingResourceWed"),SYOfferingResourceWedDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceWed) Is Nothing) Then
                Me.tableSYOfferingResourceWed.InitVars
            End If
        End If
        Me.tableSYOfferingResourceThurs = CType(MyBase.Tables("SYOfferingResourceThurs"),SYOfferingResourceThursDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceThurs) Is Nothing) Then
                Me.tableSYOfferingResourceThurs.InitVars
            End If
        End If
        Me.tableSYOfferingResourceFri = CType(MyBase.Tables("SYOfferingResourceFri"),SYOfferingResourceFriDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceFri) Is Nothing) Then
                Me.tableSYOfferingResourceFri.InitVars
            End If
        End If
        Me.tableSYOfferingResourceSat = CType(MyBase.Tables("SYOfferingResourceSat"),SYOfferingResourceSatDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceSat) Is Nothing) Then
                Me.tableSYOfferingResourceSat.InitVars
            End If
        End If
        Me.tableSYOfferingResourceSun = CType(MyBase.Tables("SYOfferingResourceSun"),SYOfferingResourceSunDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingResourceSun) Is Nothing) Then
                Me.tableSYOfferingResourceSun.InitVars
            End If
        End If
        Me.tableSchoolResourcesbyPk = CType(MyBase.Tables("SchoolResourcesbyPk"),SchoolResourcesbyPkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchoolResourcesbyPk) Is Nothing) Then
                Me.tableSchoolResourcesbyPk.InitVars
            End If
        End If
        Me.tableSYOfferingbyTeacher = CType(MyBase.Tables("SYOfferingbyTeacher"),SYOfferingbyTeacherDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingbyTeacher) Is Nothing) Then
                Me.tableSYOfferingbyTeacher.InitVars
            End If
        End If
        Me.tableTRTypes = CType(MyBase.Tables("TRTypes"),TRTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRTypes) Is Nothing) Then
                Me.tableTRTypes.InitVars
            End If
        End If
        Me.tableTRTypesbyName = CType(MyBase.Tables("TRTypesbyName"),TRTypesbyNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRTypesbyName) Is Nothing) Then
                Me.tableTRTypesbyName.InitVars
            End If
        End If
        Me.tableTRTypesbyPK = CType(MyBase.Tables("TRTypesbyPK"),TRTypesbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRTypesbyPK) Is Nothing) Then
                Me.tableTRTypesbyPK.InitVars
            End If
        End If
        Me.tableCoursesbyPk = CType(MyBase.Tables("CoursesbyPk"),CoursesbyPkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCoursesbyPk) Is Nothing) Then
                Me.tableCoursesbyPk.InitVars
            End If
        End If
        Me.tableTemplateTeacherLoad = CType(MyBase.Tables("TemplateTeacherLoad"),TemplateTeacherLoadDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateTeacherLoad) Is Nothing) Then
                Me.tableTemplateTeacherLoad.InitVars
            End If
        End If
        Me.tableSemesterbyPk = CType(MyBase.Tables("SemesterbyPk"),SemesterbyPkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSemesterbyPk) Is Nothing) Then
                Me.tableSemesterbyPk.InitVars
            End If
        End If
        Me.tableSubjectsByPreReq = CType(MyBase.Tables("SubjectsByPreReq"),SubjectsByPreReqDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjectsByPreReq) Is Nothing) Then
                Me.tableSubjectsByPreReq.InitVars
            End If
        End If
        Me.tableTRTypesbyCodeandCourse = CType(MyBase.Tables("TRTypesbyCodeandCourse"),TRTypesbyCodeandCourseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRTypesbyCodeandCourse) Is Nothing) Then
                Me.tableTRTypesbyCodeandCourse.InitVars
            End If
        End If
        Me.tableTRTypesbySubject = CType(MyBase.Tables("TRTypesbySubject"),TRTypesbySubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRTypesbySubject) Is Nothing) Then
                Me.tableTRTypesbySubject.InitVars
            End If
        End If
        Me.tableCoursesbyName = CType(MyBase.Tables("CoursesbyName"),CoursesbyNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCoursesbyName) Is Nothing) Then
                Me.tableCoursesbyName.InitVars
            End If
        End If
        Me.tableSubjectsorderedbyName = CType(MyBase.Tables("SubjectsorderedbyName"),SubjectsorderedbyNameDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjectsorderedbyName) Is Nothing) Then
                Me.tableSubjectsorderedbyName.InitVars
            End If
        End If
        Me.tableExams = CType(MyBase.Tables("Exams"),ExamsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExams) Is Nothing) Then
                Me.tableExams.InitVars
            End If
        End If
        Me.tableExamsBySemSY = CType(MyBase.Tables("ExamsBySemSY"),ExamsBySemSYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableExamsBySemSY) Is Nothing) Then
                Me.tableExamsBySemSY.InitVars
            End If
        End If
        Me.tableTemplateTeacherLoadReport = CType(MyBase.Tables("TemplateTeacherLoadReport"),TemplateTeacherLoadReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateTeacherLoadReport) Is Nothing) Then
                Me.tableTemplateTeacherLoadReport.InitVars
            End If
        End If
        Me.tableTemplateTeacherLoadExtraHours = CType(MyBase.Tables("TemplateTeacherLoadExtraHours"),TemplateTeacherLoadExtraHoursDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateTeacherLoadExtraHours) Is Nothing) Then
                Me.tableTemplateTeacherLoadExtraHours.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSchool"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSchool.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSchoolYear = New SchoolYearDataTable
        MyBase.Tables.Add(Me.tableSchoolYear)
        Me.tableSemester = New SemesterDataTable
        MyBase.Tables.Add(Me.tableSemester)
        Me.tableSchoolResources = New SchoolResourcesDataTable
        MyBase.Tables.Add(Me.tableSchoolResources)
        Me.tableSubjects = New SubjectsDataTable
        MyBase.Tables.Add(Me.tableSubjects)
        Me.tableSubjectsByPriKey = New SubjectsByPriKeyDataTable
        MyBase.Tables.Add(Me.tableSubjectsByPriKey)
        Me.tableTeachers = New TeachersDataTable
        MyBase.Tables.Add(Me.tableTeachers)
        Me.tableCourses = New CoursesDataTable
        MyBase.Tables.Add(Me.tableCourses)
        Me.tableBlockSectionTuition = New BlockSectionTuitionDataTable
        MyBase.Tables.Add(Me.tableBlockSectionTuition)
        Me.tablePrefTable = New PrefTableDataTable
        MyBase.Tables.Add(Me.tablePrefTable)
        Me.tableSchoolYearbyPK = New SchoolYearbyPKDataTable
        MyBase.Tables.Add(Me.tableSchoolYearbyPK)
        Me.tableBlockSectionTuitionbyPK = New BlockSectionTuitionbyPKDataTable
        MyBase.Tables.Add(Me.tableBlockSectionTuitionbyPK)
        Me.tableSYOffering = New SYOfferingDataTable
        MyBase.Tables.Add(Me.tableSYOffering)
        Me.tableSubjectsByCName = New SubjectsByCNameDataTable
        MyBase.Tables.Add(Me.tableSubjectsByCName)
        Me.tableSchoolResourcesbyCName = New SchoolResourcesbyCNameDataTable
        MyBase.Tables.Add(Me.tableSchoolResourcesbyCName)
        Me.tableTeachersbyCName = New TeachersbyCNameDataTable
        MyBase.Tables.Add(Me.tableTeachersbyCName)
        Me.tableSYOfferingTeacherMon = New SYOfferingTeacherMonDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherMon)
        Me.tableTeachersbyID = New TeachersbyIDDataTable
        MyBase.Tables.Add(Me.tableTeachersbyID)
        Me.tableSYOfferingTeacherTue = New SYOfferingTeacherTueDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherTue)
        Me.tableSYOfferingTeacherWed = New SYOfferingTeacherWedDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherWed)
        Me.tableSYOfferingTeacherThurs = New SYOfferingTeacherThursDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherThurs)
        Me.tableSYOfferingTeacherFri = New SYOfferingTeacherFriDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherFri)
        Me.tableSYOfferingTeacherSat = New SYOfferingTeacherSatDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherSat)
        Me.tableSYOfferingTeacherSun = New SYOfferingTeacherSunDataTable
        MyBase.Tables.Add(Me.tableSYOfferingTeacherSun)
        Me.tableSYOfferingResourceMon = New SYOfferingResourceMonDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceMon)
        Me.tableSYOfferingResourceTues = New SYOfferingResourceTuesDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceTues)
        Me.tableSYOfferingResourceWed = New SYOfferingResourceWedDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceWed)
        Me.tableSYOfferingResourceThurs = New SYOfferingResourceThursDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceThurs)
        Me.tableSYOfferingResourceFri = New SYOfferingResourceFriDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceFri)
        Me.tableSYOfferingResourceSat = New SYOfferingResourceSatDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceSat)
        Me.tableSYOfferingResourceSun = New SYOfferingResourceSunDataTable
        MyBase.Tables.Add(Me.tableSYOfferingResourceSun)
        Me.tableSchoolResourcesbyPk = New SchoolResourcesbyPkDataTable
        MyBase.Tables.Add(Me.tableSchoolResourcesbyPk)
        Me.tableSYOfferingbyTeacher = New SYOfferingbyTeacherDataTable
        MyBase.Tables.Add(Me.tableSYOfferingbyTeacher)
        Me.tableTRTypes = New TRTypesDataTable
        MyBase.Tables.Add(Me.tableTRTypes)
        Me.tableTRTypesbyName = New TRTypesbyNameDataTable
        MyBase.Tables.Add(Me.tableTRTypesbyName)
        Me.tableTRTypesbyPK = New TRTypesbyPKDataTable
        MyBase.Tables.Add(Me.tableTRTypesbyPK)
        Me.tableCoursesbyPk = New CoursesbyPkDataTable
        MyBase.Tables.Add(Me.tableCoursesbyPk)
        Me.tableTemplateTeacherLoad = New TemplateTeacherLoadDataTable
        MyBase.Tables.Add(Me.tableTemplateTeacherLoad)
        Me.tableSemesterbyPk = New SemesterbyPkDataTable
        MyBase.Tables.Add(Me.tableSemesterbyPk)
        Me.tableSubjectsByPreReq = New SubjectsByPreReqDataTable
        MyBase.Tables.Add(Me.tableSubjectsByPreReq)
        Me.tableTRTypesbyCodeandCourse = New TRTypesbyCodeandCourseDataTable
        MyBase.Tables.Add(Me.tableTRTypesbyCodeandCourse)
        Me.tableTRTypesbySubject = New TRTypesbySubjectDataTable
        MyBase.Tables.Add(Me.tableTRTypesbySubject)
        Me.tableCoursesbyName = New CoursesbyNameDataTable
        MyBase.Tables.Add(Me.tableCoursesbyName)
        Me.tableSubjectsorderedbyName = New SubjectsorderedbyNameDataTable
        MyBase.Tables.Add(Me.tableSubjectsorderedbyName)
        Me.tableExams = New ExamsDataTable
        MyBase.Tables.Add(Me.tableExams)
        Me.tableExamsBySemSY = New ExamsBySemSYDataTable
        MyBase.Tables.Add(Me.tableExamsBySemSY)
        Me.tableTemplateTeacherLoadReport = New TemplateTeacherLoadReportDataTable
        MyBase.Tables.Add(Me.tableTemplateTeacherLoadReport)
        Me.tableTemplateTeacherLoadExtraHours = New TemplateTeacherLoadExtraHoursDataTable
        MyBase.Tables.Add(Me.tableTemplateTeacherLoadExtraHours)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchoolYear() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSemester() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchoolResources() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjects() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjectsByPriKey() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTeachers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCourses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBlockSectionTuition() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrefTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchoolYearbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBlockSectionTuitionbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOffering() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjectsByCName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchoolResourcesbyCName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTeachersbyCName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherMon() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTeachersbyID() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherTue() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherWed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherThurs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherFri() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherSat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingTeacherSun() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceMon() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceTues() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceWed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceThurs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceFri() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceSat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingResourceSun() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSchoolResourcesbyPk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingbyTeacher() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRTypes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRTypesbyName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRTypesbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCoursesbyPk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateTeacherLoad() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSemesterbyPk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjectsByPreReq() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRTypesbyCodeandCourse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTRTypesbySubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCoursesbyName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjectsorderedbyName() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExams() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeExamsBySemSY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateTeacherLoadReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateTeacherLoadExtraHours() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSchool = New dsSchool
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SchoolYearRowChangeEventHandler(ByVal sender As Object, ByVal e As SchoolYearRowChangeEvent)
    
    Public Delegate Sub SemesterRowChangeEventHandler(ByVal sender As Object, ByVal e As SemesterRowChangeEvent)
    
    Public Delegate Sub SchoolResourcesRowChangeEventHandler(ByVal sender As Object, ByVal e As SchoolResourcesRowChangeEvent)
    
    Public Delegate Sub SubjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsRowChangeEvent)
    
    Public Delegate Sub SubjectsByPriKeyRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsByPriKeyRowChangeEvent)
    
    Public Delegate Sub TeachersRowChangeEventHandler(ByVal sender As Object, ByVal e As TeachersRowChangeEvent)
    
    Public Delegate Sub CoursesRowChangeEventHandler(ByVal sender As Object, ByVal e As CoursesRowChangeEvent)
    
    Public Delegate Sub BlockSectionTuitionRowChangeEventHandler(ByVal sender As Object, ByVal e As BlockSectionTuitionRowChangeEvent)
    
    Public Delegate Sub PrefTableRowChangeEventHandler(ByVal sender As Object, ByVal e As PrefTableRowChangeEvent)
    
    Public Delegate Sub SchoolYearbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As SchoolYearbyPKRowChangeEvent)
    
    Public Delegate Sub BlockSectionTuitionbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As BlockSectionTuitionbyPKRowChangeEvent)
    
    Public Delegate Sub SYOfferingRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingRowChangeEvent)
    
    Public Delegate Sub SubjectsByCNameRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsByCNameRowChangeEvent)
    
    Public Delegate Sub SchoolResourcesbyCNameRowChangeEventHandler(ByVal sender As Object, ByVal e As SchoolResourcesbyCNameRowChangeEvent)
    
    Public Delegate Sub TeachersbyCNameRowChangeEventHandler(ByVal sender As Object, ByVal e As TeachersbyCNameRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherMonRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherMonRowChangeEvent)
    
    Public Delegate Sub TeachersbyIDRowChangeEventHandler(ByVal sender As Object, ByVal e As TeachersbyIDRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherTueRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherTueRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherWedRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherWedRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherThursRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherThursRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherFriRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherFriRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherSatRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherSatRowChangeEvent)
    
    Public Delegate Sub SYOfferingTeacherSunRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingTeacherSunRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceMonRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceMonRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceTuesRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceTuesRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceWedRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceWedRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceThursRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceThursRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceFriRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceFriRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceSatRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceSatRowChangeEvent)
    
    Public Delegate Sub SYOfferingResourceSunRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingResourceSunRowChangeEvent)
    
    Public Delegate Sub SchoolResourcesbyPkRowChangeEventHandler(ByVal sender As Object, ByVal e As SchoolResourcesbyPkRowChangeEvent)
    
    Public Delegate Sub SYOfferingbyTeacherRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingbyTeacherRowChangeEvent)
    
    Public Delegate Sub TRTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As TRTypesRowChangeEvent)
    
    Public Delegate Sub TRTypesbyNameRowChangeEventHandler(ByVal sender As Object, ByVal e As TRTypesbyNameRowChangeEvent)
    
    Public Delegate Sub TRTypesbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As TRTypesbyPKRowChangeEvent)
    
    Public Delegate Sub CoursesbyPkRowChangeEventHandler(ByVal sender As Object, ByVal e As CoursesbyPkRowChangeEvent)
    
    Public Delegate Sub TemplateTeacherLoadRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateTeacherLoadRowChangeEvent)
    
    Public Delegate Sub SemesterbyPkRowChangeEventHandler(ByVal sender As Object, ByVal e As SemesterbyPkRowChangeEvent)
    
    Public Delegate Sub SubjectsByPreReqRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsByPreReqRowChangeEvent)
    
    Public Delegate Sub TRTypesbyCodeandCourseRowChangeEventHandler(ByVal sender As Object, ByVal e As TRTypesbyCodeandCourseRowChangeEvent)
    
    Public Delegate Sub TRTypesbySubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As TRTypesbySubjectRowChangeEvent)
    
    Public Delegate Sub CoursesbyNameRowChangeEventHandler(ByVal sender As Object, ByVal e As CoursesbyNameRowChangeEvent)
    
    Public Delegate Sub SubjectsorderedbyNameRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsorderedbyNameRowChangeEvent)
    
    Public Delegate Sub ExamsRowChangeEventHandler(ByVal sender As Object, ByVal e As ExamsRowChangeEvent)
    
    Public Delegate Sub ExamsBySemSYRowChangeEventHandler(ByVal sender As Object, ByVal e As ExamsBySemSYRowChangeEvent)
    
    Public Delegate Sub TemplateTeacherLoadReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateTeacherLoadReportRowChangeEvent)
    
    Public Delegate Sub TemplateTeacherLoadExtraHoursRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateTeacherLoadExtraHoursRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchoolYearDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchoolYearRow)
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnsorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SchoolYear"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchoolYearRow
            Get
                Return CType(Me.Rows(index),SchoolYearRow)
            End Get
        End Property
        
        Public Event SchoolYearRowChanging As SchoolYearRowChangeEventHandler
        
        Public Event SchoolYearRowChanged As SchoolYearRowChangeEventHandler
        
        Public Event SchoolYearRowDeleting As SchoolYearRowChangeEventHandler
        
        Public Event SchoolYearRowDeleted As SchoolYearRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchoolYearRow(ByVal row As SchoolYearRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchoolYearRow(ByVal SchoolYear As String, ByVal sorter As Integer) As SchoolYearRow
            Dim rowSchoolYearRow As SchoolYearRow = CType(Me.NewRow,SchoolYearRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, sorter}
            rowSchoolYearRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchoolYearRow)
            Return rowSchoolYearRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysypk(ByVal sypk As Integer) As SchoolYearRow
            Return CType(Me.Rows.Find(New Object() {sypk}),SchoolYearRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchoolYearDataTable = CType(MyBase.Clone,SchoolYearDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchoolYearDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnsorter = MyBase.Columns("sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsypk}, true))
            Me.columnsypk.AutoIncrement = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsypk.ReadOnly = true
            Me.columnsypk.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchoolYearRow() As SchoolYearRow
            Return CType(Me.NewRow,SchoolYearRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchoolYearRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchoolYearRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchoolYearRowChangedEvent) Is Nothing) Then
                RaiseEvent SchoolYearRowChanged(Me, New SchoolYearRowChangeEvent(CType(e.Row,SchoolYearRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchoolYearRowChangingEvent) Is Nothing) Then
                RaiseEvent SchoolYearRowChanging(Me, New SchoolYearRowChangeEvent(CType(e.Row,SchoolYearRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchoolYearRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchoolYearRowDeleted(Me, New SchoolYearRowChangeEvent(CType(e.Row,SchoolYearRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchoolYearRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchoolYearRowDeleting(Me, New SchoolYearRowChangeEvent(CType(e.Row,SchoolYearRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchoolYearRow(ByVal row As SchoolYearRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchoolYearDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SemesterDataTable
        Inherits Global.System.Data.TypedTableBase(Of SemesterRow)
        
        Private columnSemPK As Global.System.Data.DataColumn
        
        Private columnSemesterName As Global.System.Data.DataColumn
        
        Private columnsorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Semester"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SemesterRow
            Get
                Return CType(Me.Rows(index),SemesterRow)
            End Get
        End Property
        
        Public Event SemesterRowChanging As SemesterRowChangeEventHandler
        
        Public Event SemesterRowChanged As SemesterRowChangeEventHandler
        
        Public Event SemesterRowDeleting As SemesterRowChangeEventHandler
        
        Public Event SemesterRowDeleted As SemesterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSemesterRow(ByVal row As SemesterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSemesterRow(ByVal SemesterName As String, ByVal sorter As Integer) As SemesterRow
            Dim rowSemesterRow As SemesterRow = CType(Me.NewRow,SemesterRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SemesterName, sorter}
            rowSemesterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSemesterRow)
            Return rowSemesterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySemPK(ByVal SemPK As Integer) As SemesterRow
            Return CType(Me.Rows.Find(New Object() {SemPK}),SemesterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SemesterDataTable = CType(MyBase.Clone,SemesterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SemesterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSemPK = MyBase.Columns("SemPK")
            Me.columnSemesterName = MyBase.Columns("SemesterName")
            Me.columnsorter = MyBase.Columns("sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSemPK = New Global.System.Data.DataColumn("SemPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemPK)
            Me.columnSemesterName = New Global.System.Data.DataColumn("SemesterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterName)
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSemPK}, true))
            Me.columnSemPK.AutoIncrement = true
            Me.columnSemPK.AllowDBNull = false
            Me.columnSemPK.ReadOnly = true
            Me.columnSemPK.Unique = true
            Me.columnSemesterName.AllowDBNull = false
            Me.columnSemesterName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSemesterRow() As SemesterRow
            Return CType(Me.NewRow,SemesterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SemesterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SemesterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SemesterRowChangedEvent) Is Nothing) Then
                RaiseEvent SemesterRowChanged(Me, New SemesterRowChangeEvent(CType(e.Row,SemesterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SemesterRowChangingEvent) Is Nothing) Then
                RaiseEvent SemesterRowChanging(Me, New SemesterRowChangeEvent(CType(e.Row,SemesterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SemesterRowDeletedEvent) Is Nothing) Then
                RaiseEvent SemesterRowDeleted(Me, New SemesterRowChangeEvent(CType(e.Row,SemesterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SemesterRowDeletingEvent) Is Nothing) Then
                RaiseEvent SemesterRowDeleting(Me, New SemesterRowChangeEvent(CType(e.Row,SemesterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSemesterRow(ByVal row As SemesterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SemesterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchoolResourcesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchoolResourcesRow)
        
        Private columnResourcePrikey As Global.System.Data.DataColumn
        
        Private columnResourceID As Global.System.Data.DataColumn
        
        Private columnResourceName As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SchoolResources"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourcePrikeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourcePrikey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchoolResourcesRow
            Get
                Return CType(Me.Rows(index),SchoolResourcesRow)
            End Get
        End Property
        
        Public Event SchoolResourcesRowChanging As SchoolResourcesRowChangeEventHandler
        
        Public Event SchoolResourcesRowChanged As SchoolResourcesRowChangeEventHandler
        
        Public Event SchoolResourcesRowDeleting As SchoolResourcesRowChangeEventHandler
        
        Public Event SchoolResourcesRowDeleted As SchoolResourcesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchoolResourcesRow(ByVal row As SchoolResourcesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchoolResourcesRow(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As SchoolResourcesRow
            Dim rowSchoolResourcesRow As SchoolResourcesRow = CType(Me.NewRow,SchoolResourcesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ResourceID, ResourceName, Location, Remarks}
            rowSchoolResourcesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchoolResourcesRow)
            Return rowSchoolResourcesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByResourcePrikey(ByVal ResourcePrikey As Integer) As SchoolResourcesRow
            Return CType(Me.Rows.Find(New Object() {ResourcePrikey}),SchoolResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchoolResourcesDataTable = CType(MyBase.Clone,SchoolResourcesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchoolResourcesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnResourcePrikey = MyBase.Columns("ResourcePrikey")
            Me.columnResourceID = MyBase.Columns("ResourceID")
            Me.columnResourceName = MyBase.Columns("ResourceName")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnResourcePrikey = New Global.System.Data.DataColumn("ResourcePrikey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourcePrikey)
            Me.columnResourceID = New Global.System.Data.DataColumn("ResourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceID)
            Me.columnResourceName = New Global.System.Data.DataColumn("ResourceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceName)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnResourcePrikey}, true))
            Me.columnResourcePrikey.AutoIncrement = true
            Me.columnResourcePrikey.AllowDBNull = false
            Me.columnResourcePrikey.ReadOnly = true
            Me.columnResourcePrikey.Unique = true
            Me.columnResourceID.AllowDBNull = false
            Me.columnResourceID.MaxLength = 50
            Me.columnResourceName.AllowDBNull = false
            Me.columnResourceName.MaxLength = 50
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchoolResourcesRow() As SchoolResourcesRow
            Return CType(Me.NewRow,SchoolResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchoolResourcesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchoolResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchoolResourcesRowChangedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesRowChanged(Me, New SchoolResourcesRowChangeEvent(CType(e.Row,SchoolResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchoolResourcesRowChangingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesRowChanging(Me, New SchoolResourcesRowChangeEvent(CType(e.Row,SchoolResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchoolResourcesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesRowDeleted(Me, New SchoolResourcesRowChangeEvent(CType(e.Row,SchoolResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchoolResourcesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesRowDeleting(Me, New SchoolResourcesRowChangeEvent(CType(e.Row,SchoolResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchoolResourcesRow(ByVal row As SchoolResourcesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchoolResourcesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnlabunits As Global.System.Data.DataColumn
        
        Private columnmajor As Global.System.Data.DataColumn
        
        Private columnNumOfPreReq As Global.System.Data.DataColumn
        
        Private columnprereq2 As Global.System.Data.DataColumn
        
        Private columnprereq3 As Global.System.Data.DataColumn
        
        Private columnprereq4 As Global.System.Data.DataColumn
        
        Private columnprereq5 As Global.System.Data.DataColumn
        
        Private columnprereq6 As Global.System.Data.DataColumn
        
        Private columnprereq7 As Global.System.Data.DataColumn
        
        Private columnCreditGroup As Global.System.Data.DataColumn
        
        Private columninactive As Global.System.Data.DataColumn
        
        Private columnRLEunits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Subjects"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property labunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlabunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property majorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumOfPreReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumOfPreReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RLEunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRLEunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsRow
            Get
                Return CType(Me.Rows(index),SubjectsRow)
            End Get
        End Property
        
        Public Event SubjectsRowChanging As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowChanged As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowDeleting As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowDeleted As SubjectsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsRow(ByVal row As SubjectsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsRow( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal labunits As Single,  _
                    ByVal major As Boolean,  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Integer,  _
                    ByVal prereq3 As Integer,  _
                    ByVal prereq4 As Integer,  _
                    ByVal prereq5 As Integer,  _
                    ByVal prereq6 As Integer,  _
                    ByVal prereq7 As Integer,  _
                    ByVal CreditGroup As Integer,  _
                    ByVal inactive As Boolean,  _
                    ByVal RLEunits As Integer) As SubjectsRow
            Dim rowSubjectsRow As SubjectsRow = CType(Me.NewRow,SubjectsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, Remarks, units, prereq, labunits, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, CreditGroup, inactive, RLEunits}
            rowSubjectsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsRow)
            Return rowSubjectsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsDataTable = CType(MyBase.Clone,SubjectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnunits = MyBase.Columns("units")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnlabunits = MyBase.Columns("labunits")
            Me.columnmajor = MyBase.Columns("major")
            Me.columnNumOfPreReq = MyBase.Columns("NumOfPreReq")
            Me.columnprereq2 = MyBase.Columns("prereq2")
            Me.columnprereq3 = MyBase.Columns("prereq3")
            Me.columnprereq4 = MyBase.Columns("prereq4")
            Me.columnprereq5 = MyBase.Columns("prereq5")
            Me.columnprereq6 = MyBase.Columns("prereq6")
            Me.columnprereq7 = MyBase.Columns("prereq7")
            Me.columnCreditGroup = MyBase.Columns("CreditGroup")
            Me.columninactive = MyBase.Columns("inactive")
            Me.columnRLEunits = MyBase.Columns("RLEunits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnlabunits = New Global.System.Data.DataColumn("labunits", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlabunits)
            Me.columnmajor = New Global.System.Data.DataColumn("major", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmajor)
            Me.columnNumOfPreReq = New Global.System.Data.DataColumn("NumOfPreReq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumOfPreReq)
            Me.columnprereq2 = New Global.System.Data.DataColumn("prereq2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq2)
            Me.columnprereq3 = New Global.System.Data.DataColumn("prereq3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq3)
            Me.columnprereq4 = New Global.System.Data.DataColumn("prereq4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq4)
            Me.columnprereq5 = New Global.System.Data.DataColumn("prereq5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq5)
            Me.columnprereq6 = New Global.System.Data.DataColumn("prereq6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq6)
            Me.columnprereq7 = New Global.System.Data.DataColumn("prereq7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq7)
            Me.columnCreditGroup = New Global.System.Data.DataColumn("CreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditGroup)
            Me.columninactive = New Global.System.Data.DataColumn("inactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninactive)
            Me.columnRLEunits = New Global.System.Data.DataColumn("RLEunits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRLEunits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 5000
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
            Me.columnunits.AllowDBNull = false
            Me.columnprereq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsRow() As SubjectsRow
            Return CType(Me.NewRow,SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsRowChanged(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsRowChanging(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsRowDeleted(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsRowDeleting(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsRow(ByVal row As SubjectsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsByPriKeyDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsByPriKeyRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnlabunits As Global.System.Data.DataColumn
        
        Private columnmajor As Global.System.Data.DataColumn
        
        Private columnRLEunits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubjectsByPriKey"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property labunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlabunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property majorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RLEunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRLEunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsByPriKeyRow
            Get
                Return CType(Me.Rows(index),SubjectsByPriKeyRow)
            End Get
        End Property
        
        Public Event SubjectsByPriKeyRowChanging As SubjectsByPriKeyRowChangeEventHandler
        
        Public Event SubjectsByPriKeyRowChanged As SubjectsByPriKeyRowChangeEventHandler
        
        Public Event SubjectsByPriKeyRowDeleting As SubjectsByPriKeyRowChangeEventHandler
        
        Public Event SubjectsByPriKeyRowDeleted As SubjectsByPriKeyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsByPriKeyRow(ByVal row As SubjectsByPriKeyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsByPriKeyRow(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer, ByVal labunits As Single, ByVal major As Boolean, ByVal RLEunits As Integer) As SubjectsByPriKeyRow
            Dim rowSubjectsByPriKeyRow As SubjectsByPriKeyRow = CType(Me.NewRow,SubjectsByPriKeyRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, Remarks, units, prereq, labunits, major, RLEunits}
            rowSubjectsByPriKeyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsByPriKeyRow)
            Return rowSubjectsByPriKeyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsByPriKeyRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsByPriKeyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsByPriKeyDataTable = CType(MyBase.Clone,SubjectsByPriKeyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsByPriKeyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnunits = MyBase.Columns("units")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnlabunits = MyBase.Columns("labunits")
            Me.columnmajor = MyBase.Columns("major")
            Me.columnRLEunits = MyBase.Columns("RLEunits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnlabunits = New Global.System.Data.DataColumn("labunits", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlabunits)
            Me.columnmajor = New Global.System.Data.DataColumn("major", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmajor)
            Me.columnRLEunits = New Global.System.Data.DataColumn("RLEunits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRLEunits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 1000
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
            Me.columnunits.AllowDBNull = false
            Me.columnprereq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsByPriKeyRow() As SubjectsByPriKeyRow
            Return CType(Me.NewRow,SubjectsByPriKeyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsByPriKeyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsByPriKeyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsByPriKeyRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsByPriKeyRowChanged(Me, New SubjectsByPriKeyRowChangeEvent(CType(e.Row,SubjectsByPriKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsByPriKeyRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsByPriKeyRowChanging(Me, New SubjectsByPriKeyRowChangeEvent(CType(e.Row,SubjectsByPriKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsByPriKeyRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsByPriKeyRowDeleted(Me, New SubjectsByPriKeyRowChangeEvent(CType(e.Row,SubjectsByPriKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsByPriKeyRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsByPriKeyRowDeleting(Me, New SubjectsByPriKeyRowChangeEvent(CType(e.Row,SubjectsByPriKeyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsByPriKeyRow(ByVal row As SubjectsByPriKeyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsByPriKeyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TeachersDataTable
        Inherits Global.System.Data.TypedTableBase(Of TeachersRow)
        
        Private columnTeacherPriKey As Global.System.Data.DataColumn
        
        Private columnTeacherIDNum As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columncellphone As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Teachers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherIDNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherIDNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cellphoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncellphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TeachersRow
            Get
                Return CType(Me.Rows(index),TeachersRow)
            End Get
        End Property
        
        Public Event TeachersRowChanging As TeachersRowChangeEventHandler
        
        Public Event TeachersRowChanged As TeachersRowChangeEventHandler
        
        Public Event TeachersRowDeleting As TeachersRowChangeEventHandler
        
        Public Event TeachersRowDeleted As TeachersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTeachersRow(ByVal row As TeachersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTeachersRow(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As TeachersRow
            Dim rowTeachersRow As TeachersRow = CType(Me.NewRow,TeachersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks}
            rowTeachersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTeachersRow)
            Return rowTeachersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTeacherPriKey(ByVal TeacherPriKey As Integer) As TeachersRow
            Return CType(Me.Rows.Find(New Object() {TeacherPriKey}),TeachersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TeachersDataTable = CType(MyBase.Clone,TeachersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TeachersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTeacherPriKey = MyBase.Columns("TeacherPriKey")
            Me.columnTeacherIDNum = MyBase.Columns("TeacherIDNum")
            Me.columnName = MyBase.Columns("Name")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnphone = MyBase.Columns("phone")
            Me.columncellphone = MyBase.Columns("cellphone")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTeacherPriKey = New Global.System.Data.DataColumn("TeacherPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherPriKey)
            Me.columnTeacherIDNum = New Global.System.Data.DataColumn("TeacherIDNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherIDNum)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columncellphone = New Global.System.Data.DataColumn("cellphone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncellphone)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTeacherPriKey}, true))
            Me.columnTeacherPriKey.AutoIncrement = true
            Me.columnTeacherPriKey.AllowDBNull = false
            Me.columnTeacherPriKey.ReadOnly = true
            Me.columnTeacherPriKey.Unique = true
            Me.columnTeacherIDNum.AllowDBNull = false
            Me.columnTeacherIDNum.MaxLength = 50
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 50
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 50
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 50
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 50
            Me.columncellphone.AllowDBNull = false
            Me.columncellphone.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTeachersRow() As TeachersRow
            Return CType(Me.NewRow,TeachersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TeachersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TeachersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TeachersRowChangedEvent) Is Nothing) Then
                RaiseEvent TeachersRowChanged(Me, New TeachersRowChangeEvent(CType(e.Row,TeachersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TeachersRowChangingEvent) Is Nothing) Then
                RaiseEvent TeachersRowChanging(Me, New TeachersRowChangeEvent(CType(e.Row,TeachersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TeachersRowDeletedEvent) Is Nothing) Then
                RaiseEvent TeachersRowDeleted(Me, New TeachersRowChangeEvent(CType(e.Row,TeachersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TeachersRowDeletingEvent) Is Nothing) Then
                RaiseEvent TeachersRowDeleting(Me, New TeachersRowChangeEvent(CType(e.Row,TeachersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTeachersRow(ByVal row As TeachersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TeachersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CoursesDataTable
        Inherits Global.System.Data.TypedTableBase(Of CoursesRow)
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnCourseID As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnspecial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Courses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property specialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoursesRow
            Get
                Return CType(Me.Rows(index),CoursesRow)
            End Get
        End Property
        
        Public Event CoursesRowChanging As CoursesRowChangeEventHandler
        
        Public Event CoursesRowChanged As CoursesRowChangeEventHandler
        
        Public Event CoursesRowDeleting As CoursesRowChangeEventHandler
        
        Public Event CoursesRowDeleted As CoursesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCoursesRow(ByVal row As CoursesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCoursesRow(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As CoursesRow
            Dim rowCoursesRow As CoursesRow = CType(Me.NewRow,CoursesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CourseID, CourseName, Remarks, special}
            rowCoursesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCoursesRow)
            Return rowCoursesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycoursepk(ByVal coursepk As Integer) As CoursesRow
            Return CType(Me.Rows.Find(New Object() {coursepk}),CoursesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CoursesDataTable = CType(MyBase.Clone,CoursesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CoursesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnCourseID = MyBase.Columns("CourseID")
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnspecial = MyBase.Columns("special")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnCourseID = New Global.System.Data.DataColumn("CourseID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseID)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnspecial = New Global.System.Data.DataColumn("special", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecial)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncoursepk}, true))
            Me.columncoursepk.AutoIncrement = true
            Me.columncoursepk.AllowDBNull = false
            Me.columncoursepk.ReadOnly = true
            Me.columncoursepk.Unique = true
            Me.columnCourseID.AllowDBNull = false
            Me.columnCourseID.MaxLength = 50
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCoursesRow() As CoursesRow
            Return CType(Me.NewRow,CoursesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CoursesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CoursesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoursesRowChangedEvent) Is Nothing) Then
                RaiseEvent CoursesRowChanged(Me, New CoursesRowChangeEvent(CType(e.Row,CoursesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoursesRowChangingEvent) Is Nothing) Then
                RaiseEvent CoursesRowChanging(Me, New CoursesRowChangeEvent(CType(e.Row,CoursesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoursesRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoursesRowDeleted(Me, New CoursesRowChangeEvent(CType(e.Row,CoursesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoursesRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoursesRowDeleting(Me, New CoursesRowChangeEvent(CType(e.Row,CoursesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCoursesRow(ByVal row As CoursesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CoursesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BlockSectionTuitionDataTable
        Inherits Global.System.Data.TypedTableBase(Of BlockSectionTuitionRow)
        
        Private columnBlockSectionPK As Global.System.Data.DataColumn
        
        Private columnSEM As Global.System.Data.DataColumn
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        Private columneduyear As Global.System.Data.DataColumn
        
        Private columneffectivedate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BlockSectionTuition"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlockSectionPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlockSectionPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eduyearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneduyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property effectivedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffectivedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BlockSectionTuitionRow
            Get
                Return CType(Me.Rows(index),BlockSectionTuitionRow)
            End Get
        End Property
        
        Public Event BlockSectionTuitionRowChanging As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowChanged As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowDeleting As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowDeleted As BlockSectionTuitionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBlockSectionTuitionRow(ByVal row As BlockSectionTuitionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBlockSectionTuitionRow(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date) As BlockSectionTuitionRow
            Dim rowBlockSectionTuitionRow As BlockSectionTuitionRow = CType(Me.NewRow,BlockSectionTuitionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEM, course, subjectid, eduyear, effectivedate}
            rowBlockSectionTuitionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBlockSectionTuitionRow)
            Return rowBlockSectionTuitionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBlockSectionPK(ByVal BlockSectionPK As Integer) As BlockSectionTuitionRow
            Return CType(Me.Rows.Find(New Object() {BlockSectionPK}),BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BlockSectionTuitionDataTable = CType(MyBase.Clone,BlockSectionTuitionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BlockSectionTuitionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBlockSectionPK = MyBase.Columns("BlockSectionPK")
            Me.columnSEM = MyBase.Columns("SEM")
            Me.columncourse = MyBase.Columns("course")
            Me.columnsubjectid = MyBase.Columns("subjectid")
            Me.columneduyear = MyBase.Columns("eduyear")
            Me.columneffectivedate = MyBase.Columns("effectivedate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBlockSectionPK = New Global.System.Data.DataColumn("BlockSectionPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlockSectionPK)
            Me.columnSEM = New Global.System.Data.DataColumn("SEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEM)
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.columneduyear = New Global.System.Data.DataColumn("eduyear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneduyear)
            Me.columneffectivedate = New Global.System.Data.DataColumn("effectivedate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffectivedate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBlockSectionPK}, true))
            Me.columnBlockSectionPK.AutoIncrement = true
            Me.columnBlockSectionPK.AllowDBNull = false
            Me.columnBlockSectionPK.ReadOnly = true
            Me.columnBlockSectionPK.Unique = true
            Me.columnSEM.AllowDBNull = false
            Me.columncourse.AllowDBNull = false
            Me.columnsubjectid.AllowDBNull = false
            Me.columneduyear.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBlockSectionTuitionRow() As BlockSectionTuitionRow
            Return CType(Me.NewRow,BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BlockSectionTuitionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BlockSectionTuitionRowChangedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowChanged(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BlockSectionTuitionRowChangingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowChanging(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BlockSectionTuitionRowDeletedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowDeleted(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BlockSectionTuitionRowDeletingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowDeleting(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBlockSectionTuitionRow(ByVal row As BlockSectionTuitionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BlockSectionTuitionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PrefTableDataTable
        Inherits Global.System.Data.TypedTableBase(Of PrefTableRow)
        
        Private columnprefid As Global.System.Data.DataColumn
        
        Private columnPrefName As Global.System.Data.DataColumn
        
        Private columnPrefValue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PrefTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prefidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprefid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrefTableRow
            Get
                Return CType(Me.Rows(index),PrefTableRow)
            End Get
        End Property
        
        Public Event PrefTableRowChanging As PrefTableRowChangeEventHandler
        
        Public Event PrefTableRowChanged As PrefTableRowChangeEventHandler
        
        Public Event PrefTableRowDeleting As PrefTableRowChangeEventHandler
        
        Public Event PrefTableRowDeleted As PrefTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPrefTableRow(ByVal row As PrefTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPrefTableRow(ByVal PrefName As String, ByVal PrefValue As String) As PrefTableRow
            Dim rowPrefTableRow As PrefTableRow = CType(Me.NewRow,PrefTableRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PrefName, PrefValue}
            rowPrefTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPrefTableRow)
            Return rowPrefTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByprefid(ByVal prefid As Integer) As PrefTableRow
            Return CType(Me.Rows.Find(New Object() {prefid}),PrefTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PrefTableDataTable = CType(MyBase.Clone,PrefTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PrefTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnprefid = MyBase.Columns("prefid")
            Me.columnPrefName = MyBase.Columns("PrefName")
            Me.columnPrefValue = MyBase.Columns("PrefValue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnprefid = New Global.System.Data.DataColumn("prefid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprefid)
            Me.columnPrefName = New Global.System.Data.DataColumn("PrefName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefName)
            Me.columnPrefValue = New Global.System.Data.DataColumn("PrefValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefValue)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnprefid}, true))
            Me.columnprefid.AutoIncrement = true
            Me.columnprefid.AllowDBNull = false
            Me.columnprefid.ReadOnly = true
            Me.columnprefid.Unique = true
            Me.columnPrefName.AllowDBNull = false
            Me.columnPrefName.MaxLength = 50
            Me.columnPrefValue.AllowDBNull = false
            Me.columnPrefValue.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPrefTableRow() As PrefTableRow
            Return CType(Me.NewRow,PrefTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PrefTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PrefTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrefTableRowChangedEvent) Is Nothing) Then
                RaiseEvent PrefTableRowChanged(Me, New PrefTableRowChangeEvent(CType(e.Row,PrefTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrefTableRowChangingEvent) Is Nothing) Then
                RaiseEvent PrefTableRowChanging(Me, New PrefTableRowChangeEvent(CType(e.Row,PrefTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrefTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrefTableRowDeleted(Me, New PrefTableRowChangeEvent(CType(e.Row,PrefTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrefTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrefTableRowDeleting(Me, New PrefTableRowChangeEvent(CType(e.Row,PrefTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePrefTableRow(ByVal row As PrefTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PrefTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchoolYearbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchoolYearbyPKRow)
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnsorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SchoolYearbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchoolYearbyPKRow
            Get
                Return CType(Me.Rows(index),SchoolYearbyPKRow)
            End Get
        End Property
        
        Public Event SchoolYearbyPKRowChanging As SchoolYearbyPKRowChangeEventHandler
        
        Public Event SchoolYearbyPKRowChanged As SchoolYearbyPKRowChangeEventHandler
        
        Public Event SchoolYearbyPKRowDeleting As SchoolYearbyPKRowChangeEventHandler
        
        Public Event SchoolYearbyPKRowDeleted As SchoolYearbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchoolYearbyPKRow(ByVal row As SchoolYearbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchoolYearbyPKRow(ByVal SchoolYear As String, ByVal sorter As Integer) As SchoolYearbyPKRow
            Dim rowSchoolYearbyPKRow As SchoolYearbyPKRow = CType(Me.NewRow,SchoolYearbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, sorter}
            rowSchoolYearbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchoolYearbyPKRow)
            Return rowSchoolYearbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysypk(ByVal sypk As Integer) As SchoolYearbyPKRow
            Return CType(Me.Rows.Find(New Object() {sypk}),SchoolYearbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchoolYearbyPKDataTable = CType(MyBase.Clone,SchoolYearbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchoolYearbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnsorter = MyBase.Columns("sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsypk}, true))
            Me.columnsypk.AutoIncrement = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsypk.ReadOnly = true
            Me.columnsypk.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchoolYearbyPKRow() As SchoolYearbyPKRow
            Return CType(Me.NewRow,SchoolYearbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchoolYearbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchoolYearbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchoolYearbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent SchoolYearbyPKRowChanged(Me, New SchoolYearbyPKRowChangeEvent(CType(e.Row,SchoolYearbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchoolYearbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent SchoolYearbyPKRowChanging(Me, New SchoolYearbyPKRowChangeEvent(CType(e.Row,SchoolYearbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchoolYearbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchoolYearbyPKRowDeleted(Me, New SchoolYearbyPKRowChangeEvent(CType(e.Row,SchoolYearbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchoolYearbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchoolYearbyPKRowDeleting(Me, New SchoolYearbyPKRowChangeEvent(CType(e.Row,SchoolYearbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchoolYearbyPKRow(ByVal row As SchoolYearbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchoolYearbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BlockSectionTuitionbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of BlockSectionTuitionbyPKRow)
        
        Private columnBlockSectionPK As Global.System.Data.DataColumn
        
        Private columnSEM As Global.System.Data.DataColumn
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        Private columneduyear As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columneffectivedate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BlockSectionTuitionbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlockSectionPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlockSectionPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eduyearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneduyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property effectivedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffectivedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BlockSectionTuitionbyPKRow
            Get
                Return CType(Me.Rows(index),BlockSectionTuitionbyPKRow)
            End Get
        End Property
        
        Public Event BlockSectionTuitionbyPKRowChanging As BlockSectionTuitionbyPKRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyPKRowChanged As BlockSectionTuitionbyPKRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyPKRowDeleting As BlockSectionTuitionbyPKRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyPKRowDeleted As BlockSectionTuitionbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBlockSectionTuitionbyPKRow(ByVal row As BlockSectionTuitionbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBlockSectionTuitionbyPKRow(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal SY As Integer, ByVal effectivedate As Date) As BlockSectionTuitionbyPKRow
            Dim rowBlockSectionTuitionbyPKRow As BlockSectionTuitionbyPKRow = CType(Me.NewRow,BlockSectionTuitionbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEM, course, subjectid, eduyear, SY, effectivedate}
            rowBlockSectionTuitionbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBlockSectionTuitionbyPKRow)
            Return rowBlockSectionTuitionbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBlockSectionPK(ByVal BlockSectionPK As Integer) As BlockSectionTuitionbyPKRow
            Return CType(Me.Rows.Find(New Object() {BlockSectionPK}),BlockSectionTuitionbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BlockSectionTuitionbyPKDataTable = CType(MyBase.Clone,BlockSectionTuitionbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BlockSectionTuitionbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBlockSectionPK = MyBase.Columns("BlockSectionPK")
            Me.columnSEM = MyBase.Columns("SEM")
            Me.columncourse = MyBase.Columns("course")
            Me.columnsubjectid = MyBase.Columns("subjectid")
            Me.columneduyear = MyBase.Columns("eduyear")
            Me.columnSY = MyBase.Columns("SY")
            Me.columneffectivedate = MyBase.Columns("effectivedate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBlockSectionPK = New Global.System.Data.DataColumn("BlockSectionPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlockSectionPK)
            Me.columnSEM = New Global.System.Data.DataColumn("SEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEM)
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.columneduyear = New Global.System.Data.DataColumn("eduyear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneduyear)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columneffectivedate = New Global.System.Data.DataColumn("effectivedate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffectivedate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBlockSectionPK}, true))
            Me.columnBlockSectionPK.AutoIncrement = true
            Me.columnBlockSectionPK.AllowDBNull = false
            Me.columnBlockSectionPK.ReadOnly = true
            Me.columnBlockSectionPK.Unique = true
            Me.columnSEM.AllowDBNull = false
            Me.columncourse.AllowDBNull = false
            Me.columnsubjectid.AllowDBNull = false
            Me.columneduyear.AllowDBNull = false
            Me.columnSY.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBlockSectionTuitionbyPKRow() As BlockSectionTuitionbyPKRow
            Return CType(Me.NewRow,BlockSectionTuitionbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BlockSectionTuitionbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BlockSectionTuitionbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BlockSectionTuitionbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyPKRowChanged(Me, New BlockSectionTuitionbyPKRowChangeEvent(CType(e.Row,BlockSectionTuitionbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BlockSectionTuitionbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyPKRowChanging(Me, New BlockSectionTuitionbyPKRowChangeEvent(CType(e.Row,BlockSectionTuitionbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BlockSectionTuitionbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyPKRowDeleted(Me, New BlockSectionTuitionbyPKRowChangeEvent(CType(e.Row,BlockSectionTuitionbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BlockSectionTuitionbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyPKRowDeleting(Me, New BlockSectionTuitionbyPKRowChangeEvent(CType(e.Row,BlockSectionTuitionbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBlockSectionTuitionbyPKRow(ByVal row As BlockSectionTuitionbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BlockSectionTuitionbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnclosed As Global.System.Data.DataColumn
        
        Private columnrequested As Global.System.Data.DataColumn
        
        Private columnisFused As Global.System.Data.DataColumn
        
        Private columnisSpecialTutorial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOffering"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property closedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property requestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isFusedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisFused
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isSpecialTutorialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisSpecialTutorial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingRow
            Get
                Return CType(Me.Rows(index),SYOfferingRow)
            End Get
        End Property
        
        Public Event SYOfferingRowChanging As SYOfferingRowChangeEventHandler
        
        Public Event SYOfferingRowChanged As SYOfferingRowChangeEventHandler
        
        Public Event SYOfferingRowDeleting As SYOfferingRowChangeEventHandler
        
        Public Event SYOfferingRowDeleted As SYOfferingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingRow(ByVal row As SYOfferingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Boolean,  _
                    ByVal requested As Boolean,  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean) As SYOfferingRow
            Dim rowSYOfferingRow As SYOfferingRow = CType(Me.NewRow,SYOfferingRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed, requested, isFused, isSpecialTutorial}
            rowSYOfferingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingRow)
            Return rowSYOfferingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingDataTable = CType(MyBase.Clone,SYOfferingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnclosed = MyBase.Columns("closed")
            Me.columnrequested = MyBase.Columns("requested")
            Me.columnisFused = MyBase.Columns("isFused")
            Me.columnisSpecialTutorial = MyBase.Columns("isSpecialTutorial")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnclosed = New Global.System.Data.DataColumn("closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosed)
            Me.columnrequested = New Global.System.Data.DataColumn("requested", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequested)
            Me.columnisFused = New Global.System.Data.DataColumn("isFused", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisFused)
            Me.columnisSpecialTutorial = New Global.System.Data.DataColumn("isSpecialTutorial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisSpecialTutorial)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingRow() As SYOfferingRow
            Return CType(Me.NewRow,SYOfferingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingRowChanged(Me, New SYOfferingRowChangeEvent(CType(e.Row,SYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingRowChanging(Me, New SYOfferingRowChangeEvent(CType(e.Row,SYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingRowDeleted(Me, New SYOfferingRowChangeEvent(CType(e.Row,SYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingRowDeleting(Me, New SYOfferingRowChangeEvent(CType(e.Row,SYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingRow(ByVal row As SYOfferingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsByCNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsByCNameRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubjectsByCName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsByCNameRow
            Get
                Return CType(Me.Rows(index),SubjectsByCNameRow)
            End Get
        End Property
        
        Public Event SubjectsByCNameRowChanging As SubjectsByCNameRowChangeEventHandler
        
        Public Event SubjectsByCNameRowChanged As SubjectsByCNameRowChangeEventHandler
        
        Public Event SubjectsByCNameRowDeleting As SubjectsByCNameRowChangeEventHandler
        
        Public Event SubjectsByCNameRowDeleted As SubjectsByCNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsByCNameRow(ByVal row As SubjectsByCNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsByCNameRow(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer) As SubjectsByCNameRow
            Dim rowSubjectsByCNameRow As SubjectsByCNameRow = CType(Me.NewRow,SubjectsByCNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, Remarks, units, prereq}
            rowSubjectsByCNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsByCNameRow)
            Return rowSubjectsByCNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsByCNameRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsByCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsByCNameDataTable = CType(MyBase.Clone,SubjectsByCNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsByCNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnunits = MyBase.Columns("units")
            Me.columnprereq = MyBase.Columns("prereq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.DefaultValue = CType("",String)
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.DefaultValue = CType("",String)
            Me.columnSubjectName.MaxLength = 1000
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.DefaultValue = CType("",String)
            Me.columnRemarks.MaxLength = 50
            Me.columnunits.AllowDBNull = false
            Me.columnunits.DefaultValue = CType(0!,Single)
            Me.columnprereq.AllowDBNull = false
            Me.columnprereq.DefaultValue = CType(0,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsByCNameRow() As SubjectsByCNameRow
            Return CType(Me.NewRow,SubjectsByCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsByCNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsByCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsByCNameRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsByCNameRowChanged(Me, New SubjectsByCNameRowChangeEvent(CType(e.Row,SubjectsByCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsByCNameRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsByCNameRowChanging(Me, New SubjectsByCNameRowChangeEvent(CType(e.Row,SubjectsByCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsByCNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsByCNameRowDeleted(Me, New SubjectsByCNameRowChangeEvent(CType(e.Row,SubjectsByCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsByCNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsByCNameRowDeleting(Me, New SubjectsByCNameRowChangeEvent(CType(e.Row,SubjectsByCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsByCNameRow(ByVal row As SubjectsByCNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsByCNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchoolResourcesbyCNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchoolResourcesbyCNameRow)
        
        Private columnResourcePrikey As Global.System.Data.DataColumn
        
        Private columnResourceID As Global.System.Data.DataColumn
        
        Private columnResourceName As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SchoolResourcesbyCName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourcePrikeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourcePrikey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchoolResourcesbyCNameRow
            Get
                Return CType(Me.Rows(index),SchoolResourcesbyCNameRow)
            End Get
        End Property
        
        Public Event SchoolResourcesbyCNameRowChanging As SchoolResourcesbyCNameRowChangeEventHandler
        
        Public Event SchoolResourcesbyCNameRowChanged As SchoolResourcesbyCNameRowChangeEventHandler
        
        Public Event SchoolResourcesbyCNameRowDeleting As SchoolResourcesbyCNameRowChangeEventHandler
        
        Public Event SchoolResourcesbyCNameRowDeleted As SchoolResourcesbyCNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchoolResourcesbyCNameRow(ByVal row As SchoolResourcesbyCNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchoolResourcesbyCNameRow(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As SchoolResourcesbyCNameRow
            Dim rowSchoolResourcesbyCNameRow As SchoolResourcesbyCNameRow = CType(Me.NewRow,SchoolResourcesbyCNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ResourceID, ResourceName, Location, Remarks}
            rowSchoolResourcesbyCNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchoolResourcesbyCNameRow)
            Return rowSchoolResourcesbyCNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByResourcePrikey(ByVal ResourcePrikey As Integer) As SchoolResourcesbyCNameRow
            Return CType(Me.Rows.Find(New Object() {ResourcePrikey}),SchoolResourcesbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchoolResourcesbyCNameDataTable = CType(MyBase.Clone,SchoolResourcesbyCNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchoolResourcesbyCNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnResourcePrikey = MyBase.Columns("ResourcePrikey")
            Me.columnResourceID = MyBase.Columns("ResourceID")
            Me.columnResourceName = MyBase.Columns("ResourceName")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnResourcePrikey = New Global.System.Data.DataColumn("ResourcePrikey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourcePrikey)
            Me.columnResourceID = New Global.System.Data.DataColumn("ResourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceID)
            Me.columnResourceName = New Global.System.Data.DataColumn("ResourceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceName)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnResourcePrikey}, true))
            Me.columnResourcePrikey.AutoIncrement = true
            Me.columnResourcePrikey.AllowDBNull = false
            Me.columnResourcePrikey.ReadOnly = true
            Me.columnResourcePrikey.Unique = true
            Me.columnResourceID.AllowDBNull = false
            Me.columnResourceID.MaxLength = 50
            Me.columnResourceName.AllowDBNull = false
            Me.columnResourceName.MaxLength = 50
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchoolResourcesbyCNameRow() As SchoolResourcesbyCNameRow
            Return CType(Me.NewRow,SchoolResourcesbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchoolResourcesbyCNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchoolResourcesbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchoolResourcesbyCNameRowChangedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyCNameRowChanged(Me, New SchoolResourcesbyCNameRowChangeEvent(CType(e.Row,SchoolResourcesbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchoolResourcesbyCNameRowChangingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyCNameRowChanging(Me, New SchoolResourcesbyCNameRowChangeEvent(CType(e.Row,SchoolResourcesbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchoolResourcesbyCNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyCNameRowDeleted(Me, New SchoolResourcesbyCNameRowChangeEvent(CType(e.Row,SchoolResourcesbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchoolResourcesbyCNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyCNameRowDeleting(Me, New SchoolResourcesbyCNameRowChangeEvent(CType(e.Row,SchoolResourcesbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchoolResourcesbyCNameRow(ByVal row As SchoolResourcesbyCNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchoolResourcesbyCNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TeachersbyCNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of TeachersbyCNameRow)
        
        Private columnTeacherPriKey As Global.System.Data.DataColumn
        
        Private columnTeacherIDNum As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columncellphone As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TeachersbyCName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherIDNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherIDNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cellphoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncellphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TeachersbyCNameRow
            Get
                Return CType(Me.Rows(index),TeachersbyCNameRow)
            End Get
        End Property
        
        Public Event TeachersbyCNameRowChanging As TeachersbyCNameRowChangeEventHandler
        
        Public Event TeachersbyCNameRowChanged As TeachersbyCNameRowChangeEventHandler
        
        Public Event TeachersbyCNameRowDeleting As TeachersbyCNameRowChangeEventHandler
        
        Public Event TeachersbyCNameRowDeleted As TeachersbyCNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTeachersbyCNameRow(ByVal row As TeachersbyCNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTeachersbyCNameRow(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As TeachersbyCNameRow
            Dim rowTeachersbyCNameRow As TeachersbyCNameRow = CType(Me.NewRow,TeachersbyCNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks}
            rowTeachersbyCNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTeachersbyCNameRow)
            Return rowTeachersbyCNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTeacherPriKey(ByVal TeacherPriKey As Integer) As TeachersbyCNameRow
            Return CType(Me.Rows.Find(New Object() {TeacherPriKey}),TeachersbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TeachersbyCNameDataTable = CType(MyBase.Clone,TeachersbyCNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TeachersbyCNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTeacherPriKey = MyBase.Columns("TeacherPriKey")
            Me.columnTeacherIDNum = MyBase.Columns("TeacherIDNum")
            Me.columnName = MyBase.Columns("Name")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnphone = MyBase.Columns("phone")
            Me.columncellphone = MyBase.Columns("cellphone")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTeacherPriKey = New Global.System.Data.DataColumn("TeacherPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherPriKey)
            Me.columnTeacherIDNum = New Global.System.Data.DataColumn("TeacherIDNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherIDNum)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columncellphone = New Global.System.Data.DataColumn("cellphone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncellphone)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTeacherPriKey}, true))
            Me.columnTeacherPriKey.AutoIncrement = true
            Me.columnTeacherPriKey.AllowDBNull = false
            Me.columnTeacherPriKey.ReadOnly = true
            Me.columnTeacherPriKey.Unique = true
            Me.columnTeacherIDNum.AllowDBNull = false
            Me.columnTeacherIDNum.MaxLength = 50
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 50
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 50
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 50
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 50
            Me.columncellphone.AllowDBNull = false
            Me.columncellphone.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTeachersbyCNameRow() As TeachersbyCNameRow
            Return CType(Me.NewRow,TeachersbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TeachersbyCNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TeachersbyCNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TeachersbyCNameRowChangedEvent) Is Nothing) Then
                RaiseEvent TeachersbyCNameRowChanged(Me, New TeachersbyCNameRowChangeEvent(CType(e.Row,TeachersbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TeachersbyCNameRowChangingEvent) Is Nothing) Then
                RaiseEvent TeachersbyCNameRowChanging(Me, New TeachersbyCNameRowChangeEvent(CType(e.Row,TeachersbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TeachersbyCNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent TeachersbyCNameRowDeleted(Me, New TeachersbyCNameRowChangeEvent(CType(e.Row,TeachersbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TeachersbyCNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent TeachersbyCNameRowDeleting(Me, New TeachersbyCNameRowChangeEvent(CType(e.Row,TeachersbyCNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTeachersbyCNameRow(ByVal row As TeachersbyCNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TeachersbyCNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherMonDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherMonRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherMon"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherMonRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherMonRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherMonRowChanging As SYOfferingTeacherMonRowChangeEventHandler
        
        Public Event SYOfferingTeacherMonRowChanged As SYOfferingTeacherMonRowChangeEventHandler
        
        Public Event SYOfferingTeacherMonRowDeleting As SYOfferingTeacherMonRowChangeEventHandler
        
        Public Event SYOfferingTeacherMonRowDeleted As SYOfferingTeacherMonRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherMonRow(ByVal row As SYOfferingTeacherMonRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherMonRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherMonRow
            Dim rowSYOfferingTeacherMonRow As SYOfferingTeacherMonRow = CType(Me.NewRow,SYOfferingTeacherMonRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherMonRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherMonRow)
            Return rowSYOfferingTeacherMonRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherMonRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherMonDataTable = CType(MyBase.Clone,SYOfferingTeacherMonDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherMonDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherMonRow() As SYOfferingTeacherMonRow
            Return CType(Me.NewRow,SYOfferingTeacherMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherMonRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherMonRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherMonRowChanged(Me, New SYOfferingTeacherMonRowChangeEvent(CType(e.Row,SYOfferingTeacherMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherMonRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherMonRowChanging(Me, New SYOfferingTeacherMonRowChangeEvent(CType(e.Row,SYOfferingTeacherMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherMonRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherMonRowDeleted(Me, New SYOfferingTeacherMonRowChangeEvent(CType(e.Row,SYOfferingTeacherMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherMonRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherMonRowDeleting(Me, New SYOfferingTeacherMonRowChangeEvent(CType(e.Row,SYOfferingTeacherMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherMonRow(ByVal row As SYOfferingTeacherMonRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherMonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TeachersbyIDDataTable
        Inherits Global.System.Data.TypedTableBase(Of TeachersbyIDRow)
        
        Private columnTeacherPriKey As Global.System.Data.DataColumn
        
        Private columnTeacherIDNum As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columncellphone As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TeachersbyID"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherIDNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherIDNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cellphoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncellphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TeachersbyIDRow
            Get
                Return CType(Me.Rows(index),TeachersbyIDRow)
            End Get
        End Property
        
        Public Event TeachersbyIDRowChanging As TeachersbyIDRowChangeEventHandler
        
        Public Event TeachersbyIDRowChanged As TeachersbyIDRowChangeEventHandler
        
        Public Event TeachersbyIDRowDeleting As TeachersbyIDRowChangeEventHandler
        
        Public Event TeachersbyIDRowDeleted As TeachersbyIDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTeachersbyIDRow(ByVal row As TeachersbyIDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTeachersbyIDRow(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As TeachersbyIDRow
            Dim rowTeachersbyIDRow As TeachersbyIDRow = CType(Me.NewRow,TeachersbyIDRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks}
            rowTeachersbyIDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTeachersbyIDRow)
            Return rowTeachersbyIDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTeacherPriKey(ByVal TeacherPriKey As Integer) As TeachersbyIDRow
            Return CType(Me.Rows.Find(New Object() {TeacherPriKey}),TeachersbyIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TeachersbyIDDataTable = CType(MyBase.Clone,TeachersbyIDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TeachersbyIDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTeacherPriKey = MyBase.Columns("TeacherPriKey")
            Me.columnTeacherIDNum = MyBase.Columns("TeacherIDNum")
            Me.columnName = MyBase.Columns("Name")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnphone = MyBase.Columns("phone")
            Me.columncellphone = MyBase.Columns("cellphone")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTeacherPriKey = New Global.System.Data.DataColumn("TeacherPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherPriKey)
            Me.columnTeacherIDNum = New Global.System.Data.DataColumn("TeacherIDNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherIDNum)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columncellphone = New Global.System.Data.DataColumn("cellphone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncellphone)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTeacherPriKey}, true))
            Me.columnTeacherPriKey.AutoIncrement = true
            Me.columnTeacherPriKey.AllowDBNull = false
            Me.columnTeacherPriKey.ReadOnly = true
            Me.columnTeacherPriKey.Unique = true
            Me.columnTeacherIDNum.AllowDBNull = false
            Me.columnTeacherIDNum.MaxLength = 50
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 50
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 50
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 50
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 50
            Me.columncellphone.AllowDBNull = false
            Me.columncellphone.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTeachersbyIDRow() As TeachersbyIDRow
            Return CType(Me.NewRow,TeachersbyIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TeachersbyIDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TeachersbyIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TeachersbyIDRowChangedEvent) Is Nothing) Then
                RaiseEvent TeachersbyIDRowChanged(Me, New TeachersbyIDRowChangeEvent(CType(e.Row,TeachersbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TeachersbyIDRowChangingEvent) Is Nothing) Then
                RaiseEvent TeachersbyIDRowChanging(Me, New TeachersbyIDRowChangeEvent(CType(e.Row,TeachersbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TeachersbyIDRowDeletedEvent) Is Nothing) Then
                RaiseEvent TeachersbyIDRowDeleted(Me, New TeachersbyIDRowChangeEvent(CType(e.Row,TeachersbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TeachersbyIDRowDeletingEvent) Is Nothing) Then
                RaiseEvent TeachersbyIDRowDeleting(Me, New TeachersbyIDRowChangeEvent(CType(e.Row,TeachersbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTeachersbyIDRow(ByVal row As TeachersbyIDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TeachersbyIDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherTueDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherTueRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherTue"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherTueRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherTueRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherTueRowChanging As SYOfferingTeacherTueRowChangeEventHandler
        
        Public Event SYOfferingTeacherTueRowChanged As SYOfferingTeacherTueRowChangeEventHandler
        
        Public Event SYOfferingTeacherTueRowDeleting As SYOfferingTeacherTueRowChangeEventHandler
        
        Public Event SYOfferingTeacherTueRowDeleted As SYOfferingTeacherTueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherTueRow(ByVal row As SYOfferingTeacherTueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherTueRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherTueRow
            Dim rowSYOfferingTeacherTueRow As SYOfferingTeacherTueRow = CType(Me.NewRow,SYOfferingTeacherTueRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherTueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherTueRow)
            Return rowSYOfferingTeacherTueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherTueRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherTueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherTueDataTable = CType(MyBase.Clone,SYOfferingTeacherTueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherTueDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherTueRow() As SYOfferingTeacherTueRow
            Return CType(Me.NewRow,SYOfferingTeacherTueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherTueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherTueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherTueRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherTueRowChanged(Me, New SYOfferingTeacherTueRowChangeEvent(CType(e.Row,SYOfferingTeacherTueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherTueRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherTueRowChanging(Me, New SYOfferingTeacherTueRowChangeEvent(CType(e.Row,SYOfferingTeacherTueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherTueRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherTueRowDeleted(Me, New SYOfferingTeacherTueRowChangeEvent(CType(e.Row,SYOfferingTeacherTueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherTueRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherTueRowDeleting(Me, New SYOfferingTeacherTueRowChangeEvent(CType(e.Row,SYOfferingTeacherTueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherTueRow(ByVal row As SYOfferingTeacherTueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherTueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherWedDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherWedRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherWed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherWedRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherWedRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherWedRowChanging As SYOfferingTeacherWedRowChangeEventHandler
        
        Public Event SYOfferingTeacherWedRowChanged As SYOfferingTeacherWedRowChangeEventHandler
        
        Public Event SYOfferingTeacherWedRowDeleting As SYOfferingTeacherWedRowChangeEventHandler
        
        Public Event SYOfferingTeacherWedRowDeleted As SYOfferingTeacherWedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherWedRow(ByVal row As SYOfferingTeacherWedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherWedRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherWedRow
            Dim rowSYOfferingTeacherWedRow As SYOfferingTeacherWedRow = CType(Me.NewRow,SYOfferingTeacherWedRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherWedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherWedRow)
            Return rowSYOfferingTeacherWedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherWedRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherWedDataTable = CType(MyBase.Clone,SYOfferingTeacherWedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherWedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherWedRow() As SYOfferingTeacherWedRow
            Return CType(Me.NewRow,SYOfferingTeacherWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherWedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherWedRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherWedRowChanged(Me, New SYOfferingTeacherWedRowChangeEvent(CType(e.Row,SYOfferingTeacherWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherWedRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherWedRowChanging(Me, New SYOfferingTeacherWedRowChangeEvent(CType(e.Row,SYOfferingTeacherWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherWedRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherWedRowDeleted(Me, New SYOfferingTeacherWedRowChangeEvent(CType(e.Row,SYOfferingTeacherWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherWedRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherWedRowDeleting(Me, New SYOfferingTeacherWedRowChangeEvent(CType(e.Row,SYOfferingTeacherWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherWedRow(ByVal row As SYOfferingTeacherWedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherWedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherThursDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherThursRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherThurs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherThursRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherThursRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherThursRowChanging As SYOfferingTeacherThursRowChangeEventHandler
        
        Public Event SYOfferingTeacherThursRowChanged As SYOfferingTeacherThursRowChangeEventHandler
        
        Public Event SYOfferingTeacherThursRowDeleting As SYOfferingTeacherThursRowChangeEventHandler
        
        Public Event SYOfferingTeacherThursRowDeleted As SYOfferingTeacherThursRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherThursRow(ByVal row As SYOfferingTeacherThursRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherThursRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherThursRow
            Dim rowSYOfferingTeacherThursRow As SYOfferingTeacherThursRow = CType(Me.NewRow,SYOfferingTeacherThursRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherThursRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherThursRow)
            Return rowSYOfferingTeacherThursRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherThursRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherThursDataTable = CType(MyBase.Clone,SYOfferingTeacherThursDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherThursDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherThursRow() As SYOfferingTeacherThursRow
            Return CType(Me.NewRow,SYOfferingTeacherThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherThursRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherThursRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherThursRowChanged(Me, New SYOfferingTeacherThursRowChangeEvent(CType(e.Row,SYOfferingTeacherThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherThursRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherThursRowChanging(Me, New SYOfferingTeacherThursRowChangeEvent(CType(e.Row,SYOfferingTeacherThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherThursRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherThursRowDeleted(Me, New SYOfferingTeacherThursRowChangeEvent(CType(e.Row,SYOfferingTeacherThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherThursRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherThursRowDeleting(Me, New SYOfferingTeacherThursRowChangeEvent(CType(e.Row,SYOfferingTeacherThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherThursRow(ByVal row As SYOfferingTeacherThursRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherThursDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherFriDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherFriRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherFri"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherFriRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherFriRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherFriRowChanging As SYOfferingTeacherFriRowChangeEventHandler
        
        Public Event SYOfferingTeacherFriRowChanged As SYOfferingTeacherFriRowChangeEventHandler
        
        Public Event SYOfferingTeacherFriRowDeleting As SYOfferingTeacherFriRowChangeEventHandler
        
        Public Event SYOfferingTeacherFriRowDeleted As SYOfferingTeacherFriRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherFriRow(ByVal row As SYOfferingTeacherFriRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherFriRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherFriRow
            Dim rowSYOfferingTeacherFriRow As SYOfferingTeacherFriRow = CType(Me.NewRow,SYOfferingTeacherFriRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherFriRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherFriRow)
            Return rowSYOfferingTeacherFriRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherFriRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherFriDataTable = CType(MyBase.Clone,SYOfferingTeacherFriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherFriDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherFriRow() As SYOfferingTeacherFriRow
            Return CType(Me.NewRow,SYOfferingTeacherFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherFriRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherFriRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherFriRowChanged(Me, New SYOfferingTeacherFriRowChangeEvent(CType(e.Row,SYOfferingTeacherFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherFriRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherFriRowChanging(Me, New SYOfferingTeacherFriRowChangeEvent(CType(e.Row,SYOfferingTeacherFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherFriRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherFriRowDeleted(Me, New SYOfferingTeacherFriRowChangeEvent(CType(e.Row,SYOfferingTeacherFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherFriRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherFriRowDeleting(Me, New SYOfferingTeacherFriRowChangeEvent(CType(e.Row,SYOfferingTeacherFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherFriRow(ByVal row As SYOfferingTeacherFriRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherFriDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherSatDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherSatRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherSat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherSatRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherSatRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherSatRowChanging As SYOfferingTeacherSatRowChangeEventHandler
        
        Public Event SYOfferingTeacherSatRowChanged As SYOfferingTeacherSatRowChangeEventHandler
        
        Public Event SYOfferingTeacherSatRowDeleting As SYOfferingTeacherSatRowChangeEventHandler
        
        Public Event SYOfferingTeacherSatRowDeleted As SYOfferingTeacherSatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherSatRow(ByVal row As SYOfferingTeacherSatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherSatRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherSatRow
            Dim rowSYOfferingTeacherSatRow As SYOfferingTeacherSatRow = CType(Me.NewRow,SYOfferingTeacherSatRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherSatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherSatRow)
            Return rowSYOfferingTeacherSatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherSatRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherSatDataTable = CType(MyBase.Clone,SYOfferingTeacherSatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherSatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherSatRow() As SYOfferingTeacherSatRow
            Return CType(Me.NewRow,SYOfferingTeacherSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherSatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherSatRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSatRowChanged(Me, New SYOfferingTeacherSatRowChangeEvent(CType(e.Row,SYOfferingTeacherSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherSatRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSatRowChanging(Me, New SYOfferingTeacherSatRowChangeEvent(CType(e.Row,SYOfferingTeacherSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherSatRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSatRowDeleted(Me, New SYOfferingTeacherSatRowChangeEvent(CType(e.Row,SYOfferingTeacherSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherSatRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSatRowDeleting(Me, New SYOfferingTeacherSatRowChangeEvent(CType(e.Row,SYOfferingTeacherSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherSatRow(ByVal row As SYOfferingTeacherSatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherSatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingTeacherSunDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingTeacherSunRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingTeacherSun"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingTeacherSunRow
            Get
                Return CType(Me.Rows(index),SYOfferingTeacherSunRow)
            End Get
        End Property
        
        Public Event SYOfferingTeacherSunRowChanging As SYOfferingTeacherSunRowChangeEventHandler
        
        Public Event SYOfferingTeacherSunRowChanged As SYOfferingTeacherSunRowChangeEventHandler
        
        Public Event SYOfferingTeacherSunRowDeleting As SYOfferingTeacherSunRowChangeEventHandler
        
        Public Event SYOfferingTeacherSunRowDeleted As SYOfferingTeacherSunRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingTeacherSunRow(ByVal row As SYOfferingTeacherSunRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingTeacherSunRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingTeacherSunRow
            Dim rowSYOfferingTeacherSunRow As SYOfferingTeacherSunRow = CType(Me.NewRow,SYOfferingTeacherSunRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingTeacherSunRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingTeacherSunRow)
            Return rowSYOfferingTeacherSunRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingTeacherSunRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingTeacherSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingTeacherSunDataTable = CType(MyBase.Clone,SYOfferingTeacherSunDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingTeacherSunDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingTeacherSunRow() As SYOfferingTeacherSunRow
            Return CType(Me.NewRow,SYOfferingTeacherSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingTeacherSunRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingTeacherSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingTeacherSunRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSunRowChanged(Me, New SYOfferingTeacherSunRowChangeEvent(CType(e.Row,SYOfferingTeacherSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingTeacherSunRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSunRowChanging(Me, New SYOfferingTeacherSunRowChangeEvent(CType(e.Row,SYOfferingTeacherSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingTeacherSunRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSunRowDeleted(Me, New SYOfferingTeacherSunRowChangeEvent(CType(e.Row,SYOfferingTeacherSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingTeacherSunRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingTeacherSunRowDeleting(Me, New SYOfferingTeacherSunRowChangeEvent(CType(e.Row,SYOfferingTeacherSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingTeacherSunRow(ByVal row As SYOfferingTeacherSunRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingTeacherSunDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceMonDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceMonRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceMon"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceMonRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceMonRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceMonRowChanging As SYOfferingResourceMonRowChangeEventHandler
        
        Public Event SYOfferingResourceMonRowChanged As SYOfferingResourceMonRowChangeEventHandler
        
        Public Event SYOfferingResourceMonRowDeleting As SYOfferingResourceMonRowChangeEventHandler
        
        Public Event SYOfferingResourceMonRowDeleted As SYOfferingResourceMonRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceMonRow(ByVal row As SYOfferingResourceMonRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceMonRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceMonRow
            Dim rowSYOfferingResourceMonRow As SYOfferingResourceMonRow = CType(Me.NewRow,SYOfferingResourceMonRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceMonRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceMonRow)
            Return rowSYOfferingResourceMonRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceMonRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceMonDataTable = CType(MyBase.Clone,SYOfferingResourceMonDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceMonDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceMonRow() As SYOfferingResourceMonRow
            Return CType(Me.NewRow,SYOfferingResourceMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceMonRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceMonRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceMonRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceMonRowChanged(Me, New SYOfferingResourceMonRowChangeEvent(CType(e.Row,SYOfferingResourceMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceMonRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceMonRowChanging(Me, New SYOfferingResourceMonRowChangeEvent(CType(e.Row,SYOfferingResourceMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceMonRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceMonRowDeleted(Me, New SYOfferingResourceMonRowChangeEvent(CType(e.Row,SYOfferingResourceMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceMonRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceMonRowDeleting(Me, New SYOfferingResourceMonRowChangeEvent(CType(e.Row,SYOfferingResourceMonRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceMonRow(ByVal row As SYOfferingResourceMonRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceMonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceTuesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceTuesRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceTues"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceTuesRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceTuesRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceTuesRowChanging As SYOfferingResourceTuesRowChangeEventHandler
        
        Public Event SYOfferingResourceTuesRowChanged As SYOfferingResourceTuesRowChangeEventHandler
        
        Public Event SYOfferingResourceTuesRowDeleting As SYOfferingResourceTuesRowChangeEventHandler
        
        Public Event SYOfferingResourceTuesRowDeleted As SYOfferingResourceTuesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceTuesRow(ByVal row As SYOfferingResourceTuesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceTuesRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceTuesRow
            Dim rowSYOfferingResourceTuesRow As SYOfferingResourceTuesRow = CType(Me.NewRow,SYOfferingResourceTuesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceTuesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceTuesRow)
            Return rowSYOfferingResourceTuesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceTuesRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceTuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceTuesDataTable = CType(MyBase.Clone,SYOfferingResourceTuesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceTuesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceTuesRow() As SYOfferingResourceTuesRow
            Return CType(Me.NewRow,SYOfferingResourceTuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceTuesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceTuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceTuesRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceTuesRowChanged(Me, New SYOfferingResourceTuesRowChangeEvent(CType(e.Row,SYOfferingResourceTuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceTuesRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceTuesRowChanging(Me, New SYOfferingResourceTuesRowChangeEvent(CType(e.Row,SYOfferingResourceTuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceTuesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceTuesRowDeleted(Me, New SYOfferingResourceTuesRowChangeEvent(CType(e.Row,SYOfferingResourceTuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceTuesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceTuesRowDeleting(Me, New SYOfferingResourceTuesRowChangeEvent(CType(e.Row,SYOfferingResourceTuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceTuesRow(ByVal row As SYOfferingResourceTuesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceTuesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceWedDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceWedRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceWed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceWedRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceWedRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceWedRowChanging As SYOfferingResourceWedRowChangeEventHandler
        
        Public Event SYOfferingResourceWedRowChanged As SYOfferingResourceWedRowChangeEventHandler
        
        Public Event SYOfferingResourceWedRowDeleting As SYOfferingResourceWedRowChangeEventHandler
        
        Public Event SYOfferingResourceWedRowDeleted As SYOfferingResourceWedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceWedRow(ByVal row As SYOfferingResourceWedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceWedRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceWedRow
            Dim rowSYOfferingResourceWedRow As SYOfferingResourceWedRow = CType(Me.NewRow,SYOfferingResourceWedRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceWedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceWedRow)
            Return rowSYOfferingResourceWedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceWedRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceWedDataTable = CType(MyBase.Clone,SYOfferingResourceWedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceWedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceWedRow() As SYOfferingResourceWedRow
            Return CType(Me.NewRow,SYOfferingResourceWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceWedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceWedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceWedRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceWedRowChanged(Me, New SYOfferingResourceWedRowChangeEvent(CType(e.Row,SYOfferingResourceWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceWedRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceWedRowChanging(Me, New SYOfferingResourceWedRowChangeEvent(CType(e.Row,SYOfferingResourceWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceWedRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceWedRowDeleted(Me, New SYOfferingResourceWedRowChangeEvent(CType(e.Row,SYOfferingResourceWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceWedRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceWedRowDeleting(Me, New SYOfferingResourceWedRowChangeEvent(CType(e.Row,SYOfferingResourceWedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceWedRow(ByVal row As SYOfferingResourceWedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceWedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceThursDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceThursRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceThurs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceThursRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceThursRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceThursRowChanging As SYOfferingResourceThursRowChangeEventHandler
        
        Public Event SYOfferingResourceThursRowChanged As SYOfferingResourceThursRowChangeEventHandler
        
        Public Event SYOfferingResourceThursRowDeleting As SYOfferingResourceThursRowChangeEventHandler
        
        Public Event SYOfferingResourceThursRowDeleted As SYOfferingResourceThursRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceThursRow(ByVal row As SYOfferingResourceThursRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceThursRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceThursRow
            Dim rowSYOfferingResourceThursRow As SYOfferingResourceThursRow = CType(Me.NewRow,SYOfferingResourceThursRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceThursRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceThursRow)
            Return rowSYOfferingResourceThursRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceThursRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceThursDataTable = CType(MyBase.Clone,SYOfferingResourceThursDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceThursDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceThursRow() As SYOfferingResourceThursRow
            Return CType(Me.NewRow,SYOfferingResourceThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceThursRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceThursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceThursRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceThursRowChanged(Me, New SYOfferingResourceThursRowChangeEvent(CType(e.Row,SYOfferingResourceThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceThursRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceThursRowChanging(Me, New SYOfferingResourceThursRowChangeEvent(CType(e.Row,SYOfferingResourceThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceThursRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceThursRowDeleted(Me, New SYOfferingResourceThursRowChangeEvent(CType(e.Row,SYOfferingResourceThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceThursRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceThursRowDeleting(Me, New SYOfferingResourceThursRowChangeEvent(CType(e.Row,SYOfferingResourceThursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceThursRow(ByVal row As SYOfferingResourceThursRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceThursDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceFriDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceFriRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceFri"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceFriRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceFriRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceFriRowChanging As SYOfferingResourceFriRowChangeEventHandler
        
        Public Event SYOfferingResourceFriRowChanged As SYOfferingResourceFriRowChangeEventHandler
        
        Public Event SYOfferingResourceFriRowDeleting As SYOfferingResourceFriRowChangeEventHandler
        
        Public Event SYOfferingResourceFriRowDeleted As SYOfferingResourceFriRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceFriRow(ByVal row As SYOfferingResourceFriRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceFriRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceFriRow
            Dim rowSYOfferingResourceFriRow As SYOfferingResourceFriRow = CType(Me.NewRow,SYOfferingResourceFriRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceFriRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceFriRow)
            Return rowSYOfferingResourceFriRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceFriRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceFriDataTable = CType(MyBase.Clone,SYOfferingResourceFriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceFriDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceFriRow() As SYOfferingResourceFriRow
            Return CType(Me.NewRow,SYOfferingResourceFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceFriRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceFriRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceFriRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceFriRowChanged(Me, New SYOfferingResourceFriRowChangeEvent(CType(e.Row,SYOfferingResourceFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceFriRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceFriRowChanging(Me, New SYOfferingResourceFriRowChangeEvent(CType(e.Row,SYOfferingResourceFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceFriRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceFriRowDeleted(Me, New SYOfferingResourceFriRowChangeEvent(CType(e.Row,SYOfferingResourceFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceFriRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceFriRowDeleting(Me, New SYOfferingResourceFriRowChangeEvent(CType(e.Row,SYOfferingResourceFriRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceFriRow(ByVal row As SYOfferingResourceFriRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceFriDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceSatDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceSatRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceSat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceSatRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceSatRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceSatRowChanging As SYOfferingResourceSatRowChangeEventHandler
        
        Public Event SYOfferingResourceSatRowChanged As SYOfferingResourceSatRowChangeEventHandler
        
        Public Event SYOfferingResourceSatRowDeleting As SYOfferingResourceSatRowChangeEventHandler
        
        Public Event SYOfferingResourceSatRowDeleted As SYOfferingResourceSatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceSatRow(ByVal row As SYOfferingResourceSatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceSatRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceSatRow
            Dim rowSYOfferingResourceSatRow As SYOfferingResourceSatRow = CType(Me.NewRow,SYOfferingResourceSatRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceSatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceSatRow)
            Return rowSYOfferingResourceSatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceSatRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceSatDataTable = CType(MyBase.Clone,SYOfferingResourceSatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceSatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceSatRow() As SYOfferingResourceSatRow
            Return CType(Me.NewRow,SYOfferingResourceSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceSatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceSatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceSatRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSatRowChanged(Me, New SYOfferingResourceSatRowChangeEvent(CType(e.Row,SYOfferingResourceSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceSatRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSatRowChanging(Me, New SYOfferingResourceSatRowChangeEvent(CType(e.Row,SYOfferingResourceSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceSatRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSatRowDeleted(Me, New SYOfferingResourceSatRowChangeEvent(CType(e.Row,SYOfferingResourceSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceSatRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSatRowDeleting(Me, New SYOfferingResourceSatRowChangeEvent(CType(e.Row,SYOfferingResourceSatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceSatRow(ByVal row As SYOfferingResourceSatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceSatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingResourceSunDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingResourceSunRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingResourceSun"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingResourceSunRow
            Get
                Return CType(Me.Rows(index),SYOfferingResourceSunRow)
            End Get
        End Property
        
        Public Event SYOfferingResourceSunRowChanging As SYOfferingResourceSunRowChangeEventHandler
        
        Public Event SYOfferingResourceSunRowChanged As SYOfferingResourceSunRowChangeEventHandler
        
        Public Event SYOfferingResourceSunRowDeleting As SYOfferingResourceSunRowChangeEventHandler
        
        Public Event SYOfferingResourceSunRowDeleted As SYOfferingResourceSunRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingResourceSunRow(ByVal row As SYOfferingResourceSunRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingResourceSunRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer) As SYOfferingResourceSunRow
            Dim rowSYOfferingResourceSunRow As SYOfferingResourceSunRow = CType(Me.NewRow,SYOfferingResourceSunRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid}
            rowSYOfferingResourceSunRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingResourceSunRow)
            Return rowSYOfferingResourceSunRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingResourceSunRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingResourceSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingResourceSunDataTable = CType(MyBase.Clone,SYOfferingResourceSunDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingResourceSunDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingResourceSunRow() As SYOfferingResourceSunRow
            Return CType(Me.NewRow,SYOfferingResourceSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingResourceSunRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingResourceSunRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingResourceSunRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSunRowChanged(Me, New SYOfferingResourceSunRowChangeEvent(CType(e.Row,SYOfferingResourceSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingResourceSunRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSunRowChanging(Me, New SYOfferingResourceSunRowChangeEvent(CType(e.Row,SYOfferingResourceSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingResourceSunRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSunRowDeleted(Me, New SYOfferingResourceSunRowChangeEvent(CType(e.Row,SYOfferingResourceSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingResourceSunRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingResourceSunRowDeleting(Me, New SYOfferingResourceSunRowChangeEvent(CType(e.Row,SYOfferingResourceSunRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingResourceSunRow(ByVal row As SYOfferingResourceSunRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingResourceSunDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SchoolResourcesbyPkDataTable
        Inherits Global.System.Data.TypedTableBase(Of SchoolResourcesbyPkRow)
        
        Private columnResourcePrikey As Global.System.Data.DataColumn
        
        Private columnResourceID As Global.System.Data.DataColumn
        
        Private columnResourceName As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SchoolResourcesbyPk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourcePrikeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourcePrikey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchoolResourcesbyPkRow
            Get
                Return CType(Me.Rows(index),SchoolResourcesbyPkRow)
            End Get
        End Property
        
        Public Event SchoolResourcesbyPkRowChanging As SchoolResourcesbyPkRowChangeEventHandler
        
        Public Event SchoolResourcesbyPkRowChanged As SchoolResourcesbyPkRowChangeEventHandler
        
        Public Event SchoolResourcesbyPkRowDeleting As SchoolResourcesbyPkRowChangeEventHandler
        
        Public Event SchoolResourcesbyPkRowDeleted As SchoolResourcesbyPkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSchoolResourcesbyPkRow(ByVal row As SchoolResourcesbyPkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSchoolResourcesbyPkRow(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As SchoolResourcesbyPkRow
            Dim rowSchoolResourcesbyPkRow As SchoolResourcesbyPkRow = CType(Me.NewRow,SchoolResourcesbyPkRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ResourceID, ResourceName, Location, Remarks}
            rowSchoolResourcesbyPkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSchoolResourcesbyPkRow)
            Return rowSchoolResourcesbyPkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByResourcePrikey(ByVal ResourcePrikey As Integer) As SchoolResourcesbyPkRow
            Return CType(Me.Rows.Find(New Object() {ResourcePrikey}),SchoolResourcesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SchoolResourcesbyPkDataTable = CType(MyBase.Clone,SchoolResourcesbyPkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SchoolResourcesbyPkDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnResourcePrikey = MyBase.Columns("ResourcePrikey")
            Me.columnResourceID = MyBase.Columns("ResourceID")
            Me.columnResourceName = MyBase.Columns("ResourceName")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnResourcePrikey = New Global.System.Data.DataColumn("ResourcePrikey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourcePrikey)
            Me.columnResourceID = New Global.System.Data.DataColumn("ResourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceID)
            Me.columnResourceName = New Global.System.Data.DataColumn("ResourceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceName)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnResourcePrikey}, true))
            Me.columnResourcePrikey.AutoIncrement = true
            Me.columnResourcePrikey.AllowDBNull = false
            Me.columnResourcePrikey.ReadOnly = true
            Me.columnResourcePrikey.Unique = true
            Me.columnResourceID.AllowDBNull = false
            Me.columnResourceID.MaxLength = 50
            Me.columnResourceName.AllowDBNull = false
            Me.columnResourceName.MaxLength = 50
            Me.columnLocation.AllowDBNull = false
            Me.columnLocation.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSchoolResourcesbyPkRow() As SchoolResourcesbyPkRow
            Return CType(Me.NewRow,SchoolResourcesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SchoolResourcesbyPkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SchoolResourcesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchoolResourcesbyPkRowChangedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyPkRowChanged(Me, New SchoolResourcesbyPkRowChangeEvent(CType(e.Row,SchoolResourcesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchoolResourcesbyPkRowChangingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyPkRowChanging(Me, New SchoolResourcesbyPkRowChangeEvent(CType(e.Row,SchoolResourcesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchoolResourcesbyPkRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyPkRowDeleted(Me, New SchoolResourcesbyPkRowChangeEvent(CType(e.Row,SchoolResourcesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchoolResourcesbyPkRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchoolResourcesbyPkRowDeleting(Me, New SchoolResourcesbyPkRowChangeEvent(CType(e.Row,SchoolResourcesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSchoolResourcesbyPkRow(ByVal row As SchoolResourcesbyPkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchoolResourcesbyPkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingbyTeacherDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingbyTeacherRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnrequested As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingbyTeacher"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property requestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingbyTeacherRow
            Get
                Return CType(Me.Rows(index),SYOfferingbyTeacherRow)
            End Get
        End Property
        
        Public Event SYOfferingbyTeacherRowChanging As SYOfferingbyTeacherRowChangeEventHandler
        
        Public Event SYOfferingbyTeacherRowChanged As SYOfferingbyTeacherRowChangeEventHandler
        
        Public Event SYOfferingbyTeacherRowDeleting As SYOfferingbyTeacherRowChangeEventHandler
        
        Public Event SYOfferingbyTeacherRowDeleted As SYOfferingbyTeacherRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingbyTeacherRow(ByVal row As SYOfferingbyTeacherRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingbyTeacherRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Boolean) As SYOfferingbyTeacherRow
            Dim rowSYOfferingbyTeacherRow As SYOfferingbyTeacherRow = CType(Me.NewRow,SYOfferingbyTeacherRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requested}
            rowSYOfferingbyTeacherRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingbyTeacherRow)
            Return rowSYOfferingbyTeacherRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingbyTeacherRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingbyTeacherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingbyTeacherDataTable = CType(MyBase.Clone,SYOfferingbyTeacherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingbyTeacherDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnrequested = MyBase.Columns("requested")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnrequested = New Global.System.Data.DataColumn("requested", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequested)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingbyTeacherRow() As SYOfferingbyTeacherRow
            Return CType(Me.NewRow,SYOfferingbyTeacherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingbyTeacherRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingbyTeacherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingbyTeacherRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyTeacherRowChanged(Me, New SYOfferingbyTeacherRowChangeEvent(CType(e.Row,SYOfferingbyTeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingbyTeacherRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyTeacherRowChanging(Me, New SYOfferingbyTeacherRowChangeEvent(CType(e.Row,SYOfferingbyTeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingbyTeacherRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyTeacherRowDeleted(Me, New SYOfferingbyTeacherRowChangeEvent(CType(e.Row,SYOfferingbyTeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingbyTeacherRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyTeacherRowDeleting(Me, New SYOfferingbyTeacherRowChangeEvent(CType(e.Row,SYOfferingbyTeacherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingbyTeacherRow(ByVal row As SYOfferingbyTeacherRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingbyTeacherDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRTypesDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRTypesRow)
        
        Private columnTRPK As Global.System.Data.DataColumn
        
        Private columnTRCode As Global.System.Data.DataColumn
        
        Private columnTRName As Global.System.Data.DataColumn
        
        Private columnTRAmount As Global.System.Data.DataColumn
        
        Private columnTRCourse As Global.System.Data.DataColumn
        
        Private columnTRYearLevel As Global.System.Data.DataColumn
        
        Private columnTRSubject As Global.System.Data.DataColumn
        
        Private columnTRRemarks As Global.System.Data.DataColumn
        
        Private columnTRStudentType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRYearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRStudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRTypesRow
            Get
                Return CType(Me.Rows(index),TRTypesRow)
            End Get
        End Property
        
        Public Event TRTypesRowChanging As TRTypesRowChangeEventHandler
        
        Public Event TRTypesRowChanged As TRTypesRowChangeEventHandler
        
        Public Event TRTypesRowDeleting As TRTypesRowChangeEventHandler
        
        Public Event TRTypesRowDeleted As TRTypesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRTypesRow(ByVal row As TRTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRTypesRow(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Integer, ByVal TRYearLevel As Integer, ByVal TRSubject As Integer, ByVal TRRemarks As String, ByVal TRStudentType As String) As TRTypesRow
            Dim rowTRTypesRow As TRTypesRow = CType(Me.NewRow,TRTypesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, TRStudentType}
            rowTRTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRTypesRow)
            Return rowTRTypesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRPK(ByVal TRPK As Integer) As TRTypesRow
            Return CType(Me.Rows.Find(New Object() {TRPK}),TRTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRTypesDataTable = CType(MyBase.Clone,TRTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRTypesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRPK = MyBase.Columns("TRPK")
            Me.columnTRCode = MyBase.Columns("TRCode")
            Me.columnTRName = MyBase.Columns("TRName")
            Me.columnTRAmount = MyBase.Columns("TRAmount")
            Me.columnTRCourse = MyBase.Columns("TRCourse")
            Me.columnTRYearLevel = MyBase.Columns("TRYearLevel")
            Me.columnTRSubject = MyBase.Columns("TRSubject")
            Me.columnTRRemarks = MyBase.Columns("TRRemarks")
            Me.columnTRStudentType = MyBase.Columns("TRStudentType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRPK = New Global.System.Data.DataColumn("TRPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRPK)
            Me.columnTRCode = New Global.System.Data.DataColumn("TRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCode)
            Me.columnTRName = New Global.System.Data.DataColumn("TRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRName)
            Me.columnTRAmount = New Global.System.Data.DataColumn("TRAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAmount)
            Me.columnTRCourse = New Global.System.Data.DataColumn("TRCourse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCourse)
            Me.columnTRYearLevel = New Global.System.Data.DataColumn("TRYearLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRYearLevel)
            Me.columnTRSubject = New Global.System.Data.DataColumn("TRSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSubject)
            Me.columnTRRemarks = New Global.System.Data.DataColumn("TRRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRRemarks)
            Me.columnTRStudentType = New Global.System.Data.DataColumn("TRStudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRStudentType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRPK}, true))
            Me.columnTRPK.AutoIncrement = true
            Me.columnTRPK.AllowDBNull = false
            Me.columnTRPK.ReadOnly = true
            Me.columnTRPK.Unique = true
            Me.columnTRCode.AllowDBNull = false
            Me.columnTRCode.MaxLength = 50
            Me.columnTRName.AllowDBNull = false
            Me.columnTRName.MaxLength = 50
            Me.columnTRAmount.AllowDBNull = false
            Me.columnTRRemarks.MaxLength = 50
            Me.columnTRStudentType.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRTypesRow() As TRTypesRow
            Return CType(Me.NewRow,TRTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRTypesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent TRTypesRowChanged(Me, New TRTypesRowChangeEvent(CType(e.Row,TRTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent TRTypesRowChanging(Me, New TRTypesRowChangeEvent(CType(e.Row,TRTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRTypesRowDeleted(Me, New TRTypesRowChangeEvent(CType(e.Row,TRTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRTypesRowDeleting(Me, New TRTypesRowChangeEvent(CType(e.Row,TRTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRTypesRow(ByVal row As TRTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRTypesbyNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRTypesbyNameRow)
        
        Private columnTRPK As Global.System.Data.DataColumn
        
        Private columnTRCode As Global.System.Data.DataColumn
        
        Private columnTRName As Global.System.Data.DataColumn
        
        Private columnTRAmount As Global.System.Data.DataColumn
        
        Private columnTRCourse As Global.System.Data.DataColumn
        
        Private columnTRYearLevel As Global.System.Data.DataColumn
        
        Private columnTRSubject As Global.System.Data.DataColumn
        
        Private columnTRRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRTypesbyName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRYearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRTypesbyNameRow
            Get
                Return CType(Me.Rows(index),TRTypesbyNameRow)
            End Get
        End Property
        
        Public Event TRTypesbyNameRowChanging As TRTypesbyNameRowChangeEventHandler
        
        Public Event TRTypesbyNameRowChanged As TRTypesbyNameRowChangeEventHandler
        
        Public Event TRTypesbyNameRowDeleting As TRTypesbyNameRowChangeEventHandler
        
        Public Event TRTypesbyNameRowDeleted As TRTypesbyNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRTypesbyNameRow(ByVal row As TRTypesbyNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRTypesbyNameRow(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Integer, ByVal TRYearLevel As Integer, ByVal TRSubject As Integer, ByVal TRRemarks As String) As TRTypesbyNameRow
            Dim rowTRTypesbyNameRow As TRTypesbyNameRow = CType(Me.NewRow,TRTypesbyNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks}
            rowTRTypesbyNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRTypesbyNameRow)
            Return rowTRTypesbyNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRPK(ByVal TRPK As Integer) As TRTypesbyNameRow
            Return CType(Me.Rows.Find(New Object() {TRPK}),TRTypesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRTypesbyNameDataTable = CType(MyBase.Clone,TRTypesbyNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRTypesbyNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRPK = MyBase.Columns("TRPK")
            Me.columnTRCode = MyBase.Columns("TRCode")
            Me.columnTRName = MyBase.Columns("TRName")
            Me.columnTRAmount = MyBase.Columns("TRAmount")
            Me.columnTRCourse = MyBase.Columns("TRCourse")
            Me.columnTRYearLevel = MyBase.Columns("TRYearLevel")
            Me.columnTRSubject = MyBase.Columns("TRSubject")
            Me.columnTRRemarks = MyBase.Columns("TRRemarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRPK = New Global.System.Data.DataColumn("TRPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRPK)
            Me.columnTRCode = New Global.System.Data.DataColumn("TRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCode)
            Me.columnTRName = New Global.System.Data.DataColumn("TRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRName)
            Me.columnTRAmount = New Global.System.Data.DataColumn("TRAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAmount)
            Me.columnTRCourse = New Global.System.Data.DataColumn("TRCourse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCourse)
            Me.columnTRYearLevel = New Global.System.Data.DataColumn("TRYearLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRYearLevel)
            Me.columnTRSubject = New Global.System.Data.DataColumn("TRSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSubject)
            Me.columnTRRemarks = New Global.System.Data.DataColumn("TRRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRPK}, true))
            Me.columnTRPK.AutoIncrement = true
            Me.columnTRPK.AllowDBNull = false
            Me.columnTRPK.ReadOnly = true
            Me.columnTRPK.Unique = true
            Me.columnTRCode.AllowDBNull = false
            Me.columnTRCode.MaxLength = 50
            Me.columnTRName.AllowDBNull = false
            Me.columnTRName.MaxLength = 50
            Me.columnTRAmount.AllowDBNull = false
            Me.columnTRRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRTypesbyNameRow() As TRTypesbyNameRow
            Return CType(Me.NewRow,TRTypesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRTypesbyNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRTypesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRTypesbyNameRowChangedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyNameRowChanged(Me, New TRTypesbyNameRowChangeEvent(CType(e.Row,TRTypesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRTypesbyNameRowChangingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyNameRowChanging(Me, New TRTypesbyNameRowChangeEvent(CType(e.Row,TRTypesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRTypesbyNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyNameRowDeleted(Me, New TRTypesbyNameRowChangeEvent(CType(e.Row,TRTypesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRTypesbyNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyNameRowDeleting(Me, New TRTypesbyNameRowChangeEvent(CType(e.Row,TRTypesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRTypesbyNameRow(ByVal row As TRTypesbyNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRTypesbyNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRTypesbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRTypesbyPKRow)
        
        Private columnTRPK As Global.System.Data.DataColumn
        
        Private columnTRCode As Global.System.Data.DataColumn
        
        Private columnTRName As Global.System.Data.DataColumn
        
        Private columnTRAmount As Global.System.Data.DataColumn
        
        Private columnTRCourse As Global.System.Data.DataColumn
        
        Private columnTRYearLevel As Global.System.Data.DataColumn
        
        Private columnTRSubject As Global.System.Data.DataColumn
        
        Private columnTRRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRTypesbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRYearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRTypesbyPKRow
            Get
                Return CType(Me.Rows(index),TRTypesbyPKRow)
            End Get
        End Property
        
        Public Event TRTypesbyPKRowChanging As TRTypesbyPKRowChangeEventHandler
        
        Public Event TRTypesbyPKRowChanged As TRTypesbyPKRowChangeEventHandler
        
        Public Event TRTypesbyPKRowDeleting As TRTypesbyPKRowChangeEventHandler
        
        Public Event TRTypesbyPKRowDeleted As TRTypesbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRTypesbyPKRow(ByVal row As TRTypesbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRTypesbyPKRow(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Integer, ByVal TRYearLevel As Integer, ByVal TRSubject As Integer, ByVal TRRemarks As String) As TRTypesbyPKRow
            Dim rowTRTypesbyPKRow As TRTypesbyPKRow = CType(Me.NewRow,TRTypesbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks}
            rowTRTypesbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRTypesbyPKRow)
            Return rowTRTypesbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRPK(ByVal TRPK As Integer) As TRTypesbyPKRow
            Return CType(Me.Rows.Find(New Object() {TRPK}),TRTypesbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRTypesbyPKDataTable = CType(MyBase.Clone,TRTypesbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRTypesbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRPK = MyBase.Columns("TRPK")
            Me.columnTRCode = MyBase.Columns("TRCode")
            Me.columnTRName = MyBase.Columns("TRName")
            Me.columnTRAmount = MyBase.Columns("TRAmount")
            Me.columnTRCourse = MyBase.Columns("TRCourse")
            Me.columnTRYearLevel = MyBase.Columns("TRYearLevel")
            Me.columnTRSubject = MyBase.Columns("TRSubject")
            Me.columnTRRemarks = MyBase.Columns("TRRemarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRPK = New Global.System.Data.DataColumn("TRPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRPK)
            Me.columnTRCode = New Global.System.Data.DataColumn("TRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCode)
            Me.columnTRName = New Global.System.Data.DataColumn("TRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRName)
            Me.columnTRAmount = New Global.System.Data.DataColumn("TRAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAmount)
            Me.columnTRCourse = New Global.System.Data.DataColumn("TRCourse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCourse)
            Me.columnTRYearLevel = New Global.System.Data.DataColumn("TRYearLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRYearLevel)
            Me.columnTRSubject = New Global.System.Data.DataColumn("TRSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSubject)
            Me.columnTRRemarks = New Global.System.Data.DataColumn("TRRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRPK}, true))
            Me.columnTRPK.AutoIncrement = true
            Me.columnTRPK.AllowDBNull = false
            Me.columnTRPK.ReadOnly = true
            Me.columnTRPK.Unique = true
            Me.columnTRCode.AllowDBNull = false
            Me.columnTRCode.MaxLength = 50
            Me.columnTRName.AllowDBNull = false
            Me.columnTRName.MaxLength = 50
            Me.columnTRAmount.AllowDBNull = false
            Me.columnTRRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRTypesbyPKRow() As TRTypesbyPKRow
            Return CType(Me.NewRow,TRTypesbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRTypesbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRTypesbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRTypesbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyPKRowChanged(Me, New TRTypesbyPKRowChangeEvent(CType(e.Row,TRTypesbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRTypesbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyPKRowChanging(Me, New TRTypesbyPKRowChangeEvent(CType(e.Row,TRTypesbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRTypesbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyPKRowDeleted(Me, New TRTypesbyPKRowChangeEvent(CType(e.Row,TRTypesbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRTypesbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyPKRowDeleting(Me, New TRTypesbyPKRowChangeEvent(CType(e.Row,TRTypesbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRTypesbyPKRow(ByVal row As TRTypesbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRTypesbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CoursesbyPkDataTable
        Inherits Global.System.Data.TypedTableBase(Of CoursesbyPkRow)
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnCourseID As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnspecial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CoursesbyPk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property specialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoursesbyPkRow
            Get
                Return CType(Me.Rows(index),CoursesbyPkRow)
            End Get
        End Property
        
        Public Event CoursesbyPkRowChanging As CoursesbyPkRowChangeEventHandler
        
        Public Event CoursesbyPkRowChanged As CoursesbyPkRowChangeEventHandler
        
        Public Event CoursesbyPkRowDeleting As CoursesbyPkRowChangeEventHandler
        
        Public Event CoursesbyPkRowDeleted As CoursesbyPkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCoursesbyPkRow(ByVal row As CoursesbyPkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCoursesbyPkRow(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As CoursesbyPkRow
            Dim rowCoursesbyPkRow As CoursesbyPkRow = CType(Me.NewRow,CoursesbyPkRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CourseID, CourseName, Remarks, special}
            rowCoursesbyPkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCoursesbyPkRow)
            Return rowCoursesbyPkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycoursepk(ByVal coursepk As Integer) As CoursesbyPkRow
            Return CType(Me.Rows.Find(New Object() {coursepk}),CoursesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CoursesbyPkDataTable = CType(MyBase.Clone,CoursesbyPkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CoursesbyPkDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnCourseID = MyBase.Columns("CourseID")
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnspecial = MyBase.Columns("special")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnCourseID = New Global.System.Data.DataColumn("CourseID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseID)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnspecial = New Global.System.Data.DataColumn("special", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecial)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncoursepk}, true))
            Me.columncoursepk.AutoIncrement = true
            Me.columncoursepk.AllowDBNull = false
            Me.columncoursepk.ReadOnly = true
            Me.columncoursepk.Unique = true
            Me.columnCourseID.AllowDBNull = false
            Me.columnCourseID.MaxLength = 50
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnspecial.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCoursesbyPkRow() As CoursesbyPkRow
            Return CType(Me.NewRow,CoursesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CoursesbyPkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CoursesbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoursesbyPkRowChangedEvent) Is Nothing) Then
                RaiseEvent CoursesbyPkRowChanged(Me, New CoursesbyPkRowChangeEvent(CType(e.Row,CoursesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoursesbyPkRowChangingEvent) Is Nothing) Then
                RaiseEvent CoursesbyPkRowChanging(Me, New CoursesbyPkRowChangeEvent(CType(e.Row,CoursesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoursesbyPkRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoursesbyPkRowDeleted(Me, New CoursesbyPkRowChangeEvent(CType(e.Row,CoursesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoursesbyPkRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoursesbyPkRowDeleting(Me, New CoursesbyPkRowChangeEvent(CType(e.Row,CoursesbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCoursesbyPkRow(ByVal row As CoursesbyPkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CoursesbyPkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateTeacherLoadDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateTeacherLoadRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnResource As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnSchedule As Global.System.Data.DataColumn
        
        Private columnMin As Global.System.Data.DataColumn
        
        Private columnMax As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateTeacherLoad"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateTeacherLoadRow
            Get
                Return CType(Me.Rows(index),TemplateTeacherLoadRow)
            End Get
        End Property
        
        Public Event TemplateTeacherLoadRowChanging As TemplateTeacherLoadRowChangeEventHandler
        
        Public Event TemplateTeacherLoadRowChanged As TemplateTeacherLoadRowChangeEventHandler
        
        Public Event TemplateTeacherLoadRowDeleting As TemplateTeacherLoadRowChangeEventHandler
        
        Public Event TemplateTeacherLoadRowDeleted As TemplateTeacherLoadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateTeacherLoadRow(ByVal row As TemplateTeacherLoadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateTeacherLoadRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Resource As String, ByVal Subject As String, ByVal Schedule As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer) As TemplateTeacherLoadRow
            Dim rowTemplateTeacherLoadRow As TemplateTeacherLoadRow = CType(Me.NewRow,TemplateTeacherLoadRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Semester, Resource, Subject, Schedule, Min, Max, Enrolled}
            rowTemplateTeacherLoadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateTeacherLoadRow)
            Return rowTemplateTeacherLoadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As TemplateTeacherLoadRow
            Return CType(Me.Rows.Find(New Object() {PK}),TemplateTeacherLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateTeacherLoadDataTable = CType(MyBase.Clone,TemplateTeacherLoadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateTeacherLoadDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnResource = MyBase.Columns("Resource")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnSchedule = MyBase.Columns("Schedule")
            Me.columnMin = MyBase.Columns("Min")
            Me.columnMax = MyBase.Columns("Max")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnResource = New Global.System.Data.DataColumn("Resource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResource)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnSchedule = New Global.System.Data.DataColumn("Schedule", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedule)
            Me.columnMin = New Global.System.Data.DataColumn("Min", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMin)
            Me.columnMax = New Global.System.Data.DataColumn("Max", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMax)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 50
            Me.columnResource.AllowDBNull = false
            Me.columnResource.MaxLength = 50
            Me.columnSubject.AllowDBNull = false
            Me.columnSubject.MaxLength = 50
            Me.columnSchedule.AllowDBNull = false
            Me.columnSchedule.MaxLength = 1024
            Me.columnMin.AllowDBNull = false
            Me.columnMax.AllowDBNull = false
            Me.columnEnrolled.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateTeacherLoadRow() As TemplateTeacherLoadRow
            Return CType(Me.NewRow,TemplateTeacherLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateTeacherLoadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateTeacherLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateTeacherLoadRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadRowChanged(Me, New TemplateTeacherLoadRowChangeEvent(CType(e.Row,TemplateTeacherLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateTeacherLoadRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadRowChanging(Me, New TemplateTeacherLoadRowChangeEvent(CType(e.Row,TemplateTeacherLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateTeacherLoadRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadRowDeleted(Me, New TemplateTeacherLoadRowChangeEvent(CType(e.Row,TemplateTeacherLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateTeacherLoadRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadRowDeleting(Me, New TemplateTeacherLoadRowChangeEvent(CType(e.Row,TemplateTeacherLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateTeacherLoadRow(ByVal row As TemplateTeacherLoadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateTeacherLoadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SemesterbyPkDataTable
        Inherits Global.System.Data.TypedTableBase(Of SemesterbyPkRow)
        
        Private columnSemPK As Global.System.Data.DataColumn
        
        Private columnSemesterName As Global.System.Data.DataColumn
        
        Private columnsorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SemesterbyPk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SemesterbyPkRow
            Get
                Return CType(Me.Rows(index),SemesterbyPkRow)
            End Get
        End Property
        
        Public Event SemesterbyPkRowChanging As SemesterbyPkRowChangeEventHandler
        
        Public Event SemesterbyPkRowChanged As SemesterbyPkRowChangeEventHandler
        
        Public Event SemesterbyPkRowDeleting As SemesterbyPkRowChangeEventHandler
        
        Public Event SemesterbyPkRowDeleted As SemesterbyPkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSemesterbyPkRow(ByVal row As SemesterbyPkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSemesterbyPkRow(ByVal SemesterName As String, ByVal sorter As Integer) As SemesterbyPkRow
            Dim rowSemesterbyPkRow As SemesterbyPkRow = CType(Me.NewRow,SemesterbyPkRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SemesterName, sorter}
            rowSemesterbyPkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSemesterbyPkRow)
            Return rowSemesterbyPkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySemPK(ByVal SemPK As Integer) As SemesterbyPkRow
            Return CType(Me.Rows.Find(New Object() {SemPK}),SemesterbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SemesterbyPkDataTable = CType(MyBase.Clone,SemesterbyPkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SemesterbyPkDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSemPK = MyBase.Columns("SemPK")
            Me.columnSemesterName = MyBase.Columns("SemesterName")
            Me.columnsorter = MyBase.Columns("sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSemPK = New Global.System.Data.DataColumn("SemPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemPK)
            Me.columnSemesterName = New Global.System.Data.DataColumn("SemesterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterName)
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSemPK}, true))
            Me.columnSemPK.AutoIncrement = true
            Me.columnSemPK.AllowDBNull = false
            Me.columnSemPK.ReadOnly = true
            Me.columnSemPK.Unique = true
            Me.columnSemesterName.AllowDBNull = false
            Me.columnSemesterName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSemesterbyPkRow() As SemesterbyPkRow
            Return CType(Me.NewRow,SemesterbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SemesterbyPkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SemesterbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SemesterbyPkRowChangedEvent) Is Nothing) Then
                RaiseEvent SemesterbyPkRowChanged(Me, New SemesterbyPkRowChangeEvent(CType(e.Row,SemesterbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SemesterbyPkRowChangingEvent) Is Nothing) Then
                RaiseEvent SemesterbyPkRowChanging(Me, New SemesterbyPkRowChangeEvent(CType(e.Row,SemesterbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SemesterbyPkRowDeletedEvent) Is Nothing) Then
                RaiseEvent SemesterbyPkRowDeleted(Me, New SemesterbyPkRowChangeEvent(CType(e.Row,SemesterbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SemesterbyPkRowDeletingEvent) Is Nothing) Then
                RaiseEvent SemesterbyPkRowDeleting(Me, New SemesterbyPkRowChangeEvent(CType(e.Row,SemesterbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSemesterbyPkRow(ByVal row As SemesterbyPkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SemesterbyPkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsByPreReqDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsByPreReqRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnNumOfPreReq As Global.System.Data.DataColumn
        
        Private columnprereq2 As Global.System.Data.DataColumn
        
        Private columnprereq3 As Global.System.Data.DataColumn
        
        Private columnprereq4 As Global.System.Data.DataColumn
        
        Private columnprereq5 As Global.System.Data.DataColumn
        
        Private columnprereq6 As Global.System.Data.DataColumn
        
        Private columnprereq7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubjectsByPreReq"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumOfPreReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumOfPreReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsByPreReqRow
            Get
                Return CType(Me.Rows(index),SubjectsByPreReqRow)
            End Get
        End Property
        
        Public Event SubjectsByPreReqRowChanging As SubjectsByPreReqRowChangeEventHandler
        
        Public Event SubjectsByPreReqRowChanged As SubjectsByPreReqRowChangeEventHandler
        
        Public Event SubjectsByPreReqRowDeleting As SubjectsByPreReqRowChangeEventHandler
        
        Public Event SubjectsByPreReqRowDeleted As SubjectsByPreReqRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsByPreReqRow(ByVal row As SubjectsByPreReqRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsByPreReqRow(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal prereq As Integer, ByVal NumOfPreReq As Integer, ByVal prereq2 As Integer, ByVal prereq3 As Integer, ByVal prereq4 As Integer, ByVal prereq5 As Integer, ByVal prereq6 As Integer, ByVal prereq7 As Integer) As SubjectsByPreReqRow
            Dim rowSubjectsByPreReqRow As SubjectsByPreReqRow = CType(Me.NewRow,SubjectsByPreReqRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, prereq, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7}
            rowSubjectsByPreReqRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsByPreReqRow)
            Return rowSubjectsByPreReqRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsByPreReqRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsByPreReqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsByPreReqDataTable = CType(MyBase.Clone,SubjectsByPreReqDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsByPreReqDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnNumOfPreReq = MyBase.Columns("NumOfPreReq")
            Me.columnprereq2 = MyBase.Columns("prereq2")
            Me.columnprereq3 = MyBase.Columns("prereq3")
            Me.columnprereq4 = MyBase.Columns("prereq4")
            Me.columnprereq5 = MyBase.Columns("prereq5")
            Me.columnprereq6 = MyBase.Columns("prereq6")
            Me.columnprereq7 = MyBase.Columns("prereq7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnNumOfPreReq = New Global.System.Data.DataColumn("NumOfPreReq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumOfPreReq)
            Me.columnprereq2 = New Global.System.Data.DataColumn("prereq2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq2)
            Me.columnprereq3 = New Global.System.Data.DataColumn("prereq3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq3)
            Me.columnprereq4 = New Global.System.Data.DataColumn("prereq4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq4)
            Me.columnprereq5 = New Global.System.Data.DataColumn("prereq5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq5)
            Me.columnprereq6 = New Global.System.Data.DataColumn("prereq6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq6)
            Me.columnprereq7 = New Global.System.Data.DataColumn("prereq7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq7)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 1000
            Me.columnprereq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsByPreReqRow() As SubjectsByPreReqRow
            Return CType(Me.NewRow,SubjectsByPreReqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsByPreReqRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsByPreReqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsByPreReqRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsByPreReqRowChanged(Me, New SubjectsByPreReqRowChangeEvent(CType(e.Row,SubjectsByPreReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsByPreReqRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsByPreReqRowChanging(Me, New SubjectsByPreReqRowChangeEvent(CType(e.Row,SubjectsByPreReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsByPreReqRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsByPreReqRowDeleted(Me, New SubjectsByPreReqRowChangeEvent(CType(e.Row,SubjectsByPreReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsByPreReqRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsByPreReqRowDeleting(Me, New SubjectsByPreReqRowChangeEvent(CType(e.Row,SubjectsByPreReqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsByPreReqRow(ByVal row As SubjectsByPreReqRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsByPreReqDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRTypesbyCodeandCourseDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRTypesbyCodeandCourseRow)
        
        Private columnTRPK As Global.System.Data.DataColumn
        
        Private columnTRCode As Global.System.Data.DataColumn
        
        Private columnTRName As Global.System.Data.DataColumn
        
        Private columnTRAmount As Global.System.Data.DataColumn
        
        Private columnTRCourse As Global.System.Data.DataColumn
        
        Private columnTRYearLevel As Global.System.Data.DataColumn
        
        Private columnTRSubject As Global.System.Data.DataColumn
        
        Private columnTRRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRTypesbyCodeandCourse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRYearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRTypesbyCodeandCourseRow
            Get
                Return CType(Me.Rows(index),TRTypesbyCodeandCourseRow)
            End Get
        End Property
        
        Public Event TRTypesbyCodeandCourseRowChanging As TRTypesbyCodeandCourseRowChangeEventHandler
        
        Public Event TRTypesbyCodeandCourseRowChanged As TRTypesbyCodeandCourseRowChangeEventHandler
        
        Public Event TRTypesbyCodeandCourseRowDeleting As TRTypesbyCodeandCourseRowChangeEventHandler
        
        Public Event TRTypesbyCodeandCourseRowDeleted As TRTypesbyCodeandCourseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRTypesbyCodeandCourseRow(ByVal row As TRTypesbyCodeandCourseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRTypesbyCodeandCourseRow(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Integer, ByVal TRYearLevel As Integer, ByVal TRSubject As Integer, ByVal TRRemarks As String) As TRTypesbyCodeandCourseRow
            Dim rowTRTypesbyCodeandCourseRow As TRTypesbyCodeandCourseRow = CType(Me.NewRow,TRTypesbyCodeandCourseRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks}
            rowTRTypesbyCodeandCourseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRTypesbyCodeandCourseRow)
            Return rowTRTypesbyCodeandCourseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRPK(ByVal TRPK As Integer) As TRTypesbyCodeandCourseRow
            Return CType(Me.Rows.Find(New Object() {TRPK}),TRTypesbyCodeandCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRTypesbyCodeandCourseDataTable = CType(MyBase.Clone,TRTypesbyCodeandCourseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRTypesbyCodeandCourseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRPK = MyBase.Columns("TRPK")
            Me.columnTRCode = MyBase.Columns("TRCode")
            Me.columnTRName = MyBase.Columns("TRName")
            Me.columnTRAmount = MyBase.Columns("TRAmount")
            Me.columnTRCourse = MyBase.Columns("TRCourse")
            Me.columnTRYearLevel = MyBase.Columns("TRYearLevel")
            Me.columnTRSubject = MyBase.Columns("TRSubject")
            Me.columnTRRemarks = MyBase.Columns("TRRemarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRPK = New Global.System.Data.DataColumn("TRPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRPK)
            Me.columnTRCode = New Global.System.Data.DataColumn("TRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCode)
            Me.columnTRName = New Global.System.Data.DataColumn("TRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRName)
            Me.columnTRAmount = New Global.System.Data.DataColumn("TRAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAmount)
            Me.columnTRCourse = New Global.System.Data.DataColumn("TRCourse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCourse)
            Me.columnTRYearLevel = New Global.System.Data.DataColumn("TRYearLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRYearLevel)
            Me.columnTRSubject = New Global.System.Data.DataColumn("TRSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSubject)
            Me.columnTRRemarks = New Global.System.Data.DataColumn("TRRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRPK}, true))
            Me.columnTRPK.AutoIncrement = true
            Me.columnTRPK.AllowDBNull = false
            Me.columnTRPK.ReadOnly = true
            Me.columnTRPK.Unique = true
            Me.columnTRCode.AllowDBNull = false
            Me.columnTRCode.MaxLength = 50
            Me.columnTRName.AllowDBNull = false
            Me.columnTRName.MaxLength = 50
            Me.columnTRAmount.AllowDBNull = false
            Me.columnTRRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRTypesbyCodeandCourseRow() As TRTypesbyCodeandCourseRow
            Return CType(Me.NewRow,TRTypesbyCodeandCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRTypesbyCodeandCourseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRTypesbyCodeandCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRTypesbyCodeandCourseRowChangedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyCodeandCourseRowChanged(Me, New TRTypesbyCodeandCourseRowChangeEvent(CType(e.Row,TRTypesbyCodeandCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRTypesbyCodeandCourseRowChangingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyCodeandCourseRowChanging(Me, New TRTypesbyCodeandCourseRowChangeEvent(CType(e.Row,TRTypesbyCodeandCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRTypesbyCodeandCourseRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRTypesbyCodeandCourseRowDeleted(Me, New TRTypesbyCodeandCourseRowChangeEvent(CType(e.Row,TRTypesbyCodeandCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRTypesbyCodeandCourseRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRTypesbyCodeandCourseRowDeleting(Me, New TRTypesbyCodeandCourseRowChangeEvent(CType(e.Row,TRTypesbyCodeandCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRTypesbyCodeandCourseRow(ByVal row As TRTypesbyCodeandCourseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRTypesbyCodeandCourseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRTypesbySubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRTypesbySubjectRow)
        
        Private columnTRPK As Global.System.Data.DataColumn
        
        Private columnTRCode As Global.System.Data.DataColumn
        
        Private columnTRName As Global.System.Data.DataColumn
        
        Private columnTRAmount As Global.System.Data.DataColumn
        
        Private columnTRCourse As Global.System.Data.DataColumn
        
        Private columnTRYearLevel As Global.System.Data.DataColumn
        
        Private columnTRSubject As Global.System.Data.DataColumn
        
        Private columnTRRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRTypesbySubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRCourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRYearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRTypesbySubjectRow
            Get
                Return CType(Me.Rows(index),TRTypesbySubjectRow)
            End Get
        End Property
        
        Public Event TRTypesbySubjectRowChanging As TRTypesbySubjectRowChangeEventHandler
        
        Public Event TRTypesbySubjectRowChanged As TRTypesbySubjectRowChangeEventHandler
        
        Public Event TRTypesbySubjectRowDeleting As TRTypesbySubjectRowChangeEventHandler
        
        Public Event TRTypesbySubjectRowDeleted As TRTypesbySubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTRTypesbySubjectRow(ByVal row As TRTypesbySubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTRTypesbySubjectRow(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Integer, ByVal TRYearLevel As Integer, ByVal TRSubject As Integer, ByVal TRRemarks As String) As TRTypesbySubjectRow
            Dim rowTRTypesbySubjectRow As TRTypesbySubjectRow = CType(Me.NewRow,TRTypesbySubjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks}
            rowTRTypesbySubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRTypesbySubjectRow)
            Return rowTRTypesbySubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRPK(ByVal TRPK As Integer) As TRTypesbySubjectRow
            Return CType(Me.Rows.Find(New Object() {TRPK}),TRTypesbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRTypesbySubjectDataTable = CType(MyBase.Clone,TRTypesbySubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRTypesbySubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRPK = MyBase.Columns("TRPK")
            Me.columnTRCode = MyBase.Columns("TRCode")
            Me.columnTRName = MyBase.Columns("TRName")
            Me.columnTRAmount = MyBase.Columns("TRAmount")
            Me.columnTRCourse = MyBase.Columns("TRCourse")
            Me.columnTRYearLevel = MyBase.Columns("TRYearLevel")
            Me.columnTRSubject = MyBase.Columns("TRSubject")
            Me.columnTRRemarks = MyBase.Columns("TRRemarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRPK = New Global.System.Data.DataColumn("TRPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRPK)
            Me.columnTRCode = New Global.System.Data.DataColumn("TRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCode)
            Me.columnTRName = New Global.System.Data.DataColumn("TRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRName)
            Me.columnTRAmount = New Global.System.Data.DataColumn("TRAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAmount)
            Me.columnTRCourse = New Global.System.Data.DataColumn("TRCourse", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRCourse)
            Me.columnTRYearLevel = New Global.System.Data.DataColumn("TRYearLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRYearLevel)
            Me.columnTRSubject = New Global.System.Data.DataColumn("TRSubject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSubject)
            Me.columnTRRemarks = New Global.System.Data.DataColumn("TRRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRPK}, true))
            Me.columnTRPK.AutoIncrement = true
            Me.columnTRPK.AllowDBNull = false
            Me.columnTRPK.ReadOnly = true
            Me.columnTRPK.Unique = true
            Me.columnTRCode.AllowDBNull = false
            Me.columnTRCode.MaxLength = 50
            Me.columnTRName.AllowDBNull = false
            Me.columnTRName.MaxLength = 50
            Me.columnTRAmount.AllowDBNull = false
            Me.columnTRRemarks.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTRTypesbySubjectRow() As TRTypesbySubjectRow
            Return CType(Me.NewRow,TRTypesbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRTypesbySubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRTypesbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRTypesbySubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent TRTypesbySubjectRowChanged(Me, New TRTypesbySubjectRowChangeEvent(CType(e.Row,TRTypesbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRTypesbySubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent TRTypesbySubjectRowChanging(Me, New TRTypesbySubjectRowChangeEvent(CType(e.Row,TRTypesbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRTypesbySubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRTypesbySubjectRowDeleted(Me, New TRTypesbySubjectRowChangeEvent(CType(e.Row,TRTypesbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRTypesbySubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRTypesbySubjectRowDeleting(Me, New TRTypesbySubjectRowChangeEvent(CType(e.Row,TRTypesbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTRTypesbySubjectRow(ByVal row As TRTypesbySubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRTypesbySubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CoursesbyNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of CoursesbyNameRow)
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnCourseID As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnspecial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CoursesbyName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property specialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoursesbyNameRow
            Get
                Return CType(Me.Rows(index),CoursesbyNameRow)
            End Get
        End Property
        
        Public Event CoursesbyNameRowChanging As CoursesbyNameRowChangeEventHandler
        
        Public Event CoursesbyNameRowChanged As CoursesbyNameRowChangeEventHandler
        
        Public Event CoursesbyNameRowDeleting As CoursesbyNameRowChangeEventHandler
        
        Public Event CoursesbyNameRowDeleted As CoursesbyNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCoursesbyNameRow(ByVal row As CoursesbyNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCoursesbyNameRow(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As CoursesbyNameRow
            Dim rowCoursesbyNameRow As CoursesbyNameRow = CType(Me.NewRow,CoursesbyNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CourseID, CourseName, Remarks, special}
            rowCoursesbyNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCoursesbyNameRow)
            Return rowCoursesbyNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycoursepk(ByVal coursepk As Integer) As CoursesbyNameRow
            Return CType(Me.Rows.Find(New Object() {coursepk}),CoursesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CoursesbyNameDataTable = CType(MyBase.Clone,CoursesbyNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CoursesbyNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnCourseID = MyBase.Columns("CourseID")
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnspecial = MyBase.Columns("special")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnCourseID = New Global.System.Data.DataColumn("CourseID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseID)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnspecial = New Global.System.Data.DataColumn("special", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspecial)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncoursepk}, true))
            Me.columncoursepk.AutoIncrement = true
            Me.columncoursepk.AllowDBNull = false
            Me.columncoursepk.ReadOnly = true
            Me.columncoursepk.Unique = true
            Me.columnCourseID.AllowDBNull = false
            Me.columnCourseID.MaxLength = 50
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnspecial.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCoursesbyNameRow() As CoursesbyNameRow
            Return CType(Me.NewRow,CoursesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CoursesbyNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CoursesbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoursesbyNameRowChangedEvent) Is Nothing) Then
                RaiseEvent CoursesbyNameRowChanged(Me, New CoursesbyNameRowChangeEvent(CType(e.Row,CoursesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoursesbyNameRowChangingEvent) Is Nothing) Then
                RaiseEvent CoursesbyNameRowChanging(Me, New CoursesbyNameRowChangeEvent(CType(e.Row,CoursesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoursesbyNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoursesbyNameRowDeleted(Me, New CoursesbyNameRowChangeEvent(CType(e.Row,CoursesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoursesbyNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoursesbyNameRowDeleting(Me, New CoursesbyNameRowChangeEvent(CType(e.Row,CoursesbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCoursesbyNameRow(ByVal row As CoursesbyNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CoursesbyNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsorderedbyNameDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsorderedbyNameRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnlabunits As Global.System.Data.DataColumn
        
        Private columnmajor As Global.System.Data.DataColumn
        
        Private columnNumOfPreReq As Global.System.Data.DataColumn
        
        Private columnprereq2 As Global.System.Data.DataColumn
        
        Private columnprereq3 As Global.System.Data.DataColumn
        
        Private columnprereq4 As Global.System.Data.DataColumn
        
        Private columnprereq5 As Global.System.Data.DataColumn
        
        Private columnprereq6 As Global.System.Data.DataColumn
        
        Private columnprereq7 As Global.System.Data.DataColumn
        
        Private columnCreditGroup As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubjectsorderedbyName"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property labunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlabunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property majorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumOfPreReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumOfPreReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsorderedbyNameRow
            Get
                Return CType(Me.Rows(index),SubjectsorderedbyNameRow)
            End Get
        End Property
        
        Public Event SubjectsorderedbyNameRowChanging As SubjectsorderedbyNameRowChangeEventHandler
        
        Public Event SubjectsorderedbyNameRowChanged As SubjectsorderedbyNameRowChangeEventHandler
        
        Public Event SubjectsorderedbyNameRowDeleting As SubjectsorderedbyNameRowChangeEventHandler
        
        Public Event SubjectsorderedbyNameRowDeleted As SubjectsorderedbyNameRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsorderedbyNameRow(ByVal row As SubjectsorderedbyNameRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsorderedbyNameRow(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer, ByVal labunits As Single, ByVal major As Boolean, ByVal NumOfPreReq As Integer, ByVal prereq2 As Integer, ByVal prereq3 As Integer, ByVal prereq4 As Integer, ByVal prereq5 As Integer, ByVal prereq6 As Integer, ByVal prereq7 As Integer, ByVal CreditGroup As Integer) As SubjectsorderedbyNameRow
            Dim rowSubjectsorderedbyNameRow As SubjectsorderedbyNameRow = CType(Me.NewRow,SubjectsorderedbyNameRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, Remarks, units, prereq, labunits, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, CreditGroup}
            rowSubjectsorderedbyNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsorderedbyNameRow)
            Return rowSubjectsorderedbyNameRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsorderedbyNameRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsorderedbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsorderedbyNameDataTable = CType(MyBase.Clone,SubjectsorderedbyNameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsorderedbyNameDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnunits = MyBase.Columns("units")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnlabunits = MyBase.Columns("labunits")
            Me.columnmajor = MyBase.Columns("major")
            Me.columnNumOfPreReq = MyBase.Columns("NumOfPreReq")
            Me.columnprereq2 = MyBase.Columns("prereq2")
            Me.columnprereq3 = MyBase.Columns("prereq3")
            Me.columnprereq4 = MyBase.Columns("prereq4")
            Me.columnprereq5 = MyBase.Columns("prereq5")
            Me.columnprereq6 = MyBase.Columns("prereq6")
            Me.columnprereq7 = MyBase.Columns("prereq7")
            Me.columnCreditGroup = MyBase.Columns("CreditGroup")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnlabunits = New Global.System.Data.DataColumn("labunits", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlabunits)
            Me.columnmajor = New Global.System.Data.DataColumn("major", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmajor)
            Me.columnNumOfPreReq = New Global.System.Data.DataColumn("NumOfPreReq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumOfPreReq)
            Me.columnprereq2 = New Global.System.Data.DataColumn("prereq2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq2)
            Me.columnprereq3 = New Global.System.Data.DataColumn("prereq3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq3)
            Me.columnprereq4 = New Global.System.Data.DataColumn("prereq4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq4)
            Me.columnprereq5 = New Global.System.Data.DataColumn("prereq5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq5)
            Me.columnprereq6 = New Global.System.Data.DataColumn("prereq6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq6)
            Me.columnprereq7 = New Global.System.Data.DataColumn("prereq7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq7)
            Me.columnCreditGroup = New Global.System.Data.DataColumn("CreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditGroup)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 1000
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
            Me.columnunits.AllowDBNull = false
            Me.columnprereq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsorderedbyNameRow() As SubjectsorderedbyNameRow
            Return CType(Me.NewRow,SubjectsorderedbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsorderedbyNameRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsorderedbyNameRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsorderedbyNameRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsorderedbyNameRowChanged(Me, New SubjectsorderedbyNameRowChangeEvent(CType(e.Row,SubjectsorderedbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsorderedbyNameRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsorderedbyNameRowChanging(Me, New SubjectsorderedbyNameRowChangeEvent(CType(e.Row,SubjectsorderedbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsorderedbyNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsorderedbyNameRowDeleted(Me, New SubjectsorderedbyNameRowChangeEvent(CType(e.Row,SubjectsorderedbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsorderedbyNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsorderedbyNameRowDeleting(Me, New SubjectsorderedbyNameRowChangeEvent(CType(e.Row,SubjectsorderedbyNameRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsorderedbyNameRow(ByVal row As SubjectsorderedbyNameRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsorderedbyNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExamsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ExamsRow)
        
        Private columnExamPK As Global.System.Data.DataColumn
        
        Private columnsyFK As Global.System.Data.DataColumn
        
        Private columnsemFK As Global.System.Data.DataColumn
        
        Private columnexamfrom1 As Global.System.Data.DataColumn
        
        Private columnexamto1 As Global.System.Data.DataColumn
        
        Private columnexamfrom2 As Global.System.Data.DataColumn
        
        Private columnexamto2 As Global.System.Data.DataColumn
        
        Private columnexamfrom3 As Global.System.Data.DataColumn
        
        Private columnexamto3 As Global.System.Data.DataColumn
        
        Private columnexamfrom4 As Global.System.Data.DataColumn
        
        Private columnexamto4 As Global.System.Data.DataColumn
        
        Private columnexamfrom5 As Global.System.Data.DataColumn
        
        Private columnexamto5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Exams"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExamPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExamPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExamsRow
            Get
                Return CType(Me.Rows(index),ExamsRow)
            End Get
        End Property
        
        Public Event ExamsRowChanging As ExamsRowChangeEventHandler
        
        Public Event ExamsRowChanged As ExamsRowChangeEventHandler
        
        Public Event ExamsRowDeleting As ExamsRowChangeEventHandler
        
        Public Event ExamsRowDeleted As ExamsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExamsRow(ByVal row As ExamsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExamsRow(ByVal syFK As Integer, ByVal semFK As Integer, ByVal examfrom1 As Date, ByVal examto1 As Date, ByVal examfrom2 As Date, ByVal examto2 As Date, ByVal examfrom3 As Date, ByVal examto3 As Date, ByVal examfrom4 As Date, ByVal examto4 As Date, ByVal examfrom5 As Date, ByVal examto5 As Date) As ExamsRow
            Dim rowExamsRow As ExamsRow = CType(Me.NewRow,ExamsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, examfrom5, examto5}
            rowExamsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExamsRow)
            Return rowExamsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByExamPK(ByVal ExamPK As Integer) As ExamsRow
            Return CType(Me.Rows.Find(New Object() {ExamPK}),ExamsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExamsDataTable = CType(MyBase.Clone,ExamsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExamsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnExamPK = MyBase.Columns("ExamPK")
            Me.columnsyFK = MyBase.Columns("syFK")
            Me.columnsemFK = MyBase.Columns("semFK")
            Me.columnexamfrom1 = MyBase.Columns("examfrom1")
            Me.columnexamto1 = MyBase.Columns("examto1")
            Me.columnexamfrom2 = MyBase.Columns("examfrom2")
            Me.columnexamto2 = MyBase.Columns("examto2")
            Me.columnexamfrom3 = MyBase.Columns("examfrom3")
            Me.columnexamto3 = MyBase.Columns("examto3")
            Me.columnexamfrom4 = MyBase.Columns("examfrom4")
            Me.columnexamto4 = MyBase.Columns("examto4")
            Me.columnexamfrom5 = MyBase.Columns("examfrom5")
            Me.columnexamto5 = MyBase.Columns("examto5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnExamPK = New Global.System.Data.DataColumn("ExamPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExamPK)
            Me.columnsyFK = New Global.System.Data.DataColumn("syFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyFK)
            Me.columnsemFK = New Global.System.Data.DataColumn("semFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemFK)
            Me.columnexamfrom1 = New Global.System.Data.DataColumn("examfrom1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom1)
            Me.columnexamto1 = New Global.System.Data.DataColumn("examto1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto1)
            Me.columnexamfrom2 = New Global.System.Data.DataColumn("examfrom2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom2)
            Me.columnexamto2 = New Global.System.Data.DataColumn("examto2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto2)
            Me.columnexamfrom3 = New Global.System.Data.DataColumn("examfrom3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom3)
            Me.columnexamto3 = New Global.System.Data.DataColumn("examto3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto3)
            Me.columnexamfrom4 = New Global.System.Data.DataColumn("examfrom4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom4)
            Me.columnexamto4 = New Global.System.Data.DataColumn("examto4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto4)
            Me.columnexamfrom5 = New Global.System.Data.DataColumn("examfrom5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom5)
            Me.columnexamto5 = New Global.System.Data.DataColumn("examto5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto5)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnExamPK}, true))
            Me.columnExamPK.AutoIncrement = true
            Me.columnExamPK.AllowDBNull = false
            Me.columnExamPK.ReadOnly = true
            Me.columnExamPK.Unique = true
            Me.columnsyFK.AllowDBNull = false
            Me.columnsemFK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExamsRow() As ExamsRow
            Return CType(Me.NewRow,ExamsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExamsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExamsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExamsRowChangedEvent) Is Nothing) Then
                RaiseEvent ExamsRowChanged(Me, New ExamsRowChangeEvent(CType(e.Row,ExamsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExamsRowChangingEvent) Is Nothing) Then
                RaiseEvent ExamsRowChanging(Me, New ExamsRowChangeEvent(CType(e.Row,ExamsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExamsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExamsRowDeleted(Me, New ExamsRowChangeEvent(CType(e.Row,ExamsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExamsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExamsRowDeleting(Me, New ExamsRowChangeEvent(CType(e.Row,ExamsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExamsRow(ByVal row As ExamsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExamsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ExamsBySemSYDataTable
        Inherits Global.System.Data.TypedTableBase(Of ExamsBySemSYRow)
        
        Private columnExamPK As Global.System.Data.DataColumn
        
        Private columnsyFK As Global.System.Data.DataColumn
        
        Private columnsemFK As Global.System.Data.DataColumn
        
        Private columnexamfrom1 As Global.System.Data.DataColumn
        
        Private columnexamto1 As Global.System.Data.DataColumn
        
        Private columnexamfrom2 As Global.System.Data.DataColumn
        
        Private columnexamto2 As Global.System.Data.DataColumn
        
        Private columnexamfrom3 As Global.System.Data.DataColumn
        
        Private columnexamto3 As Global.System.Data.DataColumn
        
        Private columnexamfrom4 As Global.System.Data.DataColumn
        
        Private columnexamto4 As Global.System.Data.DataColumn
        
        Private columnexamfrom5 As Global.System.Data.DataColumn
        
        Private columnexamto5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ExamsBySemSY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExamPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExamPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examfrom5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamfrom5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property examto5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnexamto5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExamsBySemSYRow
            Get
                Return CType(Me.Rows(index),ExamsBySemSYRow)
            End Get
        End Property
        
        Public Event ExamsBySemSYRowChanging As ExamsBySemSYRowChangeEventHandler
        
        Public Event ExamsBySemSYRowChanged As ExamsBySemSYRowChangeEventHandler
        
        Public Event ExamsBySemSYRowDeleting As ExamsBySemSYRowChangeEventHandler
        
        Public Event ExamsBySemSYRowDeleted As ExamsBySemSYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddExamsBySemSYRow(ByVal row As ExamsBySemSYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddExamsBySemSYRow(ByVal syFK As Integer, ByVal semFK As Integer, ByVal examfrom1 As Date, ByVal examto1 As Date, ByVal examfrom2 As Date, ByVal examto2 As Date, ByVal examfrom3 As Date, ByVal examto3 As Date, ByVal examfrom4 As Date, ByVal examto4 As Date, ByVal examfrom5 As Date, ByVal examto5 As Date) As ExamsBySemSYRow
            Dim rowExamsBySemSYRow As ExamsBySemSYRow = CType(Me.NewRow,ExamsBySemSYRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, examfrom5, examto5}
            rowExamsBySemSYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowExamsBySemSYRow)
            Return rowExamsBySemSYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByExamPK(ByVal ExamPK As Integer) As ExamsBySemSYRow
            Return CType(Me.Rows.Find(New Object() {ExamPK}),ExamsBySemSYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ExamsBySemSYDataTable = CType(MyBase.Clone,ExamsBySemSYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ExamsBySemSYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnExamPK = MyBase.Columns("ExamPK")
            Me.columnsyFK = MyBase.Columns("syFK")
            Me.columnsemFK = MyBase.Columns("semFK")
            Me.columnexamfrom1 = MyBase.Columns("examfrom1")
            Me.columnexamto1 = MyBase.Columns("examto1")
            Me.columnexamfrom2 = MyBase.Columns("examfrom2")
            Me.columnexamto2 = MyBase.Columns("examto2")
            Me.columnexamfrom3 = MyBase.Columns("examfrom3")
            Me.columnexamto3 = MyBase.Columns("examto3")
            Me.columnexamfrom4 = MyBase.Columns("examfrom4")
            Me.columnexamto4 = MyBase.Columns("examto4")
            Me.columnexamfrom5 = MyBase.Columns("examfrom5")
            Me.columnexamto5 = MyBase.Columns("examto5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnExamPK = New Global.System.Data.DataColumn("ExamPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExamPK)
            Me.columnsyFK = New Global.System.Data.DataColumn("syFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyFK)
            Me.columnsemFK = New Global.System.Data.DataColumn("semFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemFK)
            Me.columnexamfrom1 = New Global.System.Data.DataColumn("examfrom1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom1)
            Me.columnexamto1 = New Global.System.Data.DataColumn("examto1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto1)
            Me.columnexamfrom2 = New Global.System.Data.DataColumn("examfrom2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom2)
            Me.columnexamto2 = New Global.System.Data.DataColumn("examto2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto2)
            Me.columnexamfrom3 = New Global.System.Data.DataColumn("examfrom3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom3)
            Me.columnexamto3 = New Global.System.Data.DataColumn("examto3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto3)
            Me.columnexamfrom4 = New Global.System.Data.DataColumn("examfrom4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom4)
            Me.columnexamto4 = New Global.System.Data.DataColumn("examto4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto4)
            Me.columnexamfrom5 = New Global.System.Data.DataColumn("examfrom5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamfrom5)
            Me.columnexamto5 = New Global.System.Data.DataColumn("examto5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexamto5)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnExamPK}, true))
            Me.columnExamPK.AutoIncrement = true
            Me.columnExamPK.AllowDBNull = false
            Me.columnExamPK.ReadOnly = true
            Me.columnExamPK.Unique = true
            Me.columnsyFK.AllowDBNull = false
            Me.columnsemFK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewExamsBySemSYRow() As ExamsBySemSYRow
            Return CType(Me.NewRow,ExamsBySemSYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ExamsBySemSYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ExamsBySemSYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExamsBySemSYRowChangedEvent) Is Nothing) Then
                RaiseEvent ExamsBySemSYRowChanged(Me, New ExamsBySemSYRowChangeEvent(CType(e.Row,ExamsBySemSYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExamsBySemSYRowChangingEvent) Is Nothing) Then
                RaiseEvent ExamsBySemSYRowChanging(Me, New ExamsBySemSYRowChangeEvent(CType(e.Row,ExamsBySemSYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExamsBySemSYRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExamsBySemSYRowDeleted(Me, New ExamsBySemSYRowChangeEvent(CType(e.Row,ExamsBySemSYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExamsBySemSYRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExamsBySemSYRowDeleting(Me, New ExamsBySemSYRowChangeEvent(CType(e.Row,ExamsBySemSYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveExamsBySemSYRow(ByVal row As ExamsBySemSYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ExamsBySemSYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateTeacherLoadReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateTeacherLoadReportRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnResource As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnDays As Global.System.Data.DataColumn
        
        Private columnstart As Global.System.Data.DataColumn
        
        Private columnend As Global.System.Data.DataColumn
        
        Private columnstudents As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnts As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateTeacherLoadReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property startColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property endColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateTeacherLoadReportRow
            Get
                Return CType(Me.Rows(index),TemplateTeacherLoadReportRow)
            End Get
        End Property
        
        Public Event TemplateTeacherLoadReportRowChanging As TemplateTeacherLoadReportRowChangeEventHandler
        
        Public Event TemplateTeacherLoadReportRowChanged As TemplateTeacherLoadReportRowChangeEventHandler
        
        Public Event TemplateTeacherLoadReportRowDeleting As TemplateTeacherLoadReportRowChangeEventHandler
        
        Public Event TemplateTeacherLoadReportRowDeleted As TemplateTeacherLoadReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateTeacherLoadReportRow(ByVal row As TemplateTeacherLoadReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateTeacherLoadReportRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Resource As String, ByVal Subject As String, ByVal Days As String, ByVal start As String, ByVal _end As String, ByVal students As Integer, ByVal units As Decimal, ByVal ts As String) As TemplateTeacherLoadReportRow
            Dim rowTemplateTeacherLoadReportRow As TemplateTeacherLoadReportRow = CType(Me.NewRow,TemplateTeacherLoadReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Semester, Resource, Subject, Days, start, _end, students, units, ts}
            rowTemplateTeacherLoadReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateTeacherLoadReportRow)
            Return rowTemplateTeacherLoadReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As TemplateTeacherLoadReportRow
            Return CType(Me.Rows.Find(New Object() {PK}),TemplateTeacherLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateTeacherLoadReportDataTable = CType(MyBase.Clone,TemplateTeacherLoadReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateTeacherLoadReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnResource = MyBase.Columns("Resource")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnDays = MyBase.Columns("Days")
            Me.columnstart = MyBase.Columns("start")
            Me.columnend = MyBase.Columns("end")
            Me.columnstudents = MyBase.Columns("students")
            Me.columnunits = MyBase.Columns("units")
            Me.columnts = MyBase.Columns("ts")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnResource = New Global.System.Data.DataColumn("Resource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResource)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnDays = New Global.System.Data.DataColumn("Days", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays)
            Me.columnstart = New Global.System.Data.DataColumn("start", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstart)
            Me.columnend = New Global.System.Data.DataColumn("end", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnend.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "endColumn")
            Me.columnend.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnend")
            Me.columnend.ExtendedProperties.Add("Generator_UserColumnName", "end")
            MyBase.Columns.Add(Me.columnend)
            Me.columnstudents = New Global.System.Data.DataColumn("students", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudents)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnts = New Global.System.Data.DataColumn("ts", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnts)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 50
            Me.columnResource.AllowDBNull = false
            Me.columnResource.MaxLength = 50
            Me.columnSubject.AllowDBNull = false
            Me.columnSubject.MaxLength = 250
            Me.columnDays.AllowDBNull = false
            Me.columnDays.Caption = "Schedule"
            Me.columnDays.MaxLength = 1024
            Me.columnstart.AllowDBNull = false
            Me.columnstart.Caption = "Start"
            Me.columnend.AllowDBNull = false
            Me.columnstudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateTeacherLoadReportRow() As TemplateTeacherLoadReportRow
            Return CType(Me.NewRow,TemplateTeacherLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateTeacherLoadReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateTeacherLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateTeacherLoadReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadReportRowChanged(Me, New TemplateTeacherLoadReportRowChangeEvent(CType(e.Row,TemplateTeacherLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateTeacherLoadReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadReportRowChanging(Me, New TemplateTeacherLoadReportRowChangeEvent(CType(e.Row,TemplateTeacherLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateTeacherLoadReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadReportRowDeleted(Me, New TemplateTeacherLoadReportRowChangeEvent(CType(e.Row,TemplateTeacherLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateTeacherLoadReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadReportRowDeleting(Me, New TemplateTeacherLoadReportRowChangeEvent(CType(e.Row,TemplateTeacherLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateTeacherLoadReportRow(ByVal row As TemplateTeacherLoadReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateTeacherLoadReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateTeacherLoadExtraHoursDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateTeacherLoadExtraHoursRow)
        
        Private columnSubjectDesc As Global.System.Data.DataColumn
        
        Private columnDayTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateTeacherLoadExtraHours"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDayTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateTeacherLoadExtraHoursRow
            Get
                Return CType(Me.Rows(index),TemplateTeacherLoadExtraHoursRow)
            End Get
        End Property
        
        Public Event TemplateTeacherLoadExtraHoursRowChanging As TemplateTeacherLoadExtraHoursRowChangeEventHandler
        
        Public Event TemplateTeacherLoadExtraHoursRowChanged As TemplateTeacherLoadExtraHoursRowChangeEventHandler
        
        Public Event TemplateTeacherLoadExtraHoursRowDeleting As TemplateTeacherLoadExtraHoursRowChangeEventHandler
        
        Public Event TemplateTeacherLoadExtraHoursRowDeleted As TemplateTeacherLoadExtraHoursRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateTeacherLoadExtraHoursRow(ByVal row As TemplateTeacherLoadExtraHoursRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateTeacherLoadExtraHoursRow(ByVal SubjectDesc As String, ByVal DayTime As String) As TemplateTeacherLoadExtraHoursRow
            Dim rowTemplateTeacherLoadExtraHoursRow As TemplateTeacherLoadExtraHoursRow = CType(Me.NewRow,TemplateTeacherLoadExtraHoursRow)
            Dim columnValuesArray() As Object = New Object() {SubjectDesc, DayTime}
            rowTemplateTeacherLoadExtraHoursRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateTeacherLoadExtraHoursRow)
            Return rowTemplateTeacherLoadExtraHoursRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateTeacherLoadExtraHoursDataTable = CType(MyBase.Clone,TemplateTeacherLoadExtraHoursDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateTeacherLoadExtraHoursDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectDesc = MyBase.Columns("SubjectDesc")
            Me.columnDayTime = MyBase.Columns("DayTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectDesc = New Global.System.Data.DataColumn("SubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDesc)
            Me.columnDayTime = New Global.System.Data.DataColumn("DayTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDayTime)
            Me.columnSubjectDesc.DefaultValue = CType("",String)
            Me.columnDayTime.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateTeacherLoadExtraHoursRow() As TemplateTeacherLoadExtraHoursRow
            Return CType(Me.NewRow,TemplateTeacherLoadExtraHoursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateTeacherLoadExtraHoursRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateTeacherLoadExtraHoursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateTeacherLoadExtraHoursRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadExtraHoursRowChanged(Me, New TemplateTeacherLoadExtraHoursRowChangeEvent(CType(e.Row,TemplateTeacherLoadExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateTeacherLoadExtraHoursRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadExtraHoursRowChanging(Me, New TemplateTeacherLoadExtraHoursRowChangeEvent(CType(e.Row,TemplateTeacherLoadExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateTeacherLoadExtraHoursRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadExtraHoursRowDeleted(Me, New TemplateTeacherLoadExtraHoursRowChangeEvent(CType(e.Row,TemplateTeacherLoadExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateTeacherLoadExtraHoursRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateTeacherLoadExtraHoursRowDeleting(Me, New TemplateTeacherLoadExtraHoursRowChangeEvent(CType(e.Row,TemplateTeacherLoadExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateTeacherLoadExtraHoursRow(ByVal row As TemplateTeacherLoadExtraHoursRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSchool = New dsSchool
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateTeacherLoadExtraHoursDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchoolYearRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchoolYear As SchoolYearDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchoolYear = CType(Me.Table,SchoolYearDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSchoolYear.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSchoolYear.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableSchoolYear.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableSchoolYear.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSchoolYear.sorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'SchoolYear' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchoolYear.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableSchoolYear.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableSchoolYear.sorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SemesterRow
        Inherits Global.System.Data.DataRow
        
        Private tableSemester As SemesterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSemester = CType(Me.Table,SemesterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemPK() As Integer
            Get
                Return CType(Me(Me.tableSemester.SemPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSemester.SemPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemesterName() As String
            Get
                Return CType(Me(Me.tableSemester.SemesterNameColumn),String)
            End Get
            Set
                Me(Me.tableSemester.SemesterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSemester.sorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'Semester' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSemester.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableSemester.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableSemester.sorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchoolResourcesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchoolResources As SchoolResourcesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchoolResources = CType(Me.Table,SchoolResourcesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourcePrikey() As Integer
            Get
                Return CType(Me(Me.tableSchoolResources.ResourcePrikeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSchoolResources.ResourcePrikeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceID() As String
            Get
                Return CType(Me(Me.tableSchoolResources.ResourceIDColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResources.ResourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceName() As String
            Get
                Return CType(Me(Me.tableSchoolResources.ResourceNameColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResources.ResourceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableSchoolResources.LocationColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResources.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSchoolResources.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResources.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjects As SubjectsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjects = CType(Me.Table,SubjectsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjects.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjects.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjects.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjects.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSubjects.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Single
            Get
                Return CType(Me(Me.tableSubjects.unitsColumn),Single)
            End Get
            Set
                Me(Me.tableSubjects.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjects.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjects.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property labunits() As Single
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.labunitsColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'labunits' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.labunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property major() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.majorColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'major' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.majorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumOfPreReq() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.NumOfPreReqColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumOfPreReq' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.NumOfPreReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq2' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq3' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq4' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq5' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq6' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq7' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.CreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditGroup' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.CreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inactive() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.inactiveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'inactive' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.inactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RLEunits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.RLEunitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RLEunits' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.RLEunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslabunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.labunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlabunitsNull()
            Me(Me.tableSubjects.labunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmajorNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.majorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmajorNull()
            Me(Me.tableSubjects.majorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumOfPreReqNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.NumOfPreReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumOfPreReqNull()
            Me(Me.tableSubjects.NumOfPreReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq2Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq2Null()
            Me(Me.tableSubjects.prereq2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq3Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq3Null()
            Me(Me.tableSubjects.prereq3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq4Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq4Null()
            Me(Me.tableSubjects.prereq4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq5Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq5Null()
            Me(Me.tableSubjects.prereq5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq6Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq6Null()
            Me(Me.tableSubjects.prereq6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq7Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq7Null()
            Me(Me.tableSubjects.prereq7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.CreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditGroupNull()
            Me(Me.tableSubjects.CreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.inactiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinactiveNull()
            Me(Me.tableSubjects.inactiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRLEunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.RLEunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRLEunitsNull()
            Me(Me.tableSubjects.RLEunitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsByPriKeyRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjectsByPriKey As SubjectsByPriKeyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjectsByPriKey = CType(Me.Table,SubjectsByPriKeyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Single
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.unitsColumn),Single)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByPriKey.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property labunits() As Single
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPriKey.labunitsColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'labunits' in table 'SubjectsByPriKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.labunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property major() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPriKey.majorColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'major' in table 'SubjectsByPriKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.majorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RLEunits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPriKey.RLEunitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RLEunits' in table 'SubjectsByPriKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPriKey.RLEunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslabunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPriKey.labunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlabunitsNull()
            Me(Me.tableSubjectsByPriKey.labunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmajorNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPriKey.majorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmajorNull()
            Me(Me.tableSubjectsByPriKey.majorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRLEunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPriKey.RLEunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRLEunitsNull()
            Me(Me.tableSubjectsByPriKey.RLEunitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TeachersRow
        Inherits Global.System.Data.DataRow
        
        Private tableTeachers As TeachersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeachers = CType(Me.Table,TeachersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherPriKey() As Integer
            Get
                Return CType(Me(Me.tableTeachers.TeacherPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableTeachers.TeacherPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherIDNum() As String
            Get
                Return CType(Me(Me.tableTeachers.TeacherIDNumColumn),String)
            End Get
            Set
                Me(Me.tableTeachers.TeacherIDNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableTeachers.NameColumn),String)
            End Get
            Set
                Me(Me.tableTeachers.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableTeachers.Address1Column),String)
            End Get
            Set
                Me(Me.tableTeachers.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableTeachers.Address2Column),String)
            End Get
            Set
                Me(Me.tableTeachers.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableTeachers.Address3Column),String)
            End Get
            Set
                Me(Me.tableTeachers.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableTeachers.phoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachers.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cellphone() As String
            Get
                Return CType(Me(Me.tableTeachers.cellphoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachers.cellphoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableTeachers.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableTeachers.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CoursesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCourses As CoursesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCourses = CType(Me.Table,CoursesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableCourses.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableCourses.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseID() As String
            Get
                Return CType(Me(Me.tableCourses.CourseIDColumn),String)
            End Get
            Set
                Me(Me.tableCourses.CourseIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tableCourses.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tableCourses.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableCourses.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableCourses.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property special() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCourses.specialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'special' in table 'Courses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCourses.specialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsspecialNull() As Boolean
            Return Me.IsNull(Me.tableCourses.specialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetspecialNull()
            Me(Me.tableCourses.specialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BlockSectionTuitionRow
        Inherits Global.System.Data.DataRow
        
        Private tableBlockSectionTuition As BlockSectionTuitionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBlockSectionTuition = CType(Me.Table,BlockSectionTuitionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlockSectionPK() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.BlockSectionPKColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.BlockSectionPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEM() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.SEMColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.SEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.courseColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.subjectidColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.subjectidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eduyear() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.eduyearColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.eduyearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property effectivedate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBlockSectionTuition.effectivedateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'effectivedate' in table 'BlockSectionTuition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBlockSectionTuition.effectivedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseffectivedateNull() As Boolean
            Return Me.IsNull(Me.tableBlockSectionTuition.effectivedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteffectivedateNull()
            Me(Me.tableBlockSectionTuition.effectivedateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PrefTableRow
        Inherits Global.System.Data.DataRow
        
        Private tablePrefTable As PrefTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrefTable = CType(Me.Table,PrefTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prefid() As Integer
            Get
                Return CType(Me(Me.tablePrefTable.prefidColumn),Integer)
            End Get
            Set
                Me(Me.tablePrefTable.prefidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrefName() As String
            Get
                Return CType(Me(Me.tablePrefTable.PrefNameColumn),String)
            End Get
            Set
                Me(Me.tablePrefTable.PrefNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrefValue() As String
            Get
                Return CType(Me(Me.tablePrefTable.PrefValueColumn),String)
            End Get
            Set
                Me(Me.tablePrefTable.PrefValueColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchoolYearbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchoolYearbyPK As SchoolYearbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchoolYearbyPK = CType(Me.Table,SchoolYearbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSchoolYearbyPK.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSchoolYearbyPK.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableSchoolYearbyPK.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableSchoolYearbyPK.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSchoolYearbyPK.sorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'SchoolYearbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSchoolYearbyPK.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableSchoolYearbyPK.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableSchoolYearbyPK.sorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BlockSectionTuitionbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableBlockSectionTuitionbyPK As BlockSectionTuitionbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBlockSectionTuitionbyPK = CType(Me.Table,BlockSectionTuitionbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlockSectionPK() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.BlockSectionPKColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.BlockSectionPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEM() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.SEMColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.SEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.courseColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.subjectidColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.subjectidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eduyear() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.eduyearColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.eduyearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SY() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyPK.SYColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property effectivedate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBlockSectionTuitionbyPK.effectivedateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'effectivedate' in table 'BlockSectionTuitionbyPK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyPK.effectivedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseffectivedateNull() As Boolean
            Return Me.IsNull(Me.tableBlockSectionTuitionbyPK.effectivedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteffectivedateNull()
            Me(Me.tableBlockSectionTuitionbyPK.effectivedateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOffering As SYOfferingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOffering = CType(Me.Table,SYOfferingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOffering.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOffering.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOffering.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOffering.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOffering.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOffering.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOffering.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOffering.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOffering.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOffering.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOffering.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOffering.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOffering.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOffering.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOffering.closedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'closed' in table 'SYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOffering.closedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property requested() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOffering.requestedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'requested' in table 'SYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOffering.requestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isFused() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOffering.isFusedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isFused' in table 'SYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOffering.isFusedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isSpecialTutorial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOffering.isSpecialTutorialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isSpecialTutorial' in table 'SYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOffering.isSpecialTutorialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclosedNull() As Boolean
            Return Me.IsNull(Me.tableSYOffering.closedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclosedNull()
            Me(Me.tableSYOffering.closedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrequestedNull() As Boolean
            Return Me.IsNull(Me.tableSYOffering.requestedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrequestedNull()
            Me(Me.tableSYOffering.requestedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisFusedNull() As Boolean
            Return Me.IsNull(Me.tableSYOffering.isFusedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisFusedNull()
            Me(Me.tableSYOffering.isFusedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisSpecialTutorialNull() As Boolean
            Return Me.IsNull(Me.tableSYOffering.isSpecialTutorialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisSpecialTutorialNull()
            Me(Me.tableSYOffering.isSpecialTutorialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsByCNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjectsByCName As SubjectsByCNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjectsByCName = CType(Me.Table,SubjectsByCNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByCName.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByCName.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjectsByCName.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByCName.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjectsByCName.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByCName.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSubjectsByCName.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByCName.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Single
            Get
                Return CType(Me(Me.tableSubjectsByCName.unitsColumn),Single)
            End Get
            Set
                Me(Me.tableSubjectsByCName.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByCName.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByCName.prereqColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchoolResourcesbyCNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchoolResourcesbyCName As SchoolResourcesbyCNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchoolResourcesbyCName = CType(Me.Table,SchoolResourcesbyCNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourcePrikey() As Integer
            Get
                Return CType(Me(Me.tableSchoolResourcesbyCName.ResourcePrikeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyCName.ResourcePrikeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceID() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyCName.ResourceIDColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyCName.ResourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceName() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyCName.ResourceNameColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyCName.ResourceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyCName.LocationColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyCName.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyCName.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyCName.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TeachersbyCNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableTeachersbyCName As TeachersbyCNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeachersbyCName = CType(Me.Table,TeachersbyCNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherPriKey() As Integer
            Get
                Return CType(Me(Me.tableTeachersbyCName.TeacherPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableTeachersbyCName.TeacherPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherIDNum() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.TeacherIDNumColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.TeacherIDNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.NameColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.Address1Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.Address2Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.Address3Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.phoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cellphone() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.cellphoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.cellphoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableTeachersbyCName.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyCName.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherMonRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherMon As SYOfferingTeacherMonDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherMon = CType(Me.Table,SYOfferingTeacherMonDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherMon.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherMon.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TeachersbyIDRow
        Inherits Global.System.Data.DataRow
        
        Private tableTeachersbyID As TeachersbyIDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeachersbyID = CType(Me.Table,TeachersbyIDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherPriKey() As Integer
            Get
                Return CType(Me(Me.tableTeachersbyID.TeacherPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableTeachersbyID.TeacherPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeacherIDNum() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.TeacherIDNumColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.TeacherIDNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.NameColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.Address1Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.Address2Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.Address3Column),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.phoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cellphone() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.cellphoneColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.cellphoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableTeachersbyID.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableTeachersbyID.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherTueRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherTue As SYOfferingTeacherTueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherTue = CType(Me.Table,SYOfferingTeacherTueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherTue.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherTue.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherWedRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherWed As SYOfferingTeacherWedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherWed = CType(Me.Table,SYOfferingTeacherWedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherWed.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherWed.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherThursRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherThurs As SYOfferingTeacherThursDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherThurs = CType(Me.Table,SYOfferingTeacherThursDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherThurs.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherThurs.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherFriRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherFri As SYOfferingTeacherFriDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherFri = CType(Me.Table,SYOfferingTeacherFriDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherFri.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherFri.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherSatRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherSat As SYOfferingTeacherSatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherSat = CType(Me.Table,SYOfferingTeacherSatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSat.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSat.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingTeacherSunRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingTeacherSun As SYOfferingTeacherSunDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingTeacherSun = CType(Me.Table,SYOfferingTeacherSunDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingTeacherSun.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingTeacherSun.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceMonRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceMon As SYOfferingResourceMonDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceMon = CType(Me.Table,SYOfferingResourceMonDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceMon.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceMon.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceTuesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceTues As SYOfferingResourceTuesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceTues = CType(Me.Table,SYOfferingResourceTuesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceTues.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceTues.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceWedRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceWed As SYOfferingResourceWedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceWed = CType(Me.Table,SYOfferingResourceWedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceWed.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceWed.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceThursRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceThurs As SYOfferingResourceThursDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceThurs = CType(Me.Table,SYOfferingResourceThursDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceThurs.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceThurs.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceFriRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceFri As SYOfferingResourceFriDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceFri = CType(Me.Table,SYOfferingResourceFriDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceFri.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceFri.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceSatRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceSat As SYOfferingResourceSatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceSat = CType(Me.Table,SYOfferingResourceSatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSat.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSat.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingResourceSunRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingResourceSun As SYOfferingResourceSunDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingResourceSun = CType(Me.Table,SYOfferingResourceSunDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingResourceSun.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingResourceSun.teacheridColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchoolResourcesbyPkRow
        Inherits Global.System.Data.DataRow
        
        Private tableSchoolResourcesbyPk As SchoolResourcesbyPkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchoolResourcesbyPk = CType(Me.Table,SchoolResourcesbyPkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourcePrikey() As Integer
            Get
                Return CType(Me(Me.tableSchoolResourcesbyPk.ResourcePrikeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyPk.ResourcePrikeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceID() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyPk.ResourceIDColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyPk.ResourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceName() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyPk.ResourceNameColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyPk.ResourceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyPk.LocationColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyPk.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSchoolResourcesbyPk.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSchoolResourcesbyPk.RemarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingbyTeacherRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingbyTeacher As SYOfferingbyTeacherDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingbyTeacher = CType(Me.Table,SYOfferingbyTeacherDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyTeacher.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property requested() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingbyTeacher.requestedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'requested' in table 'SYOfferingbyTeacher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingbyTeacher.requestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrequestedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingbyTeacher.requestedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrequestedNull()
            Me(Me.tableSYOfferingbyTeacher.requestedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRTypesRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRTypes As TRTypesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRTypes = CType(Me.Table,TRTypesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRPK() As Integer
            Get
                Return CType(Me(Me.tableTRTypes.TRPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTRTypes.TRPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCode() As String
            Get
                Return CType(Me(Me.tableTRTypes.TRCodeColumn),String)
            End Get
            Set
                Me(Me.tableTRTypes.TRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRName() As String
            Get
                Return CType(Me(Me.tableTRTypes.TRNameColumn),String)
            End Get
            Set
                Me(Me.tableTRTypes.TRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAmount() As Decimal
            Get
                Return CType(Me(Me.tableTRTypes.TRAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRTypes.TRAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCourse() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypes.TRCourseColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRCourse' in table 'TRTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypes.TRCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRYearLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypes.TRYearLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRYearLevel' in table 'TRTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypes.TRYearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypes.TRSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRSubject' in table 'TRTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypes.TRSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypes.TRRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRRemarks' in table 'TRTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypes.TRRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRStudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypes.TRStudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRStudentType' in table 'TRTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypes.TRStudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRCourseNull() As Boolean
            Return Me.IsNull(Me.tableTRTypes.TRCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRCourseNull()
            Me(Me.tableTRTypes.TRCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTRTypes.TRYearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRYearLevelNull()
            Me(Me.tableTRTypes.TRYearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTRTypes.TRSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRSubjectNull()
            Me(Me.tableTRTypes.TRSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTRTypes.TRRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRRemarksNull()
            Me(Me.tableTRTypes.TRRemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableTRTypes.TRStudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRStudentTypeNull()
            Me(Me.tableTRTypes.TRStudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRTypesbyNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRTypesbyName As TRTypesbyNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRTypesbyName = CType(Me.Table,TRTypesbyNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRPK() As Integer
            Get
                Return CType(Me(Me.tableTRTypesbyName.TRPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCode() As String
            Get
                Return CType(Me(Me.tableTRTypesbyName.TRCodeColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRName() As String
            Get
                Return CType(Me(Me.tableTRTypesbyName.TRNameColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAmount() As Decimal
            Get
                Return CType(Me(Me.tableTRTypesbyName.TRAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCourse() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyName.TRCourseColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRCourse' in table 'TRTypesbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRYearLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyName.TRYearLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRYearLevel' in table 'TRTypesbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRYearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyName.TRSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRSubject' in table 'TRTypesbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyName.TRRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRRemarks' in table 'TRTypesbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyName.TRRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRCourseNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyName.TRCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRCourseNull()
            Me(Me.tableTRTypesbyName.TRCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyName.TRYearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRYearLevelNull()
            Me(Me.tableTRTypesbyName.TRYearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyName.TRSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRSubjectNull()
            Me(Me.tableTRTypesbyName.TRSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyName.TRRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRRemarksNull()
            Me(Me.tableTRTypesbyName.TRRemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRTypesbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRTypesbyPK As TRTypesbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRTypesbyPK = CType(Me.Table,TRTypesbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRPK() As Integer
            Get
                Return CType(Me(Me.tableTRTypesbyPK.TRPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCode() As String
            Get
                Return CType(Me(Me.tableTRTypesbyPK.TRCodeColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRName() As String
            Get
                Return CType(Me(Me.tableTRTypesbyPK.TRNameColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAmount() As Decimal
            Get
                Return CType(Me(Me.tableTRTypesbyPK.TRAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCourse() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyPK.TRCourseColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRCourse' in table 'TRTypesbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRYearLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyPK.TRYearLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRYearLevel' in table 'TRTypesbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRYearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyPK.TRSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRSubject' in table 'TRTypesbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyPK.TRRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRRemarks' in table 'TRTypesbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyPK.TRRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRCourseNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyPK.TRCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRCourseNull()
            Me(Me.tableTRTypesbyPK.TRCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyPK.TRYearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRYearLevelNull()
            Me(Me.tableTRTypesbyPK.TRYearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyPK.TRSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRSubjectNull()
            Me(Me.tableTRTypesbyPK.TRSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyPK.TRRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRRemarksNull()
            Me(Me.tableTRTypesbyPK.TRRemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CoursesbyPkRow
        Inherits Global.System.Data.DataRow
        
        Private tableCoursesbyPk As CoursesbyPkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCoursesbyPk = CType(Me.Table,CoursesbyPkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableCoursesbyPk.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableCoursesbyPk.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseID() As String
            Get
                Return CType(Me(Me.tableCoursesbyPk.CourseIDColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyPk.CourseIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tableCoursesbyPk.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyPk.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableCoursesbyPk.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyPk.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property special() As Integer
            Get
                Return CType(Me(Me.tableCoursesbyPk.specialColumn),Integer)
            End Get
            Set
                Me(Me.tableCoursesbyPk.specialColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateTeacherLoadRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateTeacherLoad As TemplateTeacherLoadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateTeacherLoad = CType(Me.Table,TemplateTeacherLoadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resource() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.ResourceColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.ResourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.SubjectColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Schedule() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.ScheduleColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.ScheduleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Min() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.MinColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.MinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Max() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.MaxColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.MaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoad.EnrolledColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoad.EnrolledColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SemesterbyPkRow
        Inherits Global.System.Data.DataRow
        
        Private tableSemesterbyPk As SemesterbyPkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSemesterbyPk = CType(Me.Table,SemesterbyPkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemPK() As Integer
            Get
                Return CType(Me(Me.tableSemesterbyPk.SemPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSemesterbyPk.SemPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemesterName() As String
            Get
                Return CType(Me(Me.tableSemesterbyPk.SemesterNameColumn),String)
            End Get
            Set
                Me(Me.tableSemesterbyPk.SemesterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSemesterbyPk.sorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'SemesterbyPk' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSemesterbyPk.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableSemesterbyPk.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableSemesterbyPk.sorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsByPreReqRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjectsByPreReq As SubjectsByPreReqDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjectsByPreReq = CType(Me.Table,SubjectsByPreReqDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByPreReq.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjectsByPreReq.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjectsByPreReq.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjectsByPreReq.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumOfPreReq() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.NumOfPreReqColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumOfPreReq' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.NumOfPreReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq2' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq3' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq4' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq5' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq6' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsByPreReq.prereq7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq7' in table 'SubjectsByPreReq' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsByPreReq.prereq7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumOfPreReqNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.NumOfPreReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumOfPreReqNull()
            Me(Me.tableSubjectsByPreReq.NumOfPreReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq2Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq2Null()
            Me(Me.tableSubjectsByPreReq.prereq2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq3Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq3Null()
            Me(Me.tableSubjectsByPreReq.prereq3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq4Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq4Null()
            Me(Me.tableSubjectsByPreReq.prereq4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq5Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq5Null()
            Me(Me.tableSubjectsByPreReq.prereq5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq6Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq6Null()
            Me(Me.tableSubjectsByPreReq.prereq6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq7Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsByPreReq.prereq7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq7Null()
            Me(Me.tableSubjectsByPreReq.prereq7Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRTypesbyCodeandCourseRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRTypesbyCodeandCourse As TRTypesbyCodeandCourseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRTypesbyCodeandCourse = CType(Me.Table,TRTypesbyCodeandCourseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRPK() As Integer
            Get
                Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCode() As String
            Get
                Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRCodeColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRName() As String
            Get
                Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRNameColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAmount() As Decimal
            Get
                Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCourse() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRCourseColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRCourse' in table 'TRTypesbyCodeandCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRYearLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRYearLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRYearLevel' in table 'TRTypesbyCodeandCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRYearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRSubject' in table 'TRTypesbyCodeandCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbyCodeandCourse.TRRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRRemarks' in table 'TRTypesbyCodeandCourse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbyCodeandCourse.TRRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRCourseNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyCodeandCourse.TRCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRCourseNull()
            Me(Me.tableTRTypesbyCodeandCourse.TRCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyCodeandCourse.TRYearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRYearLevelNull()
            Me(Me.tableTRTypesbyCodeandCourse.TRYearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyCodeandCourse.TRSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRSubjectNull()
            Me(Me.tableTRTypesbyCodeandCourse.TRSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbyCodeandCourse.TRRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRRemarksNull()
            Me(Me.tableTRTypesbyCodeandCourse.TRRemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TRTypesbySubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRTypesbySubject As TRTypesbySubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRTypesbySubject = CType(Me.Table,TRTypesbySubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRPK() As Integer
            Get
                Return CType(Me(Me.tableTRTypesbySubject.TRPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCode() As String
            Get
                Return CType(Me(Me.tableTRTypesbySubject.TRCodeColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRName() As String
            Get
                Return CType(Me(Me.tableTRTypesbySubject.TRNameColumn),String)
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAmount() As Decimal
            Get
                Return CType(Me(Me.tableTRTypesbySubject.TRAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRCourse() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbySubject.TRCourseColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRCourse' in table 'TRTypesbySubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRCourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRYearLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbySubject.TRYearLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRYearLevel' in table 'TRTypesbySubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRYearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSubject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbySubject.TRSubjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRSubject' in table 'TRTypesbySubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRTypesbySubject.TRRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRRemarks' in table 'TRTypesbySubject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRTypesbySubject.TRRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRCourseNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbySubject.TRCourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRCourseNull()
            Me(Me.tableTRTypesbySubject.TRCourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbySubject.TRYearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRYearLevelNull()
            Me(Me.tableTRTypesbySubject.TRYearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbySubject.TRSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRSubjectNull()
            Me(Me.tableTRTypesbySubject.TRSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTRTypesbySubject.TRRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRRemarksNull()
            Me(Me.tableTRTypesbySubject.TRRemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CoursesbyNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableCoursesbyName As CoursesbyNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCoursesbyName = CType(Me.Table,CoursesbyNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableCoursesbyName.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableCoursesbyName.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseID() As String
            Get
                Return CType(Me(Me.tableCoursesbyName.CourseIDColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyName.CourseIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tableCoursesbyName.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyName.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableCoursesbyName.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableCoursesbyName.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property special() As Integer
            Get
                Return CType(Me(Me.tableCoursesbyName.specialColumn),Integer)
            End Get
            Set
                Me(Me.tableCoursesbyName.specialColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsorderedbyNameRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjectsorderedbyName As SubjectsorderedbyNameDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjectsorderedbyName = CType(Me.Table,SubjectsorderedbyNameDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Single
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.unitsColumn),Single)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjectsorderedbyName.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property labunits() As Single
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.labunitsColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'labunits' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.labunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property major() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.majorColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'major' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.majorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumOfPreReq() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.NumOfPreReqColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumOfPreReq' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.NumOfPreReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq2' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq3' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq4' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq5' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq6' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.prereq7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq7' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.prereq7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjectsorderedbyName.CreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreditGroup' in table 'SubjectsorderedbyName' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjectsorderedbyName.CreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslabunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.labunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlabunitsNull()
            Me(Me.tableSubjectsorderedbyName.labunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmajorNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.majorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmajorNull()
            Me(Me.tableSubjectsorderedbyName.majorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumOfPreReqNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.NumOfPreReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumOfPreReqNull()
            Me(Me.tableSubjectsorderedbyName.NumOfPreReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq2Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq2Null()
            Me(Me.tableSubjectsorderedbyName.prereq2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq3Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq3Null()
            Me(Me.tableSubjectsorderedbyName.prereq3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq4Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq4Null()
            Me(Me.tableSubjectsorderedbyName.prereq4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq5Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq5Null()
            Me(Me.tableSubjectsorderedbyName.prereq5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq6Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq6Null()
            Me(Me.tableSubjectsorderedbyName.prereq6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq7Null() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.prereq7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq7Null()
            Me(Me.tableSubjectsorderedbyName.prereq7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableSubjectsorderedbyName.CreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditGroupNull()
            Me(Me.tableSubjectsorderedbyName.CreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExamsRow
        Inherits Global.System.Data.DataRow
        
        Private tableExams As ExamsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExams = CType(Me.Table,ExamsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExamPK() As Integer
            Get
                Return CType(Me(Me.tableExams.ExamPKColumn),Integer)
            End Get
            Set
                Me(Me.tableExams.ExamPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syFK() As Integer
            Get
                Return CType(Me(Me.tableExams.syFKColumn),Integer)
            End Get
            Set
                Me(Me.tableExams.syFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semFK() As Integer
            Get
                Return CType(Me(Me.tableExams.semFKColumn),Integer)
            End Get
            Set
                Me(Me.tableExams.semFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examfrom1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom1' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examfrom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examto1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto1' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examto1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examfrom2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom2' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examfrom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examto2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto2' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examfrom3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom3' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examfrom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examto3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto3' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examto3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examfrom4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom4' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examfrom4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examto4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto4' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examto4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examfrom5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom5' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examfrom5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExams.examto5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto5' in table 'Exams' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExams.examto5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom1Null() As Boolean
            Return Me.IsNull(Me.tableExams.examfrom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom1Null()
            Me(Me.tableExams.examfrom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto1Null() As Boolean
            Return Me.IsNull(Me.tableExams.examto1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto1Null()
            Me(Me.tableExams.examto1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom2Null() As Boolean
            Return Me.IsNull(Me.tableExams.examfrom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom2Null()
            Me(Me.tableExams.examfrom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto2Null() As Boolean
            Return Me.IsNull(Me.tableExams.examto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto2Null()
            Me(Me.tableExams.examto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom3Null() As Boolean
            Return Me.IsNull(Me.tableExams.examfrom3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom3Null()
            Me(Me.tableExams.examfrom3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto3Null() As Boolean
            Return Me.IsNull(Me.tableExams.examto3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto3Null()
            Me(Me.tableExams.examto3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom4Null() As Boolean
            Return Me.IsNull(Me.tableExams.examfrom4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom4Null()
            Me(Me.tableExams.examfrom4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto4Null() As Boolean
            Return Me.IsNull(Me.tableExams.examto4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto4Null()
            Me(Me.tableExams.examto4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom5Null() As Boolean
            Return Me.IsNull(Me.tableExams.examfrom5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom5Null()
            Me(Me.tableExams.examfrom5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto5Null() As Boolean
            Return Me.IsNull(Me.tableExams.examto5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto5Null()
            Me(Me.tableExams.examto5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ExamsBySemSYRow
        Inherits Global.System.Data.DataRow
        
        Private tableExamsBySemSY As ExamsBySemSYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableExamsBySemSY = CType(Me.Table,ExamsBySemSYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExamPK() As Integer
            Get
                Return CType(Me(Me.tableExamsBySemSY.ExamPKColumn),Integer)
            End Get
            Set
                Me(Me.tableExamsBySemSY.ExamPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syFK() As Integer
            Get
                Return CType(Me(Me.tableExamsBySemSY.syFKColumn),Integer)
            End Get
            Set
                Me(Me.tableExamsBySemSY.syFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semFK() As Integer
            Get
                Return CType(Me(Me.tableExamsBySemSY.semFKColumn),Integer)
            End Get
            Set
                Me(Me.tableExamsBySemSY.semFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examfrom1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom1' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examfrom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examto1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto1' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examto1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examfrom2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom2' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examfrom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examto2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto2' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examfrom3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom3' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examfrom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examto3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto3' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examto3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examfrom4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom4' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examfrom4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examto4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto4' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examto4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examfrom5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examfrom5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examfrom5' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examfrom5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property examto5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamsBySemSY.examto5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'examto5' in table 'ExamsBySemSY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamsBySemSY.examto5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom1Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examfrom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom1Null()
            Me(Me.tableExamsBySemSY.examfrom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto1Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examto1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto1Null()
            Me(Me.tableExamsBySemSY.examto1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom2Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examfrom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom2Null()
            Me(Me.tableExamsBySemSY.examfrom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto2Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto2Null()
            Me(Me.tableExamsBySemSY.examto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom3Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examfrom3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom3Null()
            Me(Me.tableExamsBySemSY.examfrom3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto3Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examto3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto3Null()
            Me(Me.tableExamsBySemSY.examto3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom4Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examfrom4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom4Null()
            Me(Me.tableExamsBySemSY.examfrom4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto4Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examto4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto4Null()
            Me(Me.tableExamsBySemSY.examto4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamfrom5Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examfrom5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamfrom5Null()
            Me(Me.tableExamsBySemSY.examfrom5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexamto5Null() As Boolean
            Return Me.IsNull(Me.tableExamsBySemSY.examto5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexamto5Null()
            Me(Me.tableExamsBySemSY.examto5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateTeacherLoadReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateTeacherLoadReport As TemplateTeacherLoadReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateTeacherLoadReport = CType(Me.Table,TemplateTeacherLoadReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resource() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.ResourceColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.ResourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.SubjectColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.DaysColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.DaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property start() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.startColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.startColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _end() As String
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.endColumn),String)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.endColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property students() As Integer
            Get
                Return CType(Me(Me.tableTemplateTeacherLoadReport.studentsColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.studentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateTeacherLoadReport.unitsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'units' in table 'TemplateTeacherLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ts() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateTeacherLoadReport.tsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ts' in table 'TemplateTeacherLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadReport.tsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateTeacherLoadReport.unitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitsNull()
            Me(Me.tableTemplateTeacherLoadReport.unitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateTeacherLoadReport.tsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettsNull()
            Me(Me.tableTemplateTeacherLoadReport.tsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateTeacherLoadExtraHoursRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateTeacherLoadExtraHours As TemplateTeacherLoadExtraHoursDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateTeacherLoadExtraHours = CType(Me.Table,TemplateTeacherLoadExtraHoursDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateTeacherLoadExtraHours.SubjectDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDesc' in table 'TemplateTeacherLoadExtraHours' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadExtraHours.SubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DayTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateTeacherLoadExtraHours.DayTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DayTime' in table 'TemplateTeacherLoadExtraHours' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateTeacherLoadExtraHours.DayTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescNull() As Boolean
            Return Me.IsNull(Me.tableTemplateTeacherLoadExtraHours.SubjectDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescNull()
            Me(Me.tableTemplateTeacherLoadExtraHours.SubjectDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDayTimeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateTeacherLoadExtraHours.DayTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDayTimeNull()
            Me(Me.tableTemplateTeacherLoadExtraHours.DayTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchoolYearRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchoolYearRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchoolYearRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchoolYearRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SemesterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SemesterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SemesterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SemesterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchoolResourcesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchoolResourcesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchoolResourcesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchoolResourcesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsByPriKeyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsByPriKeyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsByPriKeyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsByPriKeyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TeachersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TeachersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TeachersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TeachersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CoursesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CoursesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CoursesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CoursesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BlockSectionTuitionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BlockSectionTuitionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BlockSectionTuitionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BlockSectionTuitionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PrefTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PrefTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PrefTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PrefTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchoolYearbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchoolYearbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchoolYearbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchoolYearbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BlockSectionTuitionbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BlockSectionTuitionbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BlockSectionTuitionbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BlockSectionTuitionbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsByCNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsByCNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsByCNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsByCNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchoolResourcesbyCNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchoolResourcesbyCNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchoolResourcesbyCNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchoolResourcesbyCNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TeachersbyCNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TeachersbyCNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TeachersbyCNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TeachersbyCNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherMonRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherMonRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherMonRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherMonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TeachersbyIDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TeachersbyIDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TeachersbyIDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TeachersbyIDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherTueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherTueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherTueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherTueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherWedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherWedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherWedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherWedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherThursRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherThursRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherThursRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherThursRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherFriRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherFriRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherFriRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherFriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherSatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherSatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherSatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherSatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingTeacherSunRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingTeacherSunRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingTeacherSunRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingTeacherSunRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceMonRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceMonRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceMonRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceMonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceTuesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceTuesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceTuesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceTuesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceWedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceWedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceWedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceWedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceThursRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceThursRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceThursRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceThursRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceFriRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceFriRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceFriRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceFriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceSatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceSatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceSatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceSatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingResourceSunRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingResourceSunRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingResourceSunRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingResourceSunRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchoolResourcesbyPkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SchoolResourcesbyPkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchoolResourcesbyPkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchoolResourcesbyPkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingbyTeacherRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingbyTeacherRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingbyTeacherRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingbyTeacherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRTypesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRTypesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRTypesbyNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRTypesbyNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRTypesbyNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRTypesbyNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRTypesbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRTypesbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRTypesbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRTypesbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CoursesbyPkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CoursesbyPkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CoursesbyPkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CoursesbyPkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateTeacherLoadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateTeacherLoadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateTeacherLoadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateTeacherLoadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SemesterbyPkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SemesterbyPkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SemesterbyPkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SemesterbyPkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsByPreReqRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsByPreReqRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsByPreReqRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsByPreReqRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRTypesbyCodeandCourseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRTypesbyCodeandCourseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRTypesbyCodeandCourseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRTypesbyCodeandCourseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TRTypesbySubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRTypesbySubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TRTypesbySubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TRTypesbySubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CoursesbyNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CoursesbyNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CoursesbyNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CoursesbyNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsorderedbyNameRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsorderedbyNameRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsorderedbyNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsorderedbyNameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExamsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExamsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExamsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExamsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ExamsBySemSYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ExamsBySemSYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ExamsBySemSYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ExamsBySemSYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateTeacherLoadReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateTeacherLoadReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateTeacherLoadReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateTeacherLoadReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateTeacherLoadExtraHoursRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateTeacherLoadExtraHoursRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateTeacherLoadExtraHoursRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateTeacherLoadExtraHoursRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsSchoolTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchoolYearTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SchoolYear"
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("sorter", "sorter")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchoolYear] WHERE (([sypk] = @Original_sypk) AND ([SchoolYear]"& _ 
                " = @Original_SchoolYear) AND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ([sor"& _ 
                "ter] = @Original_sorter)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchoolYear] ([SchoolYear], [sorter]) VALUES (@SchoolYear, @sor"& _ 
                "ter);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT sypk, SchoolYear, Sorter FROM SchoolYear WHERE (sypk = SCOPE_IDENT"& _ 
                "ITY()) ORDER BY SchoolYear DESC"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SchoolYear] SET [SchoolYear] = @SchoolYear, [sorter] = @sorter WHER"& _ 
                "E (([sypk] = @Original_sypk) AND ([SchoolYear] = @Original_SchoolYear) AND ((@Is"& _ 
                "Null_sorter = 1 AND [sorter] IS NULL) OR ([sorter] = @Original_sorter)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T sypk, SchoolYear, Sorter FROM SchoolYear WHERE (sypk = @sypk) ORDER BY SchoolY"& _ 
                "ear DESC"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sypk, SchoolYear , sorter FROM dbo.SchoolYear order by SchoolYear DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SchoolYearDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.SchoolYearDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.SchoolYearDataTable = New dsSchool.SchoolYearDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SchoolYearDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SchoolYear")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_sypk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolYear,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolYear As String, ByVal sorter As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolYear As String, ByVal sorter As Integer, ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer, ByVal sypk As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_sypk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SchoolYear,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sypk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolYear As String, ByVal sorter As Integer, ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer) As Integer
            Return Me.Update(SchoolYear, sorter, Original_sypk, Original_SchoolYear, Original_sorter, Original_sypk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SemesterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Semester"
            tableMapping.ColumnMappings.Add("SemPK", "SemPK")
            tableMapping.ColumnMappings.Add("SemesterName", "SemesterName")
            tableMapping.ColumnMappings.Add("sorter", "sorter")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Semester] WHERE (([SemPK] = @Original_SemPK) AND ([SemesterNam"& _ 
                "e] = @Original_SemesterName) AND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ("& _ 
                "[sorter] = @Original_sorter)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Semester] ([SemesterName], [sorter]) VALUES (@SemesterName, @s"& _ 
                "orter);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SemPK, SemesterName, Sorter FROM Semester WHERE (SemPK = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Semester] SET [SemesterName] = @SemesterName, [sorter] = @sorter WH"& _ 
                "ERE (([SemPK] = @Original_SemPK) AND ([SemesterName] = @Original_SemesterName) A"& _ 
                "ND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ([sorter] = @Original_sorter)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SemPK, SemesterName, Sorter FROM Semester WHERE (SemPK = @SemPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SemPK, SemesterName , sorter FROM dbo.Semester"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SemesterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.SemesterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.SemesterDataTable = New dsSchool.SemesterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SemesterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "Semester")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SemPK,Integer)
            If (Original_SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SemesterName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SemesterName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SemesterName As String, ByVal sorter As Integer) As Integer
            If (SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SemesterName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SemesterName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SemesterName As String, ByVal sorter As Integer, ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer, ByVal SemPK As Integer) As Integer
            If (SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SemesterName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SemesterName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SemPK,Integer)
            If (Original_SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SemesterName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SemesterName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SemPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SemesterName As String, ByVal sorter As Integer, ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer) As Integer
            Return Me.Update(SemesterName, sorter, Original_SemPK, Original_SemesterName, Original_sorter, Original_SemPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchoolResourcesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SchoolResources"
            tableMapping.ColumnMappings.Add("ResourcePrikey", "ResourcePrikey")
            tableMapping.ColumnMappings.Add("ResourceID", "ResourceID")
            tableMapping.ColumnMappings.Add("ResourceName", "ResourceName")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchoolResources] WHERE (([ResourcePrikey] = @Original_Resource"& _ 
                "Prikey) AND ([ResourceID] = @Original_ResourceID) AND ([ResourceName] = @Origina"& _ 
                "l_ResourceName) AND ([Location] = @Original_Location) AND ([Remarks] = @Original"& _ 
                "_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchoolResources] ([ResourceID], [ResourceName], [Location], [R"& _ 
                "emarks]) VALUES (@ResourceID, @ResourceName, @Location, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Resou"& _ 
                "rcePrikey, ResourceID, ResourceName, Location, Remarks FROM SchoolResources WHER"& _ 
                "E (ResourcePrikey = SCOPE_IDENTITY()) ORDER BY ResourceName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SchoolResources] SET [ResourceID] = @ResourceID, [ResourceName] = @"& _ 
                "ResourceName, [Location] = @Location, [Remarks] = @Remarks WHERE (([ResourcePrik"& _ 
                "ey] = @Original_ResourcePrikey) AND ([ResourceID] = @Original_ResourceID) AND (["& _ 
                "ResourceName] = @Original_ResourceName) AND ([Location] = @Original_Location) AN"& _ 
                "D ([Remarks] = @Original_Remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ResourcePrikey, ResourceID, Resource"& _ 
                "Name, Location, Remarks FROM SchoolResources WHERE (ResourcePrikey = @ResourcePr"& _ 
                "ikey) ORDER BY ResourceName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourcePrikey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ResourcePrikey, ResourceID, ResourceName, Location, Remarks FROM dbo.Schoo"& _ 
                "lResources order by resourcename"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SchoolResourcesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.SchoolResourcesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.SchoolResourcesDataTable = New dsSchool.SchoolResourcesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SchoolResourcesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SchoolResources")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String, ByVal ResourcePrikey As Integer) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ResourcePrikey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Return Me.Update(ResourceID, ResourceName, Location, Remarks, Original_ResourcePrikey, Original_ResourceID, Original_ResourceName, Original_Location, Original_Remarks, Original_ResourcePrikey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Subjects"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("units", "units")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("labunits", "labunits")
            tableMapping.ColumnMappings.Add("major", "major")
            tableMapping.ColumnMappings.Add("NumOfPreReq", "NumOfPreReq")
            tableMapping.ColumnMappings.Add("prereq2", "prereq2")
            tableMapping.ColumnMappings.Add("prereq3", "prereq3")
            tableMapping.ColumnMappings.Add("prereq4", "prereq4")
            tableMapping.ColumnMappings.Add("prereq5", "prereq5")
            tableMapping.ColumnMappings.Add("prereq6", "prereq6")
            tableMapping.ColumnMappings.Add("prereq7", "prereq7")
            tableMapping.ColumnMappings.Add("CreditGroup", "CreditGroup")
            tableMapping.ColumnMappings.Add("inactive", "inactive")
            tableMapping.ColumnMappings.Add("RLEunits", "RLEunits")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Subjects] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([Remarks] = @Original_Remarks) AND ((@IsNull_labunits = 1 AND [labunits] I"& _ 
                "S NULL) OR ([labunits] = @Original_labunits)) AND ([units] = @Original_units) AN"& _ 
                "D ([prereq] = @Original_prereq) AND ((@IsNull_major = 1 AND [major] IS NULL) OR "& _ 
                "([major] = @Original_major)) AND ((@IsNull_NumOfPreReq = 1 AND [NumOfPreReq] IS "& _ 
                "NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)) AND ((@IsNull_prereq2 = 1 AND "& _ 
                "[prereq2] IS NULL) OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prereq3 = 1"& _ 
                " AND [prereq3] IS NULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_prereq"& _ 
                "4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@IsNull_p"& _ 
                "rereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND ((@IsN"& _ 
                "ull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6)) AND ("& _ 
                "(@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prereq7)) "& _ 
                "AND ((@IsNull_CreditGroup = 1 AND [CreditGroup] IS NULL) OR ([CreditGroup] = @Or"& _ 
                "iginal_CreditGroup)) AND ((@IsNull_inactive = 1 AND [inactive] IS NULL) OR ([ina"& _ 
                "ctive] = @Original_inactive)) AND ((@IsNull_RLEunits = 1 AND [RLEunits] IS NULL)"& _ 
                " OR ([RLEunits] = @Original_RLEunits)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Subjects] ([SubjectCode], [SubjectName], [Remarks], [labunits], [uni"& _ 
                "ts], [prereq], [major], [NumOfPreReq], [prereq2], [prereq3], [prereq4], [prereq5"& _ 
                "], [prereq6], [prereq7], [CreditGroup], [inactive], [RLEunits]) VALUES (@Subject"& _ 
                "Code, @SubjectName, @Remarks, @labunits, @units, @prereq, @major, @NumOfPreReq, "& _ 
                "@prereq2, @prereq3, @prereq4, @prereq5, @prereq6, @prereq7, @CreditGroup, @inact"& _ 
                "ive, @RLEunits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, SubjectCode, SubjectName, Remarks, labun"& _ 
                "its, units, prereq, major, numofprereq, prereq2, prereq3, prereq4, prereq5, prer"& _ 
                "eq6, prereq7, creditgroup, inactive, RLEunits FROM Subjects WHERE (SubjectPriKey"& _ 
                " = SCOPE_IDENTITY()) ORDER BY SubjectCode"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Subjects] SET [SubjectCode] = @SubjectCode, [SubjectName] = @SubjectName,"& _ 
                " [Remarks] = @Remarks, [labunits] = @labunits, [units] = @units, [prereq] = @pre"& _ 
                "req, [major] = @major, [NumOfPreReq] = @NumOfPreReq, [prereq2] = @prereq2, [prer"& _ 
                "eq3] = @prereq3, [prereq4] = @prereq4, [prereq5] = @prereq5, [prereq6] = @prereq"& _ 
                "6, [prereq7] = @prereq7, [CreditGroup] = @CreditGroup, [inactive] = @inactive, ["& _ 
                "RLEunits] = @RLEunits WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([Remarks] = @Original_Remarks) AND ((@IsNull_labunits = 1 AND [labunits] I"& _ 
                "S NULL) OR ([labunits] = @Original_labunits)) AND ([units] = @Original_units) AN"& _ 
                "D ([prereq] = @Original_prereq) AND ((@IsNull_major = 1 AND [major] IS NULL) OR "& _ 
                "([major] = @Original_major)) AND ((@IsNull_NumOfPreReq = 1 AND [NumOfPreReq] IS "& _ 
                "NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)) AND ((@IsNull_prereq2 = 1 AND "& _ 
                "[prereq2] IS NULL) OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prereq3 = 1"& _ 
                " AND [prereq3] IS NULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_prereq"& _ 
                "4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@IsNull_p"& _ 
                "rereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND ((@IsN"& _ 
                "ull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6)) AND ("& _ 
                "(@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prereq7)) "& _ 
                "AND ((@IsNull_CreditGroup = 1 AND [CreditGroup] IS NULL) OR ([CreditGroup] = @Or"& _ 
                "iginal_CreditGroup)) AND ((@IsNull_inactive = 1 AND [inactive] IS NULL) OR ([ina"& _ 
                "ctive] = @Original_inactive)) AND ((@IsNull_RLEunits = 1 AND [RLEunits] IS NULL)"& _ 
                " OR ([RLEunits] = @Original_RLEunits)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, SubjectCode, Sub"& _ 
                "jectName, Remarks, labunits, units, prereq, major, numofprereq, prereq2, prereq3"& _ 
                ", prereq4, prereq5, prereq6, prereq7, creditgroup, inactive, RLEunits FROM Subje"& _ 
                "cts WHERE (SubjectPriKey = @SubjectPriKey) ORDER BY SubjectCode"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SubjectPriKey, SubjectCode, SubjectName, Remarks, labunits, units, pre"& _ 
                "req, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              prereq7, CreditGroup, inactive, RLEunits"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Subjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"O"& _ 
                "RDER BY SubjectCode"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SubjectsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.SubjectsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.SubjectsDataTable = New dsSchool.SubjectsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SubjectsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "Subjects")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer,  _
                    ByVal Original_inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RLEunits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_units,Single)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_NumOfPreReq,Integer)
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_CreditGroup,Integer)
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_RLEunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_RLEunits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal CreditGroup As Integer,  _
                    ByVal inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal RLEunits As Global.System.Nullable(Of Integer)) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(NumOfPreReq,Integer)
            If (prereq2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(prereq2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (prereq3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(prereq3.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (prereq4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(prereq4.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (prereq5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(prereq5.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (prereq6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(prereq6.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (prereq7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(prereq7.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(CreditGroup,Integer)
            If (inactive.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RLEunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RLEunits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal CreditGroup As Integer,  _
                    ByVal inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer,  _
                    ByVal Original_inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(NumOfPreReq,Integer)
            If (prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CreditGroup,Integer)
            If (inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RLEunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RLEunits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_units,Single)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_NumOfPreReq,Integer)
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_CreditGroup,Integer)
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_RLEunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_RLEunits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal CreditGroup As Integer,  _
                    ByVal inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer,  _
                    ByVal Original_inactive As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RLEunits As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SubjectCode, SubjectName, Remarks, labunits, units, prereq, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, CreditGroup, inactive, RLEunits, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_Remarks, Original_labunits, Original_units, Original_prereq, Original_major, Original_NumOfPreReq, Original_prereq2, Original_prereq3, Original_prereq4, Original_prereq5, Original_prereq6, Original_prereq7, Original_CreditGroup, Original_inactive, Original_RLEunits, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsByPriKeyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubjectsByPriKey"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("units", "units")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("labunits", "labunits")
            tableMapping.ColumnMappings.Add("major", "major")
            tableMapping.ColumnMappings.Add("RLEunits", "RLEunits")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Subjects] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) A"& _ 
                "ND ([SubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_Subjec"& _ 
                "tName) AND ([Remarks] = @Original_Remarks) AND ([units] = @Original_units) AND ("& _ 
                "[prereq] = @Original_prereq) AND ((@IsNull_labunits = 1 AND [labunits] IS NULL) "& _ 
                "OR ([labunits] = @Original_labunits)) AND ((@IsNull_major = 1 AND [major] IS NUL"& _ 
                "L) OR ([major] = @Original_major)) AND ((@IsNull_RLEunits = 1 AND [RLEunits] IS "& _ 
                "NULL) OR ([RLEunits] = @Original_RLEunits)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Subjects] ([SubjectCode], [SubjectName], [Remarks], [units], ["& _ 
                "prereq], [labunits], [major], [RLEunits]) VALUES (@SubjectCode, @SubjectName, @R"& _ 
                "emarks, @units, @prereq, @labunits, @major, @RLEunits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, S"& _ 
                "ubjectCode, SubjectName, Remarks, units, prereq, labunits, major, RLEunits FROM "& _ 
                "Subjects WHERE (SubjectPriKey = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Subjects] SET [SubjectCode] = @SubjectCode, [SubjectName] = @Subjec"& _ 
                "tName, [Remarks] = @Remarks, [units] = @units, [prereq] = @prereq, [labunits] = "& _ 
                "@labunits, [major] = @major, [RLEunits] = @RLEunits WHERE (([SubjectPriKey] = @O"& _ 
                "riginal_SubjectPriKey) AND ([SubjectCode] = @Original_SubjectCode) AND ([Subject"& _ 
                "Name] = @Original_SubjectName) AND ([Remarks] = @Original_Remarks) AND ([units] "& _ 
                "= @Original_units) AND ([prereq] = @Original_prereq) AND ((@IsNull_labunits = 1 "& _ 
                "AND [labunits] IS NULL) OR ([labunits] = @Original_labunits)) AND ((@IsNull_majo"& _ 
                "r = 1 AND [major] IS NULL) OR ([major] = @Original_major)) AND ((@IsNull_RLEunit"& _ 
                "s = 1 AND [RLEunits] IS NULL) OR ([RLEunits] = @Original_RLEunits)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Su"& _ 
                "bjectPriKey, SubjectCode, SubjectName, Remarks, units, prereq, labunits, major, "& _ 
                "RLEunits FROM Subjects WHERE (SubjectPriKey = @SubjectPriKey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RLEunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RLEunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SubjectPriKey, SubjectCode, SubjectName, Remarks, units, prereq , labunits"& _ 
                " , major, RLEunits "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Subjects where subjectprikey=@id"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SubjectsByPriKeyDataTable, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As Integer) As dsSchool.SubjectsByPriKeyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            Dim dataTable As dsSchool.SubjectsByPriKeyDataTable = New dsSchool.SubjectsByPriKeyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SubjectsByPriKeyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SubjectsByPriKey")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_Remarks As String, ByVal Original_units As Single, ByVal Original_prereq As Integer, ByVal Original_labunits As Global.System.Nullable(Of Single), ByVal Original_major As Global.System.Nullable(Of Boolean), ByVal Original_RLEunits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_units,Single)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_prereq,Integer)
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_RLEunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_RLEunits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer, ByVal labunits As Global.System.Nullable(Of Single), ByVal major As Global.System.Nullable(Of Boolean), ByVal RLEunits As Global.System.Nullable(Of Integer)) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(units,Single)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(prereq,Integer)
            If (labunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (RLEunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RLEunits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(units,Single)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prereq,Integer)
            If (labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (RLEunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RLEunits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_units,Single)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_prereq,Integer)
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_RLEunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_RLEunits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal RLEunits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_RLEunits As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SubjectCode, SubjectName, Remarks, units, prereq, labunits, major, RLEunits, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_Remarks, Original_units, Original_prereq, Original_labunits, Original_major, Original_RLEunits, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TeachersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Teachers"
            tableMapping.ColumnMappings.Add("TeacherPriKey", "TeacherPriKey")
            tableMapping.ColumnMappings.Add("TeacherIDNum", "TeacherIDNum")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("cellphone", "cellphone")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Teachers] WHERE (([TeacherPriKey] = @Original_TeacherPriKey) A"& _ 
                "ND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name] = @Original_Name) AND ("& _ 
                "[Address1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Add"& _ 
                "ress3] = @Original_Address3) AND ([phone] = @Original_phone) AND ([cellphone] = "& _ 
                "@Original_cellphone) AND ([Remarks] = @Original_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Teachers] ([TeacherIDNum], [Name], [Address1], [Address2], [Ad"& _ 
                "dress3], [phone], [cellphone], [Remarks]) VALUES (@TeacherIDNum, @Name, @Address"& _ 
                "1, @Address2, @Address3, @phone, @cellphone, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, T"& _ 
                "eacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks FROM "& _ 
                "Teachers WHERE (TeacherPriKey = SCOPE_IDENTITY()) ORDER BY Name"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Teachers] SET [TeacherIDNum] = @TeacherIDNum, [Name] = @Name, [Addr"& _ 
                "ess1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [phone] = @ph"& _ 
                "one, [cellphone] = @cellphone, [Remarks] = @Remarks WHERE (([TeacherPriKey] = @O"& _ 
                "riginal_TeacherPriKey) AND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name]"& _ 
                " = @Original_Name) AND ([Address1] = @Original_Address1) AND ([Address2] = @Orig"& _ 
                "inal_Address2) AND ([Address3] = @Original_Address3) AND ([phone] = @Original_ph"& _ 
                "one) AND ([cellphone] = @Original_cellphone) AND ([Remarks] = @Original_Remarks)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phon"& _ 
                "e, cellphone, Remarks FROM Teachers WHERE (TeacherPriKey = @TeacherPriKey) ORDER"& _ 
                " BY Name"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phone, ce"& _ 
                "llphone, Remarks FROM dbo.Teachers order by name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TeachersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.TeachersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.TeachersDataTable = New dsSchool.TeachersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TeachersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "Teachers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TeacherPriKey As Integer, ByVal Original_TeacherIDNum As String, ByVal Original_Name As String, ByVal Original_Address1 As String, ByVal Original_Address2 As String, ByVal Original_Address3 As String, ByVal Original_phone As String, ByVal Original_cellphone As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal TeacherPriKey As Integer) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TeacherPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String) As Integer
            Return Me.Update(TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks, Original_TeacherPriKey, Original_TeacherIDNum, Original_Name, Original_Address1, Original_Address2, Original_Address3, Original_phone, Original_cellphone, Original_Remarks, Original_TeacherPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CoursesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Courses"
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("CourseID", "CourseID")
            tableMapping.ColumnMappings.Add("CourseName", "CourseName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("special", "special")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Courses] WHERE (([coursepk] = @Original_coursepk) AND ([Course"& _ 
                "ID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName) AND ([Remark"& _ 
                "s] = @Original_Remarks) AND ((@IsNull_special = 1 AND [special] IS NULL) OR ([sp"& _ 
                "ecial] = @Original_special)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Courses] ([CourseID], [CourseName], [Remarks], [special]) VALU"& _ 
                "ES (@CourseID, @CourseName, @Remarks, @special);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT coursepk, CourseID, Cou"& _ 
                "rseName, Remarks, Special FROM Courses WHERE (coursepk = SCOPE_IDENTITY()) ORDER"& _ 
                " BY CourseName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Courses] SET [CourseID] = @CourseID, [CourseName] = @CourseName, [R"& _ 
                "emarks] = @Remarks, [special] = @special WHERE (([coursepk] = @Original_coursepk"& _ 
                ") AND ([CourseID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName"& _ 
                ") AND ([Remarks] = @Original_Remarks) AND ((@IsNull_special = 1 AND [special] IS"& _ 
                " NULL) OR ([special] = @Original_special)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT coursepk, CourseID, CourseN"& _ 
                "ame, Remarks, Special FROM Courses WHERE (coursepk = @coursepk) ORDER BY CourseN"& _ 
                "ame"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT coursepk, CourseID, CourseName, Remarks,special FROM dbo.Courses order by "& _ 
                "coursename"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.CoursesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.CoursesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.CoursesDataTable = New dsSchool.CoursesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.CoursesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "Courses")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer, ByVal coursepk As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(special,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_special,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Return Me.Update(CourseID, CourseName, Remarks, special, Original_coursepk, Original_CourseID, Original_CourseName, Original_Remarks, Original_special, Original_coursepk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BlockSectionTuitionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BlockSectionTuition"
            tableMapping.ColumnMappings.Add("BlockSectionPK", "BlockSectionPK")
            tableMapping.ColumnMappings.Add("SEM", "SEM")
            tableMapping.ColumnMappings.Add("course", "course")
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            tableMapping.ColumnMappings.Add("eduyear", "eduyear")
            tableMapping.ColumnMappings.Add("effectivedate", "effectivedate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BlockSectionTuition] WHERE (([BlockSectionPK] = @Original_BlockSecti"& _ 
                "onPK) AND ([SEM] = @Original_SEM) AND ([course] = @Original_course) AND ([subjec"& _ 
                "tid] = @Original_subjectid) AND ([eduyear] = @Original_eduyear) AND ((@IsNull_ef"& _ 
                "fectivedate = 1 AND [effectivedate] IS NULL) OR ([effectivedate] = @Original_eff"& _ 
                "ectivedate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_effectivedate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BlockSectionTuition] ([SEM], [course], [subjectid], [eduyear], [effe"& _ 
                "ctivedate]) VALUES (@SEM, @course, @subjectid, @eduyear, @effectivedate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BlockSectionTuition] SET [SEM] = @SEM, [course] = @course, [subjectid] = "& _ 
                "@subjectid, [eduyear] = @eduyear, [effectivedate] = @effectivedate WHERE (([Bloc"& _ 
                "kSectionPK] = @Original_BlockSectionPK) AND ([SEM] = @Original_SEM) AND ([course"& _ 
                "] = @Original_course) AND ([subjectid] = @Original_subjectid) AND ([eduyear] = @"& _ 
                "Original_eduyear) AND ((@IsNull_effectivedate = 1 AND [effectivedate] IS NULL) O"& _ 
                "R ([effectivedate] = @Original_effectivedate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_effectivedate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M            BlockSectionTuition"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE       (course = @course)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by eduye"& _ 
                "ar,sem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE    BlockSectionTuition"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              SEM = @SEM, subjectid = @subjecti"& _ 
                "d, eduyear = @eduyear, effectivedate = @effectivedate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (BlockSectionPK"& _ 
                " = @Original_BlockSectionPK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.BlockSectionTuitionDataTable, ByVal course As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal course As Integer) As dsSchool.BlockSectionTuitionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            Dim dataTable As dsSchool.BlockSectionTuitionDataTable = New dsSchool.BlockSectionTuitionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.BlockSectionTuitionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "BlockSectionTuition")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEM,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_course,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_subjectid,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_eduyear,Integer)
            If (Original_effectivedate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_effectivedate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(eduyear,Integer)
            If (effectivedate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(effectivedate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Global.System.Nullable(Of Date), ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(eduyear,Integer)
            If (effectivedate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(effectivedate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_course,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_eduyear,Integer)
            If (Original_effectivedate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_effectivedate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateQuery(ByVal SEM As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date, ByVal Original_BlockSectionPK As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(SEM,Integer)
            command.Parameters(1).Value = CType(subjectid,Integer)
            command.Parameters(2).Value = CType(eduyear,Integer)
            command.Parameters(3).Value = CType(effectivedate,Date)
            command.Parameters(4).Value = CType(Original_BlockSectionPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PrefTableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PrefTable"
            tableMapping.ColumnMappings.Add("prefid", "prefid")
            tableMapping.ColumnMappings.Add("PrefName", "PrefName")
            tableMapping.ColumnMappings.Add("PrefValue", "PrefValue")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PrefTable] WHERE (([prefid] = @Original_prefid) AND ([PrefName"& _ 
                "] = @Original_PrefName) AND ([PrefValue] = @Original_PrefValue))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prefid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prefid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrefName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrefValue", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefValue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PrefTable] ([PrefName], [PrefValue]) VALUES (@PrefName, @PrefV"& _ 
                "alue);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prefid, PrefName, PrefValue FROM PrefTable WHERE (prefid = SCOPE_"& _ 
                "IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrefName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrefValue", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PrefTable] SET [PrefName] = @PrefName, [PrefValue] = @PrefValue WHE"& _ 
                "RE (([prefid] = @Original_prefid) AND ([PrefName] = @Original_PrefName) AND ([Pr"& _ 
                "efValue] = @Original_PrefValue));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT prefid, PrefName, PrefValue FROM PrefT"& _ 
                "able WHERE (prefid = @prefid)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrefName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrefValue", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prefid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prefid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrefName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PrefValue", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefValue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prefid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "prefid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT prefid, PrefName, PrefValue FROM dbo.PrefTable where prefname=@pn"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pn", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PrefName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.PrefTableDataTable, ByVal pn As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pn")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(pn,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal pn As String) As dsSchool.PrefTableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pn")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(pn,String)
            End If
            Dim dataTable As dsSchool.PrefTableDataTable = New dsSchool.PrefTableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.PrefTableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "PrefTable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_prefid As Integer, ByVal Original_PrefName As String, ByVal Original_PrefValue As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_prefid,Integer)
            If (Original_PrefName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrefName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PrefName,String)
            End If
            If (Original_PrefValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrefValue")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PrefValue,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PrefName As String, ByVal PrefValue As String) As Integer
            If (PrefName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrefName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PrefName,String)
            End If
            If (PrefValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrefValue")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PrefValue,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PrefName As String, ByVal PrefValue As String, ByVal Original_prefid As Integer, ByVal Original_PrefName As String, ByVal Original_PrefValue As String, ByVal prefid As Integer) As Integer
            If (PrefName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrefName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PrefName,String)
            End If
            If (PrefValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrefValue")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PrefValue,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_prefid,Integer)
            If (Original_PrefName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrefName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PrefName,String)
            End If
            If (Original_PrefValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrefValue")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PrefValue,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prefid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PrefName As String, ByVal PrefValue As String, ByVal Original_prefid As Integer, ByVal Original_PrefName As String, ByVal Original_PrefValue As String) As Integer
            Return Me.Update(PrefName, PrefValue, Original_prefid, Original_PrefName, Original_PrefValue, Original_prefid)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchoolYearbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SchoolYearbyPK"
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("sorter", "sorter")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchoolYear] WHERE (([sypk] = @Original_sypk) AND ([SchoolYear]"& _ 
                " = @Original_SchoolYear) AND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ([sor"& _ 
                "ter] = @Original_sorter)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchoolYear] ([SchoolYear], [sorter]) VALUES (@SchoolYear, @sor"& _ 
                "ter);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT sypk, SchoolYear, Sorter FROM SchoolYear WHERE (sypk = SCOPE_IDENT"& _ 
                "ITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SchoolYear] SET [SchoolYear] = @SchoolYear, [sorter] = @sorter WHER"& _ 
                "E (([sypk] = @Original_sypk) AND ([SchoolYear] = @Original_SchoolYear) AND ((@Is"& _ 
                "Null_sorter = 1 AND [sorter] IS NULL) OR ([sorter] = @Original_sorter)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T sypk, SchoolYear, Sorter FROM SchoolYear WHERE (sypk = @sypk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sypk, SchoolYear , sorter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.SchoolYear where sypk=@sypk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SchoolYearbyPKDataTable, ByVal sypk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer) As dsSchool.SchoolYearbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Dim dataTable As dsSchool.SchoolYearbyPKDataTable = New dsSchool.SchoolYearbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SchoolYearbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SchoolYearbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_sypk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolYear,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolYear As String, ByVal sorter As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolYear As String, ByVal sorter As Integer, ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer, ByVal sypk As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_sypk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SchoolYear,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sypk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SchoolYear As String, ByVal sorter As Integer, ByVal Original_sypk As Integer, ByVal Original_SchoolYear As String, ByVal Original_sorter As Integer) As Integer
            Return Me.Update(SchoolYear, sorter, Original_sypk, Original_SchoolYear, Original_sorter, Original_sypk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BlockSectionTuitionbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BlockSectionTuitionbyPK"
            tableMapping.ColumnMappings.Add("BlockSectionPK", "BlockSectionPK")
            tableMapping.ColumnMappings.Add("SEM", "SEM")
            tableMapping.ColumnMappings.Add("course", "course")
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            tableMapping.ColumnMappings.Add("eduyear", "eduyear")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("effectivedate", "effectivedate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BlockSectionTuition] WHERE (([BlockSectionPK] = @Original_BlockSecti"& _ 
                "onPK) AND ([SEM] = @Original_SEM) AND ([course] = @Original_course) AND ([subjec"& _ 
                "tid] = @Original_subjectid) AND ([eduyear] = @Original_eduyear) AND ((@IsNull_ef"& _ 
                "fectivedate = 1 AND [effectivedate] IS NULL) OR ([effectivedate] = @Original_eff"& _ 
                "ectivedate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_effectivedate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BlockSectionTuition] ([SEM], [course], [subjectid], [eduyear], [effe"& _ 
                "ctivedate]) VALUES (@SEM, @course, @subjectid, @eduyear, @effectivedate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BlockSectionTuition] SET [SEM] = @SEM, [course] = @course, [subjectid] = "& _ 
                "@subjectid, [eduyear] = @eduyear, [effectivedate] = @effectivedate WHERE (([Bloc"& _ 
                "kSectionPK] = @Original_BlockSectionPK) AND ([SEM] = @Original_SEM) AND ([course"& _ 
                "] = @Original_course) AND ([subjectid] = @Original_subjectid) AND ([eduyear] = @"& _ 
                "Original_eduyear) AND ((@IsNull_effectivedate = 1 AND [effectivedate] IS NULL) O"& _ 
                "R ([effectivedate] = @Original_effectivedate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_effectivedate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M            BlockSectionTuition"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (BlockSectionPK = @id)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.BlockSectionTuitionbyPKDataTable, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As Integer) As dsSchool.BlockSectionTuitionbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            Dim dataTable As dsSchool.BlockSectionTuitionbyPKDataTable = New dsSchool.BlockSectionTuitionbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.BlockSectionTuitionbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "BlockSectionTuitionbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOffering"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("closed", "closed")
            tableMapping.ColumnMappings.Add("requested", "requested")
            tableMapping.ColumnMappings.Add("isFused", "isFused")
            tableMapping.ColumnMappings.Add("isSpecialTutorial", "isSpecialTutorial")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts) AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([closed] = @Original_clo"& _ 
                "sed)) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested] = @Or"& _ 
                "iginal_requested)) AND ((@IsNull_isFused = 1 AND [isFused] IS NULL) OR ([isFused"& _ 
                "] = @Original_isFused)) AND ((@IsNull_isSpecialTutorial = 1 AND [isSpecialTutori"& _ 
                "al] IS NULL) OR ([isSpecialTutorial] = @Original_isSpecialTutorial)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isFused", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isSpecialTutorial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents], [closed], [requested], [is"& _ 
                "Fused], [isSpecialTutorial]) VALUES (@sypk, @subjectpk, @resource, @semesterpk, "& _ 
                "@monday, @tuesday, @wednesday, @thursday, @friday, @saturday, @sunday, @sunfrom,"& _ 
                " @sunto, @monfrom, @monto, @tuesfrom, @tuesto, @wedfrom, @wedto, @thufrom, @thut"& _ 
                "o, @frifrom, @frito, @satfrom, @satto, @alternatefriday, @semid, @teacherid, @Re"& _ 
                "marks, @MinStudents, @MaxStudents, @closed, @requested, @isFused, @isSpecialTuto"& _ 
                "rial);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tues"& _ 
                "day, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, mon"& _ 
                "to, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, s"& _ 
                "atto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, clos"& _ 
                "ed, requested, IsFused, IsSpecialTutorial FROM SYOffering WHERE (syofferingpk = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents,"& _ 
                " [closed] = @closed, [requested] = @requested, [isFused] = @isFused, [isSpecialT"& _ 
                "utorial] = @isSpecialTutorial WHERE (([syofferingpk] = @Original_syofferingpk) A"& _ 
                "ND ([sypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resou"& _ 
                "rce] = @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monda"& _ 
                "y] = @Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @O"& _ 
                "riginal_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Origin"& _ 
                "al_friday) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunda"& _ 
                "y) AND ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([mon"& _ 
                "from] = @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Or"& _ 
                "iginal_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_we"& _ 
                "dfrom) AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ("& _ 
                "[thuto] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @O"& _ 
                "riginal_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satt"& _ 
                "o) AND ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_"& _ 
                "semid) AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remark"& _ 
                "s) AND ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_Ma"& _ 
                "xStudents) AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([closed] = @Origin"& _ 
                "al_closed)) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested]"& _ 
                " = @Original_requested)) AND ((@IsNull_isFused = 1 AND [isFused] IS NULL) OR ([i"& _ 
                "sFused] = @Original_isFused)) AND ((@IsNull_isSpecialTutorial = 1 AND [isSpecial"& _ 
                "Tutorial] IS NULL) OR ([isSpecialTutorial] = @Original_isSpecialTutorial)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, wedne"& _ 
                "sday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfr"& _ 
                "om, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alte"& _ 
                "rnatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed, reques"& _ 
                "ted, IsFused, IsSpecialTutorial FROM SYOffering WHERE (syofferingpk = @syofferin"& _ 
                "gpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isFused", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isSpecialTutorial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         closed , requested, isFused , is"& _ 
                "SpecialTutorial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (sypk = @sy) AND (semi"& _ 
                "d = @sem) AND ( ISNULL(IsDeleted,0) <> 1 ) "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingDataTable, ByVal sy As Integer, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer) As dsSchool.SYOfferingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Dim dataTable As dsSchool.SYOfferingDataTable = New dsSchool.SYOfferingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOffering")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            If (Original_closed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_requested.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_isFused,Boolean)
            Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_isSpecialTutorial,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (closed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (requested.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(isFused,Boolean)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(isSpecialTutorial,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(isFused,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(isSpecialTutorial,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_MaxStudents,Integer)
            If (Original_closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_isFused,Boolean)
            Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_isSpecialTutorial,Boolean)
            Me.Adapter.UpdateCommand.Parameters(75).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed, requested, isFused, isSpecialTutorial, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_closed, Original_requested, Original_isFused, Original_isSpecialTutorial, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsByCNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubjectsByCName"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("units", "units")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Subjects] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) A"& _ 
                "ND ([SubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_Subjec"& _ 
                "tName) AND ([Remarks] = @Original_Remarks) AND ([units] = @Original_units) AND ("& _ 
                "[prereq] = @Original_prereq))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Subjects] ([SubjectCode], [SubjectName], [Remarks], [units], ["& _ 
                "prereq]) VALUES (@SubjectCode, @SubjectName, @Remarks, @units, @prereq);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " SubjectPriKey, SubjectCode, SubjectName, Remarks, units, prereq FROM Subjects W"& _ 
                "HERE (SubjectPriKey = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Subjects] SET [SubjectCode] = @SubjectCode, [SubjectName] = @Subjec"& _ 
                "tName, [Remarks] = @Remarks, [units] = @units, [prereq] = @prereq WHERE (([Subje"& _ 
                "ctPriKey] = @Original_SubjectPriKey) AND ([SubjectCode] = @Original_SubjectCode)"& _ 
                " AND ([SubjectName] = @Original_SubjectName) AND ([Remarks] = @Original_Remarks)"& _ 
                " AND ([units] = @Original_units) AND ([prereq] = @Original_prereq));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Sub"& _ 
                "jectPriKey, SubjectCode, SubjectName, Remarks, units, prereq FROM Subjects WHERE"& _ 
                " (SubjectPriKey = @SubjectPriKey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SubjectPriKey, SubjectCode, SubjectName, Remarks, units, prereq FROM dbo.S"& _ 
                "ubjects where subjectname like @prep Or SubjectCode like @prep"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prep", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SubjectsByCNameDataTable, ByVal prep As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (prep Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prep")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(prep,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal prep As String) As dsSchool.SubjectsByCNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (prep Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prep")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(prep,String)
            End If
            Dim dataTable As dsSchool.SubjectsByCNameDataTable = New dsSchool.SubjectsByCNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SubjectsByCNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SubjectsByCName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_Remarks As String, ByVal Original_units As Single, ByVal Original_prereq As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_units,Single)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_prereq,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(units,Single)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(prereq,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer, ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_Remarks As String, ByVal Original_units As Single, ByVal Original_prereq As Integer, ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(units,Single)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prereq,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_units,Single)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_prereq,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal units As Single, ByVal prereq As Integer, ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_Remarks As String, ByVal Original_units As Single, ByVal Original_prereq As Integer) As Integer
            Return Me.Update(SubjectCode, SubjectName, Remarks, units, prereq, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_Remarks, Original_units, Original_prereq, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchoolResourcesbyCNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SchoolResourcesbyCName"
            tableMapping.ColumnMappings.Add("ResourcePrikey", "ResourcePrikey")
            tableMapping.ColumnMappings.Add("ResourceID", "ResourceID")
            tableMapping.ColumnMappings.Add("ResourceName", "ResourceName")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchoolResources] WHERE (([ResourcePrikey] = @Original_Resource"& _ 
                "Prikey) AND ([ResourceID] = @Original_ResourceID) AND ([ResourceName] = @Origina"& _ 
                "l_ResourceName) AND ([Location] = @Original_Location) AND ([Remarks] = @Original"& _ 
                "_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchoolResources] ([ResourceID], [ResourceName], [Location], [R"& _ 
                "emarks]) VALUES (@ResourceID, @ResourceName, @Location, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Resou"& _ 
                "rcePrikey, ResourceID, ResourceName, Location, Remarks FROM SchoolResources WHER"& _ 
                "E (ResourcePrikey = SCOPE_IDENTITY()) ORDER BY ResourceName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SchoolResources] SET [ResourceID] = @ResourceID, [ResourceName] = @"& _ 
                "ResourceName, [Location] = @Location, [Remarks] = @Remarks WHERE (([ResourcePrik"& _ 
                "ey] = @Original_ResourcePrikey) AND ([ResourceID] = @Original_ResourceID) AND (["& _ 
                "ResourceName] = @Original_ResourceName) AND ([Location] = @Original_Location) AN"& _ 
                "D ([Remarks] = @Original_Remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ResourcePrikey, ResourceID, Resource"& _ 
                "Name, Location, Remarks FROM SchoolResources WHERE (ResourcePrikey = @ResourcePr"& _ 
                "ikey) ORDER BY ResourceName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourcePrikey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ResourcePrikey, ResourceID, ResourceName, Location, Remarks FROM dbo.Schoo"& _ 
                "lResources where resourcename like @id order by resourcename"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SchoolResourcesbyCNameDataTable, ByVal id As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As String) As dsSchool.SchoolResourcesbyCNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            Dim dataTable As dsSchool.SchoolResourcesbyCNameDataTable = New dsSchool.SchoolResourcesbyCNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SchoolResourcesbyCNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SchoolResourcesbyCName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String, ByVal ResourcePrikey As Integer) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ResourcePrikey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Return Me.Update(ResourceID, ResourceName, Location, Remarks, Original_ResourcePrikey, Original_ResourceID, Original_ResourceName, Original_Location, Original_Remarks, Original_ResourcePrikey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TeachersbyCNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TeachersbyCName"
            tableMapping.ColumnMappings.Add("TeacherPriKey", "TeacherPriKey")
            tableMapping.ColumnMappings.Add("TeacherIDNum", "TeacherIDNum")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("cellphone", "cellphone")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Teachers] WHERE (([TeacherPriKey] = @Original_TeacherPriKey) A"& _ 
                "ND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name] = @Original_Name) AND ("& _ 
                "[Address1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Add"& _ 
                "ress3] = @Original_Address3) AND ([phone] = @Original_phone) AND ([cellphone] = "& _ 
                "@Original_cellphone) AND ([Remarks] = @Original_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Teachers] ([TeacherIDNum], [Name], [Address1], [Address2], [Ad"& _ 
                "dress3], [phone], [cellphone], [Remarks]) VALUES (@TeacherIDNum, @Name, @Address"& _ 
                "1, @Address2, @Address3, @phone, @cellphone, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, T"& _ 
                "eacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks FROM "& _ 
                "Teachers WHERE (TeacherPriKey = SCOPE_IDENTITY()) ORDER BY Name"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Teachers] SET [TeacherIDNum] = @TeacherIDNum, [Name] = @Name, [Addr"& _ 
                "ess1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [phone] = @ph"& _ 
                "one, [cellphone] = @cellphone, [Remarks] = @Remarks WHERE (([TeacherPriKey] = @O"& _ 
                "riginal_TeacherPriKey) AND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name]"& _ 
                " = @Original_Name) AND ([Address1] = @Original_Address1) AND ([Address2] = @Orig"& _ 
                "inal_Address2) AND ([Address3] = @Original_Address3) AND ([phone] = @Original_ph"& _ 
                "one) AND ([cellphone] = @Original_cellphone) AND ([Remarks] = @Original_Remarks)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phon"& _ 
                "e, cellphone, Remarks FROM Teachers WHERE (TeacherPriKey = @TeacherPriKey) ORDER"& _ 
                " BY Name"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phone, ce"& _ 
                "llphone, Remarks FROM dbo.Teachers where name like @id order by name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TeachersbyCNameDataTable, ByVal id As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As String) As dsSchool.TeachersbyCNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            Dim dataTable As dsSchool.TeachersbyCNameDataTable = New dsSchool.TeachersbyCNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TeachersbyCNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TeachersbyCName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TeacherPriKey As Integer, ByVal Original_TeacherIDNum As String, ByVal Original_Name As String, ByVal Original_Address1 As String, ByVal Original_Address2 As String, ByVal Original_Address3 As String, ByVal Original_phone As String, ByVal Original_cellphone As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal TeacherPriKey As Integer) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TeacherPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String) As Integer
            Return Me.Update(TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks, Original_TeacherPriKey, Original_TeacherIDNum, Original_Name, Original_Address1, Original_Address2, Original_Address3, Original_phone, Original_cellphone, Original_Remarks, Original_TeacherPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherMonTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherMon"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (monfrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (monto >= @d1) and (monday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherMonDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherMonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherMonDataTable = New dsSchool.SYOfferingTeacherMonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherMonDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherMon")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TeachersbyIDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TeachersbyID"
            tableMapping.ColumnMappings.Add("TeacherPriKey", "TeacherPriKey")
            tableMapping.ColumnMappings.Add("TeacherIDNum", "TeacherIDNum")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("cellphone", "cellphone")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Teachers] WHERE (([TeacherPriKey] = @Original_TeacherPriKey) A"& _ 
                "ND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name] = @Original_Name) AND ("& _ 
                "[Address1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Add"& _ 
                "ress3] = @Original_Address3) AND ([phone] = @Original_phone) AND ([cellphone] = "& _ 
                "@Original_cellphone) AND ([Remarks] = @Original_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Teachers] ([TeacherIDNum], [Name], [Address1], [Address2], [Ad"& _ 
                "dress3], [phone], [cellphone], [Remarks]) VALUES (@TeacherIDNum, @Name, @Address"& _ 
                "1, @Address2, @Address3, @phone, @cellphone, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, T"& _ 
                "eacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks FROM "& _ 
                "Teachers WHERE (TeacherPriKey = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Teachers] SET [TeacherIDNum] = @TeacherIDNum, [Name] = @Name, [Addr"& _ 
                "ess1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [phone] = @ph"& _ 
                "one, [cellphone] = @cellphone, [Remarks] = @Remarks WHERE (([TeacherPriKey] = @O"& _ 
                "riginal_TeacherPriKey) AND ([TeacherIDNum] = @Original_TeacherIDNum) AND ([Name]"& _ 
                " = @Original_Name) AND ([Address1] = @Original_Address1) AND ([Address2] = @Orig"& _ 
                "inal_Address2) AND ([Address3] = @Original_Address3) AND ([phone] = @Original_ph"& _ 
                "one) AND ([cellphone] = @Original_cellphone) AND ([Remarks] = @Original_Remarks)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phon"& _ 
                "e, cellphone, Remarks FROM Teachers WHERE (TeacherPriKey = @TeacherPriKey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TeacherIDNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherIDNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cellphone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cellphone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TeacherPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TeacherPriKey, TeacherIDNum, Name, Address1, Address2, Address3, phone, ce"& _ 
                "llphone, Remarks FROM dbo.Teachers where TeacherPriKey=@id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TeacherPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TeachersbyIDDataTable, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As Integer) As dsSchool.TeachersbyIDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            Dim dataTable As dsSchool.TeachersbyIDDataTable = New dsSchool.TeachersbyIDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TeachersbyIDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TeachersbyID")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TeacherPriKey As Integer, ByVal Original_TeacherIDNum As String, ByVal Original_Name As String, ByVal Original_Address1 As String, ByVal Original_Address2 As String, ByVal Original_Address3 As String, ByVal Original_phone As String, ByVal Original_cellphone As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TeacherIDNum As String, ByVal Name As String, ByVal Address1 As String, ByVal Address2 As String, ByVal Address3 As String, ByVal phone As String, ByVal cellphone As String, ByVal Remarks As String) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal TeacherPriKey As Integer) As Integer
            If (TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TeacherIDNum,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(phone,String)
            End If
            If (cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cellphone,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TeacherPriKey,Integer)
            If (Original_TeacherIDNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherIDNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TeacherIDNum,String)
            End If
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Name,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Address3,String)
            End If
            If (Original_phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_phone,String)
            End If
            If (Original_cellphone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cellphone")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cellphone,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TeacherPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TeacherIDNum As String,  _
                    ByVal Name As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal phone As String,  _
                    ByVal cellphone As String,  _
                    ByVal Remarks As String,  _
                    ByVal Original_TeacherPriKey As Integer,  _
                    ByVal Original_TeacherIDNum As String,  _
                    ByVal Original_Name As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_phone As String,  _
                    ByVal Original_cellphone As String,  _
                    ByVal Original_Remarks As String) As Integer
            Return Me.Update(TeacherIDNum, Name, Address1, Address2, Address3, phone, cellphone, Remarks, Original_TeacherPriKey, Original_TeacherIDNum, Original_Name, Original_Address1, Original_Address2, Original_Address3, Original_phone, Original_cellphone, Original_Remarks, Original_TeacherPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherTueTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherTue"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (tuesfrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (tuesto >= @d1) and (tuesday=1)"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherTueDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherTueDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherTueDataTable = New dsSchool.SYOfferingTeacherTueDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherTueDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherTue")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherWedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherWed"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (wedfrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (wedto >= @d1) and (wednesday=1)"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherWedDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherWedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherWedDataTable = New dsSchool.SYOfferingTeacherWedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherWedDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherWed")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherThursTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherThurs"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (thufrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (thuto >= @d1) and (thursday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherThursDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherThursDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherThursDataTable = New dsSchool.SYOfferingTeacherThursDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherThursDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherThurs")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherFriTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherFri"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (frifrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (frito >= @d1) and (friday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherFriDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherFriDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherFriDataTable = New dsSchool.SYOfferingTeacherFriDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherFriDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherFri")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherSatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherSat"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (Satfrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Satto >= @d1) and (saturday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherSatDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherSatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherSatDataTable = New dsSchool.SYOfferingTeacherSatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherSatDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherSat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingTeacherSunTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingTeacherSun"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (teacherid=@teacherid) "& _ 
                "and (sunfrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (sunto >= @d1) and (sunday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingTeacherSunDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal teacherid As Integer, ByVal d1 As String) As dsSchool.SYOfferingTeacherSunDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(teacherid,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingTeacherSunDataTable = New dsSchool.SYOfferingTeacherSunDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingTeacherSunDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingTeacherSun")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceMonTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceMon"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (monfrom >= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (monto <= @d1) and (monday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceMonDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceMonDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceMonDataTable = New dsSchool.SYOfferingResourceMonDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceMonDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceMon")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceTuesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceTues"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (sypk = @sy) AND (semesterpk = @sem) AND (resource = "& _ 
                "@resource) AND (tuesfrom >= @d1) AND (tuesto <= @d1) AND (tuesday = 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceTuesDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceTuesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceTuesDataTable = New dsSchool.SYOfferingResourceTuesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceTuesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceTues")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceWedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceWed"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (wedfrom >= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (wedto <= @d1) and (wednesday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceWedDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceWedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceWedDataTable = New dsSchool.SYOfferingResourceWedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceWedDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceWed")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceThursTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceThurs"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (thufrom >= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (thuto <= @d1) and (thursday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceThursDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceThursDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceThursDataTable = New dsSchool.SYOfferingResourceThursDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceThursDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceThurs")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceFriTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceFri"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (frifrom <= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (frito >= @d1) and (friday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceFriDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceFriDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceFriDataTable = New dsSchool.SYOfferingResourceFriDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceFriDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceFri")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceSatTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceSat"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (satfrom >= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (satto <= @d1) and (saturday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceSatDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceSatDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceSatDataTable = New dsSchool.SYOfferingResourceSatDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceSatDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceSat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingResourceSunTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingResourceSun"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid WH"& _ 
                "ERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) AND"& _ 
                " ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND ("& _ 
                "[semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([tue"& _ 
                "sday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thursda"& _ 
                "y] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @Or"& _ 
                "iginal_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_su"& _ 
                "nfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND ("& _ 
                "[monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto] ="& _ 
                " @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Original_"& _ 
                "wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND ("& _ 
                "[frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] = "& _ 
                "@Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @Ori"& _ 
                "ginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Origi"& _ 
                "nal_teacherid));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, mo"& _ 
                "nday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, mo"& _ 
                "nfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, "& _ 
                "satfrom, satto, alternatefriday, semid, teacherid FROM SYOffering WHERE (syoffer"& _ 
                "ingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     syofferingpk, sypk, subjectpk, resource,  semesterpk, monday, tuesday,"& _ 
                " wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifro"& _ 
                "m, frito, satfrom, satto, alternatefriday, semid, teacherid"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SYOffe"& _ 
                "ring"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (sypk = @sy) AND (semesterpk = @sem) AND (resource=@resource) an"& _ 
                "d (sunfrom >= @d1) and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (sunto <= @d1) and (sunday=1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingResourceSunDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal resource As Integer, ByVal d1 As String) As dsSchool.SYOfferingResourceSunDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(resource,Integer)
            If (d1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("d1")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(d1,String)
            End If
            Dim dataTable As dsSchool.SYOfferingResourceSunDataTable = New dsSchool.SYOfferingResourceSunDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingResourceSunDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingResourceSun")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_teacherid,Integer)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SchoolResourcesbyPkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SchoolResourcesbyPk"
            tableMapping.ColumnMappings.Add("ResourcePrikey", "ResourcePrikey")
            tableMapping.ColumnMappings.Add("ResourceID", "ResourceID")
            tableMapping.ColumnMappings.Add("ResourceName", "ResourceName")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchoolResources] WHERE (([ResourcePrikey] = @Original_Resource"& _ 
                "Prikey) AND ([ResourceID] = @Original_ResourceID) AND ([ResourceName] = @Origina"& _ 
                "l_ResourceName) AND ([Location] = @Original_Location) AND ([Remarks] = @Original"& _ 
                "_Remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchoolResources] ([ResourceID], [ResourceName], [Location], [R"& _ 
                "emarks]) VALUES (@ResourceID, @ResourceName, @Location, @Remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Resou"& _ 
                "rcePrikey, ResourceID, ResourceName, Location, Remarks FROM SchoolResources WHER"& _ 
                "E (ResourcePrikey = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SchoolResources] SET [ResourceID] = @ResourceID, [ResourceName] = @"& _ 
                "ResourceName, [Location] = @Location, [Remarks] = @Remarks WHERE (([ResourcePrik"& _ 
                "ey] = @Original_ResourcePrikey) AND ([ResourceID] = @Original_ResourceID) AND (["& _ 
                "ResourceName] = @Original_ResourceName) AND ([Location] = @Original_Location) AN"& _ 
                "D ([Remarks] = @Original_Remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ResourcePrikey, ResourceID, Resource"& _ 
                "Name, Location, Remarks FROM SchoolResources WHERE (ResourcePrikey = @ResourcePr"& _ 
                "ikey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourcePrikey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourcePrikey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ResourcePrikey, ResourceID, ResourceName, Location, Remarks FROM dbo.Schoo"& _ 
                "lResources where resourceprikey=@rpkey"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rpkey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourcePrikey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SchoolResourcesbyPkDataTable, ByVal rpkey As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(rpkey,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal rpkey As Integer) As dsSchool.SchoolResourcesbyPkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(rpkey,Integer)
            Dim dataTable As dsSchool.SchoolResourcesbyPkDataTable = New dsSchool.SchoolResourcesbyPkDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SchoolResourcesbyPkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SchoolResourcesbyPk")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String, ByVal ResourcePrikey As Integer) As Integer
            If (ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ResourceID,String)
            End If
            If (ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Location,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ResourcePrikey,Integer)
            If (Original_ResourceID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ResourceID,String)
            End If
            If (Original_ResourceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ResourceName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Location")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Location,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ResourcePrikey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As String, ByVal ResourceName As String, ByVal Location As String, ByVal Remarks As String, ByVal Original_ResourcePrikey As Integer, ByVal Original_ResourceID As String, ByVal Original_ResourceName As String, ByVal Original_Location As String, ByVal Original_Remarks As String) As Integer
            Return Me.Update(ResourceID, ResourceName, Location, Remarks, Original_ResourcePrikey, Original_ResourceID, Original_ResourceName, Original_Location, Original_Remarks, Original_ResourcePrikey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingbyTeacherTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingbyTeacher"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("requested", "requested")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested] = @Ori"& _ 
                "ginal_requested)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents], [requested]) VALUES (@sypk"& _ 
                ", @subjectpk, @resource, @semesterpk, @monday, @tuesday, @wednesday, @thursday, "& _ 
                "@friday, @saturday, @sunday, @sunfrom, @sunto, @monfrom, @monto, @tuesfrom, @tue"& _ 
                "sto, @wedfrom, @wedto, @thufrom, @thuto, @frifrom, @frito, @satfrom, @satto, @al"& _ 
                "ternatefriday, @semid, @teacherid, @Remarks, @MinStudents, @MaxStudents, @reques"& _ 
                "ted);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesd"& _ 
                "ay, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, mont"& _ 
                "o, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, sa"& _ 
                "tto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, reque"& _ 
                "sted FROM SYOffering WHERE (syofferingpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents,"& _ 
                " [requested] = @requested WHERE (([syofferingpk] = @Original_syofferingpk) AND ("& _ 
                "[sypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource]"& _ 
                " = @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] ="& _ 
                " @Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origi"& _ 
                "nal_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_f"& _ 
                "riday) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) A"& _ 
                "ND ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom"& _ 
                "] = @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Origin"& _ 
                "al_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfro"& _ 
                "m) AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thu"& _ 
                "to] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origi"& _ 
                "nal_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) A"& _ 
                "ND ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semi"& _ 
                "d) AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) A"& _ 
                "ND ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStu"& _ 
                "dents) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested] = @O"& _ 
                "riginal_requested)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterp"& _ 
                "k, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunt"& _ 
                "o, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, fr"& _ 
                "ito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, Ma"& _ 
                "xStudents, requested FROM SYOffering WHERE (syofferingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents , requested"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (sypk "& _ 
                "= @sy) AND (semid = @sem) AND (teacherid = @id)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND ( isnull(IsDeleted,0) = 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SYOfferingbyTeacherDataTable, ByVal sy As Integer, ByVal sem As Integer, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer, ByVal id As Integer) As dsSchool.SYOfferingbyTeacherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id,Integer)
            Dim dataTable As dsSchool.SYOfferingbyTeacherDataTable = New dsSchool.SYOfferingbyTeacherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SYOfferingbyTeacherDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingbyTeacher")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            If (Original_requested.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (requested.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_MaxStudents,Integer)
            If (Original_requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requested, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_requested, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRTypesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRTypes"
            tableMapping.ColumnMappings.Add("TRPK", "TRPK")
            tableMapping.ColumnMappings.Add("TRCode", "TRCode")
            tableMapping.ColumnMappings.Add("TRName", "TRName")
            tableMapping.ColumnMappings.Add("TRAmount", "TRAmount")
            tableMapping.ColumnMappings.Add("TRCourse", "TRCourse")
            tableMapping.ColumnMappings.Add("TRYearLevel", "TRYearLevel")
            tableMapping.ColumnMappings.Add("TRSubject", "TRSubject")
            tableMapping.ColumnMappings.Add("TRRemarks", "TRRemarks")
            tableMapping.ColumnMappings.Add("TRStudentType", "TRStudentType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRTypes] WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @Original_"& _ 
                "TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TRAmount) "& _ 
                "AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Original_TR"& _ 
                "Course)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([TRYearLev"& _ 
                "el] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject] IS NUL"& _ 
                "L) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 AND [TRRe"& _ 
                "marks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)) AND ((@IsNull_TRStudentT"& _ 
                "ype = 1 AND [TRStudentType] IS NULL) OR ([TRStudentType] = @Original_TRStudentTy"& _ 
                "pe)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRStudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRStudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRTypes] ([TRCode], [TRName], [TRAmount], [TRCourse], [TRYearLevel],"& _ 
                " [TRSubject], [TRRemarks], [TRStudentType]) VALUES (@TRCode, @TRName, @TRAmount,"& _ 
                " @TRCourse, @TRYearLevel, @TRSubject, @TRRemarks, @TRStudentType);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK,"& _ 
                " TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, TRStuden"& _ 
                "tType FROM TRTypes WHERE (TRPK = SCOPE_IDENTITY()) ORDER BY TRName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRStudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRTypes] SET [TRCode] = @TRCode, [TRName] = @TRName, [TRAmount] = @TRAmou"& _ 
                "nt, [TRCourse] = @TRCourse, [TRYearLevel] = @TRYearLevel, [TRSubject] = @TRSubje"& _ 
                "ct, [TRRemarks] = @TRRemarks, [TRStudentType] = @TRStudentType WHERE (([TRPK] = "& _ 
                "@Original_TRPK) AND ([TRCode] = @Original_TRCode) AND ([TRName] = @Original_TRNa"& _ 
                "me) AND ([TRAmount] = @Original_TRAmount) AND ((@IsNull_TRCourse = 1 AND [TRCour"& _ 
                "se] IS NULL) OR ([TRCourse] = @Original_TRCourse)) AND ((@IsNull_TRYearLevel = 1"& _ 
                " AND [TRYearLevel] IS NULL) OR ([TRYearLevel] = @Original_TRYearLevel)) AND ((@I"& _ 
                "sNull_TRSubject = 1 AND [TRSubject] IS NULL) OR ([TRSubject] = @Original_TRSubje"& _ 
                "ct)) AND ((@IsNull_TRRemarks = 1 AND [TRRemarks] IS NULL) OR ([TRRemarks] = @Ori"& _ 
                "ginal_TRRemarks)) AND ((@IsNull_TRStudentType = 1 AND [TRStudentType] IS NULL) O"& _ 
                "R ([TRStudentType] = @Original_TRStudentType)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, TRCode, TRName, T"& _ 
                "RAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, TRStudentType FROM TRTypes"& _ 
                " WHERE (TRPK = @TRPK) ORDER BY TRName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRStudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRStudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRStudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRStudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRTypes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TRTypesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.TRTypesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.TRTypesDataTable = New dsSchool.TRTypesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TRTypesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TRTypes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String, ByVal Original_TRStudentType As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_TRRemarks,String)
            End If
            If (Original_TRStudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_TRStudentType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String, ByVal TRStudentType As String) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            If (TRStudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TRStudentType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRCode As String,  _
                    ByVal TRName As String,  _
                    ByVal TRAmount As Decimal,  _
                    ByVal TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal TRRemarks As String,  _
                    ByVal TRStudentType As String,  _
                    ByVal Original_TRPK As Integer,  _
                    ByVal Original_TRCode As String,  _
                    ByVal Original_TRName As String,  _
                    ByVal Original_TRAmount As Decimal,  _
                    ByVal Original_TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRRemarks As String,  _
                    ByVal Original_TRStudentType As String,  _
                    ByVal TRPK As Integer) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            If (TRStudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TRStudentType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_TRRemarks,String)
            End If
            If (Original_TRStudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_TRStudentType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(TRPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRCode As String,  _
                    ByVal TRName As String,  _
                    ByVal TRAmount As Decimal,  _
                    ByVal TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal TRRemarks As String,  _
                    ByVal TRStudentType As String,  _
                    ByVal Original_TRPK As Integer,  _
                    ByVal Original_TRCode As String,  _
                    ByVal Original_TRName As String,  _
                    ByVal Original_TRAmount As Decimal,  _
                    ByVal Original_TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRRemarks As String,  _
                    ByVal Original_TRStudentType As String) As Integer
            Return Me.Update(TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, TRStudentType, Original_TRPK, Original_TRCode, Original_TRName, Original_TRAmount, Original_TRCourse, Original_TRYearLevel, Original_TRSubject, Original_TRRemarks, Original_TRStudentType, Original_TRPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRTypesbyNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRTypesbyName"
            tableMapping.ColumnMappings.Add("TRPK", "TRPK")
            tableMapping.ColumnMappings.Add("TRCode", "TRCode")
            tableMapping.ColumnMappings.Add("TRName", "TRName")
            tableMapping.ColumnMappings.Add("TRAmount", "TRAmount")
            tableMapping.ColumnMappings.Add("TRCourse", "TRCourse")
            tableMapping.ColumnMappings.Add("TRYearLevel", "TRYearLevel")
            tableMapping.ColumnMappings.Add("TRSubject", "TRSubject")
            tableMapping.ColumnMappings.Add("TRRemarks", "TRRemarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRTypes] WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @Original_"& _ 
                "TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TRAmount) "& _ 
                "AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Original_TR"& _ 
                "Course)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([TRYearLev"& _ 
                "el] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject] IS NUL"& _ 
                "L) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 AND [TRRe"& _ 
                "marks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRTypes] ([TRCode], [TRName], [TRAmount], [TRCourse], [TRYearLevel],"& _ 
                " [TRSubject], [TRRemarks]) VALUES (@TRCode, @TRName, @TRAmount, @TRCourse, @TRYe"& _ 
                "arLevel, @TRSubject, @TRRemarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, TRCode, TRName, TRAmount, TRCour"& _ 
                "se, TRYearLevel, TRSubject, TRRemarks FROM TRTypes WHERE (TRPK = SCOPE_IDENTITY("& _ 
                ")) ORDER BY TRName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRTypes] SET [TRCode] = @TRCode, [TRName] = @TRName, [TRAmount] = @TRAmou"& _ 
                "nt, [TRCourse] = @TRCourse, [TRYearLevel] = @TRYearLevel, [TRSubject] = @TRSubje"& _ 
                "ct, [TRRemarks] = @TRRemarks WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @O"& _ 
                "riginal_TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TR"& _ 
                "Amount) AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Ori"& _ 
                "ginal_TRCourse)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([T"& _ 
                "RYearLevel] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject"& _ 
                "] IS NULL) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 A"& _ 
                "ND [TRRemarks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, "& _ 
                "TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks FROM TRTyp"& _ 
                "es WHERE (TRPK = @TRPK) ORDER BY TRName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT    *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRTypes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRName LIKE @trname)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRNa"& _ 
                "me"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trname", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TRTypesbyNameDataTable, ByVal trname As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trname")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trname,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trname As String) As dsSchool.TRTypesbyNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trname")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trname,String)
            End If
            Dim dataTable As dsSchool.TRTypesbyNameDataTable = New dsSchool.TRTypesbyNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TRTypesbyNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TRTypesbyName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRCode As String,  _
                    ByVal TRName As String,  _
                    ByVal TRAmount As Decimal,  _
                    ByVal TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal TRRemarks As String,  _
                    ByVal Original_TRPK As Integer,  _
                    ByVal Original_TRCode As String,  _
                    ByVal Original_TRName As String,  _
                    ByVal Original_TRAmount As Decimal,  _
                    ByVal Original_TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRRemarks As String,  _
                    ByVal TRPK As Integer) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(TRPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String, ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Return Me.Update(TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, Original_TRPK, Original_TRCode, Original_TRName, Original_TRAmount, Original_TRCourse, Original_TRYearLevel, Original_TRSubject, Original_TRRemarks, Original_TRPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRTypesbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRTypesbyPK"
            tableMapping.ColumnMappings.Add("TRPK", "TRPK")
            tableMapping.ColumnMappings.Add("TRCode", "TRCode")
            tableMapping.ColumnMappings.Add("TRName", "TRName")
            tableMapping.ColumnMappings.Add("TRAmount", "TRAmount")
            tableMapping.ColumnMappings.Add("TRCourse", "TRCourse")
            tableMapping.ColumnMappings.Add("TRYearLevel", "TRYearLevel")
            tableMapping.ColumnMappings.Add("TRSubject", "TRSubject")
            tableMapping.ColumnMappings.Add("TRRemarks", "TRRemarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRTypes] WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @Original_"& _ 
                "TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TRAmount) "& _ 
                "AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Original_TR"& _ 
                "Course)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([TRYearLev"& _ 
                "el] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject] IS NUL"& _ 
                "L) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 AND [TRRe"& _ 
                "marks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRTypes] ([TRCode], [TRName], [TRAmount], [TRCourse], [TRYearLevel],"& _ 
                " [TRSubject], [TRRemarks]) VALUES (@TRCode, @TRName, @TRAmount, @TRCourse, @TRYe"& _ 
                "arLevel, @TRSubject, @TRRemarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, TRCode, TRName, TRAmount, TRCour"& _ 
                "se, TRYearLevel, TRSubject, TRRemarks FROM TRTypes WHERE (TRPK = SCOPE_IDENTITY("& _ 
                ")) ORDER BY TRName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRTypes] SET [TRCode] = @TRCode, [TRName] = @TRName, [TRAmount] = @TRAmou"& _ 
                "nt, [TRCourse] = @TRCourse, [TRYearLevel] = @TRYearLevel, [TRSubject] = @TRSubje"& _ 
                "ct, [TRRemarks] = @TRRemarks WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @O"& _ 
                "riginal_TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TR"& _ 
                "Amount) AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Ori"& _ 
                "ginal_TRCourse)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([T"& _ 
                "RYearLevel] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject"& _ 
                "] IS NULL) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 A"& _ 
                "ND [TRRemarks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, "& _ 
                "TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks FROM TRTyp"& _ 
                "es WHERE (TRPK = @TRPK) ORDER BY TRName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRTypes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (trpk=@trpk)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TRTypesbyPKDataTable, ByVal trpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(trpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trpk As Integer) As dsSchool.TRTypesbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(trpk,Integer)
            Dim dataTable As dsSchool.TRTypesbyPKDataTable = New dsSchool.TRTypesbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TRTypesbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TRTypesbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRCode As String,  _
                    ByVal TRName As String,  _
                    ByVal TRAmount As Decimal,  _
                    ByVal TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal TRRemarks As String,  _
                    ByVal Original_TRPK As Integer,  _
                    ByVal Original_TRCode As String,  _
                    ByVal Original_TRName As String,  _
                    ByVal Original_TRAmount As Decimal,  _
                    ByVal Original_TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRRemarks As String,  _
                    ByVal TRPK As Integer) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(TRPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String, ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Return Me.Update(TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, Original_TRPK, Original_TRCode, Original_TRName, Original_TRAmount, Original_TRCourse, Original_TRYearLevel, Original_TRSubject, Original_TRRemarks, Original_TRPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CoursesbyPkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CoursesbyPk"
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("CourseID", "CourseID")
            tableMapping.ColumnMappings.Add("CourseName", "CourseName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("special", "special")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Courses] WHERE (([coursepk] = @Original_coursepk) AND ([Course"& _ 
                "ID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName) AND ([Remark"& _ 
                "s] = @Original_Remarks) AND ([special] = @Original_special))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Courses] ([CourseID], [CourseName], [Remarks], [special]) VALU"& _ 
                "ES (@CourseID, @CourseName, @Remarks, @special);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT coursepk, CourseID, Cou"& _ 
                "rseName, Remarks, Special FROM Courses WHERE (coursepk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Courses] SET [CourseID] = @CourseID, [CourseName] = @CourseName, [R"& _ 
                "emarks] = @Remarks, [special] = @special WHERE (([coursepk] = @Original_coursepk"& _ 
                ") AND ([CourseID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName"& _ 
                ") AND ([Remarks] = @Original_Remarks) AND ([special] = @Original_special));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT coursepk, CourseID, CourseName, Remarks, Special FROM Courses WHERE (coursep"& _ 
                "k = @coursepk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT coursepk, CourseID, CourseName, Remarks,special FROM dbo.Courses where cou"& _ 
                "rsepk=@cpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.CoursesbyPkDataTable, ByVal cpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cpk As Integer) As dsSchool.CoursesbyPkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cpk,Integer)
            Dim dataTable As dsSchool.CoursesbyPkDataTable = New dsSchool.CoursesbyPkDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.CoursesbyPkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "CoursesbyPk")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer, ByVal coursepk As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(special,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_special,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Return Me.Update(CourseID, CourseName, Remarks, special, Original_coursepk, Original_CourseID, Original_CourseName, Original_Remarks, Original_special, Original_coursepk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TemplateTeacherLoadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TemplateTeacherLoad"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Resource", "Resource")
            tableMapping.ColumnMappings.Add("Subject", "Subject")
            tableMapping.ColumnMappings.Add("Schedule", "Schedule")
            tableMapping.ColumnMappings.Add("Min", "Min")
            tableMapping.ColumnMappings.Add("Max", "Max")
            tableMapping.ColumnMappings.Add("Enrolled", "Enrolled")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TemplateTeacherLoad] WHERE (([PK] = @Original_PK) AND ([SchoolYear] "& _ 
                "= @Original_SchoolYear) AND ([Semester] = @Original_Semester) AND ([Resource] = "& _ 
                "@Original_Resource) AND ([Subject] = @Original_Subject) AND ([Schedule] = @Origi"& _ 
                "nal_Schedule) AND ([Min] = @Original_Min) AND ([Max] = @Original_Max) AND ([Enro"& _ 
                "lled] = @Original_Enrolled))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TemplateTeacherLoad] ([SchoolYear], [Semester], [Resource], [Subject"& _ 
                "], [Schedule], [Min], [Max], [Enrolled]) VALUES (@SchoolYear, @Semester, @Resour"& _ 
                "ce, @Subject, @Schedule, @Min, @Max, @Enrolled);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SchoolYear, Semeste"& _ 
                "r, Resource, Subject, Schedule, Min, Max, Enrolled FROM TemplateTeacherLoad WHER"& _ 
                "E (PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TemplateTeacherLoad] SET [SchoolYear] = @SchoolYear, [Semester] = @Semest"& _ 
                "er, [Resource] = @Resource, [Subject] = @Subject, [Schedule] = @Schedule, [Min] "& _ 
                "= @Min, [Max] = @Max, [Enrolled] = @Enrolled WHERE (([PK] = @Original_PK) AND (["& _ 
                "SchoolYear] = @Original_SchoolYear) AND ([Semester] = @Original_Semester) AND (["& _ 
                "Resource] = @Original_Resource) AND ([Subject] = @Original_Subject) AND ([Schedu"& _ 
                "le] = @Original_Schedule) AND ([Min] = @Original_Min) AND ([Max] = @Original_Max"& _ 
                ") AND ([Enrolled] = @Original_Enrolled));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SchoolYear, Semester, Reso"& _ 
                "urce, Subject, Schedule, Min, Max, Enrolled FROM TemplateTeacherLoad WHERE (PK ="& _ 
                " @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PK, SchoolYear, Semester, Resource, Subject, Schedule, Min, Max, En"& _ 
                "rolled"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TemplateTeacherLoad"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TemplateTeacherLoadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.TemplateTeacherLoadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.TemplateTeacherLoadDataTable = New dsSchool.TemplateTeacherLoadDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TemplateTeacherLoadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TemplateTeacherLoad")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_SchoolYear As String, ByVal Original_Semester As String, ByVal Original_Resource As String, ByVal Original_Subject As String, ByVal Original_Schedule As String, ByVal Original_Min As Integer, ByVal Original_Max As Integer, ByVal Original_Enrolled As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Semester")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Semester,String)
            End If
            If (Original_Resource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Resource")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Resource,String)
            End If
            If (Original_Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Subject")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Subject,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Schedule")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Schedule,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Min,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Max,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Enrolled,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolYear As String, ByVal Semester As String, ByVal Resource As String, ByVal Subject As String, ByVal Schedule As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Semester")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Semester,String)
            End If
            If (Resource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Resource")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Resource,String)
            End If
            If (Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Subject")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Subject,String)
            End If
            If (Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Schedule")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Schedule,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Min,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Max,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Enrolled,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Semester As String,  _
                    ByVal Resource As String,  _
                    ByVal Subject As String,  _
                    ByVal Schedule As String,  _
                    ByVal Min As Integer,  _
                    ByVal Max As Integer,  _
                    ByVal Enrolled As Integer,  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Resource As String,  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Min As Integer,  _
                    ByVal Original_Max As Integer,  _
                    ByVal Original_Enrolled As Integer,  _
                    ByVal PK As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Semester,String)
            End If
            If (Resource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Resource")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Resource,String)
            End If
            If (Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Subject")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Subject,String)
            End If
            If (Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Schedule")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Schedule,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Min,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Max,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Enrolled,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PK,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Semester,String)
            End If
            If (Original_Resource Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Resource")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Resource,String)
            End If
            If (Original_Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Subject")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Subject,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Schedule")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Schedule,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Min,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Max,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Enrolled,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Semester As String,  _
                    ByVal Resource As String,  _
                    ByVal Subject As String,  _
                    ByVal Schedule As String,  _
                    ByVal Min As Integer,  _
                    ByVal Max As Integer,  _
                    ByVal Enrolled As Integer,  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Resource As String,  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Min As Integer,  _
                    ByVal Original_Max As Integer,  _
                    ByVal Original_Enrolled As Integer) As Integer
            Return Me.Update(SchoolYear, Semester, Resource, Subject, Schedule, Min, Max, Enrolled, Original_PK, Original_SchoolYear, Original_Semester, Original_Resource, Original_Subject, Original_Schedule, Original_Min, Original_Max, Original_Enrolled, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SemesterbyPkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SemesterbyPk"
            tableMapping.ColumnMappings.Add("SemPK", "SemPK")
            tableMapping.ColumnMappings.Add("SemesterName", "SemesterName")
            tableMapping.ColumnMappings.Add("sorter", "sorter")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Semester] WHERE (([SemPK] = @Original_SemPK) AND ([SemesterNam"& _ 
                "e] = @Original_SemesterName) AND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ("& _ 
                "[sorter] = @Original_sorter)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Semester] ([SemesterName], [sorter]) VALUES (@SemesterName, @s"& _ 
                "orter);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SemPK, SemesterName, Sorter FROM Semester WHERE (SemPK = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Semester] SET [SemesterName] = @SemesterName, [sorter] = @sorter WH"& _ 
                "ERE (([SemPK] = @Original_SemPK) AND ([SemesterName] = @Original_SemesterName) A"& _ 
                "ND ((@IsNull_sorter = 1 AND [sorter] IS NULL) OR ([sorter] = @Original_sorter)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SemPK, SemesterName, Sorter FROM Semester WHERE (SemPK = @SemPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SemesterName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SemesterName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sorter", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sorter", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SemPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SemPK, SemesterName , sorter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Semester where sempk=@sem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SemPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SemesterbyPkDataTable, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sem As Integer) As dsSchool.SemesterbyPkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sem,Integer)
            Dim dataTable As dsSchool.SemesterbyPkDataTable = New dsSchool.SemesterbyPkDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SemesterbyPkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SemesterbyPk")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SemPK,Integer)
            If (Original_SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SemesterName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SemesterName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SemesterName As String, ByVal sorter As Integer) As Integer
            If (SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SemesterName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SemesterName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sorter,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SemesterName As String, ByVal sorter As Integer, ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer, ByVal SemPK As Integer) As Integer
            If (SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SemesterName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SemesterName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SemPK,Integer)
            If (Original_SemesterName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SemesterName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SemesterName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sorter,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SemPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SemesterName As String, ByVal sorter As Integer, ByVal Original_SemPK As Integer, ByVal Original_SemesterName As String, ByVal Original_sorter As Integer) As Integer
            Return Me.Update(SemesterName, sorter, Original_SemPK, Original_SemesterName, Original_sorter, Original_SemPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsByPreReqTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubjectsByPreReq"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("NumOfPreReq", "NumOfPreReq")
            tableMapping.ColumnMappings.Add("prereq2", "prereq2")
            tableMapping.ColumnMappings.Add("prereq3", "prereq3")
            tableMapping.ColumnMappings.Add("prereq4", "prereq4")
            tableMapping.ColumnMappings.Add("prereq5", "prereq5")
            tableMapping.ColumnMappings.Add("prereq6", "prereq6")
            tableMapping.ColumnMappings.Add("prereq7", "prereq7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Subjects] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([prereq] = @Original_prereq) AND ((@IsNull_NumOfPreReq = 1 AND [NumOfPreRe"& _ 
                "q] IS NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)) AND ((@IsNull_prereq2 = "& _ 
                "1 AND [prereq2] IS NULL) OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prere"& _ 
                "q3 = 1 AND [prereq3] IS NULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_"& _ 
                "prereq4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@Is"& _ 
                "Null_prereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND "& _ 
                "((@IsNull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6))"& _ 
                " AND ((@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prer"& _ 
                "eq7)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Subjects] SET [SubjectCode] = @SubjectCode, [SubjectName] = @SubjectName,"& _ 
                " [prereq] = @prereq, [NumOfPreReq] = @NumOfPreReq, [prereq2] = @prereq2, [prereq"& _ 
                "3] = @prereq3, [prereq4] = @prereq4, [prereq5] = @prereq5, [prereq6] = @prereq6,"& _ 
                " [prereq7] = @prereq7 WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([prereq] = @Original_prereq) AND ((@IsNull_NumOfPreReq = 1 AND [NumOfPreRe"& _ 
                "q] IS NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)) AND ((@IsNull_prereq2 = "& _ 
                "1 AND [prereq2] IS NULL) OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prere"& _ 
                "q3 = 1 AND [prereq3] IS NULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_"& _ 
                "prereq4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@Is"& _ 
                "Null_prereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND "& _ 
                "((@IsNull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6))"& _ 
                " AND ((@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prer"& _ 
                "eq7)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, SubjectCode, SubjectName, prereq, NumOfPreReq, pr"& _ 
                "ereq2, prereq3, prereq4, prereq5, prereq6, prereq7 FROM Subjects WHERE (SubjectP"& _ 
                "riKey = @SubjectPriKey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SubjectPriKey, SubjectCode, SubjectName, prereq, NumOfPreReq, prereq2,"& _ 
                " prereq3, prereq4, prereq5, prereq6, prereq7"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Subjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     ("& _ 
                "SubjectPriKey = @id)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SubjectsByPreReqDataTable, ByVal id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id As Integer) As dsSchool.SubjectsByPreReqDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,Integer)
            Dim dataTable As dsSchool.SubjectsByPreReqDataTable = New dsSchool.SubjectsByPreReqDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SubjectsByPreReqDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SubjectsByPreReq")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_prereq As Integer, ByVal Original_NumOfPreReq As Global.System.Nullable(Of Integer), ByVal Original_prereq2 As Global.System.Nullable(Of Integer), ByVal Original_prereq3 As Global.System.Nullable(Of Integer), ByVal Original_prereq4 As Global.System.Nullable(Of Integer), ByVal Original_prereq5 As Global.System.Nullable(Of Integer), ByVal Original_prereq6 As Global.System.Nullable(Of Integer), ByVal Original_prereq7 As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_prereq,Integer)
            If (Original_NumOfPreReq.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_NumOfPreReq.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal prereq As Integer,  _
                    ByVal NumOfPreReq As Global.System.Nullable(Of Integer),  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_NumOfPreReq As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(prereq,Integer)
            If (NumOfPreReq.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NumOfPreReq.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SubjectName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_prereq,Integer)
            If (Original_NumOfPreReq.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_NumOfPreReq.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal prereq As Integer,  _
                    ByVal NumOfPreReq As Global.System.Nullable(Of Integer),  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_NumOfPreReq As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SubjectCode, SubjectName, prereq, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_prereq, Original_NumOfPreReq, Original_prereq2, Original_prereq3, Original_prereq4, Original_prereq5, Original_prereq6, Original_prereq7, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRTypesbyCodeandCourseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRTypesbyCodeandCourse"
            tableMapping.ColumnMappings.Add("TRPK", "TRPK")
            tableMapping.ColumnMappings.Add("TRCode", "TRCode")
            tableMapping.ColumnMappings.Add("TRName", "TRName")
            tableMapping.ColumnMappings.Add("TRAmount", "TRAmount")
            tableMapping.ColumnMappings.Add("TRCourse", "TRCourse")
            tableMapping.ColumnMappings.Add("TRYearLevel", "TRYearLevel")
            tableMapping.ColumnMappings.Add("TRSubject", "TRSubject")
            tableMapping.ColumnMappings.Add("TRRemarks", "TRRemarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRTypes] WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @Original_"& _ 
                "TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TRAmount) "& _ 
                "AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Original_TR"& _ 
                "Course)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([TRYearLev"& _ 
                "el] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject] IS NUL"& _ 
                "L) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 AND [TRRe"& _ 
                "marks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRTypes] ([TRCode], [TRName], [TRAmount], [TRCourse], [TRYearLevel],"& _ 
                " [TRSubject], [TRRemarks]) VALUES (@TRCode, @TRName, @TRAmount, @TRCourse, @TRYe"& _ 
                "arLevel, @TRSubject, @TRRemarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, TRCode, TRName, TRAmount, TRCour"& _ 
                "se, TRYearLevel, TRSubject, TRRemarks FROM TRTypes WHERE (TRPK = SCOPE_IDENTITY("& _ 
                "))"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRTypes] SET [TRCode] = @TRCode, [TRName] = @TRName, [TRAmount] = @TRAmou"& _ 
                "nt, [TRCourse] = @TRCourse, [TRYearLevel] = @TRYearLevel, [TRSubject] = @TRSubje"& _ 
                "ct, [TRRemarks] = @TRRemarks WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @O"& _ 
                "riginal_TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TR"& _ 
                "Amount) AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Ori"& _ 
                "ginal_TRCourse)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([T"& _ 
                "RYearLevel] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject"& _ 
                "] IS NULL) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 A"& _ 
                "ND [TRRemarks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, "& _ 
                "TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks FROM TRTyp"& _ 
                "es WHERE (TRPK = @TRPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRTypes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (TRCode Like @trcode)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (TRCours"& _ 
                "e = @coursepk)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trcode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TRTypesbyCodeandCourseDataTable, ByVal trcode As String, ByVal coursepk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trcode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trcode,String)
            End If
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trcode As String, ByVal coursepk As Global.System.Nullable(Of Integer)) As dsSchool.TRTypesbyCodeandCourseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trcode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trcode,String)
            End If
            If (coursepk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(coursepk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsSchool.TRTypesbyCodeandCourseDataTable = New dsSchool.TRTypesbyCodeandCourseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TRTypesbyCodeandCourseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TRTypesbyCodeandCourse")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRTypesbySubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRTypesbySubject"
            tableMapping.ColumnMappings.Add("TRPK", "TRPK")
            tableMapping.ColumnMappings.Add("TRCode", "TRCode")
            tableMapping.ColumnMappings.Add("TRName", "TRName")
            tableMapping.ColumnMappings.Add("TRAmount", "TRAmount")
            tableMapping.ColumnMappings.Add("TRCourse", "TRCourse")
            tableMapping.ColumnMappings.Add("TRYearLevel", "TRYearLevel")
            tableMapping.ColumnMappings.Add("TRSubject", "TRSubject")
            tableMapping.ColumnMappings.Add("TRRemarks", "TRRemarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TRTypes] WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @Original_"& _ 
                "TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TRAmount) "& _ 
                "AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Original_TR"& _ 
                "Course)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([TRYearLev"& _ 
                "el] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject] IS NUL"& _ 
                "L) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 AND [TRRe"& _ 
                "marks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TRTypes] ([TRCode], [TRName], [TRAmount], [TRCourse], [TRYearLevel],"& _ 
                " [TRSubject], [TRRemarks]) VALUES (@TRCode, @TRName, @TRAmount, @TRCourse, @TRYe"& _ 
                "arLevel, @TRSubject, @TRRemarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, TRCode, TRName, TRAmount, TRCour"& _ 
                "se, TRYearLevel, TRSubject, TRRemarks FROM TRTypes WHERE (TRPK = SCOPE_IDENTITY("& _ 
                ")) ORDER BY TRName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TRTypes] SET [TRCode] = @TRCode, [TRName] = @TRName, [TRAmount] = @TRAmou"& _ 
                "nt, [TRCourse] = @TRCourse, [TRYearLevel] = @TRYearLevel, [TRSubject] = @TRSubje"& _ 
                "ct, [TRRemarks] = @TRRemarks WHERE (([TRPK] = @Original_TRPK) AND ([TRCode] = @O"& _ 
                "riginal_TRCode) AND ([TRName] = @Original_TRName) AND ([TRAmount] = @Original_TR"& _ 
                "Amount) AND ((@IsNull_TRCourse = 1 AND [TRCourse] IS NULL) OR ([TRCourse] = @Ori"& _ 
                "ginal_TRCourse)) AND ((@IsNull_TRYearLevel = 1 AND [TRYearLevel] IS NULL) OR ([T"& _ 
                "RYearLevel] = @Original_TRYearLevel)) AND ((@IsNull_TRSubject = 1 AND [TRSubject"& _ 
                "] IS NULL) OR ([TRSubject] = @Original_TRSubject)) AND ((@IsNull_TRRemarks = 1 A"& _ 
                "ND [TRRemarks] IS NULL) OR ([TRRemarks] = @Original_TRRemarks)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TRPK, "& _ 
                "TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks FROM TRTyp"& _ 
                "es WHERE (TRPK = @TRPK) ORDER BY TRName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRCourse", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRCourse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRYearLevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRYearLevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRSubject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRRemarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRRemarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRRemarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TRTypes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE TRSubject=@subjectpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TRSubject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.TRTypesbySubjectDataTable, ByVal subjectpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal subjectpk As Global.System.Nullable(Of Integer)) As dsSchool.TRTypesbySubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (subjectpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsSchool.TRTypesbySubjectDataTable = New dsSchool.TRTypesbySubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.TRTypesbySubjectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "TRTypesbySubject")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRCode As String,  _
                    ByVal TRName As String,  _
                    ByVal TRAmount As Decimal,  _
                    ByVal TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal TRRemarks As String,  _
                    ByVal Original_TRPK As Integer,  _
                    ByVal Original_TRCode As String,  _
                    ByVal Original_TRName As String,  _
                    ByVal Original_TRAmount As Decimal,  _
                    ByVal Original_TRCourse As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRSubject As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TRRemarks As String,  _
                    ByVal TRPK As Integer) As Integer
            If (TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRCode,String)
            End If
            If (TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TRAmount,Decimal)
            If (TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TRPK,Integer)
            If (Original_TRCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TRCode,String)
            End If
            If (Original_TRName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TRName")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TRName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_TRAmount,Decimal)
            If (Original_TRCourse.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TRCourse.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_TRYearLevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_TRYearLevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TRSubject.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TRSubject.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TRRemarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TRRemarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(TRPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TRCode As String, ByVal TRName As String, ByVal TRAmount As Decimal, ByVal TRCourse As Global.System.Nullable(Of Integer), ByVal TRYearLevel As Global.System.Nullable(Of Integer), ByVal TRSubject As Global.System.Nullable(Of Integer), ByVal TRRemarks As String, ByVal Original_TRPK As Integer, ByVal Original_TRCode As String, ByVal Original_TRName As String, ByVal Original_TRAmount As Decimal, ByVal Original_TRCourse As Global.System.Nullable(Of Integer), ByVal Original_TRYearLevel As Global.System.Nullable(Of Integer), ByVal Original_TRSubject As Global.System.Nullable(Of Integer), ByVal Original_TRRemarks As String) As Integer
            Return Me.Update(TRCode, TRName, TRAmount, TRCourse, TRYearLevel, TRSubject, TRRemarks, Original_TRPK, Original_TRCode, Original_TRName, Original_TRAmount, Original_TRCourse, Original_TRYearLevel, Original_TRSubject, Original_TRRemarks, Original_TRPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CoursesbyNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CoursesbyName"
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("CourseID", "CourseID")
            tableMapping.ColumnMappings.Add("CourseName", "CourseName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("special", "special")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Courses] WHERE (([coursepk] = @Original_coursepk) AND ([Course"& _ 
                "ID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName) AND ([Remark"& _ 
                "s] = @Original_Remarks) AND ([special] = @Original_special))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Courses] ([CourseID], [CourseName], [Remarks], [special]) VALU"& _ 
                "ES (@CourseID, @CourseName, @Remarks, @special);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT coursepk, CourseID, Cou"& _ 
                "rseName, Remarks, Special FROM Courses WHERE (coursepk = SCOPE_IDENTITY()) ORDER"& _ 
                " BY CourseName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Courses] SET [CourseID] = @CourseID, [CourseName] = @CourseName, [R"& _ 
                "emarks] = @Remarks, [special] = @special WHERE (([coursepk] = @Original_coursepk"& _ 
                ") AND ([CourseID] = @Original_CourseID) AND ([CourseName] = @Original_CourseName"& _ 
                ") AND ([Remarks] = @Original_Remarks) AND ([special] = @Original_special));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT coursepk, CourseID, CourseName, Remarks, Special FROM Courses WHERE (coursep"& _ 
                "k = @coursepk) ORDER BY CourseName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CourseName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_special", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "special", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT coursepk, CourseID, CourseName, Remarks,special "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Courses "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " CourseName like @coursename"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by coursename"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursename", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CourseName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.CoursesbyNameDataTable, ByVal coursename As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coursename")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursename,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal coursename As String) As dsSchool.CoursesbyNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (coursename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coursename")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(coursename,String)
            End If
            Dim dataTable As dsSchool.CoursesbyNameDataTable = New dsSchool.CoursesbyNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.CoursesbyNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "CoursesbyName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(special,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer, ByVal coursepk As Integer) As Integer
            If (CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CourseID,String)
            End If
            If (CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CourseName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(special,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_coursepk,Integer)
            If (Original_CourseID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CourseID,String)
            End If
            If (Original_CourseName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CourseName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CourseName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_special,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CourseID As String, ByVal CourseName As String, ByVal Remarks As String, ByVal special As Integer, ByVal Original_coursepk As Integer, ByVal Original_CourseID As String, ByVal Original_CourseName As String, ByVal Original_Remarks As String, ByVal Original_special As Integer) As Integer
            Return Me.Update(CourseID, CourseName, Remarks, special, Original_coursepk, Original_CourseID, Original_CourseName, Original_Remarks, Original_special, Original_coursepk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsorderedbyNameTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubjectsorderedbyName"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("units", "units")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("labunits", "labunits")
            tableMapping.ColumnMappings.Add("major", "major")
            tableMapping.ColumnMappings.Add("NumOfPreReq", "NumOfPreReq")
            tableMapping.ColumnMappings.Add("prereq2", "prereq2")
            tableMapping.ColumnMappings.Add("prereq3", "prereq3")
            tableMapping.ColumnMappings.Add("prereq4", "prereq4")
            tableMapping.ColumnMappings.Add("prereq5", "prereq5")
            tableMapping.ColumnMappings.Add("prereq6", "prereq6")
            tableMapping.ColumnMappings.Add("prereq7", "prereq7")
            tableMapping.ColumnMappings.Add("CreditGroup", "CreditGroup")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Subjects] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([Remarks] = @Original_Remarks) AND ((@IsNull_labunits = 1 AND [labunits] I"& _ 
                "S NULL) OR ([labunits] = @Original_labunits)) AND ([units] = @Original_units) AN"& _ 
                "D ([prereq] = @Original_prereq) AND ((@IsNull_major = 1 AND [major] IS NULL) OR "& _ 
                "([major] = @Original_major)) AND ((@IsNull_NumOfPreReq = 1 AND [NumOfPreReq] IS "& _ 
                "NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)) AND ((@IsNull_prereq2 = 1 AND "& _ 
                "[prereq2] IS NULL) OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prereq3 = 1"& _ 
                " AND [prereq3] IS NULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_prereq"& _ 
                "4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@IsNull_p"& _ 
                "rereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND ((@IsN"& _ 
                "ull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6)) AND ("& _ 
                "(@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prereq7)) "& _ 
                "AND ((@IsNull_CreditGroup = 1 AND [CreditGroup] IS NULL) OR ([CreditGroup] = @Or"& _ 
                "iginal_CreditGroup)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Subjects] ([SubjectCode], [SubjectName], [Remarks], [labunits], [uni"& _ 
                "ts], [prereq], [major], [NumOfPreReq], [prereq2], [prereq3], [prereq4], [prereq5"& _ 
                "], [prereq6], [prereq7], [CreditGroup]) VALUES (@SubjectCode, @SubjectName, @Rem"& _ 
                "arks, @labunits, @units, @prereq, @major, @NumOfPreReq, @prereq2, @prereq3, @pre"& _ 
                "req4, @prereq5, @prereq6, @prereq7, @CreditGroup);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, Subjec"& _ 
                "tCode, SubjectName, Remarks, labunits, units, prereq, major, numofprereq, prereq"& _ 
                "2, prereq3, prereq4, prereq5, prereq6, prereq7, creditgroup FROM Subjects WHERE "& _ 
                "(SubjectPriKey = SCOPE_IDENTITY()) ORDER BY SubjectName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Subjects] SET [SubjectCode] = @SubjectCode, [SubjectName] = @SubjectName,"& _ 
                " [Remarks] = @Remarks, [labunits] = @labunits, [units] = @units, [prereq] = @pre"& _ 
                "req, [major] = @major, [NumOfPreReq] = @NumOfPreReq, [prereq2] = @prereq2, [prer"& _ 
                "eq3] = @prereq3, [prereq4] = @prereq4, [prereq5] = @prereq5, [prereq6] = @prereq"& _ 
                "6, [prereq7] = @prereq7, [CreditGroup] = @CreditGroup WHERE (([SubjectPriKey] = "& _ 
                "@Original_SubjectPriKey) AND ([SubjectCode] = @Original_SubjectCode) AND ([Subje"& _ 
                "ctName] = @Original_SubjectName) AND ([Remarks] = @Original_Remarks) AND ((@IsNu"& _ 
                "ll_labunits = 1 AND [labunits] IS NULL) OR ([labunits] = @Original_labunits)) AN"& _ 
                "D ([units] = @Original_units) AND ([prereq] = @Original_prereq) AND ((@IsNull_ma"& _ 
                "jor = 1 AND [major] IS NULL) OR ([major] = @Original_major)) AND ((@IsNull_NumOf"& _ 
                "PreReq = 1 AND [NumOfPreReq] IS NULL) OR ([NumOfPreReq] = @Original_NumOfPreReq)"& _ 
                ") AND ((@IsNull_prereq2 = 1 AND [prereq2] IS NULL) OR ([prereq2] = @Original_pre"& _ 
                "req2)) AND ((@IsNull_prereq3 = 1 AND [prereq3] IS NULL) OR ([prereq3] = @Origina"& _ 
                "l_prereq3)) AND ((@IsNull_prereq4 = 1 AND [prereq4] IS NULL) OR ([prereq4] = @Or"& _ 
                "iginal_prereq4)) AND ((@IsNull_prereq5 = 1 AND [prereq5] IS NULL) OR ([prereq5] "& _ 
                "= @Original_prereq5)) AND ((@IsNull_prereq6 = 1 AND [prereq6] IS NULL) OR ([prer"& _ 
                "eq6] = @Original_prereq6)) AND ((@IsNull_prereq7 = 1 AND [prereq7] IS NULL) OR ("& _ 
                "[prereq7] = @Original_prereq7)) AND ((@IsNull_CreditGroup = 1 AND [CreditGroup] "& _ 
                "IS NULL) OR ([CreditGroup] = @Original_CreditGroup)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, Su"& _ 
                "bjectCode, SubjectName, Remarks, labunits, units, prereq, major, numofprereq, pr"& _ 
                "ereq2, prereq3, prereq4, prereq5, prereq6, prereq7, creditgroup FROM Subjects WH"& _ 
                "ERE (SubjectPriKey = @SubjectPriKey) ORDER BY SubjectName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumOfPreReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumOfPreReq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SubjectPriKey, SubjectCode, SubjectName, Remarks, labunits, units, pre"& _ 
                "req, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              prereq7, CreditGroup"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Subjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SubjectName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.SubjectsorderedbyNameDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.SubjectsorderedbyNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.SubjectsorderedbyNameDataTable = New dsSchool.SubjectsorderedbyNameDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.SubjectsorderedbyNameDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "SubjectsorderedbyName")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_units,Single)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_NumOfPreReq,Integer)
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_CreditGroup,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal labunits As Global.System.Nullable(Of Single), ByVal units As Single, ByVal prereq As Integer, ByVal major As Global.System.Nullable(Of Boolean), ByVal NumOfPreReq As Integer, ByVal prereq2 As Global.System.Nullable(Of Integer), ByVal prereq3 As Global.System.Nullable(Of Integer), ByVal prereq4 As Global.System.Nullable(Of Integer), ByVal prereq5 As Global.System.Nullable(Of Integer), ByVal prereq6 As Global.System.Nullable(Of Integer), ByVal prereq7 As Global.System.Nullable(Of Integer), ByVal CreditGroup As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(NumOfPreReq,Integer)
            If (prereq2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(prereq2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (prereq3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(prereq3.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (prereq4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(prereq4.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (prereq5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(prereq5.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (prereq6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(prereq6.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (prereq7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(prereq7.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(CreditGroup,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal CreditGroup As Integer,  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer,  _
                    ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(NumOfPreReq,Integer)
            If (prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CreditGroup,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_units,Single)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_NumOfPreReq,Integer)
            If (Original_prereq2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_prereq2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_prereq3.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_prereq4.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_prereq5.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_prereq6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_prereq7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_prereq7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_CreditGroup,Integer)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal NumOfPreReq As Integer,  _
                    ByVal prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal CreditGroup As Integer,  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_NumOfPreReq As Integer,  _
                    ByVal Original_prereq2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq3 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq4 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq5 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq6 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_prereq7 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CreditGroup As Integer) As Integer
            Return Me.Update(SubjectCode, SubjectName, Remarks, labunits, units, prereq, major, NumOfPreReq, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, CreditGroup, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_Remarks, Original_labunits, Original_units, Original_prereq, Original_major, Original_NumOfPreReq, Original_prereq2, Original_prereq3, Original_prereq4, Original_prereq5, Original_prereq6, Original_prereq7, Original_CreditGroup, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ExamsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Exams"
            tableMapping.ColumnMappings.Add("ExamPK", "ExamPK")
            tableMapping.ColumnMappings.Add("syFK", "syFK")
            tableMapping.ColumnMappings.Add("semFK", "semFK")
            tableMapping.ColumnMappings.Add("examfrom1", "examfrom1")
            tableMapping.ColumnMappings.Add("examto1", "examto1")
            tableMapping.ColumnMappings.Add("examfrom2", "examfrom2")
            tableMapping.ColumnMappings.Add("examto2", "examto2")
            tableMapping.ColumnMappings.Add("examfrom3", "examfrom3")
            tableMapping.ColumnMappings.Add("examto3", "examto3")
            tableMapping.ColumnMappings.Add("examfrom4", "examfrom4")
            tableMapping.ColumnMappings.Add("examto4", "examto4")
            tableMapping.ColumnMappings.Add("examfrom5", "examfrom5")
            tableMapping.ColumnMappings.Add("examto5", "examto5")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Exams] WHERE (([ExamPK] = @Original_ExamPK) AND ([syFK] = @Original_"& _ 
                "syFK) AND ([semFK] = @Original_semFK) AND ((@IsNull_examfrom1 = 1 AND [examfrom1"& _ 
                "] IS NULL) OR ([examfrom1] = @Original_examfrom1)) AND ((@IsNull_examto1 = 1 AND"& _ 
                " [examto1] IS NULL) OR ([examto1] = @Original_examto1)) AND ((@IsNull_examfrom2 "& _ 
                "= 1 AND [examfrom2] IS NULL) OR ([examfrom2] = @Original_examfrom2)) AND ((@IsNu"& _ 
                "ll_examto2 = 1 AND [examto2] IS NULL) OR ([examto2] = @Original_examto2)) AND (("& _ 
                "@IsNull_examfrom3 = 1 AND [examfrom3] IS NULL) OR ([examfrom3] = @Original_examf"& _ 
                "rom3)) AND ((@IsNull_examto3 = 1 AND [examto3] IS NULL) OR ([examto3] = @Origina"& _ 
                "l_examto3)) AND ((@IsNull_examfrom4 = 1 AND [examfrom4] IS NULL) OR ([examfrom4]"& _ 
                " = @Original_examfrom4)) AND ((@IsNull_examto4 = 1 AND [examto4] IS NULL) OR ([e"& _ 
                "xamto4] = @Original_examto4)) AND ((@IsNull_examfrom5 = 1 AND [examfrom5] IS NUL"& _ 
                "L) OR ([examfrom5] = @Original_examfrom5)) AND ((@IsNull_examto5 = 1 AND [examto"& _ 
                "5] IS NULL) OR ([examto5] = @Original_examto5)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExamPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Exams] ([syFK], [semFK], [examfrom1], [examto1], [examfrom2], [examt"& _ 
                "o2], [examfrom3], [examto3], [examfrom4], [examto4], [examfrom5], [examto5]) VAL"& _ 
                "UES (@syFK, @semFK, @examfrom1, @examto1, @examfrom2, @examto2, @examfrom3, @exa"& _ 
                "mto3, @examfrom4, @examto4, @examfrom5, @examto5);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ExamPK, syFK, semFK, "& _ 
                "examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, "& _ 
                "examfrom5, examto5 FROM Exams WHERE (ExamPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Exams] SET [syFK] = @syFK, [semFK] = @semFK, [examfrom1] = @examfrom1, [e"& _ 
                "xamto1] = @examto1, [examfrom2] = @examfrom2, [examto2] = @examto2, [examfrom3] "& _ 
                "= @examfrom3, [examto3] = @examto3, [examfrom4] = @examfrom4, [examto4] = @examt"& _ 
                "o4, [examfrom5] = @examfrom5, [examto5] = @examto5 WHERE (([ExamPK] = @Original_"& _ 
                "ExamPK) AND ([syFK] = @Original_syFK) AND ([semFK] = @Original_semFK) AND ((@IsN"& _ 
                "ull_examfrom1 = 1 AND [examfrom1] IS NULL) OR ([examfrom1] = @Original_examfrom1"& _ 
                ")) AND ((@IsNull_examto1 = 1 AND [examto1] IS NULL) OR ([examto1] = @Original_ex"& _ 
                "amto1)) AND ((@IsNull_examfrom2 = 1 AND [examfrom2] IS NULL) OR ([examfrom2] = @"& _ 
                "Original_examfrom2)) AND ((@IsNull_examto2 = 1 AND [examto2] IS NULL) OR ([examt"& _ 
                "o2] = @Original_examto2)) AND ((@IsNull_examfrom3 = 1 AND [examfrom3] IS NULL) O"& _ 
                "R ([examfrom3] = @Original_examfrom3)) AND ((@IsNull_examto3 = 1 AND [examto3] I"& _ 
                "S NULL) OR ([examto3] = @Original_examto3)) AND ((@IsNull_examfrom4 = 1 AND [exa"& _ 
                "mfrom4] IS NULL) OR ([examfrom4] = @Original_examfrom4)) AND ((@IsNull_examto4 ="& _ 
                " 1 AND [examto4] IS NULL) OR ([examto4] = @Original_examto4)) AND ((@IsNull_exam"& _ 
                "from5 = 1 AND [examfrom5] IS NULL) OR ([examfrom5] = @Original_examfrom5)) AND ("& _ 
                "(@IsNull_examto5 = 1 AND [examto5] IS NULL) OR ([examto5] = @Original_examto5)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ExamPK, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3"& _ 
                ", examto3, examfrom4, examto4, examfrom5, examto5 FROM Exams WHERE (ExamPK = @Ex"& _ 
                "amPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExamPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExamPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ExamPK, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3"& _ 
                ", examto3, examfrom4, examto4, examfrom5, examto5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Exams"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.ExamsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSchool.ExamsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSchool.ExamsDataTable = New dsSchool.ExamsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.ExamsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "Exams")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ExamPK As Integer, ByVal Original_syFK As Integer, ByVal Original_semFK As Integer, ByVal Original_examfrom1 As Global.System.Nullable(Of Date), ByVal Original_examto1 As Global.System.Nullable(Of Date), ByVal Original_examfrom2 As Global.System.Nullable(Of Date), ByVal Original_examto2 As Global.System.Nullable(Of Date), ByVal Original_examfrom3 As Global.System.Nullable(Of Date), ByVal Original_examto3 As Global.System.Nullable(Of Date), ByVal Original_examfrom4 As Global.System.Nullable(Of Date), ByVal Original_examto4 As Global.System.Nullable(Of Date), ByVal Original_examfrom5 As Global.System.Nullable(Of Date), ByVal Original_examto5 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ExamPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_syFK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_semFK,Integer)
            If (Original_examfrom1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_examfrom1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_examto1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_examto1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_examfrom2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_examto2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_examto2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_examfrom3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_examto3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_examto3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_examfrom4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_examto4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_examto4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_examfrom5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_examto5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_examto5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal syFK As Integer, ByVal semFK As Integer, ByVal examfrom1 As Global.System.Nullable(Of Date), ByVal examto1 As Global.System.Nullable(Of Date), ByVal examfrom2 As Global.System.Nullable(Of Date), ByVal examto2 As Global.System.Nullable(Of Date), ByVal examfrom3 As Global.System.Nullable(Of Date), ByVal examto3 As Global.System.Nullable(Of Date), ByVal examfrom4 As Global.System.Nullable(Of Date), ByVal examto4 As Global.System.Nullable(Of Date), ByVal examfrom5 As Global.System.Nullable(Of Date), ByVal examto5 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(syFK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(semFK,Integer)
            If (examfrom1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(examfrom1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (examto1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(examto1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (examfrom2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(examfrom2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (examto2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(examto2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (examfrom3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(examfrom3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (examto3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(examto3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (examfrom4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(examfrom4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (examto4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(examto4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (examfrom5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(examfrom5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (examto5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(examto5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal syFK As Integer,  _
                    ByVal semFK As Integer,  _
                    ByVal examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal examto1 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal examto2 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal examto3 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal examto4 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal examto5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_ExamPK As Integer,  _
                    ByVal Original_syFK As Integer,  _
                    ByVal Original_semFK As Integer,  _
                    ByVal Original_examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto5 As Global.System.Nullable(Of Date),  _
                    ByVal ExamPK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(syFK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(semFK,Integer)
            If (examfrom1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(examfrom1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (examto1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(examto1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (examfrom2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(examfrom2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (examto2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(examto2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (examfrom3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(examfrom3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (examto3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(examto3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (examfrom4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(examfrom4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (examto4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(examto4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (examfrom5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(examfrom5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (examto5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(examto5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ExamPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_syFK,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_semFK,Integer)
            If (Original_examfrom1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_examfrom1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_examto1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_examto1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_examfrom2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_examto2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_examto2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_examfrom3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_examto3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_examto3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_examfrom4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_examto4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_examto4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_examfrom5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_examto5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_examto5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ExamPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal syFK As Integer,  _
                    ByVal semFK As Integer,  _
                    ByVal examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal examto1 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal examto2 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal examto3 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal examto4 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal examto5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_ExamPK As Integer,  _
                    ByVal Original_syFK As Integer,  _
                    ByVal Original_semFK As Integer,  _
                    ByVal Original_examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto5 As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, examfrom5, examto5, Original_ExamPK, Original_syFK, Original_semFK, Original_examfrom1, Original_examto1, Original_examfrom2, Original_examto2, Original_examfrom3, Original_examto3, Original_examfrom4, Original_examto4, Original_examfrom5, Original_examto5, Original_ExamPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ExamsBySemSYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ExamsBySemSY"
            tableMapping.ColumnMappings.Add("ExamPK", "ExamPK")
            tableMapping.ColumnMappings.Add("syFK", "syFK")
            tableMapping.ColumnMappings.Add("semFK", "semFK")
            tableMapping.ColumnMappings.Add("examfrom1", "examfrom1")
            tableMapping.ColumnMappings.Add("examto1", "examto1")
            tableMapping.ColumnMappings.Add("examfrom2", "examfrom2")
            tableMapping.ColumnMappings.Add("examto2", "examto2")
            tableMapping.ColumnMappings.Add("examfrom3", "examfrom3")
            tableMapping.ColumnMappings.Add("examto3", "examto3")
            tableMapping.ColumnMappings.Add("examfrom4", "examfrom4")
            tableMapping.ColumnMappings.Add("examto4", "examto4")
            tableMapping.ColumnMappings.Add("examfrom5", "examfrom5")
            tableMapping.ColumnMappings.Add("examto5", "examto5")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Exams] WHERE (([ExamPK] = @Original_ExamPK) AND ([syFK] = @Original_"& _ 
                "syFK) AND ([semFK] = @Original_semFK) AND ((@IsNull_examfrom1 = 1 AND [examfrom1"& _ 
                "] IS NULL) OR ([examfrom1] = @Original_examfrom1)) AND ((@IsNull_examto1 = 1 AND"& _ 
                " [examto1] IS NULL) OR ([examto1] = @Original_examto1)) AND ((@IsNull_examfrom2 "& _ 
                "= 1 AND [examfrom2] IS NULL) OR ([examfrom2] = @Original_examfrom2)) AND ((@IsNu"& _ 
                "ll_examto2 = 1 AND [examto2] IS NULL) OR ([examto2] = @Original_examto2)) AND (("& _ 
                "@IsNull_examfrom3 = 1 AND [examfrom3] IS NULL) OR ([examfrom3] = @Original_examf"& _ 
                "rom3)) AND ((@IsNull_examto3 = 1 AND [examto3] IS NULL) OR ([examto3] = @Origina"& _ 
                "l_examto3)) AND ((@IsNull_examfrom4 = 1 AND [examfrom4] IS NULL) OR ([examfrom4]"& _ 
                " = @Original_examfrom4)) AND ((@IsNull_examto4 = 1 AND [examto4] IS NULL) OR ([e"& _ 
                "xamto4] = @Original_examto4)) AND ((@IsNull_examfrom5 = 1 AND [examfrom5] IS NUL"& _ 
                "L) OR ([examfrom5] = @Original_examfrom5)) AND ((@IsNull_examto5 = 1 AND [examto"& _ 
                "5] IS NULL) OR ([examto5] = @Original_examto5)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExamPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Exams] ([syFK], [semFK], [examfrom1], [examto1], [examfrom2], [examt"& _ 
                "o2], [examfrom3], [examto3], [examfrom4], [examto4], [examfrom5], [examto5]) VAL"& _ 
                "UES (@syFK, @semFK, @examfrom1, @examto1, @examfrom2, @examto2, @examfrom3, @exa"& _ 
                "mto3, @examfrom4, @examto4, @examfrom5, @examto5);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ExamPK, syFK, semFK, "& _ 
                "examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, "& _ 
                "examfrom5, examto5 FROM Exams WHERE (ExamPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Exams] SET [syFK] = @syFK, [semFK] = @semFK, [examfrom1] = @examfrom1, [e"& _ 
                "xamto1] = @examto1, [examfrom2] = @examfrom2, [examto2] = @examto2, [examfrom3] "& _ 
                "= @examfrom3, [examto3] = @examto3, [examfrom4] = @examfrom4, [examto4] = @examt"& _ 
                "o4, [examfrom5] = @examfrom5, [examto5] = @examto5 WHERE (([ExamPK] = @Original_"& _ 
                "ExamPK) AND ([syFK] = @Original_syFK) AND ([semFK] = @Original_semFK) AND ((@IsN"& _ 
                "ull_examfrom1 = 1 AND [examfrom1] IS NULL) OR ([examfrom1] = @Original_examfrom1"& _ 
                ")) AND ((@IsNull_examto1 = 1 AND [examto1] IS NULL) OR ([examto1] = @Original_ex"& _ 
                "amto1)) AND ((@IsNull_examfrom2 = 1 AND [examfrom2] IS NULL) OR ([examfrom2] = @"& _ 
                "Original_examfrom2)) AND ((@IsNull_examto2 = 1 AND [examto2] IS NULL) OR ([examt"& _ 
                "o2] = @Original_examto2)) AND ((@IsNull_examfrom3 = 1 AND [examfrom3] IS NULL) O"& _ 
                "R ([examfrom3] = @Original_examfrom3)) AND ((@IsNull_examto3 = 1 AND [examto3] I"& _ 
                "S NULL) OR ([examto3] = @Original_examto3)) AND ((@IsNull_examfrom4 = 1 AND [exa"& _ 
                "mfrom4] IS NULL) OR ([examfrom4] = @Original_examfrom4)) AND ((@IsNull_examto4 ="& _ 
                " 1 AND [examto4] IS NULL) OR ([examto4] = @Original_examto4)) AND ((@IsNull_exam"& _ 
                "from5 = 1 AND [examfrom5] IS NULL) OR ([examfrom5] = @Original_examfrom5)) AND ("& _ 
                "(@IsNull_examto5 = 1 AND [examto5] IS NULL) OR ([examto5] = @Original_examto5)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ExamPK, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3"& _ 
                ", examto3, examfrom4, examto4, examfrom5, examto5 FROM Exams WHERE (ExamPK = @Ex"& _ 
                "amPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExamPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examfrom5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examfrom5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examfrom5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_examto5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_examto5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "examto5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExamPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ExamPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ExamPK, syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3"& _ 
                ", examto3, examfrom4, examto4, examfrom5, examto5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Exams"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE syF"& _ 
                "K=@sypk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND semFK=@sempk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSchool.ExamsBySemSYDataTable, ByVal sypk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer) As dsSchool.ExamsBySemSYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsSchool.ExamsBySemSYDataTable = New dsSchool.ExamsBySemSYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSchool.ExamsBySemSYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSchool) As Integer
            Return Me.Adapter.Update(dataSet, "ExamsBySemSY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ExamPK As Integer, ByVal Original_syFK As Integer, ByVal Original_semFK As Integer, ByVal Original_examfrom1 As Global.System.Nullable(Of Date), ByVal Original_examto1 As Global.System.Nullable(Of Date), ByVal Original_examfrom2 As Global.System.Nullable(Of Date), ByVal Original_examto2 As Global.System.Nullable(Of Date), ByVal Original_examfrom3 As Global.System.Nullable(Of Date), ByVal Original_examto3 As Global.System.Nullable(Of Date), ByVal Original_examfrom4 As Global.System.Nullable(Of Date), ByVal Original_examto4 As Global.System.Nullable(Of Date), ByVal Original_examfrom5 As Global.System.Nullable(Of Date), ByVal Original_examto5 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ExamPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_syFK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_semFK,Integer)
            If (Original_examfrom1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_examfrom1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_examto1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_examto1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_examfrom2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_examto2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_examto2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_examfrom3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_examto3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_examto3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_examfrom4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_examto4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_examto4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_examfrom5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_examto5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_examto5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal syFK As Integer, ByVal semFK As Integer, ByVal examfrom1 As Global.System.Nullable(Of Date), ByVal examto1 As Global.System.Nullable(Of Date), ByVal examfrom2 As Global.System.Nullable(Of Date), ByVal examto2 As Global.System.Nullable(Of Date), ByVal examfrom3 As Global.System.Nullable(Of Date), ByVal examto3 As Global.System.Nullable(Of Date), ByVal examfrom4 As Global.System.Nullable(Of Date), ByVal examto4 As Global.System.Nullable(Of Date), ByVal examfrom5 As Global.System.Nullable(Of Date), ByVal examto5 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(syFK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(semFK,Integer)
            If (examfrom1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(examfrom1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (examto1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(examto1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (examfrom2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(examfrom2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (examto2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(examto2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (examfrom3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(examfrom3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (examto3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(examto3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (examfrom4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(examfrom4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (examto4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(examto4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (examfrom5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(examfrom5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (examto5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(examto5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal syFK As Integer,  _
                    ByVal semFK As Integer,  _
                    ByVal examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal examto1 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal examto2 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal examto3 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal examto4 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal examto5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_ExamPK As Integer,  _
                    ByVal Original_syFK As Integer,  _
                    ByVal Original_semFK As Integer,  _
                    ByVal Original_examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto5 As Global.System.Nullable(Of Date),  _
                    ByVal ExamPK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(syFK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(semFK,Integer)
            If (examfrom1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(examfrom1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (examto1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(examto1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (examfrom2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(examfrom2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (examto2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(examto2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (examfrom3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(examfrom3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (examto3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(examto3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (examfrom4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(examfrom4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (examto4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(examto4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (examfrom5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(examfrom5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (examto5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(examto5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ExamPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_syFK,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_semFK,Integer)
            If (Original_examfrom1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_examfrom1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_examto1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_examto1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_examfrom2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_examto2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_examto2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_examfrom3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_examto3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_examto3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_examfrom4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_examto4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_examto4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_examfrom5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_examfrom5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_examto5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_examto5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ExamPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal syFK As Integer,  _
                    ByVal semFK As Integer,  _
                    ByVal examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal examto1 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal examto2 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal examto3 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal examto4 As Global.System.Nullable(Of Date),  _
                    ByVal examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal examto5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_ExamPK As Integer,  _
                    ByVal Original_syFK As Integer,  _
                    ByVal Original_semFK As Integer,  _
                    ByVal Original_examfrom1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examfrom5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_examto5 As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(syFK, semFK, examfrom1, examto1, examfrom2, examto2, examfrom3, examto3, examfrom4, examto4, examfrom5, examto5, Original_ExamPK, Original_syFK, Original_semFK, Original_examfrom1, Original_examto1, Original_examfrom2, Original_examto2, Original_examfrom3, Original_examto3, Original_examfrom4, Original_examto4, Original_examfrom5, Original_examto5, Original_ExamPK)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _schoolYearTableAdapter As SchoolYearTableAdapter
        
        Private _semesterTableAdapter As SemesterTableAdapter
        
        Private _schoolResourcesTableAdapter As SchoolResourcesTableAdapter
        
        Private _subjectsTableAdapter As SubjectsTableAdapter
        
        Private _subjectsByPriKeyTableAdapter As SubjectsByPriKeyTableAdapter
        
        Private _teachersTableAdapter As TeachersTableAdapter
        
        Private _coursesTableAdapter As CoursesTableAdapter
        
        Private _blockSectionTuitionTableAdapter As BlockSectionTuitionTableAdapter
        
        Private _prefTableTableAdapter As PrefTableTableAdapter
        
        Private _schoolYearbyPKTableAdapter As SchoolYearbyPKTableAdapter
        
        Private _blockSectionTuitionbyPKTableAdapter As BlockSectionTuitionbyPKTableAdapter
        
        Private _sYOfferingTableAdapter As SYOfferingTableAdapter
        
        Private _subjectsByCNameTableAdapter As SubjectsByCNameTableAdapter
        
        Private _schoolResourcesbyCNameTableAdapter As SchoolResourcesbyCNameTableAdapter
        
        Private _teachersbyCNameTableAdapter As TeachersbyCNameTableAdapter
        
        Private _sYOfferingTeacherMonTableAdapter As SYOfferingTeacherMonTableAdapter
        
        Private _teachersbyIDTableAdapter As TeachersbyIDTableAdapter
        
        Private _sYOfferingTeacherTueTableAdapter As SYOfferingTeacherTueTableAdapter
        
        Private _sYOfferingTeacherWedTableAdapter As SYOfferingTeacherWedTableAdapter
        
        Private _sYOfferingTeacherThursTableAdapter As SYOfferingTeacherThursTableAdapter
        
        Private _sYOfferingTeacherFriTableAdapter As SYOfferingTeacherFriTableAdapter
        
        Private _sYOfferingTeacherSatTableAdapter As SYOfferingTeacherSatTableAdapter
        
        Private _sYOfferingTeacherSunTableAdapter As SYOfferingTeacherSunTableAdapter
        
        Private _sYOfferingResourceMonTableAdapter As SYOfferingResourceMonTableAdapter
        
        Private _sYOfferingResourceTuesTableAdapter As SYOfferingResourceTuesTableAdapter
        
        Private _sYOfferingResourceWedTableAdapter As SYOfferingResourceWedTableAdapter
        
        Private _sYOfferingResourceThursTableAdapter As SYOfferingResourceThursTableAdapter
        
        Private _sYOfferingResourceFriTableAdapter As SYOfferingResourceFriTableAdapter
        
        Private _sYOfferingResourceSatTableAdapter As SYOfferingResourceSatTableAdapter
        
        Private _sYOfferingResourceSunTableAdapter As SYOfferingResourceSunTableAdapter
        
        Private _schoolResourcesbyPkTableAdapter As SchoolResourcesbyPkTableAdapter
        
        Private _sYOfferingbyTeacherTableAdapter As SYOfferingbyTeacherTableAdapter
        
        Private _tRTypesTableAdapter As TRTypesTableAdapter
        
        Private _tRTypesbyNameTableAdapter As TRTypesbyNameTableAdapter
        
        Private _tRTypesbyPKTableAdapter As TRTypesbyPKTableAdapter
        
        Private _coursesbyPkTableAdapter As CoursesbyPkTableAdapter
        
        Private _templateTeacherLoadTableAdapter As TemplateTeacherLoadTableAdapter
        
        Private _semesterbyPkTableAdapter As SemesterbyPkTableAdapter
        
        Private _subjectsByPreReqTableAdapter As SubjectsByPreReqTableAdapter
        
        Private _tRTypesbyCodeandCourseTableAdapter As TRTypesbyCodeandCourseTableAdapter
        
        Private _tRTypesbySubjectTableAdapter As TRTypesbySubjectTableAdapter
        
        Private _coursesbyNameTableAdapter As CoursesbyNameTableAdapter
        
        Private _subjectsorderedbyNameTableAdapter As SubjectsorderedbyNameTableAdapter
        
        Private _examsTableAdapter As ExamsTableAdapter
        
        Private _examsBySemSYTableAdapter As ExamsBySemSYTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchoolYearTableAdapter() As SchoolYearTableAdapter
            Get
                Return Me._schoolYearTableAdapter
            End Get
            Set
                Me._schoolYearTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SemesterTableAdapter() As SemesterTableAdapter
            Get
                Return Me._semesterTableAdapter
            End Get
            Set
                Me._semesterTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchoolResourcesTableAdapter() As SchoolResourcesTableAdapter
            Get
                Return Me._schoolResourcesTableAdapter
            End Get
            Set
                Me._schoolResourcesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsTableAdapter() As SubjectsTableAdapter
            Get
                Return Me._subjectsTableAdapter
            End Get
            Set
                Me._subjectsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsByPriKeyTableAdapter() As SubjectsByPriKeyTableAdapter
            Get
                Return Me._subjectsByPriKeyTableAdapter
            End Get
            Set
                Me._subjectsByPriKeyTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TeachersTableAdapter() As TeachersTableAdapter
            Get
                Return Me._teachersTableAdapter
            End Get
            Set
                Me._teachersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CoursesTableAdapter() As CoursesTableAdapter
            Get
                Return Me._coursesTableAdapter
            End Get
            Set
                Me._coursesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BlockSectionTuitionTableAdapter() As BlockSectionTuitionTableAdapter
            Get
                Return Me._blockSectionTuitionTableAdapter
            End Get
            Set
                Me._blockSectionTuitionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PrefTableTableAdapter() As PrefTableTableAdapter
            Get
                Return Me._prefTableTableAdapter
            End Get
            Set
                Me._prefTableTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchoolYearbyPKTableAdapter() As SchoolYearbyPKTableAdapter
            Get
                Return Me._schoolYearbyPKTableAdapter
            End Get
            Set
                Me._schoolYearbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BlockSectionTuitionbyPKTableAdapter() As BlockSectionTuitionbyPKTableAdapter
            Get
                Return Me._blockSectionTuitionbyPKTableAdapter
            End Get
            Set
                Me._blockSectionTuitionbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTableAdapter() As SYOfferingTableAdapter
            Get
                Return Me._sYOfferingTableAdapter
            End Get
            Set
                Me._sYOfferingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsByCNameTableAdapter() As SubjectsByCNameTableAdapter
            Get
                Return Me._subjectsByCNameTableAdapter
            End Get
            Set
                Me._subjectsByCNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchoolResourcesbyCNameTableAdapter() As SchoolResourcesbyCNameTableAdapter
            Get
                Return Me._schoolResourcesbyCNameTableAdapter
            End Get
            Set
                Me._schoolResourcesbyCNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TeachersbyCNameTableAdapter() As TeachersbyCNameTableAdapter
            Get
                Return Me._teachersbyCNameTableAdapter
            End Get
            Set
                Me._teachersbyCNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherMonTableAdapter() As SYOfferingTeacherMonTableAdapter
            Get
                Return Me._sYOfferingTeacherMonTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherMonTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TeachersbyIDTableAdapter() As TeachersbyIDTableAdapter
            Get
                Return Me._teachersbyIDTableAdapter
            End Get
            Set
                Me._teachersbyIDTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherTueTableAdapter() As SYOfferingTeacherTueTableAdapter
            Get
                Return Me._sYOfferingTeacherTueTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherTueTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherWedTableAdapter() As SYOfferingTeacherWedTableAdapter
            Get
                Return Me._sYOfferingTeacherWedTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherWedTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherThursTableAdapter() As SYOfferingTeacherThursTableAdapter
            Get
                Return Me._sYOfferingTeacherThursTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherThursTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherFriTableAdapter() As SYOfferingTeacherFriTableAdapter
            Get
                Return Me._sYOfferingTeacherFriTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherFriTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherSatTableAdapter() As SYOfferingTeacherSatTableAdapter
            Get
                Return Me._sYOfferingTeacherSatTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherSatTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingTeacherSunTableAdapter() As SYOfferingTeacherSunTableAdapter
            Get
                Return Me._sYOfferingTeacherSunTableAdapter
            End Get
            Set
                Me._sYOfferingTeacherSunTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceMonTableAdapter() As SYOfferingResourceMonTableAdapter
            Get
                Return Me._sYOfferingResourceMonTableAdapter
            End Get
            Set
                Me._sYOfferingResourceMonTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceTuesTableAdapter() As SYOfferingResourceTuesTableAdapter
            Get
                Return Me._sYOfferingResourceTuesTableAdapter
            End Get
            Set
                Me._sYOfferingResourceTuesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceWedTableAdapter() As SYOfferingResourceWedTableAdapter
            Get
                Return Me._sYOfferingResourceWedTableAdapter
            End Get
            Set
                Me._sYOfferingResourceWedTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceThursTableAdapter() As SYOfferingResourceThursTableAdapter
            Get
                Return Me._sYOfferingResourceThursTableAdapter
            End Get
            Set
                Me._sYOfferingResourceThursTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceFriTableAdapter() As SYOfferingResourceFriTableAdapter
            Get
                Return Me._sYOfferingResourceFriTableAdapter
            End Get
            Set
                Me._sYOfferingResourceFriTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceSatTableAdapter() As SYOfferingResourceSatTableAdapter
            Get
                Return Me._sYOfferingResourceSatTableAdapter
            End Get
            Set
                Me._sYOfferingResourceSatTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingResourceSunTableAdapter() As SYOfferingResourceSunTableAdapter
            Get
                Return Me._sYOfferingResourceSunTableAdapter
            End Get
            Set
                Me._sYOfferingResourceSunTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SchoolResourcesbyPkTableAdapter() As SchoolResourcesbyPkTableAdapter
            Get
                Return Me._schoolResourcesbyPkTableAdapter
            End Get
            Set
                Me._schoolResourcesbyPkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingbyTeacherTableAdapter() As SYOfferingbyTeacherTableAdapter
            Get
                Return Me._sYOfferingbyTeacherTableAdapter
            End Get
            Set
                Me._sYOfferingbyTeacherTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRTypesTableAdapter() As TRTypesTableAdapter
            Get
                Return Me._tRTypesTableAdapter
            End Get
            Set
                Me._tRTypesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRTypesbyNameTableAdapter() As TRTypesbyNameTableAdapter
            Get
                Return Me._tRTypesbyNameTableAdapter
            End Get
            Set
                Me._tRTypesbyNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRTypesbyPKTableAdapter() As TRTypesbyPKTableAdapter
            Get
                Return Me._tRTypesbyPKTableAdapter
            End Get
            Set
                Me._tRTypesbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CoursesbyPkTableAdapter() As CoursesbyPkTableAdapter
            Get
                Return Me._coursesbyPkTableAdapter
            End Get
            Set
                Me._coursesbyPkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TemplateTeacherLoadTableAdapter() As TemplateTeacherLoadTableAdapter
            Get
                Return Me._templateTeacherLoadTableAdapter
            End Get
            Set
                Me._templateTeacherLoadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SemesterbyPkTableAdapter() As SemesterbyPkTableAdapter
            Get
                Return Me._semesterbyPkTableAdapter
            End Get
            Set
                Me._semesterbyPkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsByPreReqTableAdapter() As SubjectsByPreReqTableAdapter
            Get
                Return Me._subjectsByPreReqTableAdapter
            End Get
            Set
                Me._subjectsByPreReqTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRTypesbyCodeandCourseTableAdapter() As TRTypesbyCodeandCourseTableAdapter
            Get
                Return Me._tRTypesbyCodeandCourseTableAdapter
            End Get
            Set
                Me._tRTypesbyCodeandCourseTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRTypesbySubjectTableAdapter() As TRTypesbySubjectTableAdapter
            Get
                Return Me._tRTypesbySubjectTableAdapter
            End Get
            Set
                Me._tRTypesbySubjectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CoursesbyNameTableAdapter() As CoursesbyNameTableAdapter
            Get
                Return Me._coursesbyNameTableAdapter
            End Get
            Set
                Me._coursesbyNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsorderedbyNameTableAdapter() As SubjectsorderedbyNameTableAdapter
            Get
                Return Me._subjectsorderedbyNameTableAdapter
            End Get
            Set
                Me._subjectsorderedbyNameTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ExamsTableAdapter() As ExamsTableAdapter
            Get
                Return Me._examsTableAdapter
            End Get
            Set
                Me._examsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ExamsBySemSYTableAdapter() As ExamsBySemSYTableAdapter
            Get
                Return Me._examsBySemSYTableAdapter
            End Get
            Set
                Me._examsBySemSYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._schoolYearTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schoolYearTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schoolYearTableAdapter.Connection
                End If
                If ((Not (Me._semesterTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._semesterTableAdapter.Connection) Is Nothing)) Then
                    Return Me._semesterTableAdapter.Connection
                End If
                If ((Not (Me._schoolResourcesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schoolResourcesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schoolResourcesTableAdapter.Connection
                End If
                If ((Not (Me._subjectsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsTableAdapter.Connection
                End If
                If ((Not (Me._subjectsByPriKeyTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsByPriKeyTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsByPriKeyTableAdapter.Connection
                End If
                If ((Not (Me._teachersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._teachersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._teachersTableAdapter.Connection
                End If
                If ((Not (Me._coursesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._coursesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._coursesTableAdapter.Connection
                End If
                If ((Not (Me._blockSectionTuitionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._blockSectionTuitionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._blockSectionTuitionTableAdapter.Connection
                End If
                If ((Not (Me._prefTableTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._prefTableTableAdapter.Connection) Is Nothing)) Then
                    Return Me._prefTableTableAdapter.Connection
                End If
                If ((Not (Me._schoolYearbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schoolYearbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schoolYearbyPKTableAdapter.Connection
                End If
                If ((Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._blockSectionTuitionbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._blockSectionTuitionbyPKTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTableAdapter.Connection
                End If
                If ((Not (Me._subjectsByCNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsByCNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsByCNameTableAdapter.Connection
                End If
                If ((Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schoolResourcesbyCNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schoolResourcesbyCNameTableAdapter.Connection
                End If
                If ((Not (Me._teachersbyCNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._teachersbyCNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._teachersbyCNameTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherMonTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherMonTableAdapter.Connection
                End If
                If ((Not (Me._teachersbyIDTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._teachersbyIDTableAdapter.Connection) Is Nothing)) Then
                    Return Me._teachersbyIDTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherTueTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherTueTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherWedTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherWedTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherThursTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherThursTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherFriTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherFriTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherSatTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherSatTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingTeacherSunTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingTeacherSunTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceMonTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceMonTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceTuesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceTuesTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceWedTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceWedTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceThursTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceThursTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceFriTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceFriTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceSatTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceSatTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingResourceSunTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingResourceSunTableAdapter.Connection
                End If
                If ((Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schoolResourcesbyPkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schoolResourcesbyPkTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingbyTeacherTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingbyTeacherTableAdapter.Connection
                End If
                If ((Not (Me._tRTypesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRTypesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRTypesTableAdapter.Connection
                End If
                If ((Not (Me._tRTypesbyNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRTypesbyNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRTypesbyNameTableAdapter.Connection
                End If
                If ((Not (Me._tRTypesbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRTypesbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRTypesbyPKTableAdapter.Connection
                End If
                If ((Not (Me._coursesbyPkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._coursesbyPkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._coursesbyPkTableAdapter.Connection
                End If
                If ((Not (Me._templateTeacherLoadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._templateTeacherLoadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._templateTeacherLoadTableAdapter.Connection
                End If
                If ((Not (Me._semesterbyPkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._semesterbyPkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._semesterbyPkTableAdapter.Connection
                End If
                If ((Not (Me._subjectsByPreReqTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsByPreReqTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsByPreReqTableAdapter.Connection
                End If
                If ((Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRTypesbyCodeandCourseTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRTypesbyCodeandCourseTableAdapter.Connection
                End If
                If ((Not (Me._tRTypesbySubjectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRTypesbySubjectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRTypesbySubjectTableAdapter.Connection
                End If
                If ((Not (Me._coursesbyNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._coursesbyNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._coursesbyNameTableAdapter.Connection
                End If
                If ((Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsorderedbyNameTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsorderedbyNameTableAdapter.Connection
                End If
                If ((Not (Me._examsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._examsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._examsTableAdapter.Connection
                End If
                If ((Not (Me._examsBySemSYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._examsBySemSYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._examsBySemSYTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._semesterTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._teachersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._coursesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._examsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsSchool, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyTeacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingbyTeacherTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyPkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRTypes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRTypesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRTypesbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRTypesbyNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSunTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceWedTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceTues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceTuesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceThursTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSatTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceFriTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CoursesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._coursesbyPkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._examsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Exams.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._examsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SubjectsorderedbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsorderedbyNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ExamsBySemSY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._examsBySemSYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CoursesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._coursesbyNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SemesterbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._semesterbyPkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TemplateTeacherLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._templateTeacherLoadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPreReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsByPreReqTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRTypesbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRTypesbySubjectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyCodeandCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRTypesbyCodeandCourseTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceMonTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._coursesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Courses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._coursesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PrefTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._prefTableTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SchoolYearbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schoolYearbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._teachersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Teachers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._teachersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._semesterTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Semester.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._semesterTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SchoolYear.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schoolYearTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SchoolResources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schoolResourcesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPriKey.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsByPriKeyTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOffering.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherThursTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherWedTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherFriTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSunTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSatTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherTue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherTueTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyCNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SubjectsByCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsByCNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TeachersbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._teachersbyCNameTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TeachersbyID.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._teachersbyIDTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherMonTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsSchool, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyTeacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingbyTeacherTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyPkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRTypes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRTypesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRTypesbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRTypesbyNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSunTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceWedTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceTues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceTuesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceThursTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSatTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceFriTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CoursesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._coursesbyPkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._examsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Exams.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._examsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SubjectsorderedbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsorderedbyNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ExamsBySemSY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._examsBySemSYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CoursesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._coursesbyNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SemesterbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._semesterbyPkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TemplateTeacherLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._templateTeacherLoadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPreReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsByPreReqTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRTypesbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRTypesbySubjectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyCodeandCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRTypesbyCodeandCourseTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceMonTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._coursesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Courses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._coursesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PrefTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._prefTableTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SchoolYearbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schoolYearbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._teachersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Teachers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._teachersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._semesterTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Semester.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._semesterTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SchoolYear.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schoolYearTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SchoolResources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schoolResourcesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPriKey.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsByPriKeyTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOffering.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherThursTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherWedTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherFriTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSunTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSatTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherTue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherTueTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyCNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SubjectsByCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsByCNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TeachersbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._teachersbyCNameTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TeachersbyID.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._teachersbyIDTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherMonTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsSchool, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherMonTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TeachersbyID.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._teachersbyIDTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TeachersbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._teachersbyCNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SubjectsByCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsByCNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyCName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyCNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherTue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherTueTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSatTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherSunTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherFriTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherWedTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingTeacherThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTeacherThursTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOffering.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPriKey.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsByPriKeyTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SchoolResources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schoolResourcesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SchoolYear.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schoolYearTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._semesterTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Semester.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._semesterTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._teachersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Teachers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._teachersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SchoolYearbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schoolYearbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PrefTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._prefTableTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._coursesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Courses.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._coursesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceMon.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceMonTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyCodeandCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRTypesbyCodeandCourseTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRTypesbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRTypesbySubjectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SubjectsByPreReq.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsByPreReqTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TemplateTeacherLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._templateTeacherLoadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SemesterbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._semesterbyPkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CoursesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._coursesbyNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ExamsBySemSY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._examsBySemSYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SubjectsorderedbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsorderedbyNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._examsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Exams.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._examsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CoursesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._coursesbyPkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceFri.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceFriTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSatTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceThurs.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceThursTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceTues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceTuesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceWed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceWedTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingResourceSun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingResourceSunTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyName.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRTypesbyNameTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRTypesbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRTypesbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRTypes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRTypesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SchoolResourcesbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schoolResourcesbyPkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyTeacher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingbyTeacherTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsSchool) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._schoolYearTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schoolYearTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._semesterTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._semesterTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schoolResourcesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schoolResourcesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsByPriKeyTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsByPriKeyTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._teachersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._teachersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._coursesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._coursesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._blockSectionTuitionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._blockSectionTuitionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._prefTableTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._prefTableTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schoolYearbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schoolYearbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._blockSectionTuitionbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsByCNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsByCNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schoolResourcesbyCNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._teachersbyCNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._teachersbyCNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherMonTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._teachersbyIDTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._teachersbyIDTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherTueTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherWedTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherThursTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherFriTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherSatTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingTeacherSunTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceMonTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceTuesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceWedTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceThursTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceFriTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceSatTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingResourceSunTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schoolResourcesbyPkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingbyTeacherTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRTypesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRTypesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRTypesbyNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRTypesbyNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRTypesbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRTypesbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._coursesbyPkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._coursesbyPkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._templateTeacherLoadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._templateTeacherLoadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._semesterbyPkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._semesterbyPkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsByPreReqTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsByPreReqTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRTypesbyCodeandCourseTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRTypesbySubjectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRTypesbySubjectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._coursesbyNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._coursesbyNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsorderedbyNameTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._examsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._examsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._examsBySemSYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._examsBySemSYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schoolYearTableAdapter, Me._schoolYearTableAdapter.Connection)
                    Me._schoolYearTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolYearTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schoolYearTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schoolYearTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schoolYearTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._semesterTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._semesterTableAdapter, Me._semesterTableAdapter.Connection)
                    Me._semesterTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._semesterTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._semesterTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._semesterTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._semesterTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schoolResourcesTableAdapter, Me._schoolResourcesTableAdapter.Connection)
                    Me._schoolResourcesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schoolResourcesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schoolResourcesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schoolResourcesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsTableAdapter, Me._subjectsTableAdapter.Connection)
                    Me._subjectsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsByPriKeyTableAdapter, Me._subjectsByPriKeyTableAdapter.Connection)
                    Me._subjectsByPriKeyTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByPriKeyTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsByPriKeyTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsByPriKeyTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsByPriKeyTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._teachersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._teachersTableAdapter, Me._teachersTableAdapter.Connection)
                    Me._teachersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._teachersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._teachersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._teachersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._coursesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._coursesTableAdapter, Me._coursesTableAdapter.Connection)
                    Me._coursesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._coursesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._coursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._coursesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._blockSectionTuitionTableAdapter, Me._blockSectionTuitionTableAdapter.Connection)
                    Me._blockSectionTuitionTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._blockSectionTuitionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._blockSectionTuitionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._blockSectionTuitionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._prefTableTableAdapter, Me._prefTableTableAdapter.Connection)
                    Me._prefTableTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._prefTableTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._prefTableTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._prefTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._prefTableTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schoolYearbyPKTableAdapter, Me._schoolYearbyPKTableAdapter.Connection)
                    Me._schoolYearbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolYearbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schoolYearbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schoolYearbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schoolYearbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._blockSectionTuitionbyPKTableAdapter, Me._blockSectionTuitionbyPKTableAdapter.Connection)
                    Me._blockSectionTuitionbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._blockSectionTuitionbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._blockSectionTuitionbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._blockSectionTuitionbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTableAdapter, Me._sYOfferingTableAdapter.Connection)
                    Me._sYOfferingTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsByCNameTableAdapter, Me._subjectsByCNameTableAdapter.Connection)
                    Me._subjectsByCNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByCNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsByCNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsByCNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsByCNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schoolResourcesbyCNameTableAdapter, Me._schoolResourcesbyCNameTableAdapter.Connection)
                    Me._schoolResourcesbyCNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesbyCNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schoolResourcesbyCNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schoolResourcesbyCNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schoolResourcesbyCNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._teachersbyCNameTableAdapter, Me._teachersbyCNameTableAdapter.Connection)
                    Me._teachersbyCNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersbyCNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._teachersbyCNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._teachersbyCNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._teachersbyCNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherMonTableAdapter, Me._sYOfferingTeacherMonTableAdapter.Connection)
                    Me._sYOfferingTeacherMonTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherMonTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherMonTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherMonTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherMonTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._teachersbyIDTableAdapter, Me._teachersbyIDTableAdapter.Connection)
                    Me._teachersbyIDTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersbyIDTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._teachersbyIDTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._teachersbyIDTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._teachersbyIDTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherTueTableAdapter, Me._sYOfferingTeacherTueTableAdapter.Connection)
                    Me._sYOfferingTeacherTueTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherTueTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherTueTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherTueTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherTueTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherWedTableAdapter, Me._sYOfferingTeacherWedTableAdapter.Connection)
                    Me._sYOfferingTeacherWedTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherWedTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherWedTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherWedTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherWedTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherThursTableAdapter, Me._sYOfferingTeacherThursTableAdapter.Connection)
                    Me._sYOfferingTeacherThursTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherThursTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherThursTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherThursTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherThursTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherFriTableAdapter, Me._sYOfferingTeacherFriTableAdapter.Connection)
                    Me._sYOfferingTeacherFriTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherFriTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherFriTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherFriTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherFriTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherSatTableAdapter, Me._sYOfferingTeacherSatTableAdapter.Connection)
                    Me._sYOfferingTeacherSatTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherSatTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherSatTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherSatTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherSatTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingTeacherSunTableAdapter, Me._sYOfferingTeacherSunTableAdapter.Connection)
                    Me._sYOfferingTeacherSunTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherSunTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingTeacherSunTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingTeacherSunTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingTeacherSunTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceMonTableAdapter, Me._sYOfferingResourceMonTableAdapter.Connection)
                    Me._sYOfferingResourceMonTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceMonTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceMonTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceMonTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceMonTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceTuesTableAdapter, Me._sYOfferingResourceTuesTableAdapter.Connection)
                    Me._sYOfferingResourceTuesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceTuesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceTuesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceTuesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceTuesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceWedTableAdapter, Me._sYOfferingResourceWedTableAdapter.Connection)
                    Me._sYOfferingResourceWedTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceWedTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceWedTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceWedTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceWedTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceThursTableAdapter, Me._sYOfferingResourceThursTableAdapter.Connection)
                    Me._sYOfferingResourceThursTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceThursTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceThursTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceThursTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceThursTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceFriTableAdapter, Me._sYOfferingResourceFriTableAdapter.Connection)
                    Me._sYOfferingResourceFriTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceFriTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceFriTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceFriTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceFriTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceSatTableAdapter, Me._sYOfferingResourceSatTableAdapter.Connection)
                    Me._sYOfferingResourceSatTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceSatTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceSatTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceSatTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceSatTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingResourceSunTableAdapter, Me._sYOfferingResourceSunTableAdapter.Connection)
                    Me._sYOfferingResourceSunTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceSunTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingResourceSunTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingResourceSunTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingResourceSunTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schoolResourcesbyPkTableAdapter, Me._schoolResourcesbyPkTableAdapter.Connection)
                    Me._schoolResourcesbyPkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesbyPkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schoolResourcesbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schoolResourcesbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schoolResourcesbyPkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingbyTeacherTableAdapter, Me._sYOfferingbyTeacherTableAdapter.Connection)
                    Me._sYOfferingbyTeacherTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyTeacherTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingbyTeacherTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingbyTeacherTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingbyTeacherTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRTypesTableAdapter, Me._tRTypesTableAdapter.Connection)
                    Me._tRTypesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRTypesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRTypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRTypesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRTypesbyNameTableAdapter, Me._tRTypesbyNameTableAdapter.Connection)
                    Me._tRTypesbyNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRTypesbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRTypesbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRTypesbyNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRTypesbyPKTableAdapter, Me._tRTypesbyPKTableAdapter.Connection)
                    Me._tRTypesbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRTypesbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRTypesbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRTypesbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._coursesbyPkTableAdapter, Me._coursesbyPkTableAdapter.Connection)
                    Me._coursesbyPkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesbyPkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._coursesbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._coursesbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._coursesbyPkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._templateTeacherLoadTableAdapter, Me._templateTeacherLoadTableAdapter.Connection)
                    Me._templateTeacherLoadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._templateTeacherLoadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._templateTeacherLoadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._templateTeacherLoadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._templateTeacherLoadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._semesterbyPkTableAdapter, Me._semesterbyPkTableAdapter.Connection)
                    Me._semesterbyPkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._semesterbyPkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._semesterbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._semesterbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._semesterbyPkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsByPreReqTableAdapter, Me._subjectsByPreReqTableAdapter.Connection)
                    Me._subjectsByPreReqTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByPreReqTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsByPreReqTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsByPreReqTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsByPreReqTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRTypesbyCodeandCourseTableAdapter, Me._tRTypesbyCodeandCourseTableAdapter.Connection)
                    Me._tRTypesbyCodeandCourseTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyCodeandCourseTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRTypesbyCodeandCourseTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRTypesbyCodeandCourseTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRTypesbyCodeandCourseTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRTypesbySubjectTableAdapter, Me._tRTypesbySubjectTableAdapter.Connection)
                    Me._tRTypesbySubjectTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbySubjectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRTypesbySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRTypesbySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRTypesbySubjectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._coursesbyNameTableAdapter, Me._coursesbyNameTableAdapter.Connection)
                    Me._coursesbyNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesbyNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._coursesbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._coursesbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._coursesbyNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsorderedbyNameTableAdapter, Me._subjectsorderedbyNameTableAdapter.Connection)
                    Me._subjectsorderedbyNameTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsorderedbyNameTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsorderedbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsorderedbyNameTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsorderedbyNameTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._examsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._examsTableAdapter, Me._examsTableAdapter.Connection)
                    Me._examsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._examsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._examsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._examsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._examsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._examsBySemSYTableAdapter, Me._examsBySemSYTableAdapter.Connection)
                    Me._examsBySemSYTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._examsBySemSYTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._examsBySemSYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._examsBySemSYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._examsBySemSYTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._schoolYearTableAdapter) Is Nothing) Then
                    Me._schoolYearTableAdapter.Connection = CType(revertConnections(Me._schoolYearTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolYearTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._semesterTableAdapter) Is Nothing) Then
                    Me._semesterTableAdapter.Connection = CType(revertConnections(Me._semesterTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._semesterTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schoolResourcesTableAdapter) Is Nothing) Then
                    Me._schoolResourcesTableAdapter.Connection = CType(revertConnections(Me._schoolResourcesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    Me._subjectsTableAdapter.Connection = CType(revertConnections(Me._subjectsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsByPriKeyTableAdapter) Is Nothing) Then
                    Me._subjectsByPriKeyTableAdapter.Connection = CType(revertConnections(Me._subjectsByPriKeyTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByPriKeyTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._teachersTableAdapter) Is Nothing) Then
                    Me._teachersTableAdapter.Connection = CType(revertConnections(Me._teachersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._coursesTableAdapter) Is Nothing) Then
                    Me._coursesTableAdapter.Connection = CType(revertConnections(Me._coursesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    Me._blockSectionTuitionTableAdapter.Connection = CType(revertConnections(Me._blockSectionTuitionTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._prefTableTableAdapter) Is Nothing) Then
                    Me._prefTableTableAdapter.Connection = CType(revertConnections(Me._prefTableTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._prefTableTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schoolYearbyPKTableAdapter) Is Nothing) Then
                    Me._schoolYearbyPKTableAdapter.Connection = CType(revertConnections(Me._schoolYearbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolYearbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._blockSectionTuitionbyPKTableAdapter) Is Nothing) Then
                    Me._blockSectionTuitionbyPKTableAdapter.Connection = CType(revertConnections(Me._blockSectionTuitionbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTableAdapter) Is Nothing) Then
                    Me._sYOfferingTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsByCNameTableAdapter) Is Nothing) Then
                    Me._subjectsByCNameTableAdapter.Connection = CType(revertConnections(Me._subjectsByCNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByCNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schoolResourcesbyCNameTableAdapter) Is Nothing) Then
                    Me._schoolResourcesbyCNameTableAdapter.Connection = CType(revertConnections(Me._schoolResourcesbyCNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesbyCNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._teachersbyCNameTableAdapter) Is Nothing) Then
                    Me._teachersbyCNameTableAdapter.Connection = CType(revertConnections(Me._teachersbyCNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersbyCNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherMonTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherMonTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherMonTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherMonTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._teachersbyIDTableAdapter) Is Nothing) Then
                    Me._teachersbyIDTableAdapter.Connection = CType(revertConnections(Me._teachersbyIDTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._teachersbyIDTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherTueTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherTueTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherTueTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherTueTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherWedTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherWedTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherWedTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherWedTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherThursTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherThursTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherThursTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherThursTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherFriTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherFriTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherFriTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherFriTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherSatTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherSatTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherSatTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherSatTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingTeacherSunTableAdapter) Is Nothing) Then
                    Me._sYOfferingTeacherSunTableAdapter.Connection = CType(revertConnections(Me._sYOfferingTeacherSunTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingTeacherSunTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceMonTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceMonTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceMonTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceMonTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceTuesTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceTuesTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceTuesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceTuesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceWedTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceWedTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceWedTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceWedTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceThursTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceThursTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceThursTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceThursTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceFriTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceFriTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceFriTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceFriTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceSatTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceSatTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceSatTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceSatTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingResourceSunTableAdapter) Is Nothing) Then
                    Me._sYOfferingResourceSunTableAdapter.Connection = CType(revertConnections(Me._sYOfferingResourceSunTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingResourceSunTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schoolResourcesbyPkTableAdapter) Is Nothing) Then
                    Me._schoolResourcesbyPkTableAdapter.Connection = CType(revertConnections(Me._schoolResourcesbyPkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schoolResourcesbyPkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingbyTeacherTableAdapter) Is Nothing) Then
                    Me._sYOfferingbyTeacherTableAdapter.Connection = CType(revertConnections(Me._sYOfferingbyTeacherTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyTeacherTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRTypesTableAdapter) Is Nothing) Then
                    Me._tRTypesTableAdapter.Connection = CType(revertConnections(Me._tRTypesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRTypesbyNameTableAdapter) Is Nothing) Then
                    Me._tRTypesbyNameTableAdapter.Connection = CType(revertConnections(Me._tRTypesbyNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRTypesbyPKTableAdapter) Is Nothing) Then
                    Me._tRTypesbyPKTableAdapter.Connection = CType(revertConnections(Me._tRTypesbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._coursesbyPkTableAdapter) Is Nothing) Then
                    Me._coursesbyPkTableAdapter.Connection = CType(revertConnections(Me._coursesbyPkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesbyPkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._templateTeacherLoadTableAdapter) Is Nothing) Then
                    Me._templateTeacherLoadTableAdapter.Connection = CType(revertConnections(Me._templateTeacherLoadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._templateTeacherLoadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._semesterbyPkTableAdapter) Is Nothing) Then
                    Me._semesterbyPkTableAdapter.Connection = CType(revertConnections(Me._semesterbyPkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._semesterbyPkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsByPreReqTableAdapter) Is Nothing) Then
                    Me._subjectsByPreReqTableAdapter.Connection = CType(revertConnections(Me._subjectsByPreReqTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsByPreReqTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRTypesbyCodeandCourseTableAdapter) Is Nothing) Then
                    Me._tRTypesbyCodeandCourseTableAdapter.Connection = CType(revertConnections(Me._tRTypesbyCodeandCourseTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbyCodeandCourseTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRTypesbySubjectTableAdapter) Is Nothing) Then
                    Me._tRTypesbySubjectTableAdapter.Connection = CType(revertConnections(Me._tRTypesbySubjectTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRTypesbySubjectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._coursesbyNameTableAdapter) Is Nothing) Then
                    Me._coursesbyNameTableAdapter.Connection = CType(revertConnections(Me._coursesbyNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._coursesbyNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsorderedbyNameTableAdapter) Is Nothing) Then
                    Me._subjectsorderedbyNameTableAdapter.Connection = CType(revertConnections(Me._subjectsorderedbyNameTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsorderedbyNameTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._examsTableAdapter) Is Nothing) Then
                    Me._examsTableAdapter.Connection = CType(revertConnections(Me._examsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._examsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._examsBySemSYTableAdapter) Is Nothing) Then
                    Me._examsBySemSYTableAdapter.Connection = CType(revertConnections(Me._examsBySemSYTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._examsBySemSYTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
