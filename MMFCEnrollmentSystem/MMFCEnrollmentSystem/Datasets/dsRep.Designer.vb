'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRep"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRep
    Inherits Global.System.Data.DataSet
    
    Private tableStudents As StudentsDataTable
    
    Private tableEnrollSubjectsbyStudent As EnrollSubjectsbyStudentDataTable
    
    Private tableStudentsByCourseYrTypeRegDate As StudentsByCourseYrTypeRegDateDataTable
    
    Private tableEnrollSubjectsbyStudentSemYrPk As EnrollSubjectsbyStudentSemYrPkDataTable
    
    Private tableGradesbyStudentPK As GradesbyStudentPKDataTable
    
    Private tableSubjects As SubjectsDataTable
    
    Private tableEnrollHeaderCountbySex As EnrollHeaderCountbySexDataTable
    
    Private tableEnrollSubjectCountbyCourse As EnrollSubjectCountbyCourseDataTable
    
    Private tableEnrollHeaderCountbyyearlevel As EnrollHeaderCountbyyearlevelDataTable
    
    Private tableEnrollSubjectCountbySubject As EnrollSubjectCountbySubjectDataTable
    
    Private tableReceiptsHeaderByStatus As ReceiptsHeaderByStatusDataTable
    
    Private tableStudentsCrosstab As StudentsCrosstabDataTable
    
    Private tableClassList As ClassListDataTable
    
    Private tableEnrollmentList As EnrollmentListDataTable
    
    Private tableReceivablesReport As ReceivablesReportDataTable
    
    Private tableCollegiateGradingSheet As CollegiateGradingSheetDataTable
    
    Private tablePromotionalReport As PromotionalReportDataTable
    
    Private tableGradesMailingList As GradesMailingListDataTable
    
    Private tableStudentPermanentRecord As StudentPermanentRecordDataTable
    
    Private tableTemplateStatisticsReport As TemplateStatisticsReportDataTable
    
    Private tableStudentSchedule As StudentScheduleDataTable
    
    Private tableTemplateClassCard As TemplateClassCardDataTable
    
    Private tableTemplateEvaluationReport As TemplateEvaluationReportDataTable
    
    Private tableTemplateCollectionsReport As TemplateCollectionsReportDataTable
    
    Private tableTemplateCollectionsHistoryReport As TemplateCollectionsHistoryReportDataTable
    
    Private tableTemplateCollectionBreakdown As TemplateCollectionBreakdownDataTable
    
    Private tableTemplateSAO As TemplateSAODataTable
    
    Private tableTemplateEvaluationCurriculumReport As TemplateEvaluationCurriculumReportDataTable
    
    Private tableTemplateStudentsReports As TemplateStudentsReportsDataTable
    
    Private tableBrokenHoursTemplate As BrokenHoursTemplateDataTable
    
    Private tableTOR As TORDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyStudent")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyStudentDataTable(ds.Tables("EnrollSubjectsbyStudent")))
            End If
            If (Not (ds.Tables("StudentsByCourseYrTypeRegDate")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsByCourseYrTypeRegDateDataTable(ds.Tables("StudentsByCourseYrTypeRegDate")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyStudentSemYrPk")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyStudentSemYrPkDataTable(ds.Tables("EnrollSubjectsbyStudentSemYrPk")))
            End If
            If (Not (ds.Tables("GradesbyStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New GradesbyStudentPKDataTable(ds.Tables("GradesbyStudentPK")))
            End If
            If (Not (ds.Tables("Subjects")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsDataTable(ds.Tables("Subjects")))
            End If
            If (Not (ds.Tables("EnrollHeaderCountbySex")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderCountbySexDataTable(ds.Tables("EnrollHeaderCountbySex")))
            End If
            If (Not (ds.Tables("EnrollSubjectCountbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectCountbyCourseDataTable(ds.Tables("EnrollSubjectCountbyCourse")))
            End If
            If (Not (ds.Tables("EnrollHeaderCountbyyearlevel")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderCountbyyearlevelDataTable(ds.Tables("EnrollHeaderCountbyyearlevel")))
            End If
            If (Not (ds.Tables("EnrollSubjectCountbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectCountbySubjectDataTable(ds.Tables("EnrollSubjectCountbySubject")))
            End If
            If (Not (ds.Tables("ReceiptsHeaderByStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ReceiptsHeaderByStatusDataTable(ds.Tables("ReceiptsHeaderByStatus")))
            End If
            If (Not (ds.Tables("StudentsCrosstab")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsCrosstabDataTable(ds.Tables("StudentsCrosstab")))
            End If
            If (Not (ds.Tables("ClassList")) Is Nothing) Then
                MyBase.Tables.Add(New ClassListDataTable(ds.Tables("ClassList")))
            End If
            If (Not (ds.Tables("EnrollmentList")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollmentListDataTable(ds.Tables("EnrollmentList")))
            End If
            If (Not (ds.Tables("ReceivablesReport")) Is Nothing) Then
                MyBase.Tables.Add(New ReceivablesReportDataTable(ds.Tables("ReceivablesReport")))
            End If
            If (Not (ds.Tables("CollegiateGradingSheet")) Is Nothing) Then
                MyBase.Tables.Add(New CollegiateGradingSheetDataTable(ds.Tables("CollegiateGradingSheet")))
            End If
            If (Not (ds.Tables("PromotionalReport")) Is Nothing) Then
                MyBase.Tables.Add(New PromotionalReportDataTable(ds.Tables("PromotionalReport")))
            End If
            If (Not (ds.Tables("GradesMailingList")) Is Nothing) Then
                MyBase.Tables.Add(New GradesMailingListDataTable(ds.Tables("GradesMailingList")))
            End If
            If (Not (ds.Tables("StudentPermanentRecord")) Is Nothing) Then
                MyBase.Tables.Add(New StudentPermanentRecordDataTable(ds.Tables("StudentPermanentRecord")))
            End If
            If (Not (ds.Tables("TemplateStatisticsReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStatisticsReportDataTable(ds.Tables("TemplateStatisticsReport")))
            End If
            If (Not (ds.Tables("StudentSchedule")) Is Nothing) Then
                MyBase.Tables.Add(New StudentScheduleDataTable(ds.Tables("StudentSchedule")))
            End If
            If (Not (ds.Tables("TemplateClassCard")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateClassCardDataTable(ds.Tables("TemplateClassCard")))
            End If
            If (Not (ds.Tables("TemplateEvaluationReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEvaluationReportDataTable(ds.Tables("TemplateEvaluationReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionsReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionsReportDataTable(ds.Tables("TemplateCollectionsReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionsHistoryReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionsHistoryReportDataTable(ds.Tables("TemplateCollectionsHistoryReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionBreakdown")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionBreakdownDataTable(ds.Tables("TemplateCollectionBreakdown")))
            End If
            If (Not (ds.Tables("TemplateSAO")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSAODataTable(ds.Tables("TemplateSAO")))
            End If
            If (Not (ds.Tables("TemplateEvaluationCurriculumReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEvaluationCurriculumReportDataTable(ds.Tables("TemplateEvaluationCurriculumReport")))
            End If
            If (Not (ds.Tables("TemplateStudentsReports")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStudentsReportsDataTable(ds.Tables("TemplateStudentsReports")))
            End If
            If (Not (ds.Tables("BrokenHoursTemplate")) Is Nothing) Then
                MyBase.Tables.Add(New BrokenHoursTemplateDataTable(ds.Tables("BrokenHoursTemplate")))
            End If
            If (Not (ds.Tables("TOR")) Is Nothing) Then
                MyBase.Tables.Add(New TORDataTable(ds.Tables("TOR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Students() As StudentsDataTable
        Get
            Return Me.tableStudents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsbyStudent() As EnrollSubjectsbyStudentDataTable
        Get
            Return Me.tableEnrollSubjectsbyStudent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentsByCourseYrTypeRegDate() As StudentsByCourseYrTypeRegDateDataTable
        Get
            Return Me.tableStudentsByCourseYrTypeRegDate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsbyStudentSemYrPk() As EnrollSubjectsbyStudentSemYrPkDataTable
        Get
            Return Me.tableEnrollSubjectsbyStudentSemYrPk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GradesbyStudentPK() As GradesbyStudentPKDataTable
        Get
            Return Me.tableGradesbyStudentPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Subjects() As SubjectsDataTable
        Get
            Return Me.tableSubjects
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollHeaderCountbySex() As EnrollHeaderCountbySexDataTable
        Get
            Return Me.tableEnrollHeaderCountbySex
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectCountbyCourse() As EnrollSubjectCountbyCourseDataTable
        Get
            Return Me.tableEnrollSubjectCountbyCourse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollHeaderCountbyyearlevel() As EnrollHeaderCountbyyearlevelDataTable
        Get
            Return Me.tableEnrollHeaderCountbyyearlevel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectCountbySubject() As EnrollSubjectCountbySubjectDataTable
        Get
            Return Me.tableEnrollSubjectCountbySubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReceiptsHeaderByStatus() As ReceiptsHeaderByStatusDataTable
        Get
            Return Me.tableReceiptsHeaderByStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentsCrosstab() As StudentsCrosstabDataTable
        Get
            Return Me.tableStudentsCrosstab
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassList() As ClassListDataTable
        Get
            Return Me.tableClassList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollmentList() As EnrollmentListDataTable
        Get
            Return Me.tableEnrollmentList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReceivablesReport() As ReceivablesReportDataTable
        Get
            Return Me.tableReceivablesReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CollegiateGradingSheet() As CollegiateGradingSheetDataTable
        Get
            Return Me.tableCollegiateGradingSheet
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PromotionalReport() As PromotionalReportDataTable
        Get
            Return Me.tablePromotionalReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GradesMailingList() As GradesMailingListDataTable
        Get
            Return Me.tableGradesMailingList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentPermanentRecord() As StudentPermanentRecordDataTable
        Get
            Return Me.tableStudentPermanentRecord
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateStatisticsReport() As TemplateStatisticsReportDataTable
        Get
            Return Me.tableTemplateStatisticsReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentSchedule() As StudentScheduleDataTable
        Get
            Return Me.tableStudentSchedule
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateClassCard() As TemplateClassCardDataTable
        Get
            Return Me.tableTemplateClassCard
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateEvaluationReport() As TemplateEvaluationReportDataTable
        Get
            Return Me.tableTemplateEvaluationReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateCollectionsReport() As TemplateCollectionsReportDataTable
        Get
            Return Me.tableTemplateCollectionsReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateCollectionsHistoryReport() As TemplateCollectionsHistoryReportDataTable
        Get
            Return Me.tableTemplateCollectionsHistoryReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateCollectionBreakdown() As TemplateCollectionBreakdownDataTable
        Get
            Return Me.tableTemplateCollectionBreakdown
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateSAO() As TemplateSAODataTable
        Get
            Return Me.tableTemplateSAO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateEvaluationCurriculumReport() As TemplateEvaluationCurriculumReportDataTable
        Get
            Return Me.tableTemplateEvaluationCurriculumReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateStudentsReports() As TemplateStudentsReportsDataTable
        Get
            Return Me.tableTemplateStudentsReports
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BrokenHoursTemplate() As BrokenHoursTemplateDataTable
        Get
            Return Me.tableBrokenHoursTemplate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TOR() As TORDataTable
        Get
            Return Me.tableTOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRep = CType(MyBase.Clone,dsRep)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyStudent")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyStudentDataTable(ds.Tables("EnrollSubjectsbyStudent")))
            End If
            If (Not (ds.Tables("StudentsByCourseYrTypeRegDate")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsByCourseYrTypeRegDateDataTable(ds.Tables("StudentsByCourseYrTypeRegDate")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyStudentSemYrPk")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyStudentSemYrPkDataTable(ds.Tables("EnrollSubjectsbyStudentSemYrPk")))
            End If
            If (Not (ds.Tables("GradesbyStudentPK")) Is Nothing) Then
                MyBase.Tables.Add(New GradesbyStudentPKDataTable(ds.Tables("GradesbyStudentPK")))
            End If
            If (Not (ds.Tables("Subjects")) Is Nothing) Then
                MyBase.Tables.Add(New SubjectsDataTable(ds.Tables("Subjects")))
            End If
            If (Not (ds.Tables("EnrollHeaderCountbySex")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderCountbySexDataTable(ds.Tables("EnrollHeaderCountbySex")))
            End If
            If (Not (ds.Tables("EnrollSubjectCountbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectCountbyCourseDataTable(ds.Tables("EnrollSubjectCountbyCourse")))
            End If
            If (Not (ds.Tables("EnrollHeaderCountbyyearlevel")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderCountbyyearlevelDataTable(ds.Tables("EnrollHeaderCountbyyearlevel")))
            End If
            If (Not (ds.Tables("EnrollSubjectCountbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectCountbySubjectDataTable(ds.Tables("EnrollSubjectCountbySubject")))
            End If
            If (Not (ds.Tables("ReceiptsHeaderByStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ReceiptsHeaderByStatusDataTable(ds.Tables("ReceiptsHeaderByStatus")))
            End If
            If (Not (ds.Tables("StudentsCrosstab")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsCrosstabDataTable(ds.Tables("StudentsCrosstab")))
            End If
            If (Not (ds.Tables("ClassList")) Is Nothing) Then
                MyBase.Tables.Add(New ClassListDataTable(ds.Tables("ClassList")))
            End If
            If (Not (ds.Tables("EnrollmentList")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollmentListDataTable(ds.Tables("EnrollmentList")))
            End If
            If (Not (ds.Tables("ReceivablesReport")) Is Nothing) Then
                MyBase.Tables.Add(New ReceivablesReportDataTable(ds.Tables("ReceivablesReport")))
            End If
            If (Not (ds.Tables("CollegiateGradingSheet")) Is Nothing) Then
                MyBase.Tables.Add(New CollegiateGradingSheetDataTable(ds.Tables("CollegiateGradingSheet")))
            End If
            If (Not (ds.Tables("PromotionalReport")) Is Nothing) Then
                MyBase.Tables.Add(New PromotionalReportDataTable(ds.Tables("PromotionalReport")))
            End If
            If (Not (ds.Tables("GradesMailingList")) Is Nothing) Then
                MyBase.Tables.Add(New GradesMailingListDataTable(ds.Tables("GradesMailingList")))
            End If
            If (Not (ds.Tables("StudentPermanentRecord")) Is Nothing) Then
                MyBase.Tables.Add(New StudentPermanentRecordDataTable(ds.Tables("StudentPermanentRecord")))
            End If
            If (Not (ds.Tables("TemplateStatisticsReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStatisticsReportDataTable(ds.Tables("TemplateStatisticsReport")))
            End If
            If (Not (ds.Tables("StudentSchedule")) Is Nothing) Then
                MyBase.Tables.Add(New StudentScheduleDataTable(ds.Tables("StudentSchedule")))
            End If
            If (Not (ds.Tables("TemplateClassCard")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateClassCardDataTable(ds.Tables("TemplateClassCard")))
            End If
            If (Not (ds.Tables("TemplateEvaluationReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEvaluationReportDataTable(ds.Tables("TemplateEvaluationReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionsReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionsReportDataTable(ds.Tables("TemplateCollectionsReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionsHistoryReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionsHistoryReportDataTable(ds.Tables("TemplateCollectionsHistoryReport")))
            End If
            If (Not (ds.Tables("TemplateCollectionBreakdown")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateCollectionBreakdownDataTable(ds.Tables("TemplateCollectionBreakdown")))
            End If
            If (Not (ds.Tables("TemplateSAO")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSAODataTable(ds.Tables("TemplateSAO")))
            End If
            If (Not (ds.Tables("TemplateEvaluationCurriculumReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEvaluationCurriculumReportDataTable(ds.Tables("TemplateEvaluationCurriculumReport")))
            End If
            If (Not (ds.Tables("TemplateStudentsReports")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStudentsReportsDataTable(ds.Tables("TemplateStudentsReports")))
            End If
            If (Not (ds.Tables("BrokenHoursTemplate")) Is Nothing) Then
                MyBase.Tables.Add(New BrokenHoursTemplateDataTable(ds.Tables("BrokenHoursTemplate")))
            End If
            If (Not (ds.Tables("TOR")) Is Nothing) Then
                MyBase.Tables.Add(New TORDataTable(ds.Tables("TOR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableStudents = CType(MyBase.Tables("Students"),StudentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudents) Is Nothing) Then
                Me.tableStudents.InitVars
            End If
        End If
        Me.tableEnrollSubjectsbyStudent = CType(MyBase.Tables("EnrollSubjectsbyStudent"),EnrollSubjectsbyStudentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsbyStudent) Is Nothing) Then
                Me.tableEnrollSubjectsbyStudent.InitVars
            End If
        End If
        Me.tableStudentsByCourseYrTypeRegDate = CType(MyBase.Tables("StudentsByCourseYrTypeRegDate"),StudentsByCourseYrTypeRegDateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentsByCourseYrTypeRegDate) Is Nothing) Then
                Me.tableStudentsByCourseYrTypeRegDate.InitVars
            End If
        End If
        Me.tableEnrollSubjectsbyStudentSemYrPk = CType(MyBase.Tables("EnrollSubjectsbyStudentSemYrPk"),EnrollSubjectsbyStudentSemYrPkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsbyStudentSemYrPk) Is Nothing) Then
                Me.tableEnrollSubjectsbyStudentSemYrPk.InitVars
            End If
        End If
        Me.tableGradesbyStudentPK = CType(MyBase.Tables("GradesbyStudentPK"),GradesbyStudentPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGradesbyStudentPK) Is Nothing) Then
                Me.tableGradesbyStudentPK.InitVars
            End If
        End If
        Me.tableSubjects = CType(MyBase.Tables("Subjects"),SubjectsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubjects) Is Nothing) Then
                Me.tableSubjects.InitVars
            End If
        End If
        Me.tableEnrollHeaderCountbySex = CType(MyBase.Tables("EnrollHeaderCountbySex"),EnrollHeaderCountbySexDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollHeaderCountbySex) Is Nothing) Then
                Me.tableEnrollHeaderCountbySex.InitVars
            End If
        End If
        Me.tableEnrollSubjectCountbyCourse = CType(MyBase.Tables("EnrollSubjectCountbyCourse"),EnrollSubjectCountbyCourseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectCountbyCourse) Is Nothing) Then
                Me.tableEnrollSubjectCountbyCourse.InitVars
            End If
        End If
        Me.tableEnrollHeaderCountbyyearlevel = CType(MyBase.Tables("EnrollHeaderCountbyyearlevel"),EnrollHeaderCountbyyearlevelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollHeaderCountbyyearlevel) Is Nothing) Then
                Me.tableEnrollHeaderCountbyyearlevel.InitVars
            End If
        End If
        Me.tableEnrollSubjectCountbySubject = CType(MyBase.Tables("EnrollSubjectCountbySubject"),EnrollSubjectCountbySubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectCountbySubject) Is Nothing) Then
                Me.tableEnrollSubjectCountbySubject.InitVars
            End If
        End If
        Me.tableReceiptsHeaderByStatus = CType(MyBase.Tables("ReceiptsHeaderByStatus"),ReceiptsHeaderByStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReceiptsHeaderByStatus) Is Nothing) Then
                Me.tableReceiptsHeaderByStatus.InitVars
            End If
        End If
        Me.tableStudentsCrosstab = CType(MyBase.Tables("StudentsCrosstab"),StudentsCrosstabDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentsCrosstab) Is Nothing) Then
                Me.tableStudentsCrosstab.InitVars
            End If
        End If
        Me.tableClassList = CType(MyBase.Tables("ClassList"),ClassListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClassList) Is Nothing) Then
                Me.tableClassList.InitVars
            End If
        End If
        Me.tableEnrollmentList = CType(MyBase.Tables("EnrollmentList"),EnrollmentListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollmentList) Is Nothing) Then
                Me.tableEnrollmentList.InitVars
            End If
        End If
        Me.tableReceivablesReport = CType(MyBase.Tables("ReceivablesReport"),ReceivablesReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReceivablesReport) Is Nothing) Then
                Me.tableReceivablesReport.InitVars
            End If
        End If
        Me.tableCollegiateGradingSheet = CType(MyBase.Tables("CollegiateGradingSheet"),CollegiateGradingSheetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCollegiateGradingSheet) Is Nothing) Then
                Me.tableCollegiateGradingSheet.InitVars
            End If
        End If
        Me.tablePromotionalReport = CType(MyBase.Tables("PromotionalReport"),PromotionalReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePromotionalReport) Is Nothing) Then
                Me.tablePromotionalReport.InitVars
            End If
        End If
        Me.tableGradesMailingList = CType(MyBase.Tables("GradesMailingList"),GradesMailingListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGradesMailingList) Is Nothing) Then
                Me.tableGradesMailingList.InitVars
            End If
        End If
        Me.tableStudentPermanentRecord = CType(MyBase.Tables("StudentPermanentRecord"),StudentPermanentRecordDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentPermanentRecord) Is Nothing) Then
                Me.tableStudentPermanentRecord.InitVars
            End If
        End If
        Me.tableTemplateStatisticsReport = CType(MyBase.Tables("TemplateStatisticsReport"),TemplateStatisticsReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateStatisticsReport) Is Nothing) Then
                Me.tableTemplateStatisticsReport.InitVars
            End If
        End If
        Me.tableStudentSchedule = CType(MyBase.Tables("StudentSchedule"),StudentScheduleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentSchedule) Is Nothing) Then
                Me.tableStudentSchedule.InitVars
            End If
        End If
        Me.tableTemplateClassCard = CType(MyBase.Tables("TemplateClassCard"),TemplateClassCardDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateClassCard) Is Nothing) Then
                Me.tableTemplateClassCard.InitVars
            End If
        End If
        Me.tableTemplateEvaluationReport = CType(MyBase.Tables("TemplateEvaluationReport"),TemplateEvaluationReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateEvaluationReport) Is Nothing) Then
                Me.tableTemplateEvaluationReport.InitVars
            End If
        End If
        Me.tableTemplateCollectionsReport = CType(MyBase.Tables("TemplateCollectionsReport"),TemplateCollectionsReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateCollectionsReport) Is Nothing) Then
                Me.tableTemplateCollectionsReport.InitVars
            End If
        End If
        Me.tableTemplateCollectionsHistoryReport = CType(MyBase.Tables("TemplateCollectionsHistoryReport"),TemplateCollectionsHistoryReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateCollectionsHistoryReport) Is Nothing) Then
                Me.tableTemplateCollectionsHistoryReport.InitVars
            End If
        End If
        Me.tableTemplateCollectionBreakdown = CType(MyBase.Tables("TemplateCollectionBreakdown"),TemplateCollectionBreakdownDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateCollectionBreakdown) Is Nothing) Then
                Me.tableTemplateCollectionBreakdown.InitVars
            End If
        End If
        Me.tableTemplateSAO = CType(MyBase.Tables("TemplateSAO"),TemplateSAODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateSAO) Is Nothing) Then
                Me.tableTemplateSAO.InitVars
            End If
        End If
        Me.tableTemplateEvaluationCurriculumReport = CType(MyBase.Tables("TemplateEvaluationCurriculumReport"),TemplateEvaluationCurriculumReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateEvaluationCurriculumReport) Is Nothing) Then
                Me.tableTemplateEvaluationCurriculumReport.InitVars
            End If
        End If
        Me.tableTemplateStudentsReports = CType(MyBase.Tables("TemplateStudentsReports"),TemplateStudentsReportsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateStudentsReports) Is Nothing) Then
                Me.tableTemplateStudentsReports.InitVars
            End If
        End If
        Me.tableBrokenHoursTemplate = CType(MyBase.Tables("BrokenHoursTemplate"),BrokenHoursTemplateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBrokenHoursTemplate) Is Nothing) Then
                Me.tableBrokenHoursTemplate.InitVars
            End If
        End If
        Me.tableTOR = CType(MyBase.Tables("TOR"),TORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTOR) Is Nothing) Then
                Me.tableTOR.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRep"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRep.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableStudents = New StudentsDataTable
        MyBase.Tables.Add(Me.tableStudents)
        Me.tableEnrollSubjectsbyStudent = New EnrollSubjectsbyStudentDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsbyStudent)
        Me.tableStudentsByCourseYrTypeRegDate = New StudentsByCourseYrTypeRegDateDataTable
        MyBase.Tables.Add(Me.tableStudentsByCourseYrTypeRegDate)
        Me.tableEnrollSubjectsbyStudentSemYrPk = New EnrollSubjectsbyStudentSemYrPkDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsbyStudentSemYrPk)
        Me.tableGradesbyStudentPK = New GradesbyStudentPKDataTable
        MyBase.Tables.Add(Me.tableGradesbyStudentPK)
        Me.tableSubjects = New SubjectsDataTable
        MyBase.Tables.Add(Me.tableSubjects)
        Me.tableEnrollHeaderCountbySex = New EnrollHeaderCountbySexDataTable
        MyBase.Tables.Add(Me.tableEnrollHeaderCountbySex)
        Me.tableEnrollSubjectCountbyCourse = New EnrollSubjectCountbyCourseDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectCountbyCourse)
        Me.tableEnrollHeaderCountbyyearlevel = New EnrollHeaderCountbyyearlevelDataTable
        MyBase.Tables.Add(Me.tableEnrollHeaderCountbyyearlevel)
        Me.tableEnrollSubjectCountbySubject = New EnrollSubjectCountbySubjectDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectCountbySubject)
        Me.tableReceiptsHeaderByStatus = New ReceiptsHeaderByStatusDataTable
        MyBase.Tables.Add(Me.tableReceiptsHeaderByStatus)
        Me.tableStudentsCrosstab = New StudentsCrosstabDataTable
        MyBase.Tables.Add(Me.tableStudentsCrosstab)
        Me.tableClassList = New ClassListDataTable
        MyBase.Tables.Add(Me.tableClassList)
        Me.tableEnrollmentList = New EnrollmentListDataTable
        MyBase.Tables.Add(Me.tableEnrollmentList)
        Me.tableReceivablesReport = New ReceivablesReportDataTable
        MyBase.Tables.Add(Me.tableReceivablesReport)
        Me.tableCollegiateGradingSheet = New CollegiateGradingSheetDataTable
        MyBase.Tables.Add(Me.tableCollegiateGradingSheet)
        Me.tablePromotionalReport = New PromotionalReportDataTable
        MyBase.Tables.Add(Me.tablePromotionalReport)
        Me.tableGradesMailingList = New GradesMailingListDataTable
        MyBase.Tables.Add(Me.tableGradesMailingList)
        Me.tableStudentPermanentRecord = New StudentPermanentRecordDataTable
        MyBase.Tables.Add(Me.tableStudentPermanentRecord)
        Me.tableTemplateStatisticsReport = New TemplateStatisticsReportDataTable
        MyBase.Tables.Add(Me.tableTemplateStatisticsReport)
        Me.tableStudentSchedule = New StudentScheduleDataTable
        MyBase.Tables.Add(Me.tableStudentSchedule)
        Me.tableTemplateClassCard = New TemplateClassCardDataTable
        MyBase.Tables.Add(Me.tableTemplateClassCard)
        Me.tableTemplateEvaluationReport = New TemplateEvaluationReportDataTable
        MyBase.Tables.Add(Me.tableTemplateEvaluationReport)
        Me.tableTemplateCollectionsReport = New TemplateCollectionsReportDataTable
        MyBase.Tables.Add(Me.tableTemplateCollectionsReport)
        Me.tableTemplateCollectionsHistoryReport = New TemplateCollectionsHistoryReportDataTable
        MyBase.Tables.Add(Me.tableTemplateCollectionsHistoryReport)
        Me.tableTemplateCollectionBreakdown = New TemplateCollectionBreakdownDataTable
        MyBase.Tables.Add(Me.tableTemplateCollectionBreakdown)
        Me.tableTemplateSAO = New TemplateSAODataTable
        MyBase.Tables.Add(Me.tableTemplateSAO)
        Me.tableTemplateEvaluationCurriculumReport = New TemplateEvaluationCurriculumReportDataTable
        MyBase.Tables.Add(Me.tableTemplateEvaluationCurriculumReport)
        Me.tableTemplateStudentsReports = New TemplateStudentsReportsDataTable
        MyBase.Tables.Add(Me.tableTemplateStudentsReports)
        Me.tableBrokenHoursTemplate = New BrokenHoursTemplateDataTable
        MyBase.Tables.Add(Me.tableBrokenHoursTemplate)
        Me.tableTOR = New TORDataTable
        MyBase.Tables.Add(Me.tableTOR)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsbyStudent() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentsByCourseYrTypeRegDate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsbyStudentSemYrPk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGradesbyStudentPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubjects() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollHeaderCountbySex() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectCountbyCourse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollHeaderCountbyyearlevel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectCountbySubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReceiptsHeaderByStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentsCrosstab() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClassList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollmentList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReceivablesReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCollegiateGradingSheet() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePromotionalReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGradesMailingList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentPermanentRecord() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateStatisticsReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentSchedule() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateClassCard() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateEvaluationReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateCollectionsReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateCollectionsHistoryReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateCollectionBreakdown() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateSAO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateEvaluationCurriculumReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateStudentsReports() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBrokenHoursTemplate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRep = New dsRep
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub StudentsRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsbyStudentRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsbyStudentRowChangeEvent)
    
    Public Delegate Sub StudentsByCourseYrTypeRegDateRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsByCourseYrTypeRegDateRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsbyStudentSemYrPkRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsbyStudentSemYrPkRowChangeEvent)
    
    Public Delegate Sub GradesbyStudentPKRowChangeEventHandler(ByVal sender As Object, ByVal e As GradesbyStudentPKRowChangeEvent)
    
    Public Delegate Sub SubjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As SubjectsRowChangeEvent)
    
    Public Delegate Sub EnrollHeaderCountbySexRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollHeaderCountbySexRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectCountbyCourseRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectCountbyCourseRowChangeEvent)
    
    Public Delegate Sub EnrollHeaderCountbyyearlevelRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollHeaderCountbyyearlevelRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectCountbySubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectCountbySubjectRowChangeEvent)
    
    Public Delegate Sub ReceiptsHeaderByStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ReceiptsHeaderByStatusRowChangeEvent)
    
    Public Delegate Sub StudentsCrosstabRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsCrosstabRowChangeEvent)
    
    Public Delegate Sub ClassListRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassListRowChangeEvent)
    
    Public Delegate Sub EnrollmentListRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollmentListRowChangeEvent)
    
    Public Delegate Sub ReceivablesReportRowChangeEventHandler(ByVal sender As Object, ByVal e As ReceivablesReportRowChangeEvent)
    
    Public Delegate Sub CollegiateGradingSheetRowChangeEventHandler(ByVal sender As Object, ByVal e As CollegiateGradingSheetRowChangeEvent)
    
    Public Delegate Sub PromotionalReportRowChangeEventHandler(ByVal sender As Object, ByVal e As PromotionalReportRowChangeEvent)
    
    Public Delegate Sub GradesMailingListRowChangeEventHandler(ByVal sender As Object, ByVal e As GradesMailingListRowChangeEvent)
    
    Public Delegate Sub StudentPermanentRecordRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentPermanentRecordRowChangeEvent)
    
    Public Delegate Sub TemplateStatisticsReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateStatisticsReportRowChangeEvent)
    
    Public Delegate Sub StudentScheduleRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentScheduleRowChangeEvent)
    
    Public Delegate Sub TemplateClassCardRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateClassCardRowChangeEvent)
    
    Public Delegate Sub TemplateEvaluationReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateEvaluationReportRowChangeEvent)
    
    Public Delegate Sub TemplateCollectionsReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateCollectionsReportRowChangeEvent)
    
    Public Delegate Sub TemplateCollectionsHistoryReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateCollectionsHistoryReportRowChangeEvent)
    
    Public Delegate Sub TemplateCollectionBreakdownRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateCollectionBreakdownRowChangeEvent)
    
    Public Delegate Sub TemplateSAORowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateSAORowChangeEvent)
    
    Public Delegate Sub TemplateEvaluationCurriculumReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateEvaluationCurriculumReportRowChangeEvent)
    
    Public Delegate Sub TemplateStudentsReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateStudentsReportsRowChangeEvent)
    
    Public Delegate Sub BrokenHoursTemplateRowChangeEventHandler(ByVal sender As Object, ByVal e As BrokenHoursTemplateRowChangeEvent)
    
    Public Delegate Sub TORRowChangeEventHandler(ByVal sender As Object, ByVal e As TORRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Students"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsRow
            Get
                Return CType(Me.Rows(index),StudentsRow)
            End Get
        End Property
        
        Public Event StudentsRowChanging As StudentsRowChangeEventHandler
        
        Public Event StudentsRowChanged As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleting As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleted As StudentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String) As StudentsRow
            Dim rowStudentsRow As StudentsRow = CType(Me.NewRow,StudentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4}
            rowStudentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsRow)
            Return rowStudentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsDataTable = CType(MyBase.Clone,StudentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 1000
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 1000
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 1000
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 300
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 300
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 300
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 300
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsRow() As StudentsRow
            Return CType(Me.NewRow,StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanged(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanging(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleted(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleting(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsbyStudentDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsbyStudentRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsbyStudent"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsbyStudentRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsbyStudentRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsbyStudentRowChanging As EnrollSubjectsbyStudentRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentRowChanged As EnrollSubjectsbyStudentRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentRowDeleting As EnrollSubjectsbyStudentRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentRowDeleted As EnrollSubjectsbyStudentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsbyStudentRow(ByVal row As EnrollSubjectsbyStudentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsbyStudentRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjectsbyStudentRow
            Dim rowEnrollSubjectsbyStudentRow As EnrollSubjectsbyStudentRow = CType(Me.NewRow,EnrollSubjectsbyStudentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjectsbyStudentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsbyStudentRow)
            Return rowEnrollSubjectsbyStudentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsbyStudentRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsbyStudentDataTable = CType(MyBase.Clone,EnrollSubjectsbyStudentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsbyStudentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsbyStudentRow() As EnrollSubjectsbyStudentRow
            Return CType(Me.NewRow,EnrollSubjectsbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsbyStudentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsbyStudentRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentRowChanged(Me, New EnrollSubjectsbyStudentRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsbyStudentRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentRowChanging(Me, New EnrollSubjectsbyStudentRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsbyStudentRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentRowDeleted(Me, New EnrollSubjectsbyStudentRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsbyStudentRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentRowDeleting(Me, New EnrollSubjectsbyStudentRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsbyStudentRow(ByVal row As EnrollSubjectsbyStudentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsbyStudentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsByCourseYrTypeRegDateDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsByCourseYrTypeRegDateRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentsByCourseYrTypeRegDate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsByCourseYrTypeRegDateRow
            Get
                Return CType(Me.Rows(index),StudentsByCourseYrTypeRegDateRow)
            End Get
        End Property
        
        Public Event StudentsByCourseYrTypeRegDateRowChanging As StudentsByCourseYrTypeRegDateRowChangeEventHandler
        
        Public Event StudentsByCourseYrTypeRegDateRowChanged As StudentsByCourseYrTypeRegDateRowChangeEventHandler
        
        Public Event StudentsByCourseYrTypeRegDateRowDeleting As StudentsByCourseYrTypeRegDateRowChangeEventHandler
        
        Public Event StudentsByCourseYrTypeRegDateRowDeleted As StudentsByCourseYrTypeRegDateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsByCourseYrTypeRegDateRow(ByVal row As StudentsByCourseYrTypeRegDateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsByCourseYrTypeRegDateRow(ByVal regDate As Date, ByVal StudentType As String, ByVal yrlevel As Integer, ByVal Gender As String, ByVal StudentName As String, ByVal StudentID As String) As StudentsByCourseYrTypeRegDateRow
            Dim rowStudentsByCourseYrTypeRegDateRow As StudentsByCourseYrTypeRegDateRow = CType(Me.NewRow,StudentsByCourseYrTypeRegDateRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, regDate, StudentType, yrlevel, Gender, StudentName, StudentID}
            rowStudentsByCourseYrTypeRegDateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsByCourseYrTypeRegDateRow)
            Return rowStudentsByCourseYrTypeRegDateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsByCourseYrTypeRegDateRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsByCourseYrTypeRegDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsByCourseYrTypeRegDateDataTable = CType(MyBase.Clone,StudentsByCourseYrTypeRegDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsByCourseYrTypeRegDateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnregDate = MyBase.Columns("regDate")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnStudentID = MyBase.Columns("StudentID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentType.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsByCourseYrTypeRegDateRow() As StudentsByCourseYrTypeRegDateRow
            Return CType(Me.NewRow,StudentsByCourseYrTypeRegDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsByCourseYrTypeRegDateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsByCourseYrTypeRegDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsByCourseYrTypeRegDateRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsByCourseYrTypeRegDateRowChanged(Me, New StudentsByCourseYrTypeRegDateRowChangeEvent(CType(e.Row,StudentsByCourseYrTypeRegDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsByCourseYrTypeRegDateRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsByCourseYrTypeRegDateRowChanging(Me, New StudentsByCourseYrTypeRegDateRowChangeEvent(CType(e.Row,StudentsByCourseYrTypeRegDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsByCourseYrTypeRegDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsByCourseYrTypeRegDateRowDeleted(Me, New StudentsByCourseYrTypeRegDateRowChangeEvent(CType(e.Row,StudentsByCourseYrTypeRegDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsByCourseYrTypeRegDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsByCourseYrTypeRegDateRowDeleting(Me, New StudentsByCourseYrTypeRegDateRowChangeEvent(CType(e.Row,StudentsByCourseYrTypeRegDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsByCourseYrTypeRegDateRow(ByVal row As StudentsByCourseYrTypeRegDateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsByCourseYrTypeRegDateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsbyStudentSemYrPkDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsbyStudentSemYrPkRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsbyStudentSemYrPk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsbyStudentSemYrPkRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsbyStudentSemYrPkRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsbyStudentSemYrPkRowChanging As EnrollSubjectsbyStudentSemYrPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentSemYrPkRowChanged As EnrollSubjectsbyStudentSemYrPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentSemYrPkRowDeleting As EnrollSubjectsbyStudentSemYrPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyStudentSemYrPkRowDeleted As EnrollSubjectsbyStudentSemYrPkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsbyStudentSemYrPkRow(ByVal row As EnrollSubjectsbyStudentSemYrPkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsbyStudentSemYrPkRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjectsbyStudentSemYrPkRow
            Dim rowEnrollSubjectsbyStudentSemYrPkRow As EnrollSubjectsbyStudentSemYrPkRow = CType(Me.NewRow,EnrollSubjectsbyStudentSemYrPkRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjectsbyStudentSemYrPkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsbyStudentSemYrPkRow)
            Return rowEnrollSubjectsbyStudentSemYrPkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsbyStudentSemYrPkRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsbyStudentSemYrPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsbyStudentSemYrPkDataTable = CType(MyBase.Clone,EnrollSubjectsbyStudentSemYrPkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsbyStudentSemYrPkDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsbyStudentSemYrPkRow() As EnrollSubjectsbyStudentSemYrPkRow
            Return CType(Me.NewRow,EnrollSubjectsbyStudentSemYrPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsbyStudentSemYrPkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsbyStudentSemYrPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsbyStudentSemYrPkRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentSemYrPkRowChanged(Me, New EnrollSubjectsbyStudentSemYrPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentSemYrPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsbyStudentSemYrPkRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentSemYrPkRowChanging(Me, New EnrollSubjectsbyStudentSemYrPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentSemYrPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsbyStudentSemYrPkRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentSemYrPkRowDeleted(Me, New EnrollSubjectsbyStudentSemYrPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentSemYrPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsbyStudentSemYrPkRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyStudentSemYrPkRowDeleting(Me, New EnrollSubjectsbyStudentSemYrPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyStudentSemYrPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsbyStudentSemYrPkRow(ByVal row As EnrollSubjectsbyStudentSemYrPkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsbyStudentSemYrPkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GradesbyStudentPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of GradesbyStudentPKRow)
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columnexSubjectUnits As Global.System.Data.DataColumn
        
        Private columnexCreditGroup As Global.System.Data.DataColumn
        
        Private columnexSubjectCode As Global.System.Data.DataColumn
        
        Private columnexCompletionGrade As Global.System.Data.DataColumn
        
        Private columnisPrevSchoolGrade As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GradesbyStudentPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isPrevSchoolGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisPrevSchoolGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GradesbyStudentPKRow
            Get
                Return CType(Me.Rows(index),GradesbyStudentPKRow)
            End Get
        End Property
        
        Public Event GradesbyStudentPKRowChanging As GradesbyStudentPKRowChangeEventHandler
        
        Public Event GradesbyStudentPKRowChanged As GradesbyStudentPKRowChangeEventHandler
        
        Public Event GradesbyStudentPKRowDeleting As GradesbyStudentPKRowChangeEventHandler
        
        Public Event GradesbyStudentPKRowDeleted As GradesbyStudentPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGradesbyStudentPKRow(ByVal row As GradesbyStudentPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGradesbyStudentPKRow( _
                    ByVal sempk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal sypk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal exSubjectUnits As Integer,  _
                    ByVal exCreditGroup As Integer,  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Decimal,  _
                    ByVal isPrevSchoolGrade As Boolean,  _
                    ByVal SchoolYear As String,  _
                    ByVal Sorter As Integer) As GradesbyStudentPKRow
            Dim rowGradesbyStudentPKRow As GradesbyStudentPKRow = CType(Me.NewRow,GradesbyStudentPKRow)
            Dim columnValuesArray() As Object = New Object() {sempk, studentpk, subjectpk, coursepk, Nothing, datein, grade, keythrough, sypk, teacherpk, extSubjectID, exSubjectDesc, exSubjectGrade, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, SchoolYear, Sorter}
            rowGradesbyStudentPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGradesbyStudentPKRow)
            Return rowGradesbyStudentPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As GradesbyStudentPKRow
            Return CType(Me.Rows.Find(New Object() {pk}),GradesbyStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GradesbyStudentPKDataTable = CType(MyBase.Clone,GradesbyStudentPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GradesbyStudentPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columnexSubjectUnits = MyBase.Columns("exSubjectUnits")
            Me.columnexCreditGroup = MyBase.Columns("exCreditGroup")
            Me.columnexSubjectCode = MyBase.Columns("exSubjectCode")
            Me.columnexCompletionGrade = MyBase.Columns("exCompletionGrade")
            Me.columnisPrevSchoolGrade = MyBase.Columns("isPrevSchoolGrade")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSorter = MyBase.Columns("Sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columnexSubjectUnits = New Global.System.Data.DataColumn("exSubjectUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectUnits)
            Me.columnexCreditGroup = New Global.System.Data.DataColumn("exCreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCreditGroup)
            Me.columnexSubjectCode = New Global.System.Data.DataColumn("exSubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectCode)
            Me.columnexCompletionGrade = New Global.System.Data.DataColumn("exCompletionGrade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCompletionGrade)
            Me.columnisPrevSchoolGrade = New Global.System.Data.DataColumn("isPrevSchoolGrade", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisPrevSchoolGrade)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSorter = New Global.System.Data.DataColumn("Sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsypk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columnexSubjectCode.MaxLength = 1000
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGradesbyStudentPKRow() As GradesbyStudentPKRow
            Return CType(Me.NewRow,GradesbyStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GradesbyStudentPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GradesbyStudentPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GradesbyStudentPKRowChangedEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentPKRowChanged(Me, New GradesbyStudentPKRowChangeEvent(CType(e.Row,GradesbyStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GradesbyStudentPKRowChangingEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentPKRowChanging(Me, New GradesbyStudentPKRowChangeEvent(CType(e.Row,GradesbyStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GradesbyStudentPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentPKRowDeleted(Me, New GradesbyStudentPKRowChangeEvent(CType(e.Row,GradesbyStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GradesbyStudentPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent GradesbyStudentPKRowDeleting(Me, New GradesbyStudentPKRowChangeEvent(CType(e.Row,GradesbyStudentPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGradesbyStudentPKRow(ByVal row As GradesbyStudentPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GradesbyStudentPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubjectsDataTable
        Inherits Global.System.Data.TypedTableBase(Of SubjectsRow)
        
        Private columnSubjectPriKey As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnlabunits As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnprereq As Global.System.Data.DataColumn
        
        Private columnmajor As Global.System.Data.DataColumn
        
        Private columnprereq2 As Global.System.Data.DataColumn
        
        Private columnprereq3 As Global.System.Data.DataColumn
        
        Private columnprereq4 As Global.System.Data.DataColumn
        
        Private columnprereq5 As Global.System.Data.DataColumn
        
        Private columnprereq6 As Global.System.Data.DataColumn
        
        Private columnprereq7 As Global.System.Data.DataColumn
        
        Private columncreditgroup As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Subjects"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectPriKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectPriKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property labunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlabunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property majorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prereq7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnprereq7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property creditgroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreditgroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubjectsRow
            Get
                Return CType(Me.Rows(index),SubjectsRow)
            End Get
        End Property
        
        Public Event SubjectsRowChanging As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowChanged As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowDeleting As SubjectsRowChangeEventHandler
        
        Public Event SubjectsRowDeleted As SubjectsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubjectsRow(ByVal row As SubjectsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubjectsRow(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal labunits As Single, ByVal units As Single, ByVal prereq As Integer, ByVal major As Boolean, ByVal prereq2 As Integer, ByVal prereq3 As Integer, ByVal prereq4 As Integer, ByVal prereq5 As Integer, ByVal prereq6 As Integer, ByVal prereq7 As Integer, ByVal creditgroup As Integer) As SubjectsRow
            Dim rowSubjectsRow As SubjectsRow = CType(Me.NewRow,SubjectsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SubjectCode, SubjectName, Remarks, labunits, units, prereq, major, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, creditgroup}
            rowSubjectsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubjectsRow)
            Return rowSubjectsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySubjectPriKey(ByVal SubjectPriKey As Integer) As SubjectsRow
            Return CType(Me.Rows.Find(New Object() {SubjectPriKey}),SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubjectsDataTable = CType(MyBase.Clone,SubjectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubjectsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectPriKey = MyBase.Columns("SubjectPriKey")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnlabunits = MyBase.Columns("labunits")
            Me.columnunits = MyBase.Columns("units")
            Me.columnprereq = MyBase.Columns("prereq")
            Me.columnmajor = MyBase.Columns("major")
            Me.columnprereq2 = MyBase.Columns("prereq2")
            Me.columnprereq3 = MyBase.Columns("prereq3")
            Me.columnprereq4 = MyBase.Columns("prereq4")
            Me.columnprereq5 = MyBase.Columns("prereq5")
            Me.columnprereq6 = MyBase.Columns("prereq6")
            Me.columnprereq7 = MyBase.Columns("prereq7")
            Me.columncreditgroup = MyBase.Columns("creditgroup")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectPriKey = New Global.System.Data.DataColumn("SubjectPriKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectPriKey)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnlabunits = New Global.System.Data.DataColumn("labunits", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlabunits)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnprereq = New Global.System.Data.DataColumn("prereq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq)
            Me.columnmajor = New Global.System.Data.DataColumn("major", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmajor)
            Me.columnprereq2 = New Global.System.Data.DataColumn("prereq2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq2)
            Me.columnprereq3 = New Global.System.Data.DataColumn("prereq3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq3)
            Me.columnprereq4 = New Global.System.Data.DataColumn("prereq4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq4)
            Me.columnprereq5 = New Global.System.Data.DataColumn("prereq5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq5)
            Me.columnprereq6 = New Global.System.Data.DataColumn("prereq6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq6)
            Me.columnprereq7 = New Global.System.Data.DataColumn("prereq7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprereq7)
            Me.columncreditgroup = New Global.System.Data.DataColumn("creditgroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreditgroup)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSubjectPriKey}, true))
            Me.columnSubjectPriKey.AutoIncrement = true
            Me.columnSubjectPriKey.AllowDBNull = false
            Me.columnSubjectPriKey.ReadOnly = true
            Me.columnSubjectPriKey.Unique = true
            Me.columnSubjectCode.AllowDBNull = false
            Me.columnSubjectCode.MaxLength = 50
            Me.columnSubjectName.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 50
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
            Me.columnunits.AllowDBNull = false
            Me.columnprereq.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubjectsRow() As SubjectsRow
            Return CType(Me.NewRow,SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubjectsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubjectsRowChangedEvent) Is Nothing) Then
                RaiseEvent SubjectsRowChanged(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubjectsRowChangingEvent) Is Nothing) Then
                RaiseEvent SubjectsRowChanging(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubjectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubjectsRowDeleted(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubjectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubjectsRowDeleting(Me, New SubjectsRowChangeEvent(CType(e.Row,SubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubjectsRow(ByVal row As SubjectsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubjectsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollHeaderCountbySexDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollHeaderCountbySexRow)
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnGenderCount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollHeaderCountbySex"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenderCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollHeaderCountbySexRow
            Get
                Return CType(Me.Rows(index),EnrollHeaderCountbySexRow)
            End Get
        End Property
        
        Public Event EnrollHeaderCountbySexRowChanging As EnrollHeaderCountbySexRowChangeEventHandler
        
        Public Event EnrollHeaderCountbySexRowChanged As EnrollHeaderCountbySexRowChangeEventHandler
        
        Public Event EnrollHeaderCountbySexRowDeleting As EnrollHeaderCountbySexRowChangeEventHandler
        
        Public Event EnrollHeaderCountbySexRowDeleted As EnrollHeaderCountbySexRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollHeaderCountbySexRow(ByVal row As EnrollHeaderCountbySexRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollHeaderCountbySexRow(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal Gender As String, ByVal GenderCount As Integer) As EnrollHeaderCountbySexRow
            Dim rowEnrollHeaderCountbySexRow As EnrollHeaderCountbySexRow = CType(Me.NewRow,EnrollHeaderCountbySexRow)
            Dim columnValuesArray() As Object = New Object() {sempk, yearpk, Gender, GenderCount}
            rowEnrollHeaderCountbySexRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollHeaderCountbySexRow)
            Return rowEnrollHeaderCountbySexRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollHeaderCountbySexDataTable = CType(MyBase.Clone,EnrollHeaderCountbySexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollHeaderCountbySexDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnGenderCount = MyBase.Columns("GenderCount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnGenderCount = New Global.System.Data.DataColumn("GenderCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenderCount)
            Me.columnsempk.AllowDBNull = false
            Me.columnyearpk.AllowDBNull = false
            Me.columnGender.MaxLength = 50
            Me.columnGenderCount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollHeaderCountbySexRow() As EnrollHeaderCountbySexRow
            Return CType(Me.NewRow,EnrollHeaderCountbySexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollHeaderCountbySexRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollHeaderCountbySexRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollHeaderCountbySexRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbySexRowChanged(Me, New EnrollHeaderCountbySexRowChangeEvent(CType(e.Row,EnrollHeaderCountbySexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollHeaderCountbySexRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbySexRowChanging(Me, New EnrollHeaderCountbySexRowChangeEvent(CType(e.Row,EnrollHeaderCountbySexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollHeaderCountbySexRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbySexRowDeleted(Me, New EnrollHeaderCountbySexRowChangeEvent(CType(e.Row,EnrollHeaderCountbySexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollHeaderCountbySexRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbySexRowDeleting(Me, New EnrollHeaderCountbySexRowChangeEvent(CType(e.Row,EnrollHeaderCountbySexRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollHeaderCountbySexRow(ByVal row As EnrollHeaderCountbySexRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollHeaderCountbySexDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectCountbyCourseDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectCountbyCourseRow)
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnEnrollCount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectCountbyCourse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrollCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrollCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectCountbyCourseRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectCountbyCourseRow)
            End Get
        End Property
        
        Public Event EnrollSubjectCountbyCourseRowChanging As EnrollSubjectCountbyCourseRowChangeEventHandler
        
        Public Event EnrollSubjectCountbyCourseRowChanged As EnrollSubjectCountbyCourseRowChangeEventHandler
        
        Public Event EnrollSubjectCountbyCourseRowDeleting As EnrollSubjectCountbyCourseRowChangeEventHandler
        
        Public Event EnrollSubjectCountbyCourseRowDeleted As EnrollSubjectCountbyCourseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectCountbyCourseRow(ByVal row As EnrollSubjectCountbyCourseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectCountbyCourseRow(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal coursepk As Integer, ByVal EnrollCount As Integer) As EnrollSubjectCountbyCourseRow
            Dim rowEnrollSubjectCountbyCourseRow As EnrollSubjectCountbyCourseRow = CType(Me.NewRow,EnrollSubjectCountbyCourseRow)
            Dim columnValuesArray() As Object = New Object() {sempk, yearpk, coursepk, EnrollCount}
            rowEnrollSubjectCountbyCourseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectCountbyCourseRow)
            Return rowEnrollSubjectCountbyCourseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectCountbyCourseDataTable = CType(MyBase.Clone,EnrollSubjectCountbyCourseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectCountbyCourseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnEnrollCount = MyBase.Columns("EnrollCount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnEnrollCount = New Global.System.Data.DataColumn("EnrollCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrollCount)
            Me.columnsempk.AllowDBNull = false
            Me.columnyearpk.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnEnrollCount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectCountbyCourseRow() As EnrollSubjectCountbyCourseRow
            Return CType(Me.NewRow,EnrollSubjectCountbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectCountbyCourseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectCountbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectCountbyCourseRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbyCourseRowChanged(Me, New EnrollSubjectCountbyCourseRowChangeEvent(CType(e.Row,EnrollSubjectCountbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectCountbyCourseRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbyCourseRowChanging(Me, New EnrollSubjectCountbyCourseRowChangeEvent(CType(e.Row,EnrollSubjectCountbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectCountbyCourseRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbyCourseRowDeleted(Me, New EnrollSubjectCountbyCourseRowChangeEvent(CType(e.Row,EnrollSubjectCountbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectCountbyCourseRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbyCourseRowDeleting(Me, New EnrollSubjectCountbyCourseRowChangeEvent(CType(e.Row,EnrollSubjectCountbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectCountbyCourseRow(ByVal row As EnrollSubjectCountbyCourseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectCountbyCourseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollHeaderCountbyyearlevelDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollHeaderCountbyyearlevelRow)
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columnEnrollCount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollHeaderCountbyyearlevel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrollCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrollCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollHeaderCountbyyearlevelRow
            Get
                Return CType(Me.Rows(index),EnrollHeaderCountbyyearlevelRow)
            End Get
        End Property
        
        Public Event EnrollHeaderCountbyyearlevelRowChanging As EnrollHeaderCountbyyearlevelRowChangeEventHandler
        
        Public Event EnrollHeaderCountbyyearlevelRowChanged As EnrollHeaderCountbyyearlevelRowChangeEventHandler
        
        Public Event EnrollHeaderCountbyyearlevelRowDeleting As EnrollHeaderCountbyyearlevelRowChangeEventHandler
        
        Public Event EnrollHeaderCountbyyearlevelRowDeleted As EnrollHeaderCountbyyearlevelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollHeaderCountbyyearlevelRow(ByVal row As EnrollHeaderCountbyyearlevelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollHeaderCountbyyearlevelRow(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal yrlevel As Integer, ByVal EnrollCount As Integer) As EnrollHeaderCountbyyearlevelRow
            Dim rowEnrollHeaderCountbyyearlevelRow As EnrollHeaderCountbyyearlevelRow = CType(Me.NewRow,EnrollHeaderCountbyyearlevelRow)
            Dim columnValuesArray() As Object = New Object() {sempk, yearpk, yrlevel, EnrollCount}
            rowEnrollHeaderCountbyyearlevelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollHeaderCountbyyearlevelRow)
            Return rowEnrollHeaderCountbyyearlevelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollHeaderCountbyyearlevelDataTable = CType(MyBase.Clone,EnrollHeaderCountbyyearlevelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollHeaderCountbyyearlevelDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columnEnrollCount = MyBase.Columns("EnrollCount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columnEnrollCount = New Global.System.Data.DataColumn("EnrollCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrollCount)
            Me.columnsempk.AllowDBNull = false
            Me.columnyearpk.AllowDBNull = false
            Me.columnEnrollCount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollHeaderCountbyyearlevelRow() As EnrollHeaderCountbyyearlevelRow
            Return CType(Me.NewRow,EnrollHeaderCountbyyearlevelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollHeaderCountbyyearlevelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollHeaderCountbyyearlevelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollHeaderCountbyyearlevelRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbyyearlevelRowChanged(Me, New EnrollHeaderCountbyyearlevelRowChangeEvent(CType(e.Row,EnrollHeaderCountbyyearlevelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollHeaderCountbyyearlevelRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbyyearlevelRowChanging(Me, New EnrollHeaderCountbyyearlevelRowChangeEvent(CType(e.Row,EnrollHeaderCountbyyearlevelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollHeaderCountbyyearlevelRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbyyearlevelRowDeleted(Me, New EnrollHeaderCountbyyearlevelRowChangeEvent(CType(e.Row,EnrollHeaderCountbyyearlevelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollHeaderCountbyyearlevelRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderCountbyyearlevelRowDeleting(Me, New EnrollHeaderCountbyyearlevelRowChangeEvent(CType(e.Row,EnrollHeaderCountbyyearlevelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollHeaderCountbyyearlevelRow(ByVal row As EnrollHeaderCountbyyearlevelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollHeaderCountbyyearlevelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectCountbySubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectCountbySubjectRow)
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnEnrollCount As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectCountbySubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrollCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrollCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectCountbySubjectRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectCountbySubjectRow)
            End Get
        End Property
        
        Public Event EnrollSubjectCountbySubjectRowChanging As EnrollSubjectCountbySubjectRowChangeEventHandler
        
        Public Event EnrollSubjectCountbySubjectRowChanged As EnrollSubjectCountbySubjectRowChangeEventHandler
        
        Public Event EnrollSubjectCountbySubjectRowDeleting As EnrollSubjectCountbySubjectRowChangeEventHandler
        
        Public Event EnrollSubjectCountbySubjectRowDeleted As EnrollSubjectCountbySubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectCountbySubjectRow(ByVal row As EnrollSubjectCountbySubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectCountbySubjectRow(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal EnrollCount As Integer, ByVal subjectpk As Integer) As EnrollSubjectCountbySubjectRow
            Dim rowEnrollSubjectCountbySubjectRow As EnrollSubjectCountbySubjectRow = CType(Me.NewRow,EnrollSubjectCountbySubjectRow)
            Dim columnValuesArray() As Object = New Object() {sempk, yearpk, EnrollCount, subjectpk}
            rowEnrollSubjectCountbySubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectCountbySubjectRow)
            Return rowEnrollSubjectCountbySubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectCountbySubjectDataTable = CType(MyBase.Clone,EnrollSubjectCountbySubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectCountbySubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnEnrollCount = MyBase.Columns("EnrollCount")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnEnrollCount = New Global.System.Data.DataColumn("EnrollCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrollCount)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsempk.AllowDBNull = false
            Me.columnyearpk.AllowDBNull = false
            Me.columnEnrollCount.ReadOnly = true
            Me.columnsubjectpk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectCountbySubjectRow() As EnrollSubjectCountbySubjectRow
            Return CType(Me.NewRow,EnrollSubjectCountbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectCountbySubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectCountbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectCountbySubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbySubjectRowChanged(Me, New EnrollSubjectCountbySubjectRowChangeEvent(CType(e.Row,EnrollSubjectCountbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectCountbySubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbySubjectRowChanging(Me, New EnrollSubjectCountbySubjectRowChangeEvent(CType(e.Row,EnrollSubjectCountbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectCountbySubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbySubjectRowDeleted(Me, New EnrollSubjectCountbySubjectRowChangeEvent(CType(e.Row,EnrollSubjectCountbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectCountbySubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectCountbySubjectRowDeleting(Me, New EnrollSubjectCountbySubjectRowChangeEvent(CType(e.Row,EnrollSubjectCountbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectCountbySubjectRow(ByVal row As EnrollSubjectCountbySubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectCountbySubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReceiptsHeaderByStatusDataTable
        Inherits Global.System.Data.TypedTableBase(Of ReceiptsHeaderByStatusRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnTRDate As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnReceivedFrom As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnCancelled As Global.System.Data.DataColumn
        
        Private columnStudentpk As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnpayperiod As Global.System.Data.DataColumn
        
        Private columncashier As Global.System.Data.DataColumn
        
        Private columnsemPK As Global.System.Data.DataColumn
        
        Private columnyearPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReceiptsHeaderByStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CancelledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCancelled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property payperiodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayperiod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReceiptsHeaderByStatusRow
            Get
                Return CType(Me.Rows(index),ReceiptsHeaderByStatusRow)
            End Get
        End Property
        
        Public Event ReceiptsHeaderByStatusRowChanging As ReceiptsHeaderByStatusRowChangeEventHandler
        
        Public Event ReceiptsHeaderByStatusRowChanged As ReceiptsHeaderByStatusRowChangeEventHandler
        
        Public Event ReceiptsHeaderByStatusRowDeleting As ReceiptsHeaderByStatusRowChangeEventHandler
        
        Public Event ReceiptsHeaderByStatusRowDeleted As ReceiptsHeaderByStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReceiptsHeaderByStatusRow(ByVal row As ReceiptsHeaderByStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReceiptsHeaderByStatusRow(ByVal TRDate As Date, ByVal Reference As String, ByVal ReceivedFrom As String, ByVal Amount As Decimal, ByVal Cancelled As Integer, ByVal Studentpk As Integer, ByVal Remarks As String, ByVal payperiod As Integer, ByVal cashier As String, ByVal semPK As Integer, ByVal yearPK As Integer) As ReceiptsHeaderByStatusRow
            Dim rowReceiptsHeaderByStatusRow As ReceiptsHeaderByStatusRow = CType(Me.NewRow,ReceiptsHeaderByStatusRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TRDate, Reference, ReceivedFrom, Amount, Cancelled, Studentpk, Remarks, payperiod, cashier, semPK, yearPK}
            rowReceiptsHeaderByStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReceiptsHeaderByStatusRow)
            Return rowReceiptsHeaderByStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As ReceiptsHeaderByStatusRow
            Return CType(Me.Rows.Find(New Object() {PK}),ReceiptsHeaderByStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReceiptsHeaderByStatusDataTable = CType(MyBase.Clone,ReceiptsHeaderByStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReceiptsHeaderByStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnTRDate = MyBase.Columns("TRDate")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnReceivedFrom = MyBase.Columns("ReceivedFrom")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnCancelled = MyBase.Columns("Cancelled")
            Me.columnStudentpk = MyBase.Columns("Studentpk")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnpayperiod = MyBase.Columns("payperiod")
            Me.columncashier = MyBase.Columns("cashier")
            Me.columnsemPK = MyBase.Columns("semPK")
            Me.columnyearPK = MyBase.Columns("yearPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnTRDate = New Global.System.Data.DataColumn("TRDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRDate)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnReceivedFrom = New Global.System.Data.DataColumn("ReceivedFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedFrom)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnCancelled = New Global.System.Data.DataColumn("Cancelled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCancelled)
            Me.columnStudentpk = New Global.System.Data.DataColumn("Studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentpk)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnpayperiod = New Global.System.Data.DataColumn("payperiod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayperiod)
            Me.columncashier = New Global.System.Data.DataColumn("cashier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashier)
            Me.columnsemPK = New Global.System.Data.DataColumn("semPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemPK)
            Me.columnyearPK = New Global.System.Data.DataColumn("yearPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnTRDate.AllowDBNull = false
            Me.columnReference.AllowDBNull = false
            Me.columnReference.MaxLength = 50
            Me.columnReceivedFrom.AllowDBNull = false
            Me.columnReceivedFrom.MaxLength = 50
            Me.columnAmount.AllowDBNull = false
            Me.columnCancelled.AllowDBNull = false
            Me.columnStudentpk.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columncashier.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReceiptsHeaderByStatusRow() As ReceiptsHeaderByStatusRow
            Return CType(Me.NewRow,ReceiptsHeaderByStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReceiptsHeaderByStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReceiptsHeaderByStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReceiptsHeaderByStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent ReceiptsHeaderByStatusRowChanged(Me, New ReceiptsHeaderByStatusRowChangeEvent(CType(e.Row,ReceiptsHeaderByStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReceiptsHeaderByStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent ReceiptsHeaderByStatusRowChanging(Me, New ReceiptsHeaderByStatusRowChangeEvent(CType(e.Row,ReceiptsHeaderByStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReceiptsHeaderByStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReceiptsHeaderByStatusRowDeleted(Me, New ReceiptsHeaderByStatusRowChangeEvent(CType(e.Row,ReceiptsHeaderByStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReceiptsHeaderByStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReceiptsHeaderByStatusRowDeleting(Me, New ReceiptsHeaderByStatusRowChangeEvent(CType(e.Row,ReceiptsHeaderByStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReceiptsHeaderByStatusRow(ByVal row As ReceiptsHeaderByStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReceiptsHeaderByStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsCrosstabDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsCrosstabRow)
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentsCrosstab"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsCrosstabRow
            Get
                Return CType(Me.Rows(index),StudentsCrosstabRow)
            End Get
        End Property
        
        Public Event StudentsCrosstabRowChanging As StudentsCrosstabRowChangeEventHandler
        
        Public Event StudentsCrosstabRowChanged As StudentsCrosstabRowChangeEventHandler
        
        Public Event StudentsCrosstabRowDeleting As StudentsCrosstabRowChangeEventHandler
        
        Public Event StudentsCrosstabRowDeleted As StudentsCrosstabRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsCrosstabRow(ByVal row As StudentsCrosstabRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsCrosstabRow(ByVal StudentName As String, ByVal Gender As String, ByVal yrlevel As Integer, ByVal CourseName As String) As StudentsCrosstabRow
            Dim rowStudentsCrosstabRow As StudentsCrosstabRow = CType(Me.NewRow,StudentsCrosstabRow)
            Dim columnValuesArray() As Object = New Object() {StudentName, Gender, yrlevel, CourseName}
            rowStudentsCrosstabRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsCrosstabRow)
            Return rowStudentsCrosstabRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsCrosstabDataTable = CType(MyBase.Clone,StudentsCrosstabDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsCrosstabDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columnCourseName = MyBase.Columns("CourseName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnCourseName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsCrosstabRow() As StudentsCrosstabRow
            Return CType(Me.NewRow,StudentsCrosstabRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsCrosstabRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsCrosstabRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsCrosstabRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsCrosstabRowChanged(Me, New StudentsCrosstabRowChangeEvent(CType(e.Row,StudentsCrosstabRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsCrosstabRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsCrosstabRowChanging(Me, New StudentsCrosstabRowChangeEvent(CType(e.Row,StudentsCrosstabRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsCrosstabRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsCrosstabRowDeleted(Me, New StudentsCrosstabRowChangeEvent(CType(e.Row,StudentsCrosstabRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsCrosstabRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsCrosstabRowDeleting(Me, New StudentsCrosstabRowChangeEvent(CType(e.Row,StudentsCrosstabRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsCrosstabRow(ByVal row As StudentsCrosstabRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsCrosstabDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClassListDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClassListRow)
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClassList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassListRow
            Get
                Return CType(Me.Rows(index),ClassListRow)
            End Get
        End Property
        
        Public Event ClassListRowChanging As ClassListRowChangeEventHandler
        
        Public Event ClassListRowChanged As ClassListRowChangeEventHandler
        
        Public Event ClassListRowDeleting As ClassListRowChangeEventHandler
        
        Public Event ClassListRowDeleted As ClassListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClassListRow(ByVal row As ClassListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClassListRow(ByVal StudentName As String, ByVal Course As String) As ClassListRow
            Dim rowClassListRow As ClassListRow = CType(Me.NewRow,ClassListRow)
            Dim columnValuesArray() As Object = New Object() {StudentName, Course}
            rowClassListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClassListRow)
            Return rowClassListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClassListDataTable = CType(MyBase.Clone,ClassListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClassListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnCourse = MyBase.Columns("Course")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClassListRow() As ClassListRow
            Return CType(Me.NewRow,ClassListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClassListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClassListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassListRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassListRowChanged(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassListRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassListRowChanging(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassListRowDeleted(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassListRowDeleting(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClassListRow(ByVal row As ClassListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClassListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollmentListDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollmentListRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudent As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnSubj1 As Global.System.Data.DataColumn
        
        Private columnUnits1 As Global.System.Data.DataColumn
        
        Private columnSubj2 As Global.System.Data.DataColumn
        
        Private columnUnits2 As Global.System.Data.DataColumn
        
        Private columnSubj3 As Global.System.Data.DataColumn
        
        Private columnUnits3 As Global.System.Data.DataColumn
        
        Private columnSubj4 As Global.System.Data.DataColumn
        
        Private columnUnits4 As Global.System.Data.DataColumn
        
        Private columnSubj5 As Global.System.Data.DataColumn
        
        Private columnUnits5 As Global.System.Data.DataColumn
        
        Private columnSubj6 As Global.System.Data.DataColumn
        
        Private columnUnits6 As Global.System.Data.DataColumn
        
        Private columnSubj7 As Global.System.Data.DataColumn
        
        Private columnUnits7 As Global.System.Data.DataColumn
        
        Private columnSubj8 As Global.System.Data.DataColumn
        
        Private columnUnits8 As Global.System.Data.DataColumn
        
        Private columnSubj9 As Global.System.Data.DataColumn
        
        Private columnUnits9 As Global.System.Data.DataColumn
        
        Private columnSubj10 As Global.System.Data.DataColumn
        
        Private columnUnits10 As Global.System.Data.DataColumn
        
        Private columnStudentPk As Global.System.Data.DataColumn
        
        Private columnyrLevel As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columnbday As Global.System.Data.DataColumn
        
        Private columntotalunits As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnSubj11 As Global.System.Data.DataColumn
        
        Private columnUnits11 As Global.System.Data.DataColumn
        
        Private columnSubj12 As Global.System.Data.DataColumn
        
        Private columnUnits12 As Global.System.Data.DataColumn
        
        Private columnSubj13 As Global.System.Data.DataColumn
        
        Private columnUnits13 As Global.System.Data.DataColumn
        
        Private columnSubj14 As Global.System.Data.DataColumn
        
        Private columnUnits14 As Global.System.Data.DataColumn
        
        Private columnSubj15 As Global.System.Data.DataColumn
        
        Private columnUnits15 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollmentList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollmentListRow
            Get
                Return CType(Me.Rows(index),EnrollmentListRow)
            End Get
        End Property
        
        Public Event EnrollmentListRowChanging As EnrollmentListRowChangeEventHandler
        
        Public Event EnrollmentListRowChanged As EnrollmentListRowChangeEventHandler
        
        Public Event EnrollmentListRowDeleting As EnrollmentListRowChangeEventHandler
        
        Public Event EnrollmentListRowDeleted As EnrollmentListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollmentListRow(ByVal row As EnrollmentListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollmentListRow( _
                    ByVal Student As String,  _
                    ByVal StudentID As String,  _
                    ByVal Course As String,  _
                    ByVal Subj1 As String,  _
                    ByVal Units1 As String,  _
                    ByVal Subj2 As String,  _
                    ByVal Units2 As String,  _
                    ByVal Subj3 As String,  _
                    ByVal Units3 As String,  _
                    ByVal Subj4 As String,  _
                    ByVal Units4 As String,  _
                    ByVal Subj5 As String,  _
                    ByVal Units5 As String,  _
                    ByVal Subj6 As String,  _
                    ByVal Units6 As String,  _
                    ByVal Subj7 As String,  _
                    ByVal Units7 As String,  _
                    ByVal Subj8 As String,  _
                    ByVal Units8 As String,  _
                    ByVal Subj9 As String,  _
                    ByVal Units9 As String,  _
                    ByVal Subj10 As String,  _
                    ByVal Units10 As String,  _
                    ByVal StudentPk As String,  _
                    ByVal yrLevel As String,  _
                    ByVal sex As String,  _
                    ByVal bday As String,  _
                    ByVal totalunits As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MI As String,  _
                    ByVal Subj11 As String,  _
                    ByVal Units11 As String,  _
                    ByVal Subj12 As String,  _
                    ByVal Units12 As String,  _
                    ByVal Subj13 As String,  _
                    ByVal Units13 As String,  _
                    ByVal Subj14 As String,  _
                    ByVal Units14 As String,  _
                    ByVal Subj15 As String,  _
                    ByVal Units15 As String) As EnrollmentListRow
            Dim rowEnrollmentListRow As EnrollmentListRow = CType(Me.NewRow,EnrollmentListRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Student, StudentID, Course, Subj1, Units1, Subj2, Units2, Subj3, Units3, Subj4, Units4, Subj5, Units5, Subj6, Units6, Subj7, Units7, Subj8, Units8, Subj9, Units9, Subj10, Units10, StudentPk, yrLevel, sex, bday, totalunits, LastName, FirstName, MI, Subj11, Units11, Subj12, Units12, Subj13, Units13, Subj14, Units14, Subj15, Units15}
            rowEnrollmentListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollmentListRow)
            Return rowEnrollmentListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As EnrollmentListRow
            Return CType(Me.Rows.Find(New Object() {pk}),EnrollmentListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollmentListDataTable = CType(MyBase.Clone,EnrollmentListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollmentListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudent = MyBase.Columns("Student")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnSubj1 = MyBase.Columns("Subj1")
            Me.columnUnits1 = MyBase.Columns("Units1")
            Me.columnSubj2 = MyBase.Columns("Subj2")
            Me.columnUnits2 = MyBase.Columns("Units2")
            Me.columnSubj3 = MyBase.Columns("Subj3")
            Me.columnUnits3 = MyBase.Columns("Units3")
            Me.columnSubj4 = MyBase.Columns("Subj4")
            Me.columnUnits4 = MyBase.Columns("Units4")
            Me.columnSubj5 = MyBase.Columns("Subj5")
            Me.columnUnits5 = MyBase.Columns("Units5")
            Me.columnSubj6 = MyBase.Columns("Subj6")
            Me.columnUnits6 = MyBase.Columns("Units6")
            Me.columnSubj7 = MyBase.Columns("Subj7")
            Me.columnUnits7 = MyBase.Columns("Units7")
            Me.columnSubj8 = MyBase.Columns("Subj8")
            Me.columnUnits8 = MyBase.Columns("Units8")
            Me.columnSubj9 = MyBase.Columns("Subj9")
            Me.columnUnits9 = MyBase.Columns("Units9")
            Me.columnSubj10 = MyBase.Columns("Subj10")
            Me.columnUnits10 = MyBase.Columns("Units10")
            Me.columnStudentPk = MyBase.Columns("StudentPk")
            Me.columnyrLevel = MyBase.Columns("yrLevel")
            Me.columnsex = MyBase.Columns("sex")
            Me.columnbday = MyBase.Columns("bday")
            Me.columntotalunits = MyBase.Columns("totalunits")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnSubj11 = MyBase.Columns("Subj11")
            Me.columnUnits11 = MyBase.Columns("Units11")
            Me.columnSubj12 = MyBase.Columns("Subj12")
            Me.columnUnits12 = MyBase.Columns("Units12")
            Me.columnSubj13 = MyBase.Columns("Subj13")
            Me.columnUnits13 = MyBase.Columns("Units13")
            Me.columnSubj14 = MyBase.Columns("Subj14")
            Me.columnUnits14 = MyBase.Columns("Units14")
            Me.columnSubj15 = MyBase.Columns("Subj15")
            Me.columnUnits15 = MyBase.Columns("Units15")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudent = New Global.System.Data.DataColumn("Student", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudent)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnSubj1 = New Global.System.Data.DataColumn("Subj1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj1)
            Me.columnUnits1 = New Global.System.Data.DataColumn("Units1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits1)
            Me.columnSubj2 = New Global.System.Data.DataColumn("Subj2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj2)
            Me.columnUnits2 = New Global.System.Data.DataColumn("Units2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits2)
            Me.columnSubj3 = New Global.System.Data.DataColumn("Subj3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj3)
            Me.columnUnits3 = New Global.System.Data.DataColumn("Units3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits3)
            Me.columnSubj4 = New Global.System.Data.DataColumn("Subj4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj4)
            Me.columnUnits4 = New Global.System.Data.DataColumn("Units4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits4)
            Me.columnSubj5 = New Global.System.Data.DataColumn("Subj5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj5)
            Me.columnUnits5 = New Global.System.Data.DataColumn("Units5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits5)
            Me.columnSubj6 = New Global.System.Data.DataColumn("Subj6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj6)
            Me.columnUnits6 = New Global.System.Data.DataColumn("Units6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits6)
            Me.columnSubj7 = New Global.System.Data.DataColumn("Subj7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj7)
            Me.columnUnits7 = New Global.System.Data.DataColumn("Units7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits7)
            Me.columnSubj8 = New Global.System.Data.DataColumn("Subj8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj8)
            Me.columnUnits8 = New Global.System.Data.DataColumn("Units8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits8)
            Me.columnSubj9 = New Global.System.Data.DataColumn("Subj9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj9)
            Me.columnUnits9 = New Global.System.Data.DataColumn("Units9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits9)
            Me.columnSubj10 = New Global.System.Data.DataColumn("Subj10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj10)
            Me.columnUnits10 = New Global.System.Data.DataColumn("Units10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits10)
            Me.columnStudentPk = New Global.System.Data.DataColumn("StudentPk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPk)
            Me.columnyrLevel = New Global.System.Data.DataColumn("yrLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrLevel)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columnbday = New Global.System.Data.DataColumn("bday", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbday)
            Me.columntotalunits = New Global.System.Data.DataColumn("totalunits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalunits)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnSubj11 = New Global.System.Data.DataColumn("Subj11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj11)
            Me.columnUnits11 = New Global.System.Data.DataColumn("Units11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits11)
            Me.columnSubj12 = New Global.System.Data.DataColumn("Subj12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj12)
            Me.columnUnits12 = New Global.System.Data.DataColumn("Units12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits12)
            Me.columnSubj13 = New Global.System.Data.DataColumn("Subj13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj13)
            Me.columnUnits13 = New Global.System.Data.DataColumn("Units13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits13)
            Me.columnSubj14 = New Global.System.Data.DataColumn("Subj14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj14)
            Me.columnUnits14 = New Global.System.Data.DataColumn("Units14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits14)
            Me.columnSubj15 = New Global.System.Data.DataColumn("Subj15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj15)
            Me.columnUnits15 = New Global.System.Data.DataColumn("Units15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits15)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollmentListRow() As EnrollmentListRow
            Return CType(Me.NewRow,EnrollmentListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollmentListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollmentListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollmentListRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollmentListRowChanged(Me, New EnrollmentListRowChangeEvent(CType(e.Row,EnrollmentListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollmentListRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollmentListRowChanging(Me, New EnrollmentListRowChangeEvent(CType(e.Row,EnrollmentListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollmentListRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollmentListRowDeleted(Me, New EnrollmentListRowChangeEvent(CType(e.Row,EnrollmentListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollmentListRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollmentListRowDeleting(Me, New EnrollmentListRowChangeEvent(CType(e.Row,EnrollmentListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollmentListRow(ByVal row As EnrollmentListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollmentListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReceivablesReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of ReceivablesReportRow)
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnBalance As Global.System.Data.DataColumn
        
        Private columnReceiptsforTerm As Global.System.Data.DataColumn
        
        Private columnRequiredforSchedule As Global.System.Data.DataColumn
        
        Private columnPrevSem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReceivablesReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptsforTermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptsforTerm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiredforScheduleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiredforSchedule
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevSemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevSem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReceivablesReportRow
            Get
                Return CType(Me.Rows(index),ReceivablesReportRow)
            End Get
        End Property
        
        Public Event ReceivablesReportRowChanging As ReceivablesReportRowChangeEventHandler
        
        Public Event ReceivablesReportRowChanged As ReceivablesReportRowChangeEventHandler
        
        Public Event ReceivablesReportRowDeleting As ReceivablesReportRowChangeEventHandler
        
        Public Event ReceivablesReportRowDeleted As ReceivablesReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReceivablesReportRow(ByVal row As ReceivablesReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReceivablesReportRow(ByVal StudentID As String, ByVal StudentName As String, ByVal Balance As Double, ByVal ReceiptsforTerm As Double, ByVal RequiredforSchedule As Double, ByVal PrevSem As Double) As ReceivablesReportRow
            Dim rowReceivablesReportRow As ReceivablesReportRow = CType(Me.NewRow,ReceivablesReportRow)
            Dim columnValuesArray() As Object = New Object() {StudentID, StudentName, Balance, ReceiptsforTerm, RequiredforSchedule, PrevSem}
            rowReceivablesReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReceivablesReportRow)
            Return rowReceivablesReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReceivablesReportDataTable = CType(MyBase.Clone,ReceivablesReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReceivablesReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnBalance = MyBase.Columns("Balance")
            Me.columnReceiptsforTerm = MyBase.Columns("ReceiptsforTerm")
            Me.columnRequiredforSchedule = MyBase.Columns("RequiredforSchedule")
            Me.columnPrevSem = MyBase.Columns("PrevSem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnBalance = New Global.System.Data.DataColumn("Balance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalance)
            Me.columnReceiptsforTerm = New Global.System.Data.DataColumn("ReceiptsforTerm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptsforTerm)
            Me.columnRequiredforSchedule = New Global.System.Data.DataColumn("RequiredforSchedule", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiredforSchedule)
            Me.columnPrevSem = New Global.System.Data.DataColumn("PrevSem", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevSem)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReceivablesReportRow() As ReceivablesReportRow
            Return CType(Me.NewRow,ReceivablesReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReceivablesReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReceivablesReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReceivablesReportRowChangedEvent) Is Nothing) Then
                RaiseEvent ReceivablesReportRowChanged(Me, New ReceivablesReportRowChangeEvent(CType(e.Row,ReceivablesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReceivablesReportRowChangingEvent) Is Nothing) Then
                RaiseEvent ReceivablesReportRowChanging(Me, New ReceivablesReportRowChangeEvent(CType(e.Row,ReceivablesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReceivablesReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReceivablesReportRowDeleted(Me, New ReceivablesReportRowChangeEvent(CType(e.Row,ReceivablesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReceivablesReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReceivablesReportRowDeleting(Me, New ReceivablesReportRowChangeEvent(CType(e.Row,ReceivablesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReceivablesReportRow(ByVal row As ReceivablesReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReceivablesReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CollegiateGradingSheetDataTable
        Inherits Global.System.Data.TypedTableBase(Of CollegiateGradingSheetRow)
        
        Private columnSyofferPK As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnYearLevel As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CollegiateGradingSheet"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SyofferPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSyofferPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CollegiateGradingSheetRow
            Get
                Return CType(Me.Rows(index),CollegiateGradingSheetRow)
            End Get
        End Property
        
        Public Event CollegiateGradingSheetRowChanging As CollegiateGradingSheetRowChangeEventHandler
        
        Public Event CollegiateGradingSheetRowChanged As CollegiateGradingSheetRowChangeEventHandler
        
        Public Event CollegiateGradingSheetRowDeleting As CollegiateGradingSheetRowChangeEventHandler
        
        Public Event CollegiateGradingSheetRowDeleted As CollegiateGradingSheetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCollegiateGradingSheetRow(ByVal row As CollegiateGradingSheetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCollegiateGradingSheetRow(ByVal SyofferPK As String, ByVal StudentName As String, ByVal YearLevel As String, ByVal Course As String) As CollegiateGradingSheetRow
            Dim rowCollegiateGradingSheetRow As CollegiateGradingSheetRow = CType(Me.NewRow,CollegiateGradingSheetRow)
            Dim columnValuesArray() As Object = New Object() {SyofferPK, StudentName, YearLevel, Course}
            rowCollegiateGradingSheetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCollegiateGradingSheetRow)
            Return rowCollegiateGradingSheetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CollegiateGradingSheetDataTable = CType(MyBase.Clone,CollegiateGradingSheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CollegiateGradingSheetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSyofferPK = MyBase.Columns("SyofferPK")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnYearLevel = MyBase.Columns("YearLevel")
            Me.columnCourse = MyBase.Columns("Course")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSyofferPK = New Global.System.Data.DataColumn("SyofferPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSyofferPK)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnYearLevel = New Global.System.Data.DataColumn("YearLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearLevel)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCollegiateGradingSheetRow() As CollegiateGradingSheetRow
            Return CType(Me.NewRow,CollegiateGradingSheetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CollegiateGradingSheetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CollegiateGradingSheetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CollegiateGradingSheetRowChangedEvent) Is Nothing) Then
                RaiseEvent CollegiateGradingSheetRowChanged(Me, New CollegiateGradingSheetRowChangeEvent(CType(e.Row,CollegiateGradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CollegiateGradingSheetRowChangingEvent) Is Nothing) Then
                RaiseEvent CollegiateGradingSheetRowChanging(Me, New CollegiateGradingSheetRowChangeEvent(CType(e.Row,CollegiateGradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CollegiateGradingSheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent CollegiateGradingSheetRowDeleted(Me, New CollegiateGradingSheetRowChangeEvent(CType(e.Row,CollegiateGradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CollegiateGradingSheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent CollegiateGradingSheetRowDeleting(Me, New CollegiateGradingSheetRowChangeEvent(CType(e.Row,CollegiateGradingSheetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCollegiateGradingSheetRow(ByVal row As CollegiateGradingSheetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CollegiateGradingSheetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PromotionalReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of PromotionalReportRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudent As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMI As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnSubj1 As Global.System.Data.DataColumn
        
        Private columnUnits1 As Global.System.Data.DataColumn
        
        Private columnGrade1 As Global.System.Data.DataColumn
        
        Private columnSubj2 As Global.System.Data.DataColumn
        
        Private columnUnits2 As Global.System.Data.DataColumn
        
        Private columnGrade2 As Global.System.Data.DataColumn
        
        Private columnSubj3 As Global.System.Data.DataColumn
        
        Private columnUnits3 As Global.System.Data.DataColumn
        
        Private columnGrade3 As Global.System.Data.DataColumn
        
        Private columnSubj4 As Global.System.Data.DataColumn
        
        Private columnUnits4 As Global.System.Data.DataColumn
        
        Private columnGrade4 As Global.System.Data.DataColumn
        
        Private columnSubj5 As Global.System.Data.DataColumn
        
        Private columnUnits5 As Global.System.Data.DataColumn
        
        Private columnGrade5 As Global.System.Data.DataColumn
        
        Private columnSubj6 As Global.System.Data.DataColumn
        
        Private columnUnits6 As Global.System.Data.DataColumn
        
        Private columnGrade6 As Global.System.Data.DataColumn
        
        Private columnSubj7 As Global.System.Data.DataColumn
        
        Private columnUnits7 As Global.System.Data.DataColumn
        
        Private columnGrade7 As Global.System.Data.DataColumn
        
        Private columnSubj8 As Global.System.Data.DataColumn
        
        Private columnUnits8 As Global.System.Data.DataColumn
        
        Private columnGrade8 As Global.System.Data.DataColumn
        
        Private columnSubj9 As Global.System.Data.DataColumn
        
        Private columnUnits9 As Global.System.Data.DataColumn
        
        Private columnGrade9 As Global.System.Data.DataColumn
        
        Private columnSubj10 As Global.System.Data.DataColumn
        
        Private columnUnits10 As Global.System.Data.DataColumn
        
        Private columnGrade10 As Global.System.Data.DataColumn
        
        Private columnStudentPk As Global.System.Data.DataColumn
        
        Private columnyrLevel As Global.System.Data.DataColumn
        
        Private columnsex As Global.System.Data.DataColumn
        
        Private columnbday As Global.System.Data.DataColumn
        
        Private columntotalunits As Global.System.Data.DataColumn
        
        Private columnSubj11 As Global.System.Data.DataColumn
        
        Private columnUnits11 As Global.System.Data.DataColumn
        
        Private columnGrade11 As Global.System.Data.DataColumn
        
        Private columnSubj12 As Global.System.Data.DataColumn
        
        Private columnUnits12 As Global.System.Data.DataColumn
        
        Private columnGrade12 As Global.System.Data.DataColumn
        
        Private columnSubj13 As Global.System.Data.DataColumn
        
        Private columnUnits13 As Global.System.Data.DataColumn
        
        Private columnGrade13 As Global.System.Data.DataColumn
        
        Private columnSubj14 As Global.System.Data.DataColumn
        
        Private columnUnits14 As Global.System.Data.DataColumn
        
        Private columnGrade14 As Global.System.Data.DataColumn
        
        Private columnSubj15 As Global.System.Data.DataColumn
        
        Private columnUnits15 As Global.System.Data.DataColumn
        
        Private columnGrade15 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PromotionalReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Subj15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubj15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Units15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grade15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PromotionalReportRow
            Get
                Return CType(Me.Rows(index),PromotionalReportRow)
            End Get
        End Property
        
        Public Event PromotionalReportRowChanging As PromotionalReportRowChangeEventHandler
        
        Public Event PromotionalReportRowChanged As PromotionalReportRowChangeEventHandler
        
        Public Event PromotionalReportRowDeleting As PromotionalReportRowChangeEventHandler
        
        Public Event PromotionalReportRowDeleted As PromotionalReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPromotionalReportRow(ByVal row As PromotionalReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPromotionalReportRow( _
                    ByVal Student As String,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MI As String,  _
                    ByVal StudentID As String,  _
                    ByVal Course As String,  _
                    ByVal Subj1 As String,  _
                    ByVal Units1 As String,  _
                    ByVal Grade1 As String,  _
                    ByVal Subj2 As String,  _
                    ByVal Units2 As String,  _
                    ByVal Grade2 As String,  _
                    ByVal Subj3 As String,  _
                    ByVal Units3 As String,  _
                    ByVal Grade3 As String,  _
                    ByVal Subj4 As String,  _
                    ByVal Units4 As String,  _
                    ByVal Grade4 As String,  _
                    ByVal Subj5 As String,  _
                    ByVal Units5 As String,  _
                    ByVal Grade5 As String,  _
                    ByVal Subj6 As String,  _
                    ByVal Units6 As String,  _
                    ByVal Grade6 As String,  _
                    ByVal Subj7 As String,  _
                    ByVal Units7 As String,  _
                    ByVal Grade7 As String,  _
                    ByVal Subj8 As String,  _
                    ByVal Units8 As String,  _
                    ByVal Grade8 As String,  _
                    ByVal Subj9 As String,  _
                    ByVal Units9 As String,  _
                    ByVal Grade9 As String,  _
                    ByVal Subj10 As String,  _
                    ByVal Units10 As String,  _
                    ByVal Grade10 As String,  _
                    ByVal StudentPk As String,  _
                    ByVal yrLevel As String,  _
                    ByVal sex As String,  _
                    ByVal bday As String,  _
                    ByVal totalunits As String,  _
                    ByVal Subj11 As String,  _
                    ByVal Units11 As String,  _
                    ByVal Grade11 As String,  _
                    ByVal Subj12 As String,  _
                    ByVal Units12 As String,  _
                    ByVal Grade12 As String,  _
                    ByVal Subj13 As String,  _
                    ByVal Units13 As String,  _
                    ByVal Grade13 As String,  _
                    ByVal Subj14 As String,  _
                    ByVal Units14 As String,  _
                    ByVal Grade14 As String,  _
                    ByVal Subj15 As String,  _
                    ByVal Units15 As String,  _
                    ByVal Grade15 As String) As PromotionalReportRow
            Dim rowPromotionalReportRow As PromotionalReportRow = CType(Me.NewRow,PromotionalReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Student, LastName, FirstName, MI, StudentID, Course, Subj1, Units1, Grade1, Subj2, Units2, Grade2, Subj3, Units3, Grade3, Subj4, Units4, Grade4, Subj5, Units5, Grade5, Subj6, Units6, Grade6, Subj7, Units7, Grade7, Subj8, Units8, Grade8, Subj9, Units9, Grade9, Subj10, Units10, Grade10, StudentPk, yrLevel, sex, bday, totalunits, Subj11, Units11, Grade11, Subj12, Units12, Grade12, Subj13, Units13, Grade13, Subj14, Units14, Grade14, Subj15, Units15, Grade15}
            rowPromotionalReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPromotionalReportRow)
            Return rowPromotionalReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As PromotionalReportRow
            Return CType(Me.Rows.Find(New Object() {pk}),PromotionalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PromotionalReportDataTable = CType(MyBase.Clone,PromotionalReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PromotionalReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudent = MyBase.Columns("Student")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMI = MyBase.Columns("MI")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnSubj1 = MyBase.Columns("Subj1")
            Me.columnUnits1 = MyBase.Columns("Units1")
            Me.columnGrade1 = MyBase.Columns("Grade1")
            Me.columnSubj2 = MyBase.Columns("Subj2")
            Me.columnUnits2 = MyBase.Columns("Units2")
            Me.columnGrade2 = MyBase.Columns("Grade2")
            Me.columnSubj3 = MyBase.Columns("Subj3")
            Me.columnUnits3 = MyBase.Columns("Units3")
            Me.columnGrade3 = MyBase.Columns("Grade3")
            Me.columnSubj4 = MyBase.Columns("Subj4")
            Me.columnUnits4 = MyBase.Columns("Units4")
            Me.columnGrade4 = MyBase.Columns("Grade4")
            Me.columnSubj5 = MyBase.Columns("Subj5")
            Me.columnUnits5 = MyBase.Columns("Units5")
            Me.columnGrade5 = MyBase.Columns("Grade5")
            Me.columnSubj6 = MyBase.Columns("Subj6")
            Me.columnUnits6 = MyBase.Columns("Units6")
            Me.columnGrade6 = MyBase.Columns("Grade6")
            Me.columnSubj7 = MyBase.Columns("Subj7")
            Me.columnUnits7 = MyBase.Columns("Units7")
            Me.columnGrade7 = MyBase.Columns("Grade7")
            Me.columnSubj8 = MyBase.Columns("Subj8")
            Me.columnUnits8 = MyBase.Columns("Units8")
            Me.columnGrade8 = MyBase.Columns("Grade8")
            Me.columnSubj9 = MyBase.Columns("Subj9")
            Me.columnUnits9 = MyBase.Columns("Units9")
            Me.columnGrade9 = MyBase.Columns("Grade9")
            Me.columnSubj10 = MyBase.Columns("Subj10")
            Me.columnUnits10 = MyBase.Columns("Units10")
            Me.columnGrade10 = MyBase.Columns("Grade10")
            Me.columnStudentPk = MyBase.Columns("StudentPk")
            Me.columnyrLevel = MyBase.Columns("yrLevel")
            Me.columnsex = MyBase.Columns("sex")
            Me.columnbday = MyBase.Columns("bday")
            Me.columntotalunits = MyBase.Columns("totalunits")
            Me.columnSubj11 = MyBase.Columns("Subj11")
            Me.columnUnits11 = MyBase.Columns("Units11")
            Me.columnGrade11 = MyBase.Columns("Grade11")
            Me.columnSubj12 = MyBase.Columns("Subj12")
            Me.columnUnits12 = MyBase.Columns("Units12")
            Me.columnGrade12 = MyBase.Columns("Grade12")
            Me.columnSubj13 = MyBase.Columns("Subj13")
            Me.columnUnits13 = MyBase.Columns("Units13")
            Me.columnGrade13 = MyBase.Columns("Grade13")
            Me.columnSubj14 = MyBase.Columns("Subj14")
            Me.columnUnits14 = MyBase.Columns("Units14")
            Me.columnGrade14 = MyBase.Columns("Grade14")
            Me.columnSubj15 = MyBase.Columns("Subj15")
            Me.columnUnits15 = MyBase.Columns("Units15")
            Me.columnGrade15 = MyBase.Columns("Grade15")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudent = New Global.System.Data.DataColumn("Student", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudent)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMI = New Global.System.Data.DataColumn("MI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMI)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnSubj1 = New Global.System.Data.DataColumn("Subj1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj1)
            Me.columnUnits1 = New Global.System.Data.DataColumn("Units1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits1)
            Me.columnGrade1 = New Global.System.Data.DataColumn("Grade1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade1)
            Me.columnSubj2 = New Global.System.Data.DataColumn("Subj2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj2)
            Me.columnUnits2 = New Global.System.Data.DataColumn("Units2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits2)
            Me.columnGrade2 = New Global.System.Data.DataColumn("Grade2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade2)
            Me.columnSubj3 = New Global.System.Data.DataColumn("Subj3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj3)
            Me.columnUnits3 = New Global.System.Data.DataColumn("Units3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits3)
            Me.columnGrade3 = New Global.System.Data.DataColumn("Grade3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade3)
            Me.columnSubj4 = New Global.System.Data.DataColumn("Subj4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj4)
            Me.columnUnits4 = New Global.System.Data.DataColumn("Units4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits4)
            Me.columnGrade4 = New Global.System.Data.DataColumn("Grade4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade4)
            Me.columnSubj5 = New Global.System.Data.DataColumn("Subj5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj5)
            Me.columnUnits5 = New Global.System.Data.DataColumn("Units5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits5)
            Me.columnGrade5 = New Global.System.Data.DataColumn("Grade5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade5)
            Me.columnSubj6 = New Global.System.Data.DataColumn("Subj6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj6)
            Me.columnUnits6 = New Global.System.Data.DataColumn("Units6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits6)
            Me.columnGrade6 = New Global.System.Data.DataColumn("Grade6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade6)
            Me.columnSubj7 = New Global.System.Data.DataColumn("Subj7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj7)
            Me.columnUnits7 = New Global.System.Data.DataColumn("Units7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits7)
            Me.columnGrade7 = New Global.System.Data.DataColumn("Grade7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade7)
            Me.columnSubj8 = New Global.System.Data.DataColumn("Subj8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj8)
            Me.columnUnits8 = New Global.System.Data.DataColumn("Units8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits8)
            Me.columnGrade8 = New Global.System.Data.DataColumn("Grade8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade8)
            Me.columnSubj9 = New Global.System.Data.DataColumn("Subj9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj9)
            Me.columnUnits9 = New Global.System.Data.DataColumn("Units9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits9)
            Me.columnGrade9 = New Global.System.Data.DataColumn("Grade9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade9)
            Me.columnSubj10 = New Global.System.Data.DataColumn("Subj10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj10)
            Me.columnUnits10 = New Global.System.Data.DataColumn("Units10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits10)
            Me.columnGrade10 = New Global.System.Data.DataColumn("Grade10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade10)
            Me.columnStudentPk = New Global.System.Data.DataColumn("StudentPk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPk)
            Me.columnyrLevel = New Global.System.Data.DataColumn("yrLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrLevel)
            Me.columnsex = New Global.System.Data.DataColumn("sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsex)
            Me.columnbday = New Global.System.Data.DataColumn("bday", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbday)
            Me.columntotalunits = New Global.System.Data.DataColumn("totalunits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalunits)
            Me.columnSubj11 = New Global.System.Data.DataColumn("Subj11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj11)
            Me.columnUnits11 = New Global.System.Data.DataColumn("Units11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits11)
            Me.columnGrade11 = New Global.System.Data.DataColumn("Grade11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade11)
            Me.columnSubj12 = New Global.System.Data.DataColumn("Subj12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj12)
            Me.columnUnits12 = New Global.System.Data.DataColumn("Units12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits12)
            Me.columnGrade12 = New Global.System.Data.DataColumn("Grade12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade12)
            Me.columnSubj13 = New Global.System.Data.DataColumn("Subj13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj13)
            Me.columnUnits13 = New Global.System.Data.DataColumn("Units13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits13)
            Me.columnGrade13 = New Global.System.Data.DataColumn("Grade13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade13)
            Me.columnSubj14 = New Global.System.Data.DataColumn("Subj14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj14)
            Me.columnUnits14 = New Global.System.Data.DataColumn("Units14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits14)
            Me.columnGrade14 = New Global.System.Data.DataColumn("Grade14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade14)
            Me.columnSubj15 = New Global.System.Data.DataColumn("Subj15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubj15)
            Me.columnUnits15 = New Global.System.Data.DataColumn("Units15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits15)
            Me.columnGrade15 = New Global.System.Data.DataColumn("Grade15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade15)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPromotionalReportRow() As PromotionalReportRow
            Return CType(Me.NewRow,PromotionalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PromotionalReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PromotionalReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PromotionalReportRowChangedEvent) Is Nothing) Then
                RaiseEvent PromotionalReportRowChanged(Me, New PromotionalReportRowChangeEvent(CType(e.Row,PromotionalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PromotionalReportRowChangingEvent) Is Nothing) Then
                RaiseEvent PromotionalReportRowChanging(Me, New PromotionalReportRowChangeEvent(CType(e.Row,PromotionalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PromotionalReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent PromotionalReportRowDeleted(Me, New PromotionalReportRowChangeEvent(CType(e.Row,PromotionalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PromotionalReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent PromotionalReportRowDeleting(Me, New PromotionalReportRowChangeEvent(CType(e.Row,PromotionalReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePromotionalReportRow(ByVal row As PromotionalReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PromotionalReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GradesMailingListDataTable
        Inherits Global.System.Data.TypedTableBase(Of GradesMailingListRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnFamilyName As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnGrade As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnSubjectDescription As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GradesMailingList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FamilyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamilyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GradesMailingListRow
            Get
                Return CType(Me.Rows(index),GradesMailingListRow)
            End Get
        End Property
        
        Public Event GradesMailingListRowChanging As GradesMailingListRowChangeEventHandler
        
        Public Event GradesMailingListRowChanged As GradesMailingListRowChangeEventHandler
        
        Public Event GradesMailingListRowDeleting As GradesMailingListRowChangeEventHandler
        
        Public Event GradesMailingListRowDeleted As GradesMailingListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGradesMailingListRow(ByVal row As GradesMailingListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGradesMailingListRow(ByVal StudentName As String, ByVal StudentID As String, ByVal FamilyName As String, ByVal SubjectCode As String, ByVal Grade As String, ByVal Remarks As String, ByVal Address As String, ByVal SubjectDescription As String, ByVal Units As Integer) As GradesMailingListRow
            Dim rowGradesMailingListRow As GradesMailingListRow = CType(Me.NewRow,GradesMailingListRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentName, StudentID, FamilyName, SubjectCode, Grade, Remarks, Address, SubjectDescription, Units}
            rowGradesMailingListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGradesMailingListRow)
            Return rowGradesMailingListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As GradesMailingListRow
            Return CType(Me.Rows.Find(New Object() {pk}),GradesMailingListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GradesMailingListDataTable = CType(MyBase.Clone,GradesMailingListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GradesMailingListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnFamilyName = MyBase.Columns("FamilyName")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnGrade = MyBase.Columns("Grade")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnSubjectDescription = MyBase.Columns("SubjectDescription")
            Me.columnUnits = MyBase.Columns("Units")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnFamilyName = New Global.System.Data.DataColumn("FamilyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamilyName)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnGrade = New Global.System.Data.DataColumn("Grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnSubjectDescription = New Global.System.Data.DataColumn("SubjectDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDescription)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnStudentName.Caption = "Student"
            Me.columnFamilyName.Caption = "Course"
            Me.columnGrade.Caption = "Units10"
            Me.columnRemarks.Caption = "StudentPk"
            Me.columnAddress.Caption = "yrLevel"
            Me.columnUnits.DefaultValue = CType(1,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGradesMailingListRow() As GradesMailingListRow
            Return CType(Me.NewRow,GradesMailingListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GradesMailingListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GradesMailingListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GradesMailingListRowChangedEvent) Is Nothing) Then
                RaiseEvent GradesMailingListRowChanged(Me, New GradesMailingListRowChangeEvent(CType(e.Row,GradesMailingListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GradesMailingListRowChangingEvent) Is Nothing) Then
                RaiseEvent GradesMailingListRowChanging(Me, New GradesMailingListRowChangeEvent(CType(e.Row,GradesMailingListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GradesMailingListRowDeletedEvent) Is Nothing) Then
                RaiseEvent GradesMailingListRowDeleted(Me, New GradesMailingListRowChangeEvent(CType(e.Row,GradesMailingListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GradesMailingListRowDeletingEvent) Is Nothing) Then
                RaiseEvent GradesMailingListRowDeleting(Me, New GradesMailingListRowChangeEvent(CType(e.Row,GradesMailingListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGradesMailingListRow(ByVal row As GradesMailingListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GradesMailingListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentPermanentRecordDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentPermanentRecordRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSemSchoolYear As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectDesc As Global.System.Data.DataColumn
        
        Private columnGrade As Global.System.Data.DataColumn
        
        Private columnCompletionGrade As Global.System.Data.DataColumn
        
        Private columnCredits As Global.System.Data.DataColumn
        
        Private columngroup1 As Global.System.Data.DataColumn
        
        Private columngroup2 As Global.System.Data.DataColumn
        
        Private columngroup3 As Global.System.Data.DataColumn
        
        Private columngroup4 As Global.System.Data.DataColumn
        
        Private columngroup5 As Global.System.Data.DataColumn
        
        Private columngroup6 As Global.System.Data.DataColumn
        
        Private columngroup7 As Global.System.Data.DataColumn
        
        Private columngroup8 As Global.System.Data.DataColumn
        
        Private columngroup9 As Global.System.Data.DataColumn
        
        Private columngroup10 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentPermanentRecord"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentPermanentRecordRow
            Get
                Return CType(Me.Rows(index),StudentPermanentRecordRow)
            End Get
        End Property
        
        Public Event StudentPermanentRecordRowChanging As StudentPermanentRecordRowChangeEventHandler
        
        Public Event StudentPermanentRecordRowChanged As StudentPermanentRecordRowChangeEventHandler
        
        Public Event StudentPermanentRecordRowDeleting As StudentPermanentRecordRowChangeEventHandler
        
        Public Event StudentPermanentRecordRowDeleted As StudentPermanentRecordRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentPermanentRecordRow(ByVal row As StudentPermanentRecordRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentPermanentRecordRow( _
                    ByVal StudentPK As String,  _
                    ByVal SchoolName As String,  _
                    ByVal SemSchoolYear As String,  _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectDesc As String,  _
                    ByVal Grade As String,  _
                    ByVal CompletionGrade As String,  _
                    ByVal Credits As String,  _
                    ByVal group1 As Short,  _
                    ByVal group2 As Short,  _
                    ByVal group3 As Short,  _
                    ByVal group4 As Short,  _
                    ByVal group5 As Short,  _
                    ByVal group6 As Short,  _
                    ByVal group7 As Short,  _
                    ByVal group8 As Short,  _
                    ByVal group9 As Short,  _
                    ByVal group10 As Short) As StudentPermanentRecordRow
            Dim rowStudentPermanentRecordRow As StudentPermanentRecordRow = CType(Me.NewRow,StudentPermanentRecordRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentPK, SchoolName, SemSchoolYear, SubjectCode, SubjectDesc, Grade, CompletionGrade, Credits, group1, group2, group3, group4, group5, group6, group7, group8, group9, group10}
            rowStudentPermanentRecordRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentPermanentRecordRow)
            Return rowStudentPermanentRecordRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentPermanentRecordRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentPermanentRecordRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentPermanentRecordDataTable = CType(MyBase.Clone,StudentPermanentRecordDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentPermanentRecordDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSemSchoolYear = MyBase.Columns("SemSchoolYear")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectDesc = MyBase.Columns("SubjectDesc")
            Me.columnGrade = MyBase.Columns("Grade")
            Me.columnCompletionGrade = MyBase.Columns("CompletionGrade")
            Me.columnCredits = MyBase.Columns("Credits")
            Me.columngroup1 = MyBase.Columns("group1")
            Me.columngroup2 = MyBase.Columns("group2")
            Me.columngroup3 = MyBase.Columns("group3")
            Me.columngroup4 = MyBase.Columns("group4")
            Me.columngroup5 = MyBase.Columns("group5")
            Me.columngroup6 = MyBase.Columns("group6")
            Me.columngroup7 = MyBase.Columns("group7")
            Me.columngroup8 = MyBase.Columns("group8")
            Me.columngroup9 = MyBase.Columns("group9")
            Me.columngroup10 = MyBase.Columns("group10")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSemSchoolYear = New Global.System.Data.DataColumn("SemSchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSchoolYear)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectDesc = New Global.System.Data.DataColumn("SubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDesc)
            Me.columnGrade = New Global.System.Data.DataColumn("Grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.columnCompletionGrade = New Global.System.Data.DataColumn("CompletionGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompletionGrade)
            Me.columnCredits = New Global.System.Data.DataColumn("Credits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredits)
            Me.columngroup1 = New Global.System.Data.DataColumn("group1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup1)
            Me.columngroup2 = New Global.System.Data.DataColumn("group2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup2)
            Me.columngroup3 = New Global.System.Data.DataColumn("group3", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup3)
            Me.columngroup4 = New Global.System.Data.DataColumn("group4", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup4)
            Me.columngroup5 = New Global.System.Data.DataColumn("group5", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup5)
            Me.columngroup6 = New Global.System.Data.DataColumn("group6", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup6)
            Me.columngroup7 = New Global.System.Data.DataColumn("group7", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup7)
            Me.columngroup8 = New Global.System.Data.DataColumn("group8", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup8)
            Me.columngroup9 = New Global.System.Data.DataColumn("group9", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup9)
            Me.columngroup10 = New Global.System.Data.DataColumn("group10", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup10)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnStudentPK.Caption = "Student"
            Me.columnSubjectCode.Caption = "StudentID"
            Me.columnGrade.Caption = "Course"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentPermanentRecordRow() As StudentPermanentRecordRow
            Return CType(Me.NewRow,StudentPermanentRecordRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentPermanentRecordRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentPermanentRecordRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentPermanentRecordRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentPermanentRecordRowChanged(Me, New StudentPermanentRecordRowChangeEvent(CType(e.Row,StudentPermanentRecordRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentPermanentRecordRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentPermanentRecordRowChanging(Me, New StudentPermanentRecordRowChangeEvent(CType(e.Row,StudentPermanentRecordRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentPermanentRecordRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentPermanentRecordRowDeleted(Me, New StudentPermanentRecordRowChangeEvent(CType(e.Row,StudentPermanentRecordRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentPermanentRecordRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentPermanentRecordRowDeleting(Me, New StudentPermanentRecordRowChangeEvent(CType(e.Row,StudentPermanentRecordRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentPermanentRecordRow(ByVal row As StudentPermanentRecordRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentPermanentRecordDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateStatisticsReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateStatisticsReportRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnSemSyGroup As Global.System.Data.DataColumn
        
        Private columnSubGroup As Global.System.Data.DataColumn
        
        Private columnSubGroupItem As Global.System.Data.DataColumn
        
        Private columnCount As Global.System.Data.DataColumn
        
        Private columnPercent As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateStatisticsReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSyGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSyGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubGroupItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubGroupItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateStatisticsReportRow
            Get
                Return CType(Me.Rows(index),TemplateStatisticsReportRow)
            End Get
        End Property
        
        Public Event TemplateStatisticsReportRowChanging As TemplateStatisticsReportRowChangeEventHandler
        
        Public Event TemplateStatisticsReportRowChanged As TemplateStatisticsReportRowChangeEventHandler
        
        Public Event TemplateStatisticsReportRowDeleting As TemplateStatisticsReportRowChangeEventHandler
        
        Public Event TemplateStatisticsReportRowDeleted As TemplateStatisticsReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateStatisticsReportRow(ByVal row As TemplateStatisticsReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateStatisticsReportRow(ByVal SemSyGroup As String, ByVal SubGroup As String, ByVal SubGroupItem As String, ByVal Count As Long, ByVal Percent As Decimal) As TemplateStatisticsReportRow
            Dim rowTemplateStatisticsReportRow As TemplateStatisticsReportRow = CType(Me.NewRow,TemplateStatisticsReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SemSyGroup, SubGroup, SubGroupItem, Count, Percent}
            rowTemplateStatisticsReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateStatisticsReportRow)
            Return rowTemplateStatisticsReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TemplateStatisticsReportRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateStatisticsReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateStatisticsReportDataTable = CType(MyBase.Clone,TemplateStatisticsReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateStatisticsReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnSemSyGroup = MyBase.Columns("SemSyGroup")
            Me.columnSubGroup = MyBase.Columns("SubGroup")
            Me.columnSubGroupItem = MyBase.Columns("SubGroupItem")
            Me.columnCount = MyBase.Columns("Count")
            Me.columnPercent = MyBase.Columns("Percent")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnSemSyGroup = New Global.System.Data.DataColumn("SemSyGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSyGroup)
            Me.columnSubGroup = New Global.System.Data.DataColumn("SubGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubGroup)
            Me.columnSubGroupItem = New Global.System.Data.DataColumn("SubGroupItem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubGroupItem)
            Me.columnCount = New Global.System.Data.DataColumn("Count", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnPercent = New Global.System.Data.DataColumn("Percent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercent)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnSemSyGroup.Caption = "semsygroup"
            Me.columnSubGroup.Caption = "subgroup"
            Me.columnSubGroupItem.Caption = "Subgroupitem"
            Me.columnCount.Caption = "count"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateStatisticsReportRow() As TemplateStatisticsReportRow
            Return CType(Me.NewRow,TemplateStatisticsReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateStatisticsReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateStatisticsReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateStatisticsReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateStatisticsReportRowChanged(Me, New TemplateStatisticsReportRowChangeEvent(CType(e.Row,TemplateStatisticsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateStatisticsReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateStatisticsReportRowChanging(Me, New TemplateStatisticsReportRowChangeEvent(CType(e.Row,TemplateStatisticsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateStatisticsReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateStatisticsReportRowDeleted(Me, New TemplateStatisticsReportRowChangeEvent(CType(e.Row,TemplateStatisticsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateStatisticsReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateStatisticsReportRowDeleting(Me, New TemplateStatisticsReportRowChangeEvent(CType(e.Row,TemplateStatisticsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateStatisticsReportRow(ByVal row As TemplateStatisticsReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateStatisticsReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentScheduleDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentScheduleRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnMonSked As Global.System.Data.DataColumn
        
        Private columnTueSked As Global.System.Data.DataColumn
        
        Private columnWedSked As Global.System.Data.DataColumn
        
        Private columnThuSked As Global.System.Data.DataColumn
        
        Private columnFriSked As Global.System.Data.DataColumn
        
        Private columnSatSked As Global.System.Data.DataColumn
        
        Private columnSunSked As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentSchedule"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TueSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTueSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WedSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWedSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThuSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThuSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FriSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFriSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SatSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSatSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SunSkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSunSked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentScheduleRow
            Get
                Return CType(Me.Rows(index),StudentScheduleRow)
            End Get
        End Property
        
        Public Event StudentScheduleRowChanging As StudentScheduleRowChangeEventHandler
        
        Public Event StudentScheduleRowChanged As StudentScheduleRowChangeEventHandler
        
        Public Event StudentScheduleRowDeleting As StudentScheduleRowChangeEventHandler
        
        Public Event StudentScheduleRowDeleted As StudentScheduleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentScheduleRow(ByVal row As StudentScheduleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentScheduleRow(ByVal StudentPK As String, ByVal SubjectName As String, ByVal MonSked As String, ByVal TueSked As String, ByVal WedSked As String, ByVal ThuSked As String, ByVal FriSked As String, ByVal SatSked As String, ByVal SunSked As String) As StudentScheduleRow
            Dim rowStudentScheduleRow As StudentScheduleRow = CType(Me.NewRow,StudentScheduleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentPK, SubjectName, MonSked, TueSked, WedSked, ThuSked, FriSked, SatSked, SunSked}
            rowStudentScheduleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentScheduleRow)
            Return rowStudentScheduleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentScheduleRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentScheduleDataTable = CType(MyBase.Clone,StudentScheduleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentScheduleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnMonSked = MyBase.Columns("MonSked")
            Me.columnTueSked = MyBase.Columns("TueSked")
            Me.columnWedSked = MyBase.Columns("WedSked")
            Me.columnThuSked = MyBase.Columns("ThuSked")
            Me.columnFriSked = MyBase.Columns("FriSked")
            Me.columnSatSked = MyBase.Columns("SatSked")
            Me.columnSunSked = MyBase.Columns("SunSked")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnMonSked = New Global.System.Data.DataColumn("MonSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonSked)
            Me.columnTueSked = New Global.System.Data.DataColumn("TueSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTueSked)
            Me.columnWedSked = New Global.System.Data.DataColumn("WedSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWedSked)
            Me.columnThuSked = New Global.System.Data.DataColumn("ThuSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThuSked)
            Me.columnFriSked = New Global.System.Data.DataColumn("FriSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFriSked)
            Me.columnSatSked = New Global.System.Data.DataColumn("SatSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSatSked)
            Me.columnSunSked = New Global.System.Data.DataColumn("SunSked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSunSked)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnStudentPK.Caption = "Student"
            Me.columnSubjectName.Caption = "SchoolName"
            Me.columnMonSked.Caption = "SemSchoolYear"
            Me.columnTueSked.Caption = "StudentID"
            Me.columnWedSked.Caption = "SubjectDesc"
            Me.columnThuSked.Caption = "Course"
            Me.columnFriSked.Caption = "CompletionGrade"
            Me.columnSatSked.Caption = "Credits"
            Me.columnSunSked.Caption = "group1"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentScheduleRow() As StudentScheduleRow
            Return CType(Me.NewRow,StudentScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentScheduleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentScheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentScheduleRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentScheduleRowChanged(Me, New StudentScheduleRowChangeEvent(CType(e.Row,StudentScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentScheduleRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentScheduleRowChanging(Me, New StudentScheduleRowChangeEvent(CType(e.Row,StudentScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentScheduleRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentScheduleRowDeleted(Me, New StudentScheduleRowChangeEvent(CType(e.Row,StudentScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentScheduleRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentScheduleRowDeleting(Me, New StudentScheduleRowChangeEvent(CType(e.Row,StudentScheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentScheduleRow(ByVal row As StudentScheduleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentScheduleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateClassCardDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateClassCardRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnDays As Global.System.Data.DataColumn
        
        Private columnTime As Global.System.Data.DataColumn
        
        Private columnInstructor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateClassCard"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstructorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateClassCardRow
            Get
                Return CType(Me.Rows(index),TemplateClassCardRow)
            End Get
        End Property
        
        Public Event TemplateClassCardRowChanging As TemplateClassCardRowChangeEventHandler
        
        Public Event TemplateClassCardRowChanged As TemplateClassCardRowChangeEventHandler
        
        Public Event TemplateClassCardRowDeleting As TemplateClassCardRowChangeEventHandler
        
        Public Event TemplateClassCardRowDeleted As TemplateClassCardRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateClassCardRow(ByVal row As TemplateClassCardRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateClassCardRow(ByVal StudentPK As String, ByVal SubjectCode As String, ByVal Days As String, ByVal Time As String, ByVal Instructor As String) As TemplateClassCardRow
            Dim rowTemplateClassCardRow As TemplateClassCardRow = CType(Me.NewRow,TemplateClassCardRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentPK, SubjectCode, Days, Time, Instructor}
            rowTemplateClassCardRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateClassCardRow)
            Return rowTemplateClassCardRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TemplateClassCardRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateClassCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateClassCardDataTable = CType(MyBase.Clone,TemplateClassCardDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateClassCardDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnDays = MyBase.Columns("Days")
            Me.columnTime = MyBase.Columns("Time")
            Me.columnInstructor = MyBase.Columns("Instructor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnDays = New Global.System.Data.DataColumn("Days", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays)
            Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime)
            Me.columnInstructor = New Global.System.Data.DataColumn("Instructor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnStudentPK.Caption = "Student"
            Me.columnSubjectCode.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateClassCardRow() As TemplateClassCardRow
            Return CType(Me.NewRow,TemplateClassCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateClassCardRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateClassCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateClassCardRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateClassCardRowChanged(Me, New TemplateClassCardRowChangeEvent(CType(e.Row,TemplateClassCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateClassCardRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateClassCardRowChanging(Me, New TemplateClassCardRowChangeEvent(CType(e.Row,TemplateClassCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateClassCardRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateClassCardRowDeleted(Me, New TemplateClassCardRowChangeEvent(CType(e.Row,TemplateClassCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateClassCardRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateClassCardRowDeleting(Me, New TemplateClassCardRowChangeEvent(CType(e.Row,TemplateClassCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateClassCardRow(ByVal row As TemplateClassCardRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateClassCardDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateEvaluationReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateEvaluationReportRow)
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnsubject As Global.System.Data.DataColumn
        
        Private columnteacher As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnunits As Global.System.Data.DataColumn
        
        Private columnschoolyear As Global.System.Data.DataColumn
        
        Private columnsemester As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateEvaluationReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property schoolyearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnschoolyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateEvaluationReportRow
            Get
                Return CType(Me.Rows(index),TemplateEvaluationReportRow)
            End Get
        End Property
        
        Public Event TemplateEvaluationReportRowChanging As TemplateEvaluationReportRowChangeEventHandler
        
        Public Event TemplateEvaluationReportRowChanged As TemplateEvaluationReportRowChangeEventHandler
        
        Public Event TemplateEvaluationReportRowDeleting As TemplateEvaluationReportRowChangeEventHandler
        
        Public Event TemplateEvaluationReportRowDeleted As TemplateEvaluationReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateEvaluationReportRow(ByVal row As TemplateEvaluationReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateEvaluationReportRow(ByVal studentpk As Long, ByVal subject As String, ByVal teacher As String, ByVal grade As Decimal, ByVal units As Decimal, ByVal schoolyear As String, ByVal semester As String) As TemplateEvaluationReportRow
            Dim rowTemplateEvaluationReportRow As TemplateEvaluationReportRow = CType(Me.NewRow,TemplateEvaluationReportRow)
            Dim columnValuesArray() As Object = New Object() {studentpk, subject, teacher, grade, units, schoolyear, semester}
            rowTemplateEvaluationReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateEvaluationReportRow)
            Return rowTemplateEvaluationReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateEvaluationReportDataTable = CType(MyBase.Clone,TemplateEvaluationReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateEvaluationReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnsubject = MyBase.Columns("subject")
            Me.columnteacher = MyBase.Columns("teacher")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnunits = MyBase.Columns("units")
            Me.columnschoolyear = MyBase.Columns("schoolyear")
            Me.columnsemester = MyBase.Columns("semester")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnsubject = New Global.System.Data.DataColumn("subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubject)
            Me.columnteacher = New Global.System.Data.DataColumn("teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacher)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnunits = New Global.System.Data.DataColumn("units", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunits)
            Me.columnschoolyear = New Global.System.Data.DataColumn("schoolyear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnschoolyear)
            Me.columnsemester = New Global.System.Data.DataColumn("semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemester)
            Me.columnschoolyear.DefaultValue = CType("",String)
            Me.columnsemester.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateEvaluationReportRow() As TemplateEvaluationReportRow
            Return CType(Me.NewRow,TemplateEvaluationReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateEvaluationReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateEvaluationReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateEvaluationReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationReportRowChanged(Me, New TemplateEvaluationReportRowChangeEvent(CType(e.Row,TemplateEvaluationReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateEvaluationReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationReportRowChanging(Me, New TemplateEvaluationReportRowChangeEvent(CType(e.Row,TemplateEvaluationReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateEvaluationReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationReportRowDeleted(Me, New TemplateEvaluationReportRowChangeEvent(CType(e.Row,TemplateEvaluationReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateEvaluationReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationReportRowDeleting(Me, New TemplateEvaluationReportRowChangeEvent(CType(e.Row,TemplateEvaluationReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateEvaluationReportRow(ByVal row As TemplateEvaluationReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateEvaluationReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateCollectionsReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateCollectionsReportRow)
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnstudentcount As Global.System.Data.DataColumn
        
        Private columntotalassessment As Global.System.Data.DataColumn
        
        Private columndownpayment As Global.System.Data.DataColumn
        
        Private columnbalance As Global.System.Data.DataColumn
        
        Private columnmonthlyincome As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateCollectionsReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentcountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentcount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalassessmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalassessment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property downpaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndownpayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monthlyincomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonthlyincome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateCollectionsReportRow
            Get
                Return CType(Me.Rows(index),TemplateCollectionsReportRow)
            End Get
        End Property
        
        Public Event TemplateCollectionsReportRowChanging As TemplateCollectionsReportRowChangeEventHandler
        
        Public Event TemplateCollectionsReportRowChanged As TemplateCollectionsReportRowChangeEventHandler
        
        Public Event TemplateCollectionsReportRowDeleting As TemplateCollectionsReportRowChangeEventHandler
        
        Public Event TemplateCollectionsReportRowDeleted As TemplateCollectionsReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateCollectionsReportRow(ByVal row As TemplateCollectionsReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateCollectionsReportRow(ByVal course As String, ByVal studentcount As Long, ByVal totalassessment As Decimal, ByVal downpayment As Decimal, ByVal balance As Decimal, ByVal monthlyincome As Decimal) As TemplateCollectionsReportRow
            Dim rowTemplateCollectionsReportRow As TemplateCollectionsReportRow = CType(Me.NewRow,TemplateCollectionsReportRow)
            Dim columnValuesArray() As Object = New Object() {course, studentcount, totalassessment, downpayment, balance, monthlyincome}
            rowTemplateCollectionsReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateCollectionsReportRow)
            Return rowTemplateCollectionsReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateCollectionsReportDataTable = CType(MyBase.Clone,TemplateCollectionsReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateCollectionsReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncourse = MyBase.Columns("course")
            Me.columnstudentcount = MyBase.Columns("studentcount")
            Me.columntotalassessment = MyBase.Columns("totalassessment")
            Me.columndownpayment = MyBase.Columns("downpayment")
            Me.columnbalance = MyBase.Columns("balance")
            Me.columnmonthlyincome = MyBase.Columns("monthlyincome")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnstudentcount = New Global.System.Data.DataColumn("studentcount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentcount)
            Me.columntotalassessment = New Global.System.Data.DataColumn("totalassessment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalassessment)
            Me.columndownpayment = New Global.System.Data.DataColumn("downpayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndownpayment)
            Me.columnbalance = New Global.System.Data.DataColumn("balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbalance)
            Me.columnmonthlyincome = New Global.System.Data.DataColumn("monthlyincome", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonthlyincome)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateCollectionsReportRow() As TemplateCollectionsReportRow
            Return CType(Me.NewRow,TemplateCollectionsReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateCollectionsReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateCollectionsReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateCollectionsReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsReportRowChanged(Me, New TemplateCollectionsReportRowChangeEvent(CType(e.Row,TemplateCollectionsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateCollectionsReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsReportRowChanging(Me, New TemplateCollectionsReportRowChangeEvent(CType(e.Row,TemplateCollectionsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateCollectionsReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsReportRowDeleted(Me, New TemplateCollectionsReportRowChangeEvent(CType(e.Row,TemplateCollectionsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateCollectionsReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsReportRowDeleting(Me, New TemplateCollectionsReportRowChangeEvent(CType(e.Row,TemplateCollectionsReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateCollectionsReportRow(ByVal row As TemplateCollectionsReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateCollectionsReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateCollectionsHistoryReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateCollectionsHistoryReportRow)
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnstudentcount As Global.System.Data.DataColumn
        
        Private columntotalassessment As Global.System.Data.DataColumn
        
        Private columndownpayment As Global.System.Data.DataColumn
        
        Private columnbalance As Global.System.Data.DataColumn
        
        Private columnmonthlyincome As Global.System.Data.DataColumn
        
        Private columnexam1amount As Global.System.Data.DataColumn
        
        Private columnexam1bal As Global.System.Data.DataColumn
        
        Private columnexam2amount As Global.System.Data.DataColumn
        
        Private columnexam2bal As Global.System.Data.DataColumn
        
        Private columnexam3amount As Global.System.Data.DataColumn
        
        Private columnexam3bal As Global.System.Data.DataColumn
        
        Private columnexam4amount As Global.System.Data.DataColumn
        
        Private columnexam4bal As Global.System.Data.DataColumn
        
        Private columnexam5amount As Global.System.Data.DataColumn
        
        Private columnexam5bal As Global.System.Data.DataColumn
        
        Private columnpaid1st As Global.System.Data.DataColumn
        
        Private columnpaid2nd As Global.System.Data.DataColumn
        
        Private columnpaid3rd As Global.System.Data.DataColumn
        
        Private columnpaid4th As Global.System.Data.DataColumn
        
        Private columnpaid5th As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateCollectionsHistoryReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentcountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentcount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalassessmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalassessment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property downpaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndownpayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monthlyincomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonthlyincome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam1amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam1amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam1balColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam1bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam2amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam2amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam2balColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam2bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam3amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam3amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam3balColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam3bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam4amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam4amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam4balColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam4bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam5amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam5amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exam5balColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexam5bal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paid1stColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaid1st
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paid2ndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaid2nd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paid3rdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaid3rd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paid4thColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaid4th
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paid5thColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaid5th
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateCollectionsHistoryReportRow
            Get
                Return CType(Me.Rows(index),TemplateCollectionsHistoryReportRow)
            End Get
        End Property
        
        Public Event TemplateCollectionsHistoryReportRowChanging As TemplateCollectionsHistoryReportRowChangeEventHandler
        
        Public Event TemplateCollectionsHistoryReportRowChanged As TemplateCollectionsHistoryReportRowChangeEventHandler
        
        Public Event TemplateCollectionsHistoryReportRowDeleting As TemplateCollectionsHistoryReportRowChangeEventHandler
        
        Public Event TemplateCollectionsHistoryReportRowDeleted As TemplateCollectionsHistoryReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateCollectionsHistoryReportRow(ByVal row As TemplateCollectionsHistoryReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateCollectionsHistoryReportRow( _
                    ByVal course As String,  _
                    ByVal studentcount As Long,  _
                    ByVal totalassessment As Decimal,  _
                    ByVal downpayment As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal monthlyincome As Decimal,  _
                    ByVal exam1amount As Decimal,  _
                    ByVal exam1bal As Decimal,  _
                    ByVal exam2amount As Decimal,  _
                    ByVal exam2bal As Decimal,  _
                    ByVal exam3amount As Decimal,  _
                    ByVal exam3bal As Decimal,  _
                    ByVal exam4amount As Decimal,  _
                    ByVal exam4bal As Decimal,  _
                    ByVal exam5amount As Decimal,  _
                    ByVal exam5bal As Decimal,  _
                    ByVal paid1st As Long,  _
                    ByVal paid2nd As Long,  _
                    ByVal paid3rd As Long,  _
                    ByVal paid4th As Long,  _
                    ByVal paid5th As Long) As TemplateCollectionsHistoryReportRow
            Dim rowTemplateCollectionsHistoryReportRow As TemplateCollectionsHistoryReportRow = CType(Me.NewRow,TemplateCollectionsHistoryReportRow)
            Dim columnValuesArray() As Object = New Object() {course, studentcount, totalassessment, downpayment, balance, monthlyincome, exam1amount, exam1bal, exam2amount, exam2bal, exam3amount, exam3bal, exam4amount, exam4bal, exam5amount, exam5bal, paid1st, paid2nd, paid3rd, paid4th, paid5th}
            rowTemplateCollectionsHistoryReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateCollectionsHistoryReportRow)
            Return rowTemplateCollectionsHistoryReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateCollectionsHistoryReportDataTable = CType(MyBase.Clone,TemplateCollectionsHistoryReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateCollectionsHistoryReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncourse = MyBase.Columns("course")
            Me.columnstudentcount = MyBase.Columns("studentcount")
            Me.columntotalassessment = MyBase.Columns("totalassessment")
            Me.columndownpayment = MyBase.Columns("downpayment")
            Me.columnbalance = MyBase.Columns("balance")
            Me.columnmonthlyincome = MyBase.Columns("monthlyincome")
            Me.columnexam1amount = MyBase.Columns("exam1amount")
            Me.columnexam1bal = MyBase.Columns("exam1bal")
            Me.columnexam2amount = MyBase.Columns("exam2amount")
            Me.columnexam2bal = MyBase.Columns("exam2bal")
            Me.columnexam3amount = MyBase.Columns("exam3amount")
            Me.columnexam3bal = MyBase.Columns("exam3bal")
            Me.columnexam4amount = MyBase.Columns("exam4amount")
            Me.columnexam4bal = MyBase.Columns("exam4bal")
            Me.columnexam5amount = MyBase.Columns("exam5amount")
            Me.columnexam5bal = MyBase.Columns("exam5bal")
            Me.columnpaid1st = MyBase.Columns("paid1st")
            Me.columnpaid2nd = MyBase.Columns("paid2nd")
            Me.columnpaid3rd = MyBase.Columns("paid3rd")
            Me.columnpaid4th = MyBase.Columns("paid4th")
            Me.columnpaid5th = MyBase.Columns("paid5th")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnstudentcount = New Global.System.Data.DataColumn("studentcount", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentcount)
            Me.columntotalassessment = New Global.System.Data.DataColumn("totalassessment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalassessment)
            Me.columndownpayment = New Global.System.Data.DataColumn("downpayment", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndownpayment)
            Me.columnbalance = New Global.System.Data.DataColumn("balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbalance)
            Me.columnmonthlyincome = New Global.System.Data.DataColumn("monthlyincome", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonthlyincome)
            Me.columnexam1amount = New Global.System.Data.DataColumn("exam1amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam1amount)
            Me.columnexam1bal = New Global.System.Data.DataColumn("exam1bal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam1bal)
            Me.columnexam2amount = New Global.System.Data.DataColumn("exam2amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam2amount)
            Me.columnexam2bal = New Global.System.Data.DataColumn("exam2bal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam2bal)
            Me.columnexam3amount = New Global.System.Data.DataColumn("exam3amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam3amount)
            Me.columnexam3bal = New Global.System.Data.DataColumn("exam3bal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam3bal)
            Me.columnexam4amount = New Global.System.Data.DataColumn("exam4amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam4amount)
            Me.columnexam4bal = New Global.System.Data.DataColumn("exam4bal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam4bal)
            Me.columnexam5amount = New Global.System.Data.DataColumn("exam5amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam5amount)
            Me.columnexam5bal = New Global.System.Data.DataColumn("exam5bal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexam5bal)
            Me.columnpaid1st = New Global.System.Data.DataColumn("paid1st", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaid1st)
            Me.columnpaid2nd = New Global.System.Data.DataColumn("paid2nd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaid2nd)
            Me.columnpaid3rd = New Global.System.Data.DataColumn("paid3rd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaid3rd)
            Me.columnpaid4th = New Global.System.Data.DataColumn("paid4th", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaid4th)
            Me.columnpaid5th = New Global.System.Data.DataColumn("paid5th", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaid5th)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateCollectionsHistoryReportRow() As TemplateCollectionsHistoryReportRow
            Return CType(Me.NewRow,TemplateCollectionsHistoryReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateCollectionsHistoryReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateCollectionsHistoryReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateCollectionsHistoryReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsHistoryReportRowChanged(Me, New TemplateCollectionsHistoryReportRowChangeEvent(CType(e.Row,TemplateCollectionsHistoryReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateCollectionsHistoryReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsHistoryReportRowChanging(Me, New TemplateCollectionsHistoryReportRowChangeEvent(CType(e.Row,TemplateCollectionsHistoryReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateCollectionsHistoryReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsHistoryReportRowDeleted(Me, New TemplateCollectionsHistoryReportRowChangeEvent(CType(e.Row,TemplateCollectionsHistoryReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateCollectionsHistoryReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionsHistoryReportRowDeleting(Me, New TemplateCollectionsHistoryReportRowChangeEvent(CType(e.Row,TemplateCollectionsHistoryReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateCollectionsHistoryReportRow(ByVal row As TemplateCollectionsHistoryReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateCollectionsHistoryReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateCollectionBreakdownDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateCollectionBreakdownRow)
        
        Private columnsorter As Global.System.Data.DataColumn
        
        Private columnNameCourseOR As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnORNo As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateCollectionBreakdown"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameCourseORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameCourseOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateCollectionBreakdownRow
            Get
                Return CType(Me.Rows(index),TemplateCollectionBreakdownRow)
            End Get
        End Property
        
        Public Event TemplateCollectionBreakdownRowChanging As TemplateCollectionBreakdownRowChangeEventHandler
        
        Public Event TemplateCollectionBreakdownRowChanged As TemplateCollectionBreakdownRowChangeEventHandler
        
        Public Event TemplateCollectionBreakdownRowDeleting As TemplateCollectionBreakdownRowChangeEventHandler
        
        Public Event TemplateCollectionBreakdownRowDeleted As TemplateCollectionBreakdownRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateCollectionBreakdownRow(ByVal row As TemplateCollectionBreakdownRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateCollectionBreakdownRow(ByVal sorter As Integer, ByVal NameCourseOR As String, ByVal Remarks As String, ByVal Amount As Decimal, ByVal ORNo As Long, ByVal StudentName As String, ByVal Course As String) As TemplateCollectionBreakdownRow
            Dim rowTemplateCollectionBreakdownRow As TemplateCollectionBreakdownRow = CType(Me.NewRow,TemplateCollectionBreakdownRow)
            Dim columnValuesArray() As Object = New Object() {sorter, NameCourseOR, Remarks, Amount, ORNo, StudentName, Course}
            rowTemplateCollectionBreakdownRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateCollectionBreakdownRow)
            Return rowTemplateCollectionBreakdownRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateCollectionBreakdownDataTable = CType(MyBase.Clone,TemplateCollectionBreakdownDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateCollectionBreakdownDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsorter = MyBase.Columns("sorter")
            Me.columnNameCourseOR = MyBase.Columns("NameCourseOR")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnORNo = MyBase.Columns("ORNo")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnCourse = MyBase.Columns("Course")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.columnNameCourseOR = New Global.System.Data.DataColumn("NameCourseOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameCourseOR)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnORNo = New Global.System.Data.DataColumn("ORNo", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORNo)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateCollectionBreakdownRow() As TemplateCollectionBreakdownRow
            Return CType(Me.NewRow,TemplateCollectionBreakdownRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateCollectionBreakdownRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateCollectionBreakdownRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateCollectionBreakdownRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionBreakdownRowChanged(Me, New TemplateCollectionBreakdownRowChangeEvent(CType(e.Row,TemplateCollectionBreakdownRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateCollectionBreakdownRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionBreakdownRowChanging(Me, New TemplateCollectionBreakdownRowChangeEvent(CType(e.Row,TemplateCollectionBreakdownRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateCollectionBreakdownRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionBreakdownRowDeleted(Me, New TemplateCollectionBreakdownRowChangeEvent(CType(e.Row,TemplateCollectionBreakdownRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateCollectionBreakdownRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateCollectionBreakdownRowDeleting(Me, New TemplateCollectionBreakdownRowChangeEvent(CType(e.Row,TemplateCollectionBreakdownRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateCollectionBreakdownRow(ByVal row As TemplateCollectionBreakdownRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateCollectionBreakdownDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateSAODataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateSAORow)
        
        Private columnsorter As Global.System.Data.DataColumn
        
        Private columngroup As Global.System.Data.DataColumn
        
        Private columnitemname As Global.System.Data.DataColumn
        
        Private columnitemamount As Global.System.Data.DataColumn
        
        Private columnrunningsum As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateSAO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property runningsumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrunningsum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateSAORow
            Get
                Return CType(Me.Rows(index),TemplateSAORow)
            End Get
        End Property
        
        Public Event TemplateSAORowChanging As TemplateSAORowChangeEventHandler
        
        Public Event TemplateSAORowChanged As TemplateSAORowChangeEventHandler
        
        Public Event TemplateSAORowDeleting As TemplateSAORowChangeEventHandler
        
        Public Event TemplateSAORowDeleted As TemplateSAORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateSAORow(ByVal row As TemplateSAORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateSAORow(ByVal sorter As String, ByVal group As String, ByVal itemname As String, ByVal itemamount As Decimal, ByVal runningsum As Decimal) As TemplateSAORow
            Dim rowTemplateSAORow As TemplateSAORow = CType(Me.NewRow,TemplateSAORow)
            Dim columnValuesArray() As Object = New Object() {sorter, group, itemname, itemamount, runningsum}
            rowTemplateSAORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateSAORow)
            Return rowTemplateSAORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateSAODataTable = CType(MyBase.Clone,TemplateSAODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateSAODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsorter = MyBase.Columns("sorter")
            Me.columngroup = MyBase.Columns("group")
            Me.columnitemname = MyBase.Columns("itemname")
            Me.columnitemamount = MyBase.Columns("itemamount")
            Me.columnrunningsum = MyBase.Columns("runningsum")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.columngroup = New Global.System.Data.DataColumn("group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup)
            Me.columnitemname = New Global.System.Data.DataColumn("itemname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemname)
            Me.columnitemamount = New Global.System.Data.DataColumn("itemamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemamount)
            Me.columnrunningsum = New Global.System.Data.DataColumn("runningsum", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrunningsum)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateSAORow() As TemplateSAORow
            Return CType(Me.NewRow,TemplateSAORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateSAORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateSAORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateSAORowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateSAORowChanged(Me, New TemplateSAORowChangeEvent(CType(e.Row,TemplateSAORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateSAORowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateSAORowChanging(Me, New TemplateSAORowChangeEvent(CType(e.Row,TemplateSAORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateSAORowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateSAORowDeleted(Me, New TemplateSAORowChangeEvent(CType(e.Row,TemplateSAORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateSAORowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateSAORowDeleting(Me, New TemplateSAORowChangeEvent(CType(e.Row,TemplateSAORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateSAORow(ByVal row As TemplateSAORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateSAODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateEvaluationCurriculumReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateEvaluationCurriculumReportRow)
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnyearlevel As Global.System.Data.DataColumn
        
        Private columnsemname1 As Global.System.Data.DataColumn
        
        Private columnsubjectcode As Global.System.Data.DataColumn
        
        Private columnsubjectname As Global.System.Data.DataColumn
        
        Private columnsubjectunits As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnsemname2 As Global.System.Data.DataColumn
        
        Private column2subjectcode As Global.System.Data.DataColumn
        
        Private column2subjectname As Global.System.Data.DataColumn
        
        Private column2subjectunits As Global.System.Data.DataColumn
        
        Private column2grade As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateEvaluationCurriculumReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semname1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemname1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semname2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemname2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2subjectcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column2subjectcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2subjectnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column2subjectname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2subjectunitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column2subjectunits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column2grade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateEvaluationCurriculumReportRow
            Get
                Return CType(Me.Rows(index),TemplateEvaluationCurriculumReportRow)
            End Get
        End Property
        
        Public Event TemplateEvaluationCurriculumReportRowChanging As TemplateEvaluationCurriculumReportRowChangeEventHandler
        
        Public Event TemplateEvaluationCurriculumReportRowChanged As TemplateEvaluationCurriculumReportRowChangeEventHandler
        
        Public Event TemplateEvaluationCurriculumReportRowDeleting As TemplateEvaluationCurriculumReportRowChangeEventHandler
        
        Public Event TemplateEvaluationCurriculumReportRowDeleted As TemplateEvaluationCurriculumReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateEvaluationCurriculumReportRow(ByVal row As TemplateEvaluationCurriculumReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateEvaluationCurriculumReportRow(ByVal studentpk As Long, ByVal yearlevel As String, ByVal semname1 As String, ByVal subjectcode As String, ByVal subjectname As String, ByVal subjectunits As Integer, ByVal grade As String, ByVal semname2 As String, ByVal _2subjectcode As String, ByVal _2subjectname As String, ByVal _2subjectunits As Integer, ByVal _2grade As String) As TemplateEvaluationCurriculumReportRow
            Dim rowTemplateEvaluationCurriculumReportRow As TemplateEvaluationCurriculumReportRow = CType(Me.NewRow,TemplateEvaluationCurriculumReportRow)
            Dim columnValuesArray() As Object = New Object() {studentpk, yearlevel, semname1, subjectcode, subjectname, subjectunits, grade, semname2, _2subjectcode, _2subjectname, _2subjectunits, _2grade}
            rowTemplateEvaluationCurriculumReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateEvaluationCurriculumReportRow)
            Return rowTemplateEvaluationCurriculumReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateEvaluationCurriculumReportDataTable = CType(MyBase.Clone,TemplateEvaluationCurriculumReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateEvaluationCurriculumReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnyearlevel = MyBase.Columns("yearlevel")
            Me.columnsemname1 = MyBase.Columns("semname1")
            Me.columnsubjectcode = MyBase.Columns("subjectcode")
            Me.columnsubjectname = MyBase.Columns("subjectname")
            Me.columnsubjectunits = MyBase.Columns("subjectunits")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnsemname2 = MyBase.Columns("semname2")
            Me.column2subjectcode = MyBase.Columns("2subjectcode")
            Me.column2subjectname = MyBase.Columns("2subjectname")
            Me.column2subjectunits = MyBase.Columns("2subjectunits")
            Me.column2grade = MyBase.Columns("2grade")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnyearlevel = New Global.System.Data.DataColumn("yearlevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearlevel)
            Me.columnsemname1 = New Global.System.Data.DataColumn("semname1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemname1)
            Me.columnsubjectcode = New Global.System.Data.DataColumn("subjectcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectcode)
            Me.columnsubjectname = New Global.System.Data.DataColumn("subjectname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectname)
            Me.columnsubjectunits = New Global.System.Data.DataColumn("subjectunits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectunits)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnsemname2 = New Global.System.Data.DataColumn("semname2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemname2)
            Me.column2subjectcode = New Global.System.Data.DataColumn("2subjectcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2subjectcode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2subjectcode")
            Me.column2subjectcode.ExtendedProperties.Add("Generator_UserColumnName", "2subjectcode")
            MyBase.Columns.Add(Me.column2subjectcode)
            Me.column2subjectname = New Global.System.Data.DataColumn("2subjectname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2subjectname.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2subjectname")
            Me.column2subjectname.ExtendedProperties.Add("Generator_UserColumnName", "2subjectname")
            MyBase.Columns.Add(Me.column2subjectname)
            Me.column2subjectunits = New Global.System.Data.DataColumn("2subjectunits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me.column2subjectunits.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2subjectunits")
            Me.column2subjectunits.ExtendedProperties.Add("Generator_UserColumnName", "2subjectunits")
            MyBase.Columns.Add(Me.column2subjectunits)
            Me.column2grade = New Global.System.Data.DataColumn("2grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.column2grade.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2grade")
            Me.column2grade.ExtendedProperties.Add("Generator_UserColumnName", "2grade")
            MyBase.Columns.Add(Me.column2grade)
            Me.columnsubjectname.Caption = "SubjectName"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateEvaluationCurriculumReportRow() As TemplateEvaluationCurriculumReportRow
            Return CType(Me.NewRow,TemplateEvaluationCurriculumReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateEvaluationCurriculumReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateEvaluationCurriculumReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateEvaluationCurriculumReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationCurriculumReportRowChanged(Me, New TemplateEvaluationCurriculumReportRowChangeEvent(CType(e.Row,TemplateEvaluationCurriculumReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateEvaluationCurriculumReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationCurriculumReportRowChanging(Me, New TemplateEvaluationCurriculumReportRowChangeEvent(CType(e.Row,TemplateEvaluationCurriculumReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateEvaluationCurriculumReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationCurriculumReportRowDeleted(Me, New TemplateEvaluationCurriculumReportRowChangeEvent(CType(e.Row,TemplateEvaluationCurriculumReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateEvaluationCurriculumReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateEvaluationCurriculumReportRowDeleting(Me, New TemplateEvaluationCurriculumReportRowChangeEvent(CType(e.Row,TemplateEvaluationCurriculumReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateEvaluationCurriculumReportRow(ByVal row As TemplateEvaluationCurriculumReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateEvaluationCurriculumReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateStudentsReportsDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateStudentsReportsRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateStudentsReports"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateStudentsReportsRow
            Get
                Return CType(Me.Rows(index),TemplateStudentsReportsRow)
            End Get
        End Property
        
        Public Event TemplateStudentsReportsRowChanging As TemplateStudentsReportsRowChangeEventHandler
        
        Public Event TemplateStudentsReportsRowChanged As TemplateStudentsReportsRowChangeEventHandler
        
        Public Event TemplateStudentsReportsRowDeleting As TemplateStudentsReportsRowChangeEventHandler
        
        Public Event TemplateStudentsReportsRowDeleted As TemplateStudentsReportsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateStudentsReportsRow(ByVal row As TemplateStudentsReportsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateStudentsReportsRow(ByVal regDate As Date, ByVal StudentType As String, ByVal yrlevel As Integer, ByVal coursepk As Integer, ByVal Gender As String, ByVal StudentName As String, ByVal CourseName As String, ByVal StudentID As String) As TemplateStudentsReportsRow
            Dim rowTemplateStudentsReportsRow As TemplateStudentsReportsRow = CType(Me.NewRow,TemplateStudentsReportsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, regDate, StudentType, yrlevel, coursepk, Gender, StudentName, CourseName, StudentID}
            rowTemplateStudentsReportsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateStudentsReportsRow)
            Return rowTemplateStudentsReportsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateStudentsReportsDataTable = CType(MyBase.Clone,TemplateStudentsReportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateStudentsReportsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnregDate = MyBase.Columns("regDate")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnStudentID = MyBase.Columns("StudentID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentType.MaxLength = 50
            Me.columncoursepk.AllowDBNull = false
            Me.columnGender.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.MaxLength = 50
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateStudentsReportsRow() As TemplateStudentsReportsRow
            Return CType(Me.NewRow,TemplateStudentsReportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateStudentsReportsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateStudentsReportsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateStudentsReportsRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateStudentsReportsRowChanged(Me, New TemplateStudentsReportsRowChangeEvent(CType(e.Row,TemplateStudentsReportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateStudentsReportsRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateStudentsReportsRowChanging(Me, New TemplateStudentsReportsRowChangeEvent(CType(e.Row,TemplateStudentsReportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateStudentsReportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateStudentsReportsRowDeleted(Me, New TemplateStudentsReportsRowChangeEvent(CType(e.Row,TemplateStudentsReportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateStudentsReportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateStudentsReportsRowDeleting(Me, New TemplateStudentsReportsRowChangeEvent(CType(e.Row,TemplateStudentsReportsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateStudentsReportsRow(ByVal row As TemplateStudentsReportsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateStudentsReportsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BrokenHoursTemplateDataTable
        Inherits Global.System.Data.TypedTableBase(Of BrokenHoursTemplateRow)
        
        Private columnSubjectDesc As Global.System.Data.DataColumn
        
        Private columnDayTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BrokenHoursTemplate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDayTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BrokenHoursTemplateRow
            Get
                Return CType(Me.Rows(index),BrokenHoursTemplateRow)
            End Get
        End Property
        
        Public Event BrokenHoursTemplateRowChanging As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowChanged As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowDeleting As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowDeleted As BrokenHoursTemplateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBrokenHoursTemplateRow(ByVal row As BrokenHoursTemplateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBrokenHoursTemplateRow(ByVal SubjectDesc As String, ByVal DayTime As String) As BrokenHoursTemplateRow
            Dim rowBrokenHoursTemplateRow As BrokenHoursTemplateRow = CType(Me.NewRow,BrokenHoursTemplateRow)
            Dim columnValuesArray() As Object = New Object() {SubjectDesc, DayTime}
            rowBrokenHoursTemplateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBrokenHoursTemplateRow)
            Return rowBrokenHoursTemplateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BrokenHoursTemplateDataTable = CType(MyBase.Clone,BrokenHoursTemplateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BrokenHoursTemplateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectDesc = MyBase.Columns("SubjectDesc")
            Me.columnDayTime = MyBase.Columns("DayTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectDesc = New Global.System.Data.DataColumn("SubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDesc)
            Me.columnDayTime = New Global.System.Data.DataColumn("DayTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDayTime)
            Me.columnSubjectDesc.DefaultValue = CType("",String)
            Me.columnDayTime.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBrokenHoursTemplateRow() As BrokenHoursTemplateRow
            Return CType(Me.NewRow,BrokenHoursTemplateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BrokenHoursTemplateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BrokenHoursTemplateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrokenHoursTemplateRowChangedEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowChanged(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrokenHoursTemplateRowChangingEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowChanging(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrokenHoursTemplateRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowDeleted(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrokenHoursTemplateRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowDeleting(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBrokenHoursTemplateRow(ByVal row As BrokenHoursTemplateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BrokenHoursTemplateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TORDataTable
        Inherits Global.System.Data.TypedTableBase(Of TORRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnGradingSystem As Global.System.Data.DataColumn
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnSchoolName As Global.System.Data.DataColumn
        
        Private columnSemSchoolYear As Global.System.Data.DataColumn
        
        Private columnSubjectCode As Global.System.Data.DataColumn
        
        Private columnSubjectDesc As Global.System.Data.DataColumn
        
        Private columnGrade As Global.System.Data.DataColumn
        
        Private columnCompletionGrade As Global.System.Data.DataColumn
        
        Private columnCredits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradingSystemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradingSystem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemSchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TORRow
            Get
                Return CType(Me.Rows(index),TORRow)
            End Get
        End Property
        
        Public Event TORRowChanging As TORRowChangeEventHandler
        
        Public Event TORRowChanged As TORRowChangeEventHandler
        
        Public Event TORRowDeleting As TORRowChangeEventHandler
        
        Public Event TORRowDeleted As TORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTORRow(ByVal row As TORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTORRow(ByVal GradingSystem As String, ByVal StudentPK As String, ByVal SchoolName As String, ByVal SemSchoolYear As String, ByVal SubjectCode As String, ByVal SubjectDesc As String, ByVal Grade As String, ByVal CompletionGrade As String, ByVal Credits As String) As TORRow
            Dim rowTORRow As TORRow = CType(Me.NewRow,TORRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, GradingSystem, StudentPK, SchoolName, SemSchoolYear, SubjectCode, SubjectDesc, Grade, CompletionGrade, Credits}
            rowTORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTORRow)
            Return rowTORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TORRow
            Return CType(Me.Rows.Find(New Object() {pk}),TORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TORDataTable = CType(MyBase.Clone,TORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnGradingSystem = MyBase.Columns("GradingSystem")
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnSchoolName = MyBase.Columns("SchoolName")
            Me.columnSemSchoolYear = MyBase.Columns("SemSchoolYear")
            Me.columnSubjectCode = MyBase.Columns("SubjectCode")
            Me.columnSubjectDesc = MyBase.Columns("SubjectDesc")
            Me.columnGrade = MyBase.Columns("Grade")
            Me.columnCompletionGrade = MyBase.Columns("CompletionGrade")
            Me.columnCredits = MyBase.Columns("Credits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnGradingSystem = New Global.System.Data.DataColumn("GradingSystem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradingSystem)
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnSchoolName = New Global.System.Data.DataColumn("SchoolName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolName)
            Me.columnSemSchoolYear = New Global.System.Data.DataColumn("SemSchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemSchoolYear)
            Me.columnSubjectCode = New Global.System.Data.DataColumn("SubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectCode)
            Me.columnSubjectDesc = New Global.System.Data.DataColumn("SubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDesc)
            Me.columnGrade = New Global.System.Data.DataColumn("Grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.columnCompletionGrade = New Global.System.Data.DataColumn("CompletionGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompletionGrade)
            Me.columnCredits = New Global.System.Data.DataColumn("Credits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AutoIncrementSeed = 1
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
            Me.columnStudentPK.Caption = "Student"
            Me.columnSubjectCode.Caption = "StudentID"
            Me.columnGrade.Caption = "Course"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTORRow() As TORRow
            Return CType(Me.NewRow,TORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TORRowChangedEvent) Is Nothing) Then
                RaiseEvent TORRowChanged(Me, New TORRowChangeEvent(CType(e.Row,TORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TORRowChangingEvent) Is Nothing) Then
                RaiseEvent TORRowChanging(Me, New TORRowChangeEvent(CType(e.Row,TORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TORRowDeletedEvent) Is Nothing) Then
                RaiseEvent TORRowDeleted(Me, New TORRowChangeEvent(CType(e.Row,TORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TORRowDeletingEvent) Is Nothing) Then
                RaiseEvent TORRowDeleting(Me, New TORRowChangeEvent(CType(e.Row,TORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTORRow(ByVal row As TORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRep = New dsRep
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudents As StudentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudents = CType(Me.Table,StudentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudents.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudents.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudents.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudents.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudents.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudents.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudents.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudents.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudents.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudents.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudents.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudents.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudents.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudents.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudents.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate4Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsbyStudentRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsbyStudent As EnrollSubjectsbyStudentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsbyStudent = CType(Me.Table,EnrollSubjectsbyStudentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudent.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudent.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsByCourseYrTypeRegDateRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentsByCourseYrTypeRegDate As StudentsByCourseYrTypeRegDateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentsByCourseYrTypeRegDate = CType(Me.Table,StudentsByCourseYrTypeRegDateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'StudentsByCourseYrTypeRegDate' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'StudentsByCourseYrTypeRegDate' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.yrlevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrlevel' in table 'StudentsByCourseYrTypeRegDate' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'StudentsByCourseYrTypeRegDate' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudentsByCourseYrTypeRegDate.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentsByCourseYrTypeRegDate.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableStudentsByCourseYrTypeRegDate.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableStudentsByCourseYrTypeRegDate.regDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsByCourseYrTypeRegDate.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudentsByCourseYrTypeRegDate.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrlevelNull() As Boolean
            Return Me.IsNull(Me.tableStudentsByCourseYrTypeRegDate.yrlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrlevelNull()
            Me(Me.tableStudentsByCourseYrTypeRegDate.yrlevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudentsByCourseYrTypeRegDate.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudentsByCourseYrTypeRegDate.GenderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsbyStudentSemYrPkRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsbyStudentSemYrPk As EnrollSubjectsbyStudentSemYrPkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsbyStudentSemYrPk = CType(Me.Table,EnrollSubjectsbyStudentSemYrPkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyStudentSemYrPk.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyStudentSemYrPk.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GradesbyStudentPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableGradesbyStudentPK As GradesbyStudentPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGradesbyStudentPK = CType(Me.Table,GradesbyStudentPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.exSubjectUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectUnits' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exSubjectUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.exCreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCreditGroup' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exCreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.exSubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectCode' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exSubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCompletionGrade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.exCompletionGradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCompletionGrade' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.exCompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isPrevSchoolGrade() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.isPrevSchoolGradeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isPrevSchoolGrade' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.isPrevSchoolGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableGradesbyStudentPK.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesbyStudentPK.SorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sorter' in table 'GradesbyStudentPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesbyStudentPK.SorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectUnitsNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.exSubjectUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectUnitsNull()
            Me(Me.tableGradesbyStudentPK.exSubjectUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.exCreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCreditGroupNull()
            Me(Me.tableGradesbyStudentPK.exCreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.exSubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectCodeNull()
            Me(Me.tableGradesbyStudentPK.exSubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.exCompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCompletionGradeNull()
            Me(Me.tableGradesbyStudentPK.exCompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisPrevSchoolGradeNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.isPrevSchoolGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisPrevSchoolGradeNull()
            Me(Me.tableGradesbyStudentPK.isPrevSchoolGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSorterNull() As Boolean
            Return Me.IsNull(Me.tableGradesbyStudentPK.SorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSorterNull()
            Me(Me.tableGradesbyStudentPK.SorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubjectsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubjects As SubjectsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubjects = CType(Me.Table,SubjectsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectPriKey() As Integer
            Get
                Return CType(Me(Me.tableSubjects.SubjectPriKeyColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjects.SubjectPriKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Return CType(Me(Me.tableSubjects.SubjectCodeColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Return CType(Me(Me.tableSubjects.SubjectNameColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSubjects.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSubjects.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property labunits() As Single
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.labunitsColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'labunits' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.labunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Single
            Get
                Return CType(Me(Me.tableSubjects.unitsColumn),Single)
            End Get
            Set
                Me(Me.tableSubjects.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq() As Integer
            Get
                Return CType(Me(Me.tableSubjects.prereqColumn),Integer)
            End Get
            Set
                Me(Me.tableSubjects.prereqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property major() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.majorColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'major' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.majorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq2' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq3' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq4' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq5' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq6' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prereq7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.prereq7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prereq7' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.prereq7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property creditgroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSubjects.creditgroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'creditgroup' in table 'Subjects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubjects.creditgroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslabunitsNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.labunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlabunitsNull()
            Me(Me.tableSubjects.labunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmajorNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.majorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmajorNull()
            Me(Me.tableSubjects.majorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq2Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq2Null()
            Me(Me.tableSubjects.prereq2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq3Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq3Null()
            Me(Me.tableSubjects.prereq3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq4Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq4Null()
            Me(Me.tableSubjects.prereq4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq5Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq5Null()
            Me(Me.tableSubjects.prereq5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq6Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq6Null()
            Me(Me.tableSubjects.prereq6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprereq7Null() As Boolean
            Return Me.IsNull(Me.tableSubjects.prereq7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprereq7Null()
            Me(Me.tableSubjects.prereq7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscreditgroupNull() As Boolean
            Return Me.IsNull(Me.tableSubjects.creditgroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcreditgroupNull()
            Me(Me.tableSubjects.creditgroupColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollHeaderCountbySexRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollHeaderCountbySex As EnrollHeaderCountbySexDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollHeaderCountbySex = CType(Me.Table,EnrollHeaderCountbySexDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeaderCountbySex.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbySex.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeaderCountbySex.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbySex.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollHeaderCountbySex.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'EnrollHeaderCountbySex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbySex.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GenderCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollHeaderCountbySex.GenderCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GenderCount' in table 'EnrollHeaderCountbySex' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbySex.GenderCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableEnrollHeaderCountbySex.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableEnrollHeaderCountbySex.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderCountNull() As Boolean
            Return Me.IsNull(Me.tableEnrollHeaderCountbySex.GenderCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderCountNull()
            Me(Me.tableEnrollHeaderCountbySex.GenderCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectCountbyCourseRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectCountbyCourse As EnrollSubjectCountbyCourseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectCountbyCourse = CType(Me.Table,EnrollSubjectCountbyCourseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbyCourse.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbyCourse.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbyCourse.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbyCourse.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbyCourse.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbyCourse.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrollCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollSubjectCountbyCourse.EnrollCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnrollCount' in table 'EnrollSubjectCountbyCourse' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbyCourse.EnrollCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrollCountNull() As Boolean
            Return Me.IsNull(Me.tableEnrollSubjectCountbyCourse.EnrollCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrollCountNull()
            Me(Me.tableEnrollSubjectCountbyCourse.EnrollCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollHeaderCountbyyearlevelRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollHeaderCountbyyearlevel As EnrollHeaderCountbyyearlevelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollHeaderCountbyyearlevel = CType(Me.Table,EnrollHeaderCountbyyearlevelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeaderCountbyyearlevel.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbyyearlevel.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeaderCountbyyearlevel.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbyyearlevel.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollHeaderCountbyyearlevel.yrlevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrlevel' in table 'EnrollHeaderCountbyyearlevel' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbyyearlevel.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrollCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollHeaderCountbyyearlevel.EnrollCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnrollCount' in table 'EnrollHeaderCountbyyearlevel' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollHeaderCountbyyearlevel.EnrollCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrlevelNull() As Boolean
            Return Me.IsNull(Me.tableEnrollHeaderCountbyyearlevel.yrlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrlevelNull()
            Me(Me.tableEnrollHeaderCountbyyearlevel.yrlevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrollCountNull() As Boolean
            Return Me.IsNull(Me.tableEnrollHeaderCountbyyearlevel.EnrollCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrollCountNull()
            Me(Me.tableEnrollHeaderCountbyyearlevel.EnrollCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectCountbySubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectCountbySubject As EnrollSubjectCountbySubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectCountbySubject = CType(Me.Table,EnrollSubjectCountbySubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbySubject.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbySubject.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbySubject.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbySubject.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrollCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollSubjectCountbySubject.EnrollCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnrollCount' in table 'EnrollSubjectCountbySubject' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbySubject.EnrollCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectCountbySubject.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectCountbySubject.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrollCountNull() As Boolean
            Return Me.IsNull(Me.tableEnrollSubjectCountbySubject.EnrollCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrollCountNull()
            Me(Me.tableEnrollSubjectCountbySubject.EnrollCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReceiptsHeaderByStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableReceiptsHeaderByStatus As ReceiptsHeaderByStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReceiptsHeaderByStatus = CType(Me.Table,ReceiptsHeaderByStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRDate() As Date
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.TRDateColumn),Date)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.TRDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reference() As String
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.ReferenceColumn),String)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedFrom() As String
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.ReceivedFromColumn),String)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.ReceivedFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cancelled() As Integer
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.CancelledColumn),Integer)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.CancelledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Studentpk() As Integer
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.StudentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.StudentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableReceiptsHeaderByStatus.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payperiod() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReceiptsHeaderByStatus.payperiodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'payperiod' in table 'ReceiptsHeaderByStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.payperiodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashier() As String
            Get
                Try 
                    Return CType(Me(Me.tableReceiptsHeaderByStatus.cashierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cashier' in table 'ReceiptsHeaderByStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.cashierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReceiptsHeaderByStatus.semPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'semPK' in table 'ReceiptsHeaderByStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.semPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReceiptsHeaderByStatus.yearPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yearPK' in table 'ReceiptsHeaderByStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceiptsHeaderByStatus.yearPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspayperiodNull() As Boolean
            Return Me.IsNull(Me.tableReceiptsHeaderByStatus.payperiodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpayperiodNull()
            Me(Me.tableReceiptsHeaderByStatus.payperiodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscashierNull() As Boolean
            Return Me.IsNull(Me.tableReceiptsHeaderByStatus.cashierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcashierNull()
            Me(Me.tableReceiptsHeaderByStatus.cashierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssemPKNull() As Boolean
            Return Me.IsNull(Me.tableReceiptsHeaderByStatus.semPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsemPKNull()
            Me(Me.tableReceiptsHeaderByStatus.semPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyearPKNull() As Boolean
            Return Me.IsNull(Me.tableReceiptsHeaderByStatus.yearPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyearPKNull()
            Me(Me.tableReceiptsHeaderByStatus.yearPKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsCrosstabRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentsCrosstab As StudentsCrosstabDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentsCrosstab = CType(Me.Table,StudentsCrosstabDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudentsCrosstab.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsCrosstab.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsCrosstab.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'StudentsCrosstab' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsCrosstab.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentsCrosstab.yrlevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrlevel' in table 'StudentsCrosstab' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsCrosstab.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsCrosstab.CourseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CourseName' in table 'StudentsCrosstab' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsCrosstab.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudentsCrosstab.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudentsCrosstab.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrlevelNull() As Boolean
            Return Me.IsNull(Me.tableStudentsCrosstab.yrlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrlevelNull()
            Me(Me.tableStudentsCrosstab.yrlevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNameNull() As Boolean
            Return Me.IsNull(Me.tableStudentsCrosstab.CourseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNameNull()
            Me(Me.tableStudentsCrosstab.CourseNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClassListRow
        Inherits Global.System.Data.DataRow
        
        Private tableClassList As ClassListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassList = CType(Me.Table,ClassListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassList.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'ClassList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassList.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableClassList.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'ClassList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassList.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableClassList.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableClassList.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableClassList.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableClassList.CourseColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollmentListRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollmentList As EnrollmentListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollmentList = CType(Me.Table,EnrollmentListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableEnrollmentList.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollmentList.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Student() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.StudentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Student' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.StudentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj1' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units1' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj2' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units2' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj3' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units3' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj4' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units4' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj5() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj5' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units5() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units5' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj6() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj6' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units6() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units6' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj7() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj7' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units7() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units7' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj8() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj8' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units8() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units8' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj9() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj9' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units9() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units9' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj10() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj10' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units10() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units10' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPk() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.StudentPkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPk' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.StudentPkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.yrLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrLevel' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.yrLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.sexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sex' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bday() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.bdayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bday' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.bdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalunits() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.totalunitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalunits' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.totalunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj11() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj11' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units11() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units11' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj12() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj12' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units12() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units12' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj13() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj13' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units13() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units13' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj14() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj14' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units14() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units14' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj15() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Subj15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj15' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Subj15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units15() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollmentList.Units15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units15' in table 'EnrollmentList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollmentList.Units15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.StudentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNull()
            Me(Me.tableEnrollmentList.StudentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tableEnrollmentList.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableEnrollmentList.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj1Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj1Null()
            Me(Me.tableEnrollmentList.Subj1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits1Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits1Null()
            Me(Me.tableEnrollmentList.Units1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj2Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj2Null()
            Me(Me.tableEnrollmentList.Subj2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits2Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits2Null()
            Me(Me.tableEnrollmentList.Units2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj3Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj3Null()
            Me(Me.tableEnrollmentList.Subj3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits3Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits3Null()
            Me(Me.tableEnrollmentList.Units3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj4Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj4Null()
            Me(Me.tableEnrollmentList.Subj4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits4Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits4Null()
            Me(Me.tableEnrollmentList.Units4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj5Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj5Null()
            Me(Me.tableEnrollmentList.Subj5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits5Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits5Null()
            Me(Me.tableEnrollmentList.Units5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj6Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj6Null()
            Me(Me.tableEnrollmentList.Subj6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits6Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits6Null()
            Me(Me.tableEnrollmentList.Units6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj7Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj7Null()
            Me(Me.tableEnrollmentList.Subj7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits7Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits7Null()
            Me(Me.tableEnrollmentList.Units7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj8Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj8Null()
            Me(Me.tableEnrollmentList.Subj8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits8Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits8Null()
            Me(Me.tableEnrollmentList.Units8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj9Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj9Null()
            Me(Me.tableEnrollmentList.Subj9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits9Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits9Null()
            Me(Me.tableEnrollmentList.Units9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj10Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj10Null()
            Me(Me.tableEnrollmentList.Subj10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits10Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits10Null()
            Me(Me.tableEnrollmentList.Units10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPkNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.StudentPkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPkNull()
            Me(Me.tableEnrollmentList.StudentPkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrLevelNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.yrLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrLevelNull()
            Me(Me.tableEnrollmentList.yrLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.sexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexNull()
            Me(Me.tableEnrollmentList.sexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbdayNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.bdayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbdayNull()
            Me(Me.tableEnrollmentList.bdayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalunitsNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.totalunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalunitsNull()
            Me(Me.tableEnrollmentList.totalunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableEnrollmentList.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableEnrollmentList.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tableEnrollmentList.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj11Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj11Null()
            Me(Me.tableEnrollmentList.Subj11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits11Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits11Null()
            Me(Me.tableEnrollmentList.Units11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj12Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj12Null()
            Me(Me.tableEnrollmentList.Subj12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits12Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits12Null()
            Me(Me.tableEnrollmentList.Units12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj13Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj13Null()
            Me(Me.tableEnrollmentList.Subj13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits13Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits13Null()
            Me(Me.tableEnrollmentList.Units13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj14Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj14Null()
            Me(Me.tableEnrollmentList.Subj14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits14Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits14Null()
            Me(Me.tableEnrollmentList.Units14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj15Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Subj15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj15Null()
            Me(Me.tableEnrollmentList.Subj15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits15Null() As Boolean
            Return Me.IsNull(Me.tableEnrollmentList.Units15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits15Null()
            Me(Me.tableEnrollmentList.Units15Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReceivablesReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableReceivablesReport As ReceivablesReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReceivablesReport = CType(Me.Table,ReceivablesReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'ReceivablesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'ReceivablesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Balance() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.BalanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Balance' in table 'ReceivablesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptsforTerm() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.ReceiptsforTermColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptsforTerm' in table 'ReceivablesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.ReceiptsforTermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiredforSchedule() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.RequiredforScheduleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequiredforSchedule' in table 'ReceivablesReport' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.RequiredforScheduleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevSem() As Double
            Get
                Try 
                    Return CType(Me(Me.tableReceivablesReport.PrevSemColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevSem' in table 'ReceivablesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReceivablesReport.PrevSemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tableReceivablesReport.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableReceivablesReport.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.BalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceNull()
            Me(Me.tableReceivablesReport.BalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptsforTermNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.ReceiptsforTermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptsforTermNull()
            Me(Me.tableReceivablesReport.ReceiptsforTermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequiredforScheduleNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.RequiredforScheduleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequiredforScheduleNull()
            Me(Me.tableReceivablesReport.RequiredforScheduleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevSemNull() As Boolean
            Return Me.IsNull(Me.tableReceivablesReport.PrevSemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevSemNull()
            Me(Me.tableReceivablesReport.PrevSemColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CollegiateGradingSheetRow
        Inherits Global.System.Data.DataRow
        
        Private tableCollegiateGradingSheet As CollegiateGradingSheetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCollegiateGradingSheet = CType(Me.Table,CollegiateGradingSheetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SyofferPK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCollegiateGradingSheet.SyofferPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SyofferPK' in table 'CollegiateGradingSheet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollegiateGradingSheet.SyofferPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCollegiateGradingSheet.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'CollegiateGradingSheet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollegiateGradingSheet.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableCollegiateGradingSheet.YearLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearLevel' in table 'CollegiateGradingSheet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollegiateGradingSheet.YearLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableCollegiateGradingSheet.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'CollegiateGradingSheet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollegiateGradingSheet.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSyofferPKNull() As Boolean
            Return Me.IsNull(Me.tableCollegiateGradingSheet.SyofferPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSyofferPKNull()
            Me(Me.tableCollegiateGradingSheet.SyofferPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableCollegiateGradingSheet.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableCollegiateGradingSheet.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearLevelNull() As Boolean
            Return Me.IsNull(Me.tableCollegiateGradingSheet.YearLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearLevelNull()
            Me(Me.tableCollegiateGradingSheet.YearLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableCollegiateGradingSheet.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableCollegiateGradingSheet.CourseColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PromotionalReportRow
        Inherits Global.System.Data.DataRow
        
        Private tablePromotionalReport As PromotionalReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePromotionalReport = CType(Me.Table,PromotionalReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tablePromotionalReport.pkColumn),Integer)
            End Get
            Set
                Me(Me.tablePromotionalReport.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Student() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.StudentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Student' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.StudentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MI() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.MIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MI' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.MIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj1' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units1' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade1' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj2' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units2' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade2' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj3' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units3' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade3' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj4() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj4' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units4() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units4' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade4() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade4' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj5() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj5' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units5() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units5' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade5() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade5' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj6() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj6' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units6() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units6' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade6() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade6' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj7() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj7' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units7() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units7' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade7() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade7' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj8() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj8' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units8() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units8' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade8() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade8' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj9() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj9' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units9() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units9' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade9() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade9' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj10() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj10' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units10() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units10' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade10() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade10' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPk() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.StudentPkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPk' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.StudentPkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.yrLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrLevel' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.yrLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sex() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.sexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sex' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.sexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bday() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.bdayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bday' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.bdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalunits() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.totalunitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalunits' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.totalunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj11() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj11' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units11() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units11' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade11() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade11' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj12() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj12' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units12() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units12' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade12() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade12' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj13' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units13' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade13() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade13' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj14() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj14' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units14() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units14' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade14() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade14' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subj15() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Subj15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subj15' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Subj15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units15() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Units15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units15' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Units15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade15() As String
            Get
                Try 
                    Return CType(Me(Me.tablePromotionalReport.Grade15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade15' in table 'PromotionalReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePromotionalReport.Grade15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.StudentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNull()
            Me(Me.tablePromotionalReport.StudentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tablePromotionalReport.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tablePromotionalReport.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMINull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.MIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMINull()
            Me(Me.tablePromotionalReport.MIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tablePromotionalReport.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tablePromotionalReport.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj1Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj1Null()
            Me(Me.tablePromotionalReport.Subj1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits1Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits1Null()
            Me(Me.tablePromotionalReport.Units1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade1Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade1Null()
            Me(Me.tablePromotionalReport.Grade1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj2Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj2Null()
            Me(Me.tablePromotionalReport.Subj2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits2Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits2Null()
            Me(Me.tablePromotionalReport.Units2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade2Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade2Null()
            Me(Me.tablePromotionalReport.Grade2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj3Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj3Null()
            Me(Me.tablePromotionalReport.Subj3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits3Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits3Null()
            Me(Me.tablePromotionalReport.Units3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade3Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade3Null()
            Me(Me.tablePromotionalReport.Grade3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj4Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj4Null()
            Me(Me.tablePromotionalReport.Subj4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits4Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits4Null()
            Me(Me.tablePromotionalReport.Units4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade4Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade4Null()
            Me(Me.tablePromotionalReport.Grade4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj5Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj5Null()
            Me(Me.tablePromotionalReport.Subj5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits5Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits5Null()
            Me(Me.tablePromotionalReport.Units5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade5Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade5Null()
            Me(Me.tablePromotionalReport.Grade5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj6Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj6Null()
            Me(Me.tablePromotionalReport.Subj6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits6Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits6Null()
            Me(Me.tablePromotionalReport.Units6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade6Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade6Null()
            Me(Me.tablePromotionalReport.Grade6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj7Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj7Null()
            Me(Me.tablePromotionalReport.Subj7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits7Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits7Null()
            Me(Me.tablePromotionalReport.Units7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade7Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade7Null()
            Me(Me.tablePromotionalReport.Grade7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj8Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj8Null()
            Me(Me.tablePromotionalReport.Subj8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits8Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits8Null()
            Me(Me.tablePromotionalReport.Units8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade8Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade8Null()
            Me(Me.tablePromotionalReport.Grade8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj9Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj9Null()
            Me(Me.tablePromotionalReport.Subj9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits9Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits9Null()
            Me(Me.tablePromotionalReport.Units9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade9Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade9Null()
            Me(Me.tablePromotionalReport.Grade9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj10Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj10Null()
            Me(Me.tablePromotionalReport.Subj10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits10Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits10Null()
            Me(Me.tablePromotionalReport.Units10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade10Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade10Null()
            Me(Me.tablePromotionalReport.Grade10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPkNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.StudentPkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPkNull()
            Me(Me.tablePromotionalReport.StudentPkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrLevelNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.yrLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrLevelNull()
            Me(Me.tablePromotionalReport.yrLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.sexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexNull()
            Me(Me.tablePromotionalReport.sexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbdayNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.bdayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbdayNull()
            Me(Me.tablePromotionalReport.bdayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalunitsNull() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.totalunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalunitsNull()
            Me(Me.tablePromotionalReport.totalunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj11Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj11Null()
            Me(Me.tablePromotionalReport.Subj11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits11Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits11Null()
            Me(Me.tablePromotionalReport.Units11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade11Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade11Null()
            Me(Me.tablePromotionalReport.Grade11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj12Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj12Null()
            Me(Me.tablePromotionalReport.Subj12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits12Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits12Null()
            Me(Me.tablePromotionalReport.Units12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade12Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade12Null()
            Me(Me.tablePromotionalReport.Grade12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj13Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj13Null()
            Me(Me.tablePromotionalReport.Subj13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits13Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits13Null()
            Me(Me.tablePromotionalReport.Units13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade13Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade13Null()
            Me(Me.tablePromotionalReport.Grade13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj14Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj14Null()
            Me(Me.tablePromotionalReport.Subj14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits14Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits14Null()
            Me(Me.tablePromotionalReport.Units14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade14Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade14Null()
            Me(Me.tablePromotionalReport.Grade14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubj15Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Subj15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubj15Null()
            Me(Me.tablePromotionalReport.Subj15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnits15Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Units15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnits15Null()
            Me(Me.tablePromotionalReport.Units15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrade15Null() As Boolean
            Return Me.IsNull(Me.tablePromotionalReport.Grade15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrade15Null()
            Me(Me.tablePromotionalReport.Grade15Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GradesMailingListRow
        Inherits Global.System.Data.DataRow
        
        Private tableGradesMailingList As GradesMailingListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGradesMailingList = CType(Me.Table,GradesMailingListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableGradesMailingList.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableGradesMailingList.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FamilyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.FamilyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FamilyName' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.FamilyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.GradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.GradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.SubjectDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDescription' in table 'GradesMailingList' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.SubjectDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGradesMailingList.UnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'GradesMailingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGradesMailingList.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableGradesMailingList.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tableGradesMailingList.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFamilyNameNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.FamilyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFamilyNameNull()
            Me(Me.tableGradesMailingList.FamilyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableGradesMailingList.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.GradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradeNull()
            Me(Me.tableGradesMailingList.GradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableGradesMailingList.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableGradesMailingList.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.SubjectDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescriptionNull()
            Me(Me.tableGradesMailingList.SubjectDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableGradesMailingList.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tableGradesMailingList.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentPermanentRecordRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentPermanentRecord As StudentPermanentRecordDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentPermanentRecord = CType(Me.Table,StudentPermanentRecordDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentPermanentRecord.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.StudentPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.SchoolNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolName' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSchoolYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.SemSchoolYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSchoolYear' in table 'StudentPermanentRecord' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.SemSchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.SubjectDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDesc' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.SubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.GradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.GradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompletionGrade() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.CompletionGradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompletionGrade' in table 'StudentPermanentRecord' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.CompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credits() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.CreditsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credits' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.CreditsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group1' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group2' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group3Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group3' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group4Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group4' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group5Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group5' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group6Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group6' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group7Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group7' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group8() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group8Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group8' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group9() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group9Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group9' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group10() As Short
            Get
                Try 
                    Return CType(Me(Me.tableStudentPermanentRecord.group10Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group10' in table 'StudentPermanentRecord' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentPermanentRecord.group10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableStudentPermanentRecord.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolNameNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.SchoolNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolNameNull()
            Me(Me.tableStudentPermanentRecord.SchoolNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSchoolYearNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.SemSchoolYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSchoolYearNull()
            Me(Me.tableStudentPermanentRecord.SemSchoolYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableStudentPermanentRecord.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.SubjectDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescNull()
            Me(Me.tableStudentPermanentRecord.SubjectDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.GradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradeNull()
            Me(Me.tableStudentPermanentRecord.GradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.CompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompletionGradeNull()
            Me(Me.tableStudentPermanentRecord.CompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditsNull() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.CreditsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditsNull()
            Me(Me.tableStudentPermanentRecord.CreditsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup1Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup1Null()
            Me(Me.tableStudentPermanentRecord.group1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup2Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup2Null()
            Me(Me.tableStudentPermanentRecord.group2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup3Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup3Null()
            Me(Me.tableStudentPermanentRecord.group3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup4Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup4Null()
            Me(Me.tableStudentPermanentRecord.group4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup5Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup5Null()
            Me(Me.tableStudentPermanentRecord.group5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup6Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup6Null()
            Me(Me.tableStudentPermanentRecord.group6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup7Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup7Null()
            Me(Me.tableStudentPermanentRecord.group7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup8Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup8Null()
            Me(Me.tableStudentPermanentRecord.group8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup9Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup9Null()
            Me(Me.tableStudentPermanentRecord.group9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup10Null() As Boolean
            Return Me.IsNull(Me.tableStudentPermanentRecord.group10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup10Null()
            Me(Me.tableStudentPermanentRecord.group10Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateStatisticsReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateStatisticsReport As TemplateStatisticsReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateStatisticsReport = CType(Me.Table,TemplateStatisticsReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTemplateStatisticsReport.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSyGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStatisticsReport.SemSyGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSyGroup' in table 'TemplateStatisticsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.SemSyGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStatisticsReport.SubGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubGroup' in table 'TemplateStatisticsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.SubGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubGroupItem() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStatisticsReport.SubGroupItemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubGroupItem' in table 'TemplateStatisticsReport' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.SubGroupItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStatisticsReport.CountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Count' in table 'TemplateStatisticsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.CountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStatisticsReport.PercentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Percent' in table 'TemplateStatisticsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStatisticsReport.PercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSyGroupNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStatisticsReport.SemSyGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSyGroupNull()
            Me(Me.tableTemplateStatisticsReport.SemSyGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubGroupNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStatisticsReport.SubGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubGroupNull()
            Me(Me.tableTemplateStatisticsReport.SubGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubGroupItemNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStatisticsReport.SubGroupItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubGroupItemNull()
            Me(Me.tableTemplateStatisticsReport.SubGroupItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStatisticsReport.CountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountNull()
            Me(Me.tableTemplateStatisticsReport.CountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercentNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStatisticsReport.PercentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercentNull()
            Me(Me.tableTemplateStatisticsReport.PercentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentScheduleRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentSchedule As StudentScheduleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentSchedule = CType(Me.Table,StudentScheduleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentSchedule.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentSchedule.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.StudentPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.SubjectNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectName' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MonSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.MonSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MonSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.MonSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TueSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.TueSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TueSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.TueSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WedSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.WedSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WedSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.WedSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ThuSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.ThuSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ThuSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.ThuSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FriSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.FriSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FriSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.FriSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SatSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.SatSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SatSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.SatSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SunSked() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentSchedule.SunSkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SunSked' in table 'StudentSchedule' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentSchedule.SunSkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableStudentSchedule.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNameNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.SubjectNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNameNull()
            Me(Me.tableStudentSchedule.SubjectNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.MonSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonSkedNull()
            Me(Me.tableStudentSchedule.MonSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTueSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.TueSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTueSkedNull()
            Me(Me.tableStudentSchedule.TueSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWedSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.WedSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWedSkedNull()
            Me(Me.tableStudentSchedule.WedSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThuSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.ThuSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThuSkedNull()
            Me(Me.tableStudentSchedule.ThuSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFriSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.FriSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFriSkedNull()
            Me(Me.tableStudentSchedule.FriSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSatSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.SatSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSatSkedNull()
            Me(Me.tableStudentSchedule.SatSkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSunSkedNull() As Boolean
            Return Me.IsNull(Me.tableStudentSchedule.SunSkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSunSkedNull()
            Me(Me.tableStudentSchedule.SunSkedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateClassCardRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateClassCard As TemplateClassCardDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateClassCard = CType(Me.Table,TemplateClassCardDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTemplateClassCard.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateClassCard.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateClassCard.StudentPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'TemplateClassCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateClassCard.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateClassCard.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'TemplateClassCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateClassCard.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateClassCard.DaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Days' in table 'TemplateClassCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateClassCard.DaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateClassCard.TimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Time' in table 'TemplateClassCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateClassCard.TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateClassCard.InstructorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Instructor' in table 'TemplateClassCard' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateClassCard.InstructorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableTemplateClassCard.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableTemplateClassCard.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateClassCard.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableTemplateClassCard.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDaysNull() As Boolean
            Return Me.IsNull(Me.tableTemplateClassCard.DaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDaysNull()
            Me(Me.tableTemplateClassCard.DaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateClassCard.TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimeNull()
            Me(Me.tableTemplateClassCard.TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tableTemplateClassCard.InstructorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstructorNull()
            Me(Me.tableTemplateClassCard.InstructorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateEvaluationReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateEvaluationReport As TemplateEvaluationReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateEvaluationReport = CType(Me.Table,TemplateEvaluationReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.studentpkColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studentpk' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subject() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.subjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subject' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.subjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacher() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.teacherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'teacher' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.teacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.gradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'grade' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property units() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.unitsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'units' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.unitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property schoolyear() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.schoolyearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'schoolyear' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.schoolyearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationReport.semesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'semester' in table 'TemplateEvaluationReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationReport.semesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstudentpkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.studentpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstudentpkNull()
            Me(Me.tableTemplateEvaluationReport.studentpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.subjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectNull()
            Me(Me.tableTemplateEvaluationReport.subjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsteacherNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.teacherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetteacherNull()
            Me(Me.tableTemplateEvaluationReport.teacherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.gradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradeNull()
            Me(Me.tableTemplateEvaluationReport.gradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.unitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitsNull()
            Me(Me.tableTemplateEvaluationReport.unitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsschoolyearNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.schoolyearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetschoolyearNull()
            Me(Me.tableTemplateEvaluationReport.schoolyearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssemesterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationReport.semesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsemesterNull()
            Me(Me.tableTemplateEvaluationReport.semesterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateCollectionsReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateCollectionsReport As TemplateCollectionsReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateCollectionsReport = CType(Me.Table,TemplateCollectionsReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.courseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'course' in table 'TemplateCollectionsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentcount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.studentcountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studentcount' in table 'TemplateCollectionsReport' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.studentcountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalassessment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.totalassessmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalassessment' in table 'TemplateCollectionsReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.totalassessmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property downpayment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.downpaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'downpayment' in table 'TemplateCollectionsReport' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.downpaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property balance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.balanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'balance' in table 'TemplateCollectionsReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monthlyincome() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsReport.monthlyincomeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'monthlyincome' in table 'TemplateCollectionsReport' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsReport.monthlyincomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscourseNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.courseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcourseNull()
            Me(Me.tableTemplateCollectionsReport.courseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstudentcountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.studentcountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstudentcountNull()
            Me(Me.tableTemplateCollectionsReport.studentcountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalassessmentNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.totalassessmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalassessmentNull()
            Me(Me.tableTemplateCollectionsReport.totalassessmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdownpaymentNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.downpaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdownpaymentNull()
            Me(Me.tableTemplateCollectionsReport.downpaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbalanceNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.balanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbalanceNull()
            Me(Me.tableTemplateCollectionsReport.balanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmonthlyincomeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsReport.monthlyincomeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmonthlyincomeNull()
            Me(Me.tableTemplateCollectionsReport.monthlyincomeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateCollectionsHistoryReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateCollectionsHistoryReport As TemplateCollectionsHistoryReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateCollectionsHistoryReport = CType(Me.Table,TemplateCollectionsHistoryReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.courseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'course' in table 'TemplateCollectionsHistoryReport' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentcount() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.studentcountColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studentcount' in table 'TemplateCollectionsHistoryReport' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.studentcountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalassessment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.totalassessmentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalassessment' in table 'TemplateCollectionsHistoryReport"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.totalassessmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property downpayment() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.downpaymentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'downpayment' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.downpaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property balance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.balanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'balance' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monthlyincome() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.monthlyincomeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'monthlyincome' in table 'TemplateCollectionsHistoryReport' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.monthlyincomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam1amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam1amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam1amount' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam1amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam1bal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam1balColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam1bal' in table 'TemplateCollectionsHistoryReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam1balColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam2amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam2amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam2amount' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam2amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam2bal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam2balColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam2bal' in table 'TemplateCollectionsHistoryReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam2balColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam3amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam3amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam3amount' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam3amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam3bal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam3balColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam3bal' in table 'TemplateCollectionsHistoryReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam3balColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam4amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam4amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam4amount' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam4amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam4bal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam4balColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam4bal' in table 'TemplateCollectionsHistoryReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam4balColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam5amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam5amountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam5amount' in table 'TemplateCollectionsHistoryReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam5amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exam5bal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.exam5balColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exam5bal' in table 'TemplateCollectionsHistoryReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.exam5balColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paid1st() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.paid1stColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paid1st' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.paid1stColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paid2nd() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.paid2ndColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paid2nd' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.paid2ndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paid3rd() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.paid3rdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paid3rd' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.paid3rdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paid4th() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.paid4thColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paid4th' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.paid4thColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paid5th() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionsHistoryReport.paid5thColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paid5th' in table 'TemplateCollectionsHistoryReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionsHistoryReport.paid5thColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscourseNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.courseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcourseNull()
            Me(Me.tableTemplateCollectionsHistoryReport.courseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstudentcountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.studentcountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstudentcountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.studentcountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalassessmentNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.totalassessmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalassessmentNull()
            Me(Me.tableTemplateCollectionsHistoryReport.totalassessmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdownpaymentNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.downpaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdownpaymentNull()
            Me(Me.tableTemplateCollectionsHistoryReport.downpaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbalanceNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.balanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbalanceNull()
            Me(Me.tableTemplateCollectionsHistoryReport.balanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmonthlyincomeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.monthlyincomeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmonthlyincomeNull()
            Me(Me.tableTemplateCollectionsHistoryReport.monthlyincomeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam1amountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam1amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam1amountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam1amountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam1balNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam1balColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam1balNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam1balColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam2amountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam2amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam2amountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam2amountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam2balNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam2balColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam2balNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam2balColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam3amountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam3amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam3amountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam3amountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam3balNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam3balColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam3balNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam3balColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam4amountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam4amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam4amountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam4amountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam4balNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam4balColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam4balNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam4balColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam5amountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam5amountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam5amountNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam5amountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isexam5balNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.exam5balColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setexam5balNull()
            Me(Me.tableTemplateCollectionsHistoryReport.exam5balColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispaid1stNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.paid1stColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpaid1stNull()
            Me(Me.tableTemplateCollectionsHistoryReport.paid1stColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispaid2ndNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.paid2ndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpaid2ndNull()
            Me(Me.tableTemplateCollectionsHistoryReport.paid2ndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispaid3rdNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.paid3rdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpaid3rdNull()
            Me(Me.tableTemplateCollectionsHistoryReport.paid3rdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispaid4thNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.paid4thColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpaid4thNull()
            Me(Me.tableTemplateCollectionsHistoryReport.paid4thColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispaid5thNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionsHistoryReport.paid5thColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpaid5thNull()
            Me(Me.tableTemplateCollectionsHistoryReport.paid5thColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateCollectionBreakdownRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateCollectionBreakdown As TemplateCollectionBreakdownDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateCollectionBreakdown = CType(Me.Table,TemplateCollectionBreakdownDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.sorterColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'TemplateCollectionBreakdown' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameCourseOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.NameCourseORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameCourseOR' in table 'TemplateCollectionBreakdown' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.NameCourseORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'TemplateCollectionBreakdown' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'TemplateCollectionBreakdown' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORNo() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.ORNoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORNo' in table 'TemplateCollectionBreakdown' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.ORNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'TemplateCollectionBreakdown' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateCollectionBreakdown.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'TemplateCollectionBreakdown' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateCollectionBreakdown.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableTemplateCollectionBreakdown.sorterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameCourseORNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.NameCourseORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameCourseORNull()
            Me(Me.tableTemplateCollectionBreakdown.NameCourseORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableTemplateCollectionBreakdown.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tableTemplateCollectionBreakdown.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORNoNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.ORNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORNoNull()
            Me(Me.tableTemplateCollectionBreakdown.ORNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableTemplateCollectionBreakdown.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableTemplateCollectionBreakdown.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableTemplateCollectionBreakdown.CourseColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateSAORow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateSAO As TemplateSAODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateSAO = CType(Me.Table,TemplateSAODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSAO.sorterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'TemplateSAO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSAO.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSAO.groupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group' in table 'TemplateSAO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSAO.groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemname() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSAO.itemnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemname' in table 'TemplateSAO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSAO.itemnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemamount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSAO.itemamountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'itemamount' in table 'TemplateSAO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSAO.itemamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property runningsum() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSAO.runningsumColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'runningsum' in table 'TemplateSAO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSAO.runningsumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSAO.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableTemplateSAO.sorterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgroupNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSAO.groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgroupNull()
            Me(Me.tableTemplateSAO.groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemnameNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSAO.itemnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemnameNull()
            Me(Me.tableTemplateSAO.itemnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsitemamountNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSAO.itemamountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetitemamountNull()
            Me(Me.tableTemplateSAO.itemamountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrunningsumNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSAO.runningsumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrunningsumNull()
            Me(Me.tableTemplateSAO.runningsumColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateEvaluationCurriculumReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateEvaluationCurriculumReport As TemplateEvaluationCurriculumReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateEvaluationCurriculumReport = CType(Me.Table,TemplateEvaluationCurriculumReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.studentpkColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studentpk' in table 'TemplateEvaluationCurriculumReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearlevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.yearlevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yearlevel' in table 'TemplateEvaluationCurriculumReport' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.yearlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semname1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.semname1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'semname1' in table 'TemplateEvaluationCurriculumReport' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.semname1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.subjectcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectcode' in table 'TemplateEvaluationCurriculumReport' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.subjectcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectname() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.subjectnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectname' in table 'TemplateEvaluationCurriculumReport' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.subjectnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectunits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.subjectunitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectunits' in table 'TemplateEvaluationCurriculumReport'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.subjectunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.gradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'grade' in table 'TemplateEvaluationCurriculumReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semname2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport.semname2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'semname2' in table 'TemplateEvaluationCurriculumReport' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport.semname2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2subjectcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport._2subjectcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '2subjectcode' in table 'TemplateEvaluationCurriculumReport'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport._2subjectcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2subjectname() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport._2subjectnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '2subjectname' in table 'TemplateEvaluationCurriculumReport'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport._2subjectnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2subjectunits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport._2subjectunitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '2subjectunits' in table 'TemplateEvaluationCurriculumReport"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport._2subjectunitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEvaluationCurriculumReport._2gradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '2grade' in table 'TemplateEvaluationCurriculumReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEvaluationCurriculumReport._2gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstudentpkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.studentpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstudentpkNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.studentpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyearlevelNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.yearlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyearlevelNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.yearlevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issemname1Null() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.semname1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsemname1Null()
            Me(Me.tableTemplateEvaluationCurriculumReport.semname1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectcodeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.subjectcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectcodeNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.subjectcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectnameNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.subjectnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectnameNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.subjectnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectunitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.subjectunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectunitsNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.subjectunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgradeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.gradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgradeNull()
            Me(Me.tableTemplateEvaluationCurriculumReport.gradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issemname2Null() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport.semname2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsemname2Null()
            Me(Me.tableTemplateEvaluationCurriculumReport.semname2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2subjectcodeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport._2subjectcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2subjectcodeNull()
            Me(Me.tableTemplateEvaluationCurriculumReport._2subjectcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2subjectnameNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport._2subjectnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2subjectnameNull()
            Me(Me.tableTemplateEvaluationCurriculumReport._2subjectnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2subjectunitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport._2subjectunitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2subjectunitsNull()
            Me(Me.tableTemplateEvaluationCurriculumReport._2subjectunitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2gradeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEvaluationCurriculumReport._2gradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2gradeNull()
            Me(Me.tableTemplateEvaluationCurriculumReport._2gradeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateStudentsReportsRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateStudentsReports As TemplateStudentsReportsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateStudentsReports = CType(Me.Table,TemplateStudentsReportsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableTemplateStudentsReports.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentsReports.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'TemplateStudentsReports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentsReports.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'TemplateStudentsReports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentsReports.yrlevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrlevel' in table 'TemplateStudentsReports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableTemplateStudentsReports.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentsReports.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'TemplateStudentsReports' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableTemplateStudentsReports.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tableTemplateStudentsReports.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableTemplateStudentsReports.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableTemplateStudentsReports.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentsReports.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableTemplateStudentsReports.regDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentsReports.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableTemplateStudentsReports.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrlevelNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentsReports.yrlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrlevelNull()
            Me(Me.tableTemplateStudentsReports.yrlevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentsReports.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableTemplateStudentsReports.GenderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BrokenHoursTemplateRow
        Inherits Global.System.Data.DataRow
        
        Private tableBrokenHoursTemplate As BrokenHoursTemplateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBrokenHoursTemplate = CType(Me.Table,BrokenHoursTemplateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableBrokenHoursTemplate.SubjectDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDesc' in table 'BrokenHoursTemplate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBrokenHoursTemplate.SubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DayTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableBrokenHoursTemplate.DayTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DayTime' in table 'BrokenHoursTemplate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBrokenHoursTemplate.DayTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescNull() As Boolean
            Return Me.IsNull(Me.tableBrokenHoursTemplate.SubjectDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescNull()
            Me(Me.tableBrokenHoursTemplate.SubjectDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDayTimeNull() As Boolean
            Return Me.IsNull(Me.tableBrokenHoursTemplate.DayTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDayTimeNull()
            Me(Me.tableBrokenHoursTemplate.DayTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TORRow
        Inherits Global.System.Data.DataRow
        
        Private tableTOR As TORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTOR = CType(Me.Table,TORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTOR.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTOR.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GradingSystem() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.GradingSystemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GradingSystem' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.GradingSystemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.StudentPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentPK' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.SchoolNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolName' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.SchoolNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemSchoolYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.SemSchoolYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SemSchoolYear' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.SemSchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.SubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectCode' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.SubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.SubjectDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDesc' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.SubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.GradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.GradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompletionGrade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.CompletionGradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompletionGrade' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.CompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTOR.CreditsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credits' in table 'TOR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOR.CreditsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradingSystemNull() As Boolean
            Return Me.IsNull(Me.tableTOR.GradingSystemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradingSystemNull()
            Me(Me.tableTOR.GradingSystemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentPKNull() As Boolean
            Return Me.IsNull(Me.tableTOR.StudentPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentPKNull()
            Me(Me.tableTOR.StudentPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolNameNull() As Boolean
            Return Me.IsNull(Me.tableTOR.SchoolNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolNameNull()
            Me(Me.tableTOR.SchoolNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemSchoolYearNull() As Boolean
            Return Me.IsNull(Me.tableTOR.SemSchoolYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemSchoolYearNull()
            Me(Me.tableTOR.SemSchoolYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableTOR.SubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectCodeNull()
            Me(Me.tableTOR.SubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescNull() As Boolean
            Return Me.IsNull(Me.tableTOR.SubjectDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescNull()
            Me(Me.tableTOR.SubjectDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableTOR.GradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradeNull()
            Me(Me.tableTOR.GradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableTOR.CompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompletionGradeNull()
            Me(Me.tableTOR.CompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditsNull() As Boolean
            Return Me.IsNull(Me.tableTOR.CreditsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditsNull()
            Me(Me.tableTOR.CreditsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsbyStudentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsbyStudentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsbyStudentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsbyStudentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsByCourseYrTypeRegDateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsByCourseYrTypeRegDateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsByCourseYrTypeRegDateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsByCourseYrTypeRegDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsbyStudentSemYrPkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsbyStudentSemYrPkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsbyStudentSemYrPkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsbyStudentSemYrPkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GradesbyStudentPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GradesbyStudentPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GradesbyStudentPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GradesbyStudentPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubjectsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubjectsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubjectsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubjectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollHeaderCountbySexRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollHeaderCountbySexRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollHeaderCountbySexRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollHeaderCountbySexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectCountbyCourseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectCountbyCourseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectCountbyCourseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectCountbyCourseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollHeaderCountbyyearlevelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollHeaderCountbyyearlevelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollHeaderCountbyyearlevelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollHeaderCountbyyearlevelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectCountbySubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectCountbySubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectCountbySubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectCountbySubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReceiptsHeaderByStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReceiptsHeaderByStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReceiptsHeaderByStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReceiptsHeaderByStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsCrosstabRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsCrosstabRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsCrosstabRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsCrosstabRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClassListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClassListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClassListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClassListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollmentListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollmentListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollmentListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollmentListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReceivablesReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReceivablesReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReceivablesReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReceivablesReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CollegiateGradingSheetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CollegiateGradingSheetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CollegiateGradingSheetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CollegiateGradingSheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PromotionalReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PromotionalReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PromotionalReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PromotionalReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GradesMailingListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GradesMailingListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GradesMailingListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GradesMailingListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentPermanentRecordRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentPermanentRecordRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentPermanentRecordRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentPermanentRecordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateStatisticsReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateStatisticsReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateStatisticsReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateStatisticsReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentScheduleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentScheduleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentScheduleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentScheduleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateClassCardRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateClassCardRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateClassCardRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateClassCardRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateEvaluationReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateEvaluationReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateEvaluationReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateEvaluationReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateCollectionsReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateCollectionsReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateCollectionsReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateCollectionsReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateCollectionsHistoryReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateCollectionsHistoryReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateCollectionsHistoryReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateCollectionsHistoryReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateCollectionBreakdownRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateCollectionBreakdownRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateCollectionBreakdownRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateCollectionBreakdownRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateSAORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateSAORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateSAORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateSAORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateEvaluationCurriculumReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateEvaluationCurriculumReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateEvaluationCurriculumReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateEvaluationCurriculumReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateStudentsReportsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateStudentsReportsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateStudentsReportsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateStudentsReportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BrokenHoursTemplateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BrokenHoursTemplateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BrokenHoursTemplateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BrokenHoursTemplateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsRepTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Students"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID"& _ 
                "] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ([Addre"& _ 
                "ss1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Address3]"& _ 
                " = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Orig"& _ 
                "inal_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guardian] = @Or"& _ 
                "iginal_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] ="& _ 
                " @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Edubackgroundda"& _ 
                "te1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgrounddate2]"& _ 
                " = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edubackground"& _ 
                "3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edubackground"& _ 
                "4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_Edubackgrou"& _ 
                "nddate4))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Students] ([StudentID], [StudentName], [Address1], [Address2], [Addr"& _ 
                "ess3], [Phone], [MotherName], [FatherName], [Guardian], [Birthdate], [Edubackgro"& _ 
                "und1], [Edubackgrounddate1], [Edubackground2], [Edubackgrounddate2], [Edubackgro"& _ 
                "und3], [Edubackgrounddate3], [Edubackground4], [Edubackgrounddate4]) VALUES (@St"& _ 
                "udentID, @StudentName, @Address1, @Address2, @Address3, @Phone, @MotherName, @Fa"& _ 
                "therName, @Guardian, @Birthdate, @Edubackground1, @Edubackgrounddate1, @Edubackg"& _ 
                "round2, @Edubackgrounddate2, @Edubackground3, @Edubackgrounddate3, @Edubackgroun"& _ 
                "d4, @Edubackgrounddate4);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Address1, A"& _ 
                "ddress2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackgr"& _ 
                "ound1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, E"& _ 
                "dubackgrounddate3, Edubackground4, Edubackgrounddate4 FROM Students WHERE (Stude"& _ 
                "ntPK = SCOPE_IDENTITY()) ORDER BY StudentName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Students] SET [StudentID] = @StudentID, [StudentName] = @StudentName, [Ad"& _ 
                "dress1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [Phone] = @"& _ 
                "Phone, [MotherName] = @MotherName, [FatherName] = @FatherName, [Guardian] = @Gua"& _ 
                "rdian, [Birthdate] = @Birthdate, [Edubackground1] = @Edubackground1, [Edubackgro"& _ 
                "unddate1] = @Edubackgrounddate1, [Edubackground2] = @Edubackground2, [Edubackgro"& _ 
                "unddate2] = @Edubackgrounddate2, [Edubackground3] = @Edubackground3, [Edubackgro"& _ 
                "unddate3] = @Edubackgrounddate3, [Edubackground4] = @Edubackground4, [Edubackgro"& _ 
                "unddate4] = @Edubackgrounddate4 WHERE (([StudentPK] = @Original_StudentPK) AND ("& _ 
                "[StudentID] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) A"& _ 
                "ND ([Address1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ("& _ 
                "[Address3] = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherNam"& _ 
                "e] = @Original_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guard"& _ 
                "ian] = @Original_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Eduback"& _ 
                "ground1] = @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Eduba"& _ 
                "ckgrounddate1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgr"& _ 
                "ounddate2] = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edu"& _ 
                "background3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edu"& _ 
                "background4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_E"& _ 
                "dubackgrounddate4));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Address1, Addres"& _ 
                "s2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1"& _ 
                ", Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubac"& _ 
                "kgrounddate3, Edubackground4, Edubackgrounddate4 FROM Students WHERE (StudentPK "& _ 
                "= @StudentPK) ORDER BY StudentName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        StudentPK, StudentID, StudentName, Address1, Address2, Address3, Ph"& _ 
                "one, MotherName, FatherName, Guardian, Birthdate, Edubackground1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackgrou"& _ 
                "nd3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Stu"& _ 
                "dents"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY StudentName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.StudentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRep.StudentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRep.StudentsDataTable = New dsRep.StudentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRep.StudentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRep) As Integer
            Return Me.Adapter.Update(dataSet, "Students")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Edubackgrounddate4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String) As Integer
            Return Me.Update(StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Original_StudentPK, Original_StudentID, Original_StudentName, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsbyStudentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsbyStudent"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syofferingpk, "& _ 
                "status, coursepk FROM EnrollSubjects WHERE (enrollpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT enrollpk, yearpk, sempk, "& _ 
                "studentpk, date, transref, subjectpk, syofferingpk, status, coursepk FROM Enroll"& _ 
                "Subjects WHERE (enrollpk = @enrollpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (studen"& _ 
                "tpk = @studentpik)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpik", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollSubjectsbyStudentDataTable, ByVal studentpik As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpik,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpik As Integer) As dsRep.EnrollSubjectsbyStudentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpik,Integer)
            Dim dataTable As dsRep.EnrollSubjectsbyStudentDataTable = New dsRep.EnrollSubjectsbyStudentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRep.EnrollSubjectsbyStudentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRep) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsbyStudent")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_enrollpk As Integer, ByVal Original_yearpk As Integer, ByVal Original_sempk As Integer, ByVal Original_studentpk As Integer, ByVal Original_date As Date, ByVal Original_transref As String, ByVal Original_subjectpk As Integer, ByVal Original_syofferingpk As Integer, ByVal Original_status As Integer, ByVal Original_coursepk As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_enrollpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_yearpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_date,Date)
            If (Original_transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_transref")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_transref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_status,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(_date,Date)
            If (transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("transref")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(transref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(syofferingpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(status,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal yearpk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal _date As Date,  _
                    ByVal transref As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal syofferingpk As Integer,  _
                    ByVal status As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_enrollpk As Integer,  _
                    ByVal Original_yearpk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_date As Date,  _
                    ByVal Original_transref As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_status As Integer,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal enrollpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_date,Date)
            If (transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("transref")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(transref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(status,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_enrollpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_date,Date)
            If (Original_transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_transref")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_transref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_status,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(enrollpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal yearpk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal _date As Date,  _
                    ByVal transref As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal syofferingpk As Integer,  _
                    ByVal status As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_enrollpk As Integer,  _
                    ByVal Original_yearpk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_date As Date,  _
                    ByVal Original_transref As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_status As Integer,  _
                    ByVal Original_coursepk As Integer) As Integer
            Return Me.Update(yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk, Original_enrollpk, Original_yearpk, Original_sempk, Original_studentpk, Original_date, Original_transref, Original_subjectpk, Original_syofferingpk, Original_status, Original_coursepk, Original_enrollpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsByCourseYrTypeRegDateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentsByCourseYrTypeRegDate"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("regDate", "regDate")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     a.StudentPK, a.regDate, a.StudentType, b.yrlevel, a.Gender, a.StudentN"& _ 
                "ame, a.StudentID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Students AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      E"& _ 
                "nrollHeader AS b ON a.StudentPK = b.studentpk INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "EnrollSubjects AS c ON b.studentpk = c.studentpk AND b.sempk = c.sempk AND b.yea"& _ 
                "rpk = c.yearpk "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (b.yrlevel BETWEEN @yrlevel1 AND @yrlevel2) AND (a.St"& _ 
                "udentType LIKE @studentType) AND (a.regDate >= @regdate) AND (b.sempk = @sempk) "& _ 
                "AND (b.yearpk = @yearpk) AND (a.Gender LIKE @gender)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY a.StudentPK, a.re"& _ 
                "gDate, a.StudentType, b.yrlevel, a.Gender, a.StudentName, a.StudentID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY "& _ 
                "a.StudentPK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentType", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regdate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gender", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.StudentsByCourseYrTypeRegDateDataTable, ByVal yrlevel1 As Global.System.Nullable(Of Integer), ByVal yrlevel2 As Global.System.Nullable(Of Integer), ByVal studentType As String, ByVal regdate As Global.System.Nullable(Of Date), ByVal sempk As Integer, ByVal yearpk As Integer, ByVal gender As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (yrlevel1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(yrlevel1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yrlevel2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yrlevel2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (studentType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentType,String)
            End If
            If (regdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(regdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(yearpk,Integer)
            If (gender Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(gender,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal yrlevel1 As Global.System.Nullable(Of Integer), ByVal yrlevel2 As Global.System.Nullable(Of Integer), ByVal studentType As String, ByVal regdate As Global.System.Nullable(Of Date), ByVal sempk As Integer, ByVal yearpk As Integer, ByVal gender As String) As dsRep.StudentsByCourseYrTypeRegDateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (yrlevel1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(yrlevel1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (yrlevel2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(yrlevel2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (studentType Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentType,String)
            End If
            If (regdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(regdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(5).Value = CType(yearpk,Integer)
            If (gender Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(gender,String)
            End If
            Dim dataTable As dsRep.StudentsByCourseYrTypeRegDateDataTable = New dsRep.StudentsByCourseYrTypeRegDateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsbyStudentSemYrPkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsbyStudentSemYrPk"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syofferingpk, "& _ 
                "status, coursepk FROM EnrollSubjects WHERE (enrollpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT enrollpk, yearpk, sempk, "& _ 
                "studentpk, date, transref, subjectpk, syofferingpk, status, coursepk FROM Enroll"& _ 
                "Subjects WHERE (enrollpk = @enrollpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (studen"& _ 
                "tpk = @studentpik)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (sempk=@sempk)  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND (yearpk=@yearpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpik", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollSubjectsbyStudentSemYrPkDataTable, ByVal studentpik As Integer, ByVal sempk As Integer, ByVal yearpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpik,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(yearpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpik As Integer, ByVal sempk As Integer, ByVal yearpk As Integer) As dsRep.EnrollSubjectsbyStudentSemYrPkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpik,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(yearpk,Integer)
            Dim dataTable As dsRep.EnrollSubjectsbyStudentSemYrPkDataTable = New dsRep.EnrollSubjectsbyStudentSemYrPkDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRep.EnrollSubjectsbyStudentSemYrPkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRep) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsbyStudentSemYrPk")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_enrollpk As Integer, ByVal Original_yearpk As Integer, ByVal Original_sempk As Integer, ByVal Original_studentpk As Integer, ByVal Original_date As Date, ByVal Original_transref As String, ByVal Original_subjectpk As Integer, ByVal Original_syofferingpk As Integer, ByVal Original_status As Integer, ByVal Original_coursepk As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_enrollpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_yearpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_date,Date)
            If (Original_transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_transref")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_transref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_status,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(_date,Date)
            If (transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("transref")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(transref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(syofferingpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(status,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal yearpk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal _date As Date,  _
                    ByVal transref As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal syofferingpk As Integer,  _
                    ByVal status As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_enrollpk As Integer,  _
                    ByVal Original_yearpk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_date As Date,  _
                    ByVal Original_transref As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_status As Integer,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal enrollpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_date,Date)
            If (transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("transref")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(transref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(status,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_enrollpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_date,Date)
            If (Original_transref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_transref")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_transref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_status,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(enrollpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal yearpk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal _date As Date,  _
                    ByVal transref As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal syofferingpk As Integer,  _
                    ByVal status As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_enrollpk As Integer,  _
                    ByVal Original_yearpk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_date As Date,  _
                    ByVal Original_transref As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_status As Integer,  _
                    ByVal Original_coursepk As Integer) As Integer
            Return Me.Update(yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk, Original_enrollpk, Original_yearpk, Original_sempk, Original_studentpk, Original_date, Original_transref, Original_subjectpk, Original_syofferingpk, Original_status, Original_coursepk, Original_enrollpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GradesbyStudentPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GradesbyStudentPK"
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("exSubjectUnits", "exSubjectUnits")
            tableMapping.ColumnMappings.Add("exCreditGroup", "exCreditGroup")
            tableMapping.ColumnMappings.Add("exSubjectCode", "exSubjectCode")
            tableMapping.ColumnMappings.Add("exCompletionGrade", "exCompletionGrade")
            tableMapping.ColumnMappings.Add("isPrevSchoolGrade", "isPrevSchoolGrade")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("Sorter", "Sorter")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        StudentGrades.pk, StudentGrades.datein, StudentGrades.grade, Studen"& _ 
                "tGrades.keythrough, StudentGrades.subjectpk, StudentGrades.sypk, StudentGrades.s"& _ 
                "empk, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         StudentGrades.teacherpk, StudentGrades.studentp"& _ 
                "k, StudentGrades.extSubjectID, StudentGrades.exSubjectDesc, StudentGrades.exSubj"& _ 
                "ectGrade, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         StudentGrades.coursepk, StudentGrades.exSub"& _ 
                "jectUnits, StudentGrades.exCreditGroup, StudentGrades.exSubjectCode, StudentGrad"& _ 
                "es.exCompletionGrade, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         StudentGrades.isPrevSchoolGrade"& _ 
                ", SchoolYear.SchoolYear, Semester.Sorter"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            StudentGrades INNER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SchoolYear ON StudentGrades.sypk = SchoolYear.sypk "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Semester ON StudentGrades.sempk = Semester."& _ 
                "SemPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (StudentGrades.studentpk = @studentpk)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SchoolYear."& _ 
                "SchoolYear, Semester.Sorter"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.GradesbyStudentPKDataTable, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer) As dsRep.GradesbyStudentPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            Dim dataTable As dsRep.GradesbyStudentPKDataTable = New dsRep.GradesbyStudentPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SubjectsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Subjects"
            tableMapping.ColumnMappings.Add("SubjectPriKey", "SubjectPriKey")
            tableMapping.ColumnMappings.Add("SubjectCode", "SubjectCode")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("labunits", "labunits")
            tableMapping.ColumnMappings.Add("units", "units")
            tableMapping.ColumnMappings.Add("prereq", "prereq")
            tableMapping.ColumnMappings.Add("major", "major")
            tableMapping.ColumnMappings.Add("prereq2", "prereq2")
            tableMapping.ColumnMappings.Add("prereq3", "prereq3")
            tableMapping.ColumnMappings.Add("prereq4", "prereq4")
            tableMapping.ColumnMappings.Add("prereq5", "prereq5")
            tableMapping.ColumnMappings.Add("prereq6", "prereq6")
            tableMapping.ColumnMappings.Add("prereq7", "prereq7")
            tableMapping.ColumnMappings.Add("creditgroup", "creditgroup")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SUBJECTS] WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ([S"& _ 
                "ubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectName)"& _ 
                " AND ([Remarks] = @Original_Remarks) AND ((@IsNull_labunits = 1 AND [labunits] I"& _ 
                "S NULL) OR ([labunits] = @Original_labunits)) AND ([units] = @Original_units) AN"& _ 
                "D ([prereq] = @Original_prereq) AND ((@IsNull_major = 1 AND [major] IS NULL) OR "& _ 
                "([major] = @Original_major)) AND ((@IsNull_prereq2 = 1 AND [prereq2] IS NULL) OR"& _ 
                " ([prereq2] = @Original_prereq2)) AND ((@IsNull_prereq3 = 1 AND [prereq3] IS NUL"& _ 
                "L) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_prereq4 = 1 AND [prereq4] I"& _ 
                "S NULL) OR ([prereq4] = @Original_prereq4)) AND ((@IsNull_prereq5 = 1 AND [prere"& _ 
                "q5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND ((@IsNull_prereq6 = 1 AND ["& _ 
                "prereq6] IS NULL) OR ([prereq6] = @Original_prereq6)) AND ((@IsNull_prereq7 = 1 "& _ 
                "AND [prereq7] IS NULL) OR ([prereq7] = @Original_prereq7)) AND ((@IsNull_creditg"& _ 
                "roup = 1 AND [creditgroup] IS NULL) OR ([creditgroup] = @Original_creditgroup)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SUBJECTS] ([SubjectCode], [SubjectName], [Remarks], [labunits], [uni"& _ 
                "ts], [prereq], [major], [prereq2], [prereq3], [prereq4], [prereq5], [prereq6], ["& _ 
                "prereq7], [creditgroup]) VALUES (@SubjectCode, @SubjectName, @Remarks, @labunits"& _ 
                ", @units, @prereq, @major, @prereq2, @prereq3, @prereq4, @prereq5, @prereq6, @pr"& _ 
                "ereq7, @creditgroup);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, SubjectCode, SubjectName, Remarks, "& _ 
                "labunits, units, prereq, major, prereq2, prereq3, prereq4, prereq5, prereq6, pre"& _ 
                "req7, creditgroup FROM Subjects WHERE (SubjectPriKey = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SUBJECTS] SET [SubjectCode] = @SubjectCode, [SubjectName] = @SubjectName,"& _ 
                " [Remarks] = @Remarks, [labunits] = @labunits, [units] = @units, [prereq] = @pre"& _ 
                "req, [major] = @major, [prereq2] = @prereq2, [prereq3] = @prereq3, [prereq4] = @"& _ 
                "prereq4, [prereq5] = @prereq5, [prereq6] = @prereq6, [prereq7] = @prereq7, [cred"& _ 
                "itgroup] = @creditgroup WHERE (([SubjectPriKey] = @Original_SubjectPriKey) AND ("& _ 
                "[SubjectCode] = @Original_SubjectCode) AND ([SubjectName] = @Original_SubjectNam"& _ 
                "e) AND ([Remarks] = @Original_Remarks) AND ((@IsNull_labunits = 1 AND [labunits]"& _ 
                " IS NULL) OR ([labunits] = @Original_labunits)) AND ([units] = @Original_units) "& _ 
                "AND ([prereq] = @Original_prereq) AND ((@IsNull_major = 1 AND [major] IS NULL) O"& _ 
                "R ([major] = @Original_major)) AND ((@IsNull_prereq2 = 1 AND [prereq2] IS NULL) "& _ 
                "OR ([prereq2] = @Original_prereq2)) AND ((@IsNull_prereq3 = 1 AND [prereq3] IS N"& _ 
                "ULL) OR ([prereq3] = @Original_prereq3)) AND ((@IsNull_prereq4 = 1 AND [prereq4]"& _ 
                " IS NULL) OR ([prereq4] = @Original_prereq4)) AND ((@IsNull_prereq5 = 1 AND [pre"& _ 
                "req5] IS NULL) OR ([prereq5] = @Original_prereq5)) AND ((@IsNull_prereq6 = 1 AND"& _ 
                " [prereq6] IS NULL) OR ([prereq6] = @Original_prereq6)) AND ((@IsNull_prereq7 = "& _ 
                "1 AND [prereq7] IS NULL) OR ([prereq7] = @Original_prereq7)) AND ((@IsNull_credi"& _ 
                "tgroup = 1 AND [creditgroup] IS NULL) OR ([creditgroup] = @Original_creditgroup)"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SubjectPriKey, SubjectCode, SubjectName, Remarks, labunits, units, p"& _ 
                "rereq, major, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, creditgroup "& _ 
                "FROM Subjects WHERE (SubjectPriKey = @SubjectPriKey)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectPriKey", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubjectName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_labunits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_labunits", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "labunits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_units", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "units", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_major", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_major", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "major", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq6", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_prereq7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "prereq7", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_creditgroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "creditgroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubjectPriKey", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM SUBJECTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Subjectprikey=@subjectpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SubjectPriKey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.SubjectsDataTable, ByVal subjectpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal subjectpk As Integer) As dsRep.SubjectsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk,Integer)
            Dim dataTable As dsRep.SubjectsDataTable = New dsRep.SubjectsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRep.SubjectsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRep) As Integer
            Return Me.Adapter.Update(dataSet, "Subjects")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SubjectPriKey As Integer, ByVal Original_SubjectCode As String, ByVal Original_SubjectName As String, ByVal Original_Remarks As String, ByVal Original_labunits As Global.System.Nullable(Of Single), ByVal Original_units As Single, ByVal Original_prereq As Integer, ByVal Original_major As Global.System.Nullable(Of Boolean), ByVal Original_prereq2 As Integer, ByVal Original_prereq3 As Integer, ByVal Original_prereq4 As Integer, ByVal Original_prereq5 As Integer, ByVal Original_prereq6 As Integer, ByVal Original_prereq7 As Integer, ByVal Original_creditgroup As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_units,Single)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_prereq2,Integer)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_prereq3,Integer)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_prereq4,Integer)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_prereq5,Integer)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_prereq6,Integer)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_prereq7,Integer)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_creditgroup,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SubjectCode As String, ByVal SubjectName As String, ByVal Remarks As String, ByVal labunits As Global.System.Nullable(Of Single), ByVal units As Single, ByVal prereq As Integer, ByVal major As Global.System.Nullable(Of Boolean), ByVal prereq2 As Integer, ByVal prereq3 As Integer, ByVal prereq4 As Integer, ByVal prereq5 As Integer, ByVal prereq6 As Integer, ByVal prereq7 As Integer, ByVal creditgroup As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(prereq2,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(prereq3,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(prereq4,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(prereq5,Integer)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(prereq6,Integer)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(prereq7,Integer)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(creditgroup,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal prereq2 As Integer,  _
                    ByVal prereq3 As Integer,  _
                    ByVal prereq4 As Integer,  _
                    ByVal prereq5 As Integer,  _
                    ByVal prereq6 As Integer,  _
                    ByVal prereq7 As Integer,  _
                    ByVal creditgroup As Integer,  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_prereq2 As Integer,  _
                    ByVal Original_prereq3 As Integer,  _
                    ByVal Original_prereq4 As Integer,  _
                    ByVal Original_prereq5 As Integer,  _
                    ByVal Original_prereq6 As Integer,  _
                    ByVal Original_prereq7 As Integer,  _
                    ByVal Original_creditgroup As Integer,  _
                    ByVal SubjectPriKey As Integer) As Integer
            If (SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SubjectCode,String)
            End If
            If (SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SubjectName,String)
            End If
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Remarks,String)
            End If
            If (labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(units,Single)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(prereq,Integer)
            If (major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(prereq2,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(prereq3,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(prereq4,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(prereq5,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(prereq6,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(prereq7,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(creditgroup,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SubjectPriKey,Integer)
            If (Original_SubjectCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SubjectCode,String)
            End If
            If (Original_SubjectName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SubjectName")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SubjectName,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Remarks,String)
            End If
            If (Original_labunits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_labunits.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_units,Single)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_prereq,Integer)
            If (Original_major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_major.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_prereq2,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_prereq3,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_prereq4,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_prereq5,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_prereq6,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_prereq7,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_creditgroup,Integer)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(SubjectPriKey,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SubjectCode As String,  _
                    ByVal SubjectName As String,  _
                    ByVal Remarks As String,  _
                    ByVal labunits As Global.System.Nullable(Of Single),  _
                    ByVal units As Single,  _
                    ByVal prereq As Integer,  _
                    ByVal major As Global.System.Nullable(Of Boolean),  _
                    ByVal prereq2 As Integer,  _
                    ByVal prereq3 As Integer,  _
                    ByVal prereq4 As Integer,  _
                    ByVal prereq5 As Integer,  _
                    ByVal prereq6 As Integer,  _
                    ByVal prereq7 As Integer,  _
                    ByVal creditgroup As Integer,  _
                    ByVal Original_SubjectPriKey As Integer,  _
                    ByVal Original_SubjectCode As String,  _
                    ByVal Original_SubjectName As String,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_labunits As Global.System.Nullable(Of Single),  _
                    ByVal Original_units As Single,  _
                    ByVal Original_prereq As Integer,  _
                    ByVal Original_major As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_prereq2 As Integer,  _
                    ByVal Original_prereq3 As Integer,  _
                    ByVal Original_prereq4 As Integer,  _
                    ByVal Original_prereq5 As Integer,  _
                    ByVal Original_prereq6 As Integer,  _
                    ByVal Original_prereq7 As Integer,  _
                    ByVal Original_creditgroup As Integer) As Integer
            Return Me.Update(SubjectCode, SubjectName, Remarks, labunits, units, prereq, major, prereq2, prereq3, prereq4, prereq5, prereq6, prereq7, creditgroup, Original_SubjectPriKey, Original_SubjectCode, Original_SubjectName, Original_Remarks, Original_labunits, Original_units, Original_prereq, Original_major, Original_prereq2, Original_prereq3, Original_prereq4, Original_prereq5, Original_prereq6, Original_prereq7, Original_creditgroup, Original_SubjectPriKey)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollHeaderCountbySexTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollHeaderCountbySex"
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("GenderCount", "GenderCount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sempk, yearpk,Gender, count(studentpk) as GenderCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT     b"& _ 
                ".sempk, b.yearpk, a.Gender, b.StudentPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EnrollSubjects AS b LEFT O"& _ 
                "UTER JOIN Students AS a "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        ON a.StudentPK = b.studentpk "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (b.sempk = @sempk) AND (b.yearpk = @sypk) AND (b.status=1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY "& _ 
                "b.sempk, b.yearpk, a.Gender, b.StudentPK) As subtable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY sempk,yearpk,G"& _ 
                "ender"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollHeaderCountbySexDataTable, ByVal sypk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer) As dsRep.EnrollHeaderCountbySexDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsRep.EnrollHeaderCountbySexDataTable = New dsRep.EnrollHeaderCountbySexDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectCountbyCourseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectCountbyCourse"
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("EnrollCount", "EnrollCount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     sempk, yearpk, coursepk, COUNT(studentpk) AS EnrollCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                " (SELECT     sempk, yearpk, coursepk, studentpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM    "& _ 
                "      EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (sempk = @sempk) AND (ye"& _ 
                "arpk = @sypk) AND (status = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       GROUP BY sempk, yearpk, c"& _ 
                "oursepk, studentpk) AS Subtable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY sempk, yearpk, coursepk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollSubjectCountbyCourseDataTable, ByVal sypk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer) As dsRep.EnrollSubjectCountbyCourseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsRep.EnrollSubjectCountbyCourseDataTable = New dsRep.EnrollSubjectCountbyCourseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollHeaderCountbyyearlevelTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollHeaderCountbyyearlevel"
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            tableMapping.ColumnMappings.Add("EnrollCount", "EnrollCount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT sempk, yearpk, yrlevel , count(studentpk) AS EnrollCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT   "& _ 
                "  a.sempk, a.yearpk, a.yrlevel, a.studentpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EnrollHeader AS a LEFT"& _ 
                " OUTER JOIN EnrollSubjects As b"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ON a.studentpk=b.studentpk AN"& _ 
                "D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        a.sempk = b.sempk AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       a.yearp"& _ 
                "k = b.yearpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (a.sempk = @sempk) AND (a.yearpk = @sypk) AND (b.status="& _ 
                "1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY a.sempk, a.yearpk, a.yrlevel , a.studentpk) As Subtable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY"& _ 
                " sempk, yearpk, yrlevel"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollHeaderCountbyyearlevelDataTable, ByVal sypk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer) As dsRep.EnrollHeaderCountbyyearlevelDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsRep.EnrollHeaderCountbyyearlevelDataTable = New dsRep.EnrollHeaderCountbyyearlevelDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectCountbySubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectCountbySubject"
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("EnrollCount", "EnrollCount")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     sempk, yearpk, subjectpk, COUNT(studentpk) AS EnrollCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "  (SELECT     sempk, yearpk, subjectpk, studentpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM  "& _ 
                "        EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (sempk = @sempk) AND ("& _ 
                "yearpk = @sypk) AND (status = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       GROUP BY sempk, yearpk,"& _ 
                " subjectpk, studentpk) AS Subtable"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY sempk, yearpk, subjectpk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.EnrollSubjectCountbySubjectDataTable, ByVal sypk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer) As dsRep.EnrollSubjectCountbySubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsRep.EnrollSubjectCountbySubjectDataTable = New dsRep.EnrollSubjectCountbySubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ReceiptsHeaderByStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ReceiptsHeaderByStatus"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("TRDate", "TRDate")
            tableMapping.ColumnMappings.Add("Reference", "Reference")
            tableMapping.ColumnMappings.Add("ReceivedFrom", "ReceivedFrom")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Cancelled", "Cancelled")
            tableMapping.ColumnMappings.Add("Studentpk", "Studentpk")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("payperiod", "payperiod")
            tableMapping.ColumnMappings.Add("cashier", "cashier")
            tableMapping.ColumnMappings.Add("semPK", "semPK")
            tableMapping.ColumnMappings.Add("yearPK", "yearPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ReceiptsHeader] WHERE (([PK] = @Original_PK) AND ([TRDate] = @Origin"& _ 
                "al_TRDate) AND ([Reference] = @Original_Reference) AND ([ReceivedFrom] = @Origin"& _ 
                "al_ReceivedFrom) AND ([Amount] = @Original_Amount) AND ([Cancelled] = @Original_"& _ 
                "Cancelled) AND ([Studentpk] = @Original_Studentpk) AND ([Remarks] = @Original_Re"& _ 
                "marks) AND ((@IsNull_payperiod = 1 AND [payperiod] IS NULL) OR ([payperiod] = @O"& _ 
                "riginal_payperiod)) AND ((@IsNull_cashier = 1 AND [cashier] IS NULL) OR ([cashie"& _ 
                "r] = @Original_cashier)) AND ((@IsNull_semPK = 1 AND [semPK] IS NULL) OR ([semPK"& _ 
                "] = @Original_semPK)) AND ((@IsNull_yearPK = 1 AND [yearPK] IS NULL) OR ([yearPK"& _ 
                "] = @Original_yearPK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceivedFrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceivedFrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cancelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cancelled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cashier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cashier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ReceiptsHeader] ([TRDate], [Reference], [ReceivedFrom], [Amount], [C"& _ 
                "ancelled], [Studentpk], [Remarks], [payperiod], [cashier], [semPK], [yearPK]) VA"& _ 
                "LUES (@TRDate, @Reference, @ReceivedFrom, @Amount, @Cancelled, @Studentpk, @Rema"& _ 
                "rks, @payperiod, @cashier, @semPK, @yearPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, TRDate, Reference, Rece"& _ 
                "ivedFrom, Amount, Cancelled, Studentpk, Remarks, payperiod, cashier, semPK, year"& _ 
                "PK FROM ReceiptsHeader WHERE (PK = SCOPE_IDENTITY()) ORDER BY TRDate"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceivedFrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceivedFrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cancelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cancelled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cashier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ReceiptsHeader] SET [TRDate] = @TRDate, [Reference] = @Reference, [Receiv"& _ 
                "edFrom] = @ReceivedFrom, [Amount] = @Amount, [Cancelled] = @Cancelled, [Studentp"& _ 
                "k] = @Studentpk, [Remarks] = @Remarks, [payperiod] = @payperiod, [cashier] = @ca"& _ 
                "shier, [semPK] = @semPK, [yearPK] = @yearPK WHERE (([PK] = @Original_PK) AND ([T"& _ 
                "RDate] = @Original_TRDate) AND ([Reference] = @Original_Reference) AND ([Receive"& _ 
                "dFrom] = @Original_ReceivedFrom) AND ([Amount] = @Original_Amount) AND ([Cancell"& _ 
                "ed] = @Original_Cancelled) AND ([Studentpk] = @Original_Studentpk) AND ([Remarks"& _ 
                "] = @Original_Remarks) AND ((@IsNull_payperiod = 1 AND [payperiod] IS NULL) OR ("& _ 
                "[payperiod] = @Original_payperiod)) AND ((@IsNull_cashier = 1 AND [cashier] IS N"& _ 
                "ULL) OR ([cashier] = @Original_cashier)) AND ((@IsNull_semPK = 1 AND [semPK] IS "& _ 
                "NULL) OR ([semPK] = @Original_semPK)) AND ((@IsNull_yearPK = 1 AND [yearPK] IS N"& _ 
                "ULL) OR ([yearPK] = @Original_yearPK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, TRDate, Reference, Received"& _ 
                "From, Amount, Cancelled, Studentpk, Remarks, payperiod, cashier, semPK, yearPK F"& _ 
                "ROM ReceiptsHeader WHERE (PK = @PK) ORDER BY TRDate"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReceivedFrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceivedFrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cancelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cancelled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cashier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Reference", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReceivedFrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReceivedFrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cancelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cancelled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_payperiod", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "payperiod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cashier", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cashier", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cashier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PK, TRDate, Reference, ReceivedFrom, Amount, Cancelled, Studentpk, Rem"& _ 
                "arks, payperiod, cashier, semPK, yearPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ReceiptsHeader"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "Cancelled = @cancelled "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND TRDate Between @date1  And @date2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY TRDate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cancelled", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cancelled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date2", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TRDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.ReceiptsHeaderByStatusDataTable, ByVal cancelled As Integer, ByVal date1 As Date, ByVal date2 As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cancelled,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(date1,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(date2,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cancelled As Integer, ByVal date1 As Date, ByVal date2 As Date) As dsRep.ReceiptsHeaderByStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(cancelled,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(date1,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(date2,Date)
            Dim dataTable As dsRep.ReceiptsHeaderByStatusDataTable = New dsRep.ReceiptsHeaderByStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRep.ReceiptsHeaderByStatusDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRep) As Integer
            Return Me.Adapter.Update(dataSet, "ReceiptsHeaderByStatus")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_TRDate As Date, ByVal Original_Reference As String, ByVal Original_ReceivedFrom As String, ByVal Original_Amount As Decimal, ByVal Original_Cancelled As Integer, ByVal Original_Studentpk As Integer, ByVal Original_Remarks As String, ByVal Original_payperiod As Global.System.Nullable(Of Integer), ByVal Original_cashier As String, ByVal Original_semPK As Global.System.Nullable(Of Integer), ByVal Original_yearPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRDate,Date)
            If (Original_Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Reference")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Reference,String)
            End If
            If (Original_ReceivedFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ReceivedFrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ReceivedFrom,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Cancelled,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Studentpk,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Remarks,String)
            End If
            If (Original_payperiod.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_payperiod.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_cashier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_cashier,String)
            End If
            If (Original_semPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_semPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_yearPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_yearPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRDate As Date, ByVal Reference As String, ByVal ReceivedFrom As String, ByVal Amount As Decimal, ByVal Cancelled As Integer, ByVal Studentpk As Integer, ByVal Remarks As String, ByVal payperiod As Global.System.Nullable(Of Integer), ByVal cashier As String, ByVal semPK As Global.System.Nullable(Of Integer), ByVal yearPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRDate,Date)
            If (Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reference")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Reference,String)
            End If
            If (ReceivedFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ReceivedFrom")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ReceivedFrom,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Cancelled,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Studentpk,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            If (payperiod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(payperiod.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (cashier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(cashier,String)
            End If
            If (semPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(semPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (yearPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(yearPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRDate As Date,  _
                    ByVal Reference As String,  _
                    ByVal ReceivedFrom As String,  _
                    ByVal Amount As Decimal,  _
                    ByVal Cancelled As Integer,  _
                    ByVal Studentpk As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal payperiod As Global.System.Nullable(Of Integer),  _
                    ByVal cashier As String,  _
                    ByVal semPK As Global.System.Nullable(Of Integer),  _
                    ByVal yearPK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_TRDate As Date,  _
                    ByVal Original_Reference As String,  _
                    ByVal Original_ReceivedFrom As String,  _
                    ByVal Original_Amount As Decimal,  _
                    ByVal Original_Cancelled As Integer,  _
                    ByVal Original_Studentpk As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_payperiod As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cashier As String,  _
                    ByVal Original_semPK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_yearPK As Global.System.Nullable(Of Integer),  _
                    ByVal PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRDate,Date)
            If (Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reference")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Reference,String)
            End If
            If (ReceivedFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ReceivedFrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ReceivedFrom,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Cancelled,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Studentpk,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            If (payperiod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(payperiod.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (cashier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(cashier,String)
            End If
            If (semPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(semPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (yearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(yearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TRDate,Date)
            If (Original_Reference Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Reference")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Reference,String)
            End If
            If (Original_ReceivedFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ReceivedFrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ReceivedFrom,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Cancelled,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Studentpk,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Remarks,String)
            End If
            If (Original_payperiod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_payperiod.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_cashier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_cashier,String)
            End If
            If (Original_semPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_semPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_yearPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_yearPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TRDate As Date,  _
                    ByVal Reference As String,  _
                    ByVal ReceivedFrom As String,  _
                    ByVal Amount As Decimal,  _
                    ByVal Cancelled As Integer,  _
                    ByVal Studentpk As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal payperiod As Global.System.Nullable(Of Integer),  _
                    ByVal cashier As String,  _
                    ByVal semPK As Global.System.Nullable(Of Integer),  _
                    ByVal yearPK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_TRDate As Date,  _
                    ByVal Original_Reference As String,  _
                    ByVal Original_ReceivedFrom As String,  _
                    ByVal Original_Amount As Decimal,  _
                    ByVal Original_Cancelled As Integer,  _
                    ByVal Original_Studentpk As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_payperiod As Global.System.Nullable(Of Integer),  _
                    ByVal Original_cashier As String,  _
                    ByVal Original_semPK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_yearPK As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(TRDate, Reference, ReceivedFrom, Amount, Cancelled, Studentpk, Remarks, payperiod, cashier, semPK, yearPK, Original_PK, Original_TRDate, Original_Reference, Original_ReceivedFrom, Original_Amount, Original_Cancelled, Original_Studentpk, Original_Remarks, Original_payperiod, Original_cashier, Original_semPK, Original_yearPK, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsCrosstabTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentsCrosstab"
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            tableMapping.ColumnMappings.Add("CourseName", "CourseName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DISTINCT Students.StudentName, Students.Gender, EnrollHeader.yrlevel, Cour"& _ 
                "ses.CourseName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Students LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   Courses RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         EnrollSubjects ON Courses."& _ 
                "coursepk = EnrollSubjects.coursepk RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         En"& _ 
                "rollHeader ON EnrollSubjects.enrollpk = EnrollHeader.PK ON Students.StudentPK = "& _ 
                "EnrollHeader.studentpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (EnrollHeader.yearpk = @yearpk) AND (Enroll"& _ 
                "Header.sempk = @sempk) AND (EnrollSubjects.status = 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRep.StudentsCrosstabDataTable, ByVal yearpk As Integer, ByVal sempk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal yearpk As Integer, ByVal sempk As Integer) As dsRep.StudentsCrosstabDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(yearpk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Dim dataTable As dsRep.StudentsCrosstabDataTable = New dsRep.StudentsCrosstabDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _studentsTableAdapter As StudentsTableAdapter
        
        Private _enrollSubjectsbyStudentTableAdapter As EnrollSubjectsbyStudentTableAdapter
        
        Private _enrollSubjectsbyStudentSemYrPkTableAdapter As EnrollSubjectsbyStudentSemYrPkTableAdapter
        
        Private _subjectsTableAdapter As SubjectsTableAdapter
        
        Private _receiptsHeaderByStatusTableAdapter As ReceiptsHeaderByStatusTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsTableAdapter() As StudentsTableAdapter
            Get
                Return Me._studentsTableAdapter
            End Get
            Set
                Me._studentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsbyStudentTableAdapter() As EnrollSubjectsbyStudentTableAdapter
            Get
                Return Me._enrollSubjectsbyStudentTableAdapter
            End Get
            Set
                Me._enrollSubjectsbyStudentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsbyStudentSemYrPkTableAdapter() As EnrollSubjectsbyStudentSemYrPkTableAdapter
            Get
                Return Me._enrollSubjectsbyStudentSemYrPkTableAdapter
            End Get
            Set
                Me._enrollSubjectsbyStudentSemYrPkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SubjectsTableAdapter() As SubjectsTableAdapter
            Get
                Return Me._subjectsTableAdapter
            End Get
            Set
                Me._subjectsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ReceiptsHeaderByStatusTableAdapter() As ReceiptsHeaderByStatusTableAdapter
            Get
                Return Me._receiptsHeaderByStatusTableAdapter
            End Get
            Set
                Me._receiptsHeaderByStatusTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsbyStudentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsbyStudentTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection
                End If
                If ((Not (Me._subjectsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._subjectsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._subjectsTableAdapter.Connection
                End If
                If ((Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._receiptsHeaderByStatusTableAdapter.Connection) Is Nothing)) Then
                    Return Me._receiptsHeaderByStatusTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsRep, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudentSemYrPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ReceiptsHeaderByStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._receiptsHeaderByStatusTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsRep, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudentSemYrPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ReceiptsHeaderByStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._receiptsHeaderByStatusTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsRep, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ReceiptsHeaderByStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._receiptsHeaderByStatusTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyStudentSemYrPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Subjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._subjectsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsRep) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsbyStudentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._subjectsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._subjectsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._receiptsHeaderByStatusTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsTableAdapter, Me._studentsTableAdapter.Connection)
                    Me._studentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsbyStudentTableAdapter, Me._enrollSubjectsbyStudentTableAdapter.Connection)
                    Me._enrollSubjectsbyStudentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyStudentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsbyStudentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsbyStudentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsbyStudentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsbyStudentSemYrPkTableAdapter, Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection)
                    Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._subjectsTableAdapter, Me._subjectsTableAdapter.Connection)
                    Me._subjectsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._subjectsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._subjectsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._subjectsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._receiptsHeaderByStatusTableAdapter, Me._receiptsHeaderByStatusTableAdapter.Connection)
                    Me._receiptsHeaderByStatusTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._receiptsHeaderByStatusTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._receiptsHeaderByStatusTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._receiptsHeaderByStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._receiptsHeaderByStatusTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    Me._studentsTableAdapter.Connection = CType(revertConnections(Me._studentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsbyStudentTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsbyStudentTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsbyStudentTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyStudentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsbyStudentSemYrPkTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsbyStudentSemYrPkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyStudentSemYrPkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._subjectsTableAdapter) Is Nothing) Then
                    Me._subjectsTableAdapter.Connection = CType(revertConnections(Me._subjectsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._subjectsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._receiptsHeaderByStatusTableAdapter) Is Nothing) Then
                    Me._receiptsHeaderByStatusTableAdapter.Connection = CType(revertConnections(Me._receiptsHeaderByStatusTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._receiptsHeaderByStatusTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
