'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRegistrar"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRegistrar
    Inherits Global.System.Data.DataSet
    
    Private tableStudents As StudentsDataTable
    
    Private tableEnrollSubjects As EnrollSubjectsDataTable
    
    Private tableSYOfferingSelect As SYOfferingSelectDataTable
    
    Private tableEnrollSubjectsCount As EnrollSubjectsCountDataTable
    
    Private tableSYOfferingbyPK As SYOfferingbyPKDataTable
    
    Private tableLedgerSearch As LedgerSearchDataTable
    
    Private tableLedgerbyTRType As LedgerbyTRTypeDataTable
    
    Private tableSYOfferingbyResource As SYOfferingbyResourceDataTable
    
    Private tableTemplateResourceLoad As TemplateResourceLoadDataTable
    
    Private tableTemplateSubjectLoad As TemplateSubjectLoadDataTable
    
    Private tableSYOfferingbySubject As SYOfferingbySubjectDataTable
    
    Private tableStudentsbyPK As StudentsbyPKDataTable
    
    Private tableStudentGrades As StudentGradesDataTable
    
    Private tableTemplateGradeEntry As TemplateGradeEntryDataTable
    
    Private tableSYOfferingSelect2 As SYOfferingSelect2DataTable
    
    Private tableEnrollSubjectsbySyOPK As EnrollSubjectsbySyOPKDataTable
    
    Private tableBlockSectionTuition As BlockSectionTuitionDataTable
    
    Private tableEnrollHeader As EnrollHeaderDataTable
    
    Private tableBlockSectionTuitionbyCourse As BlockSectionTuitionbyCourseDataTable
    
    Private tableStudentGradesbyStudent As StudentGradesbyStudentDataTable
    
    Private tableEnrollSubjectsbyClass As EnrollSubjectsbyClassDataTable
    
    Private tableSpecialCourseGrades As SpecialCourseGradesDataTable
    
    Private tableSpecialCourseGradesbySPK As SpecialCourseGradesbySPKDataTable
    
    Private tableEnrollSubjectsbyPk As EnrollSubjectsbyPkDataTable
    
    Private tableSpecialCourseGradesbyEPK As SpecialCourseGradesbyEPKDataTable
    
    Private tableWhiteForm As WhiteFormDataTable
    
    Private tableClassList As ClassListDataTable
    
    Private tableStudentGradesbyStudentSubject As StudentGradesbyStudentSubjectDataTable
    
    Private tableEnrollSubjectsCost As EnrollSubjectsCostDataTable
    
    Private tableEnrollSubjectsCostbyPK As EnrollSubjectsCostbyPKDataTable
    
    Private tableStudentGradesByPK As StudentGradesByPKDataTable
    
    Private tableSYOfferingExtraHours As SYOfferingExtraHoursDataTable
    
    Private tableSYOfferingExtraHoursByFK As SYOfferingExtraHoursByFKDataTable
    
    Private tableSYOfferingFusedSubjectsByFK As SYOfferingFusedSubjectsByFKDataTable
    
    Private tableEnrollSubjects1 As EnrollSubjects1DataTable
    
    Private tableSYOfferingByFusedSubjectPK As SYOfferingByFusedSubjectPKDataTable
    
    Private tableTemplateEnrollment As TemplateEnrollmentDataTable
    
    Private tableTemplateStudentGrades As TemplateStudentGradesDataTable
    
    Private tableTemplateSYOffering As TemplateSYOfferingDataTable
    
    Private tableTemplateResourceLoadReport As TemplateResourceLoadReportDataTable
    
    Private tableTemplateSubjectLoadReport As TemplateSubjectLoadReportDataTable
    
    Private tableWhiteFormMiscCharges As WhiteFormMiscChargesDataTable
    
    Private tableBrokenHoursTemplate As BrokenHoursTemplateDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("EnrollSubjects")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsDataTable(ds.Tables("EnrollSubjects")))
            End If
            If (Not (ds.Tables("SYOfferingSelect")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingSelectDataTable(ds.Tables("SYOfferingSelect")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCount")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCountDataTable(ds.Tables("EnrollSubjectsCount")))
            End If
            If (Not (ds.Tables("SYOfferingbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyPKDataTable(ds.Tables("SYOfferingbyPK")))
            End If
            If (Not (ds.Tables("LedgerSearch")) Is Nothing) Then
                MyBase.Tables.Add(New LedgerSearchDataTable(ds.Tables("LedgerSearch")))
            End If
            If (Not (ds.Tables("LedgerbyTRType")) Is Nothing) Then
                MyBase.Tables.Add(New LedgerbyTRTypeDataTable(ds.Tables("LedgerbyTRType")))
            End If
            If (Not (ds.Tables("SYOfferingbyResource")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyResourceDataTable(ds.Tables("SYOfferingbyResource")))
            End If
            If (Not (ds.Tables("TemplateResourceLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateResourceLoadDataTable(ds.Tables("TemplateResourceLoad")))
            End If
            If (Not (ds.Tables("TemplateSubjectLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSubjectLoadDataTable(ds.Tables("TemplateSubjectLoad")))
            End If
            If (Not (ds.Tables("SYOfferingbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbySubjectDataTable(ds.Tables("SYOfferingbySubject")))
            End If
            If (Not (ds.Tables("StudentsbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyPKDataTable(ds.Tables("StudentsbyPK")))
            End If
            If (Not (ds.Tables("StudentGrades")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesDataTable(ds.Tables("StudentGrades")))
            End If
            If (Not (ds.Tables("TemplateGradeEntry")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateGradeEntryDataTable(ds.Tables("TemplateGradeEntry")))
            End If
            If (Not (ds.Tables("SYOfferingSelect2")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingSelect2DataTable(ds.Tables("SYOfferingSelect2")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbySyOPK")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbySyOPKDataTable(ds.Tables("EnrollSubjectsbySyOPK")))
            End If
            If (Not (ds.Tables("BlockSectionTuition")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionDataTable(ds.Tables("BlockSectionTuition")))
            End If
            If (Not (ds.Tables("EnrollHeader")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderDataTable(ds.Tables("EnrollHeader")))
            End If
            If (Not (ds.Tables("BlockSectionTuitionbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionbyCourseDataTable(ds.Tables("BlockSectionTuitionbyCourse")))
            End If
            If (Not (ds.Tables("StudentGradesbyStudent")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesbyStudentDataTable(ds.Tables("StudentGradesbyStudent")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyClass")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyClassDataTable(ds.Tables("EnrollSubjectsbyClass")))
            End If
            If (Not (ds.Tables("SpecialCourseGrades")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesDataTable(ds.Tables("SpecialCourseGrades")))
            End If
            If (Not (ds.Tables("SpecialCourseGradesbySPK")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesbySPKDataTable(ds.Tables("SpecialCourseGradesbySPK")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyPkDataTable(ds.Tables("EnrollSubjectsbyPk")))
            End If
            If (Not (ds.Tables("SpecialCourseGradesbyEPK")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesbyEPKDataTable(ds.Tables("SpecialCourseGradesbyEPK")))
            End If
            If (Not (ds.Tables("WhiteForm")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteFormDataTable(ds.Tables("WhiteForm")))
            End If
            If (Not (ds.Tables("ClassList")) Is Nothing) Then
                MyBase.Tables.Add(New ClassListDataTable(ds.Tables("ClassList")))
            End If
            If (Not (ds.Tables("StudentGradesbyStudentSubject")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesbyStudentSubjectDataTable(ds.Tables("StudentGradesbyStudentSubject")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCost")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCostDataTable(ds.Tables("EnrollSubjectsCost")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCostbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCostbyPKDataTable(ds.Tables("EnrollSubjectsCostbyPK")))
            End If
            If (Not (ds.Tables("StudentGradesByPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesByPKDataTable(ds.Tables("StudentGradesByPK")))
            End If
            If (Not (ds.Tables("SYOfferingExtraHours")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingExtraHoursDataTable(ds.Tables("SYOfferingExtraHours")))
            End If
            If (Not (ds.Tables("SYOfferingExtraHoursByFK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingExtraHoursByFKDataTable(ds.Tables("SYOfferingExtraHoursByFK")))
            End If
            If (Not (ds.Tables("SYOfferingFusedSubjectsByFK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingFusedSubjectsByFKDataTable(ds.Tables("SYOfferingFusedSubjectsByFK")))
            End If
            If (Not (ds.Tables("EnrollSubjects1")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjects1DataTable(ds.Tables("EnrollSubjects1")))
            End If
            If (Not (ds.Tables("SYOfferingByFusedSubjectPK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingByFusedSubjectPKDataTable(ds.Tables("SYOfferingByFusedSubjectPK")))
            End If
            If (Not (ds.Tables("TemplateEnrollment")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEnrollmentDataTable(ds.Tables("TemplateEnrollment")))
            End If
            If (Not (ds.Tables("TemplateStudentGrades")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStudentGradesDataTable(ds.Tables("TemplateStudentGrades")))
            End If
            If (Not (ds.Tables("TemplateSYOffering")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSYOfferingDataTable(ds.Tables("TemplateSYOffering")))
            End If
            If (Not (ds.Tables("TemplateResourceLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateResourceLoadReportDataTable(ds.Tables("TemplateResourceLoadReport")))
            End If
            If (Not (ds.Tables("TemplateSubjectLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSubjectLoadReportDataTable(ds.Tables("TemplateSubjectLoadReport")))
            End If
            If (Not (ds.Tables("WhiteFormMiscCharges")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteFormMiscChargesDataTable(ds.Tables("WhiteFormMiscCharges")))
            End If
            If (Not (ds.Tables("BrokenHoursTemplate")) Is Nothing) Then
                MyBase.Tables.Add(New BrokenHoursTemplateDataTable(ds.Tables("BrokenHoursTemplate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Students() As StudentsDataTable
        Get
            Return Me.tableStudents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjects() As EnrollSubjectsDataTable
        Get
            Return Me.tableEnrollSubjects
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingSelect() As SYOfferingSelectDataTable
        Get
            Return Me.tableSYOfferingSelect
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsCount() As EnrollSubjectsCountDataTable
        Get
            Return Me.tableEnrollSubjectsCount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingbyPK() As SYOfferingbyPKDataTable
        Get
            Return Me.tableSYOfferingbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LedgerSearch() As LedgerSearchDataTable
        Get
            Return Me.tableLedgerSearch
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LedgerbyTRType() As LedgerbyTRTypeDataTable
        Get
            Return Me.tableLedgerbyTRType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingbyResource() As SYOfferingbyResourceDataTable
        Get
            Return Me.tableSYOfferingbyResource
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateResourceLoad() As TemplateResourceLoadDataTable
        Get
            Return Me.tableTemplateResourceLoad
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateSubjectLoad() As TemplateSubjectLoadDataTable
        Get
            Return Me.tableTemplateSubjectLoad
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingbySubject() As SYOfferingbySubjectDataTable
        Get
            Return Me.tableSYOfferingbySubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentsbyPK() As StudentsbyPKDataTable
        Get
            Return Me.tableStudentsbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentGrades() As StudentGradesDataTable
        Get
            Return Me.tableStudentGrades
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateGradeEntry() As TemplateGradeEntryDataTable
        Get
            Return Me.tableTemplateGradeEntry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingSelect2() As SYOfferingSelect2DataTable
        Get
            Return Me.tableSYOfferingSelect2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsbySyOPK() As EnrollSubjectsbySyOPKDataTable
        Get
            Return Me.tableEnrollSubjectsbySyOPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlockSectionTuition() As BlockSectionTuitionDataTable
        Get
            Return Me.tableBlockSectionTuition
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollHeader() As EnrollHeaderDataTable
        Get
            Return Me.tableEnrollHeader
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlockSectionTuitionbyCourse() As BlockSectionTuitionbyCourseDataTable
        Get
            Return Me.tableBlockSectionTuitionbyCourse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentGradesbyStudent() As StudentGradesbyStudentDataTable
        Get
            Return Me.tableStudentGradesbyStudent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsbyClass() As EnrollSubjectsbyClassDataTable
        Get
            Return Me.tableEnrollSubjectsbyClass
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialCourseGrades() As SpecialCourseGradesDataTable
        Get
            Return Me.tableSpecialCourseGrades
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialCourseGradesbySPK() As SpecialCourseGradesbySPKDataTable
        Get
            Return Me.tableSpecialCourseGradesbySPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsbyPk() As EnrollSubjectsbyPkDataTable
        Get
            Return Me.tableEnrollSubjectsbyPk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialCourseGradesbyEPK() As SpecialCourseGradesbyEPKDataTable
        Get
            Return Me.tableSpecialCourseGradesbyEPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WhiteForm() As WhiteFormDataTable
        Get
            Return Me.tableWhiteForm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassList() As ClassListDataTable
        Get
            Return Me.tableClassList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentGradesbyStudentSubject() As StudentGradesbyStudentSubjectDataTable
        Get
            Return Me.tableStudentGradesbyStudentSubject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsCost() As EnrollSubjectsCostDataTable
        Get
            Return Me.tableEnrollSubjectsCost
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjectsCostbyPK() As EnrollSubjectsCostbyPKDataTable
        Get
            Return Me.tableEnrollSubjectsCostbyPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StudentGradesByPK() As StudentGradesByPKDataTable
        Get
            Return Me.tableStudentGradesByPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingExtraHours() As SYOfferingExtraHoursDataTable
        Get
            Return Me.tableSYOfferingExtraHours
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingExtraHoursByFK() As SYOfferingExtraHoursByFKDataTable
        Get
            Return Me.tableSYOfferingExtraHoursByFK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingFusedSubjectsByFK() As SYOfferingFusedSubjectsByFKDataTable
        Get
            Return Me.tableSYOfferingFusedSubjectsByFK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EnrollSubjects1() As EnrollSubjects1DataTable
        Get
            Return Me.tableEnrollSubjects1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYOfferingByFusedSubjectPK() As SYOfferingByFusedSubjectPKDataTable
        Get
            Return Me.tableSYOfferingByFusedSubjectPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateEnrollment() As TemplateEnrollmentDataTable
        Get
            Return Me.tableTemplateEnrollment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateStudentGrades() As TemplateStudentGradesDataTable
        Get
            Return Me.tableTemplateStudentGrades
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateSYOffering() As TemplateSYOfferingDataTable
        Get
            Return Me.tableTemplateSYOffering
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateResourceLoadReport() As TemplateResourceLoadReportDataTable
        Get
            Return Me.tableTemplateResourceLoadReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemplateSubjectLoadReport() As TemplateSubjectLoadReportDataTable
        Get
            Return Me.tableTemplateSubjectLoadReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WhiteFormMiscCharges() As WhiteFormMiscChargesDataTable
        Get
            Return Me.tableWhiteFormMiscCharges
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BrokenHoursTemplate() As BrokenHoursTemplateDataTable
        Get
            Return Me.tableBrokenHoursTemplate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRegistrar = CType(MyBase.Clone,dsRegistrar)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("EnrollSubjects")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsDataTable(ds.Tables("EnrollSubjects")))
            End If
            If (Not (ds.Tables("SYOfferingSelect")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingSelectDataTable(ds.Tables("SYOfferingSelect")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCount")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCountDataTable(ds.Tables("EnrollSubjectsCount")))
            End If
            If (Not (ds.Tables("SYOfferingbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyPKDataTable(ds.Tables("SYOfferingbyPK")))
            End If
            If (Not (ds.Tables("LedgerSearch")) Is Nothing) Then
                MyBase.Tables.Add(New LedgerSearchDataTable(ds.Tables("LedgerSearch")))
            End If
            If (Not (ds.Tables("LedgerbyTRType")) Is Nothing) Then
                MyBase.Tables.Add(New LedgerbyTRTypeDataTable(ds.Tables("LedgerbyTRType")))
            End If
            If (Not (ds.Tables("SYOfferingbyResource")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbyResourceDataTable(ds.Tables("SYOfferingbyResource")))
            End If
            If (Not (ds.Tables("TemplateResourceLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateResourceLoadDataTable(ds.Tables("TemplateResourceLoad")))
            End If
            If (Not (ds.Tables("TemplateSubjectLoad")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSubjectLoadDataTable(ds.Tables("TemplateSubjectLoad")))
            End If
            If (Not (ds.Tables("SYOfferingbySubject")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingbySubjectDataTable(ds.Tables("SYOfferingbySubject")))
            End If
            If (Not (ds.Tables("StudentsbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsbyPKDataTable(ds.Tables("StudentsbyPK")))
            End If
            If (Not (ds.Tables("StudentGrades")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesDataTable(ds.Tables("StudentGrades")))
            End If
            If (Not (ds.Tables("TemplateGradeEntry")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateGradeEntryDataTable(ds.Tables("TemplateGradeEntry")))
            End If
            If (Not (ds.Tables("SYOfferingSelect2")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingSelect2DataTable(ds.Tables("SYOfferingSelect2")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbySyOPK")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbySyOPKDataTable(ds.Tables("EnrollSubjectsbySyOPK")))
            End If
            If (Not (ds.Tables("BlockSectionTuition")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionDataTable(ds.Tables("BlockSectionTuition")))
            End If
            If (Not (ds.Tables("EnrollHeader")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollHeaderDataTable(ds.Tables("EnrollHeader")))
            End If
            If (Not (ds.Tables("BlockSectionTuitionbyCourse")) Is Nothing) Then
                MyBase.Tables.Add(New BlockSectionTuitionbyCourseDataTable(ds.Tables("BlockSectionTuitionbyCourse")))
            End If
            If (Not (ds.Tables("StudentGradesbyStudent")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesbyStudentDataTable(ds.Tables("StudentGradesbyStudent")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyClass")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyClassDataTable(ds.Tables("EnrollSubjectsbyClass")))
            End If
            If (Not (ds.Tables("SpecialCourseGrades")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesDataTable(ds.Tables("SpecialCourseGrades")))
            End If
            If (Not (ds.Tables("SpecialCourseGradesbySPK")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesbySPKDataTable(ds.Tables("SpecialCourseGradesbySPK")))
            End If
            If (Not (ds.Tables("EnrollSubjectsbyPk")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsbyPkDataTable(ds.Tables("EnrollSubjectsbyPk")))
            End If
            If (Not (ds.Tables("SpecialCourseGradesbyEPK")) Is Nothing) Then
                MyBase.Tables.Add(New SpecialCourseGradesbyEPKDataTable(ds.Tables("SpecialCourseGradesbyEPK")))
            End If
            If (Not (ds.Tables("WhiteForm")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteFormDataTable(ds.Tables("WhiteForm")))
            End If
            If (Not (ds.Tables("ClassList")) Is Nothing) Then
                MyBase.Tables.Add(New ClassListDataTable(ds.Tables("ClassList")))
            End If
            If (Not (ds.Tables("StudentGradesbyStudentSubject")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesbyStudentSubjectDataTable(ds.Tables("StudentGradesbyStudentSubject")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCost")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCostDataTable(ds.Tables("EnrollSubjectsCost")))
            End If
            If (Not (ds.Tables("EnrollSubjectsCostbyPK")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjectsCostbyPKDataTable(ds.Tables("EnrollSubjectsCostbyPK")))
            End If
            If (Not (ds.Tables("StudentGradesByPK")) Is Nothing) Then
                MyBase.Tables.Add(New StudentGradesByPKDataTable(ds.Tables("StudentGradesByPK")))
            End If
            If (Not (ds.Tables("SYOfferingExtraHours")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingExtraHoursDataTable(ds.Tables("SYOfferingExtraHours")))
            End If
            If (Not (ds.Tables("SYOfferingExtraHoursByFK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingExtraHoursByFKDataTable(ds.Tables("SYOfferingExtraHoursByFK")))
            End If
            If (Not (ds.Tables("SYOfferingFusedSubjectsByFK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingFusedSubjectsByFKDataTable(ds.Tables("SYOfferingFusedSubjectsByFK")))
            End If
            If (Not (ds.Tables("EnrollSubjects1")) Is Nothing) Then
                MyBase.Tables.Add(New EnrollSubjects1DataTable(ds.Tables("EnrollSubjects1")))
            End If
            If (Not (ds.Tables("SYOfferingByFusedSubjectPK")) Is Nothing) Then
                MyBase.Tables.Add(New SYOfferingByFusedSubjectPKDataTable(ds.Tables("SYOfferingByFusedSubjectPK")))
            End If
            If (Not (ds.Tables("TemplateEnrollment")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateEnrollmentDataTable(ds.Tables("TemplateEnrollment")))
            End If
            If (Not (ds.Tables("TemplateStudentGrades")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateStudentGradesDataTable(ds.Tables("TemplateStudentGrades")))
            End If
            If (Not (ds.Tables("TemplateSYOffering")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSYOfferingDataTable(ds.Tables("TemplateSYOffering")))
            End If
            If (Not (ds.Tables("TemplateResourceLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateResourceLoadReportDataTable(ds.Tables("TemplateResourceLoadReport")))
            End If
            If (Not (ds.Tables("TemplateSubjectLoadReport")) Is Nothing) Then
                MyBase.Tables.Add(New TemplateSubjectLoadReportDataTable(ds.Tables("TemplateSubjectLoadReport")))
            End If
            If (Not (ds.Tables("WhiteFormMiscCharges")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteFormMiscChargesDataTable(ds.Tables("WhiteFormMiscCharges")))
            End If
            If (Not (ds.Tables("BrokenHoursTemplate")) Is Nothing) Then
                MyBase.Tables.Add(New BrokenHoursTemplateDataTable(ds.Tables("BrokenHoursTemplate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableStudents = CType(MyBase.Tables("Students"),StudentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudents) Is Nothing) Then
                Me.tableStudents.InitVars
            End If
        End If
        Me.tableEnrollSubjects = CType(MyBase.Tables("EnrollSubjects"),EnrollSubjectsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjects) Is Nothing) Then
                Me.tableEnrollSubjects.InitVars
            End If
        End If
        Me.tableSYOfferingSelect = CType(MyBase.Tables("SYOfferingSelect"),SYOfferingSelectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingSelect) Is Nothing) Then
                Me.tableSYOfferingSelect.InitVars
            End If
        End If
        Me.tableEnrollSubjectsCount = CType(MyBase.Tables("EnrollSubjectsCount"),EnrollSubjectsCountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsCount) Is Nothing) Then
                Me.tableEnrollSubjectsCount.InitVars
            End If
        End If
        Me.tableSYOfferingbyPK = CType(MyBase.Tables("SYOfferingbyPK"),SYOfferingbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingbyPK) Is Nothing) Then
                Me.tableSYOfferingbyPK.InitVars
            End If
        End If
        Me.tableLedgerSearch = CType(MyBase.Tables("LedgerSearch"),LedgerSearchDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLedgerSearch) Is Nothing) Then
                Me.tableLedgerSearch.InitVars
            End If
        End If
        Me.tableLedgerbyTRType = CType(MyBase.Tables("LedgerbyTRType"),LedgerbyTRTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLedgerbyTRType) Is Nothing) Then
                Me.tableLedgerbyTRType.InitVars
            End If
        End If
        Me.tableSYOfferingbyResource = CType(MyBase.Tables("SYOfferingbyResource"),SYOfferingbyResourceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingbyResource) Is Nothing) Then
                Me.tableSYOfferingbyResource.InitVars
            End If
        End If
        Me.tableTemplateResourceLoad = CType(MyBase.Tables("TemplateResourceLoad"),TemplateResourceLoadDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateResourceLoad) Is Nothing) Then
                Me.tableTemplateResourceLoad.InitVars
            End If
        End If
        Me.tableTemplateSubjectLoad = CType(MyBase.Tables("TemplateSubjectLoad"),TemplateSubjectLoadDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateSubjectLoad) Is Nothing) Then
                Me.tableTemplateSubjectLoad.InitVars
            End If
        End If
        Me.tableSYOfferingbySubject = CType(MyBase.Tables("SYOfferingbySubject"),SYOfferingbySubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingbySubject) Is Nothing) Then
                Me.tableSYOfferingbySubject.InitVars
            End If
        End If
        Me.tableStudentsbyPK = CType(MyBase.Tables("StudentsbyPK"),StudentsbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentsbyPK) Is Nothing) Then
                Me.tableStudentsbyPK.InitVars
            End If
        End If
        Me.tableStudentGrades = CType(MyBase.Tables("StudentGrades"),StudentGradesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentGrades) Is Nothing) Then
                Me.tableStudentGrades.InitVars
            End If
        End If
        Me.tableTemplateGradeEntry = CType(MyBase.Tables("TemplateGradeEntry"),TemplateGradeEntryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateGradeEntry) Is Nothing) Then
                Me.tableTemplateGradeEntry.InitVars
            End If
        End If
        Me.tableSYOfferingSelect2 = CType(MyBase.Tables("SYOfferingSelect2"),SYOfferingSelect2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingSelect2) Is Nothing) Then
                Me.tableSYOfferingSelect2.InitVars
            End If
        End If
        Me.tableEnrollSubjectsbySyOPK = CType(MyBase.Tables("EnrollSubjectsbySyOPK"),EnrollSubjectsbySyOPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsbySyOPK) Is Nothing) Then
                Me.tableEnrollSubjectsbySyOPK.InitVars
            End If
        End If
        Me.tableBlockSectionTuition = CType(MyBase.Tables("BlockSectionTuition"),BlockSectionTuitionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBlockSectionTuition) Is Nothing) Then
                Me.tableBlockSectionTuition.InitVars
            End If
        End If
        Me.tableEnrollHeader = CType(MyBase.Tables("EnrollHeader"),EnrollHeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollHeader) Is Nothing) Then
                Me.tableEnrollHeader.InitVars
            End If
        End If
        Me.tableBlockSectionTuitionbyCourse = CType(MyBase.Tables("BlockSectionTuitionbyCourse"),BlockSectionTuitionbyCourseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBlockSectionTuitionbyCourse) Is Nothing) Then
                Me.tableBlockSectionTuitionbyCourse.InitVars
            End If
        End If
        Me.tableStudentGradesbyStudent = CType(MyBase.Tables("StudentGradesbyStudent"),StudentGradesbyStudentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentGradesbyStudent) Is Nothing) Then
                Me.tableStudentGradesbyStudent.InitVars
            End If
        End If
        Me.tableEnrollSubjectsbyClass = CType(MyBase.Tables("EnrollSubjectsbyClass"),EnrollSubjectsbyClassDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsbyClass) Is Nothing) Then
                Me.tableEnrollSubjectsbyClass.InitVars
            End If
        End If
        Me.tableSpecialCourseGrades = CType(MyBase.Tables("SpecialCourseGrades"),SpecialCourseGradesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpecialCourseGrades) Is Nothing) Then
                Me.tableSpecialCourseGrades.InitVars
            End If
        End If
        Me.tableSpecialCourseGradesbySPK = CType(MyBase.Tables("SpecialCourseGradesbySPK"),SpecialCourseGradesbySPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpecialCourseGradesbySPK) Is Nothing) Then
                Me.tableSpecialCourseGradesbySPK.InitVars
            End If
        End If
        Me.tableEnrollSubjectsbyPk = CType(MyBase.Tables("EnrollSubjectsbyPk"),EnrollSubjectsbyPkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsbyPk) Is Nothing) Then
                Me.tableEnrollSubjectsbyPk.InitVars
            End If
        End If
        Me.tableSpecialCourseGradesbyEPK = CType(MyBase.Tables("SpecialCourseGradesbyEPK"),SpecialCourseGradesbyEPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSpecialCourseGradesbyEPK) Is Nothing) Then
                Me.tableSpecialCourseGradesbyEPK.InitVars
            End If
        End If
        Me.tableWhiteForm = CType(MyBase.Tables("WhiteForm"),WhiteFormDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWhiteForm) Is Nothing) Then
                Me.tableWhiteForm.InitVars
            End If
        End If
        Me.tableClassList = CType(MyBase.Tables("ClassList"),ClassListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClassList) Is Nothing) Then
                Me.tableClassList.InitVars
            End If
        End If
        Me.tableStudentGradesbyStudentSubject = CType(MyBase.Tables("StudentGradesbyStudentSubject"),StudentGradesbyStudentSubjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentGradesbyStudentSubject) Is Nothing) Then
                Me.tableStudentGradesbyStudentSubject.InitVars
            End If
        End If
        Me.tableEnrollSubjectsCost = CType(MyBase.Tables("EnrollSubjectsCost"),EnrollSubjectsCostDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsCost) Is Nothing) Then
                Me.tableEnrollSubjectsCost.InitVars
            End If
        End If
        Me.tableEnrollSubjectsCostbyPK = CType(MyBase.Tables("EnrollSubjectsCostbyPK"),EnrollSubjectsCostbyPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjectsCostbyPK) Is Nothing) Then
                Me.tableEnrollSubjectsCostbyPK.InitVars
            End If
        End If
        Me.tableStudentGradesByPK = CType(MyBase.Tables("StudentGradesByPK"),StudentGradesByPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudentGradesByPK) Is Nothing) Then
                Me.tableStudentGradesByPK.InitVars
            End If
        End If
        Me.tableSYOfferingExtraHours = CType(MyBase.Tables("SYOfferingExtraHours"),SYOfferingExtraHoursDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingExtraHours) Is Nothing) Then
                Me.tableSYOfferingExtraHours.InitVars
            End If
        End If
        Me.tableSYOfferingExtraHoursByFK = CType(MyBase.Tables("SYOfferingExtraHoursByFK"),SYOfferingExtraHoursByFKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingExtraHoursByFK) Is Nothing) Then
                Me.tableSYOfferingExtraHoursByFK.InitVars
            End If
        End If
        Me.tableSYOfferingFusedSubjectsByFK = CType(MyBase.Tables("SYOfferingFusedSubjectsByFK"),SYOfferingFusedSubjectsByFKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingFusedSubjectsByFK) Is Nothing) Then
                Me.tableSYOfferingFusedSubjectsByFK.InitVars
            End If
        End If
        Me.tableEnrollSubjects1 = CType(MyBase.Tables("EnrollSubjects1"),EnrollSubjects1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableEnrollSubjects1) Is Nothing) Then
                Me.tableEnrollSubjects1.InitVars
            End If
        End If
        Me.tableSYOfferingByFusedSubjectPK = CType(MyBase.Tables("SYOfferingByFusedSubjectPK"),SYOfferingByFusedSubjectPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYOfferingByFusedSubjectPK) Is Nothing) Then
                Me.tableSYOfferingByFusedSubjectPK.InitVars
            End If
        End If
        Me.tableTemplateEnrollment = CType(MyBase.Tables("TemplateEnrollment"),TemplateEnrollmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateEnrollment) Is Nothing) Then
                Me.tableTemplateEnrollment.InitVars
            End If
        End If
        Me.tableTemplateStudentGrades = CType(MyBase.Tables("TemplateStudentGrades"),TemplateStudentGradesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateStudentGrades) Is Nothing) Then
                Me.tableTemplateStudentGrades.InitVars
            End If
        End If
        Me.tableTemplateSYOffering = CType(MyBase.Tables("TemplateSYOffering"),TemplateSYOfferingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateSYOffering) Is Nothing) Then
                Me.tableTemplateSYOffering.InitVars
            End If
        End If
        Me.tableTemplateResourceLoadReport = CType(MyBase.Tables("TemplateResourceLoadReport"),TemplateResourceLoadReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateResourceLoadReport) Is Nothing) Then
                Me.tableTemplateResourceLoadReport.InitVars
            End If
        End If
        Me.tableTemplateSubjectLoadReport = CType(MyBase.Tables("TemplateSubjectLoadReport"),TemplateSubjectLoadReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemplateSubjectLoadReport) Is Nothing) Then
                Me.tableTemplateSubjectLoadReport.InitVars
            End If
        End If
        Me.tableWhiteFormMiscCharges = CType(MyBase.Tables("WhiteFormMiscCharges"),WhiteFormMiscChargesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWhiteFormMiscCharges) Is Nothing) Then
                Me.tableWhiteFormMiscCharges.InitVars
            End If
        End If
        Me.tableBrokenHoursTemplate = CType(MyBase.Tables("BrokenHoursTemplate"),BrokenHoursTemplateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBrokenHoursTemplate) Is Nothing) Then
                Me.tableBrokenHoursTemplate.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRegistrar"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRegistrar.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableStudents = New StudentsDataTable
        MyBase.Tables.Add(Me.tableStudents)
        Me.tableEnrollSubjects = New EnrollSubjectsDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjects)
        Me.tableSYOfferingSelect = New SYOfferingSelectDataTable
        MyBase.Tables.Add(Me.tableSYOfferingSelect)
        Me.tableEnrollSubjectsCount = New EnrollSubjectsCountDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsCount)
        Me.tableSYOfferingbyPK = New SYOfferingbyPKDataTable
        MyBase.Tables.Add(Me.tableSYOfferingbyPK)
        Me.tableLedgerSearch = New LedgerSearchDataTable
        MyBase.Tables.Add(Me.tableLedgerSearch)
        Me.tableLedgerbyTRType = New LedgerbyTRTypeDataTable
        MyBase.Tables.Add(Me.tableLedgerbyTRType)
        Me.tableSYOfferingbyResource = New SYOfferingbyResourceDataTable
        MyBase.Tables.Add(Me.tableSYOfferingbyResource)
        Me.tableTemplateResourceLoad = New TemplateResourceLoadDataTable
        MyBase.Tables.Add(Me.tableTemplateResourceLoad)
        Me.tableTemplateSubjectLoad = New TemplateSubjectLoadDataTable
        MyBase.Tables.Add(Me.tableTemplateSubjectLoad)
        Me.tableSYOfferingbySubject = New SYOfferingbySubjectDataTable
        MyBase.Tables.Add(Me.tableSYOfferingbySubject)
        Me.tableStudentsbyPK = New StudentsbyPKDataTable
        MyBase.Tables.Add(Me.tableStudentsbyPK)
        Me.tableStudentGrades = New StudentGradesDataTable
        MyBase.Tables.Add(Me.tableStudentGrades)
        Me.tableTemplateGradeEntry = New TemplateGradeEntryDataTable
        MyBase.Tables.Add(Me.tableTemplateGradeEntry)
        Me.tableSYOfferingSelect2 = New SYOfferingSelect2DataTable
        MyBase.Tables.Add(Me.tableSYOfferingSelect2)
        Me.tableEnrollSubjectsbySyOPK = New EnrollSubjectsbySyOPKDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsbySyOPK)
        Me.tableBlockSectionTuition = New BlockSectionTuitionDataTable
        MyBase.Tables.Add(Me.tableBlockSectionTuition)
        Me.tableEnrollHeader = New EnrollHeaderDataTable
        MyBase.Tables.Add(Me.tableEnrollHeader)
        Me.tableBlockSectionTuitionbyCourse = New BlockSectionTuitionbyCourseDataTable
        MyBase.Tables.Add(Me.tableBlockSectionTuitionbyCourse)
        Me.tableStudentGradesbyStudent = New StudentGradesbyStudentDataTable
        MyBase.Tables.Add(Me.tableStudentGradesbyStudent)
        Me.tableEnrollSubjectsbyClass = New EnrollSubjectsbyClassDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsbyClass)
        Me.tableSpecialCourseGrades = New SpecialCourseGradesDataTable
        MyBase.Tables.Add(Me.tableSpecialCourseGrades)
        Me.tableSpecialCourseGradesbySPK = New SpecialCourseGradesbySPKDataTable
        MyBase.Tables.Add(Me.tableSpecialCourseGradesbySPK)
        Me.tableEnrollSubjectsbyPk = New EnrollSubjectsbyPkDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsbyPk)
        Me.tableSpecialCourseGradesbyEPK = New SpecialCourseGradesbyEPKDataTable
        MyBase.Tables.Add(Me.tableSpecialCourseGradesbyEPK)
        Me.tableWhiteForm = New WhiteFormDataTable
        MyBase.Tables.Add(Me.tableWhiteForm)
        Me.tableClassList = New ClassListDataTable
        MyBase.Tables.Add(Me.tableClassList)
        Me.tableStudentGradesbyStudentSubject = New StudentGradesbyStudentSubjectDataTable
        MyBase.Tables.Add(Me.tableStudentGradesbyStudentSubject)
        Me.tableEnrollSubjectsCost = New EnrollSubjectsCostDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsCost)
        Me.tableEnrollSubjectsCostbyPK = New EnrollSubjectsCostbyPKDataTable
        MyBase.Tables.Add(Me.tableEnrollSubjectsCostbyPK)
        Me.tableStudentGradesByPK = New StudentGradesByPKDataTable
        MyBase.Tables.Add(Me.tableStudentGradesByPK)
        Me.tableSYOfferingExtraHours = New SYOfferingExtraHoursDataTable
        MyBase.Tables.Add(Me.tableSYOfferingExtraHours)
        Me.tableSYOfferingExtraHoursByFK = New SYOfferingExtraHoursByFKDataTable
        MyBase.Tables.Add(Me.tableSYOfferingExtraHoursByFK)
        Me.tableSYOfferingFusedSubjectsByFK = New SYOfferingFusedSubjectsByFKDataTable
        MyBase.Tables.Add(Me.tableSYOfferingFusedSubjectsByFK)
        Me.tableEnrollSubjects1 = New EnrollSubjects1DataTable
        MyBase.Tables.Add(Me.tableEnrollSubjects1)
        Me.tableSYOfferingByFusedSubjectPK = New SYOfferingByFusedSubjectPKDataTable
        MyBase.Tables.Add(Me.tableSYOfferingByFusedSubjectPK)
        Me.tableTemplateEnrollment = New TemplateEnrollmentDataTable
        MyBase.Tables.Add(Me.tableTemplateEnrollment)
        Me.tableTemplateStudentGrades = New TemplateStudentGradesDataTable
        MyBase.Tables.Add(Me.tableTemplateStudentGrades)
        Me.tableTemplateSYOffering = New TemplateSYOfferingDataTable
        MyBase.Tables.Add(Me.tableTemplateSYOffering)
        Me.tableTemplateResourceLoadReport = New TemplateResourceLoadReportDataTable
        MyBase.Tables.Add(Me.tableTemplateResourceLoadReport)
        Me.tableTemplateSubjectLoadReport = New TemplateSubjectLoadReportDataTable
        MyBase.Tables.Add(Me.tableTemplateSubjectLoadReport)
        Me.tableWhiteFormMiscCharges = New WhiteFormMiscChargesDataTable
        MyBase.Tables.Add(Me.tableWhiteFormMiscCharges)
        Me.tableBrokenHoursTemplate = New BrokenHoursTemplateDataTable
        MyBase.Tables.Add(Me.tableBrokenHoursTemplate)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjects() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingSelect() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsCount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLedgerSearch() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLedgerbyTRType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingbyResource() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateResourceLoad() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateSubjectLoad() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingbySubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentsbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentGrades() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateGradeEntry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingSelect2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsbySyOPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBlockSectionTuition() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollHeader() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBlockSectionTuitionbyCourse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentGradesbyStudent() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsbyClass() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSpecialCourseGrades() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSpecialCourseGradesbySPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsbyPk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSpecialCourseGradesbyEPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWhiteForm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClassList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentGradesbyStudentSubject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsCost() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjectsCostbyPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudentGradesByPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingExtraHours() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingExtraHoursByFK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingFusedSubjectsByFK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEnrollSubjects1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYOfferingByFusedSubjectPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateEnrollment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateStudentGrades() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateSYOffering() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateResourceLoadReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemplateSubjectLoadReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWhiteFormMiscCharges() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBrokenHoursTemplate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRegistrar = New dsRegistrar
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub StudentsRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsRowChangeEvent)
    
    Public Delegate Sub SYOfferingSelectRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingSelectRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsCountRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsCountRowChangeEvent)
    
    Public Delegate Sub SYOfferingbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingbyPKRowChangeEvent)
    
    Public Delegate Sub LedgerSearchRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerSearchRowChangeEvent)
    
    Public Delegate Sub LedgerbyTRTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerbyTRTypeRowChangeEvent)
    
    Public Delegate Sub SYOfferingbyResourceRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingbyResourceRowChangeEvent)
    
    Public Delegate Sub TemplateResourceLoadRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateResourceLoadRowChangeEvent)
    
    Public Delegate Sub TemplateSubjectLoadRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateSubjectLoadRowChangeEvent)
    
    Public Delegate Sub SYOfferingbySubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingbySubjectRowChangeEvent)
    
    Public Delegate Sub StudentsbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsbyPKRowChangeEvent)
    
    Public Delegate Sub StudentGradesRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentGradesRowChangeEvent)
    
    Public Delegate Sub TemplateGradeEntryRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateGradeEntryRowChangeEvent)
    
    Public Delegate Sub SYOfferingSelect2RowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingSelect2RowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsbySyOPKRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsbySyOPKRowChangeEvent)
    
    Public Delegate Sub BlockSectionTuitionRowChangeEventHandler(ByVal sender As Object, ByVal e As BlockSectionTuitionRowChangeEvent)
    
    Public Delegate Sub EnrollHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollHeaderRowChangeEvent)
    
    Public Delegate Sub BlockSectionTuitionbyCourseRowChangeEventHandler(ByVal sender As Object, ByVal e As BlockSectionTuitionbyCourseRowChangeEvent)
    
    Public Delegate Sub StudentGradesbyStudentRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentGradesbyStudentRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsbyClassRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsbyClassRowChangeEvent)
    
    Public Delegate Sub SpecialCourseGradesRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialCourseGradesRowChangeEvent)
    
    Public Delegate Sub SpecialCourseGradesbySPKRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialCourseGradesbySPKRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsbyPkRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsbyPkRowChangeEvent)
    
    Public Delegate Sub SpecialCourseGradesbyEPKRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialCourseGradesbyEPKRowChangeEvent)
    
    Public Delegate Sub WhiteFormRowChangeEventHandler(ByVal sender As Object, ByVal e As WhiteFormRowChangeEvent)
    
    Public Delegate Sub ClassListRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassListRowChangeEvent)
    
    Public Delegate Sub StudentGradesbyStudentSubjectRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentGradesbyStudentSubjectRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsCostRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsCostRowChangeEvent)
    
    Public Delegate Sub EnrollSubjectsCostbyPKRowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjectsCostbyPKRowChangeEvent)
    
    Public Delegate Sub StudentGradesByPKRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentGradesByPKRowChangeEvent)
    
    Public Delegate Sub SYOfferingExtraHoursRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingExtraHoursRowChangeEvent)
    
    Public Delegate Sub SYOfferingExtraHoursByFKRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingExtraHoursByFKRowChangeEvent)
    
    Public Delegate Sub SYOfferingFusedSubjectsByFKRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingFusedSubjectsByFKRowChangeEvent)
    
    Public Delegate Sub EnrollSubjects1RowChangeEventHandler(ByVal sender As Object, ByVal e As EnrollSubjects1RowChangeEvent)
    
    Public Delegate Sub SYOfferingByFusedSubjectPKRowChangeEventHandler(ByVal sender As Object, ByVal e As SYOfferingByFusedSubjectPKRowChangeEvent)
    
    Public Delegate Sub TemplateEnrollmentRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateEnrollmentRowChangeEvent)
    
    Public Delegate Sub TemplateStudentGradesRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateStudentGradesRowChangeEvent)
    
    Public Delegate Sub TemplateSYOfferingRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateSYOfferingRowChangeEvent)
    
    Public Delegate Sub TemplateResourceLoadReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateResourceLoadReportRowChangeEvent)
    
    Public Delegate Sub TemplateSubjectLoadReportRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateSubjectLoadReportRowChangeEvent)
    
    Public Delegate Sub WhiteFormMiscChargesRowChangeEventHandler(ByVal sender As Object, ByVal e As WhiteFormMiscChargesRowChangeEvent)
    
    Public Delegate Sub BrokenHoursTemplateRowChangeEventHandler(ByVal sender As Object, ByVal e As BrokenHoursTemplateRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        Private columngender As Global.System.Data.DataColumn
        
        Private columnregDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Students"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property genderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsRow
            Get
                Return CType(Me.Rows(index),StudentsRow)
            End Get
        End Property
        
        Public Event StudentsRowChanging As StudentsRowChangeEventHandler
        
        Public Event StudentsRowChanged As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleting As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleted As StudentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal StudentType As String,  _
                    ByVal gender As String,  _
                    ByVal regDate As Date) As StudentsRow
            Dim rowStudentsRow As StudentsRow = CType(Me.NewRow,StudentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, StudentType, gender, regDate}
            rowStudentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsRow)
            Return rowStudentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsDataTable = CType(MyBase.Clone,StudentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
            Me.columnStudentType = MyBase.Columns("StudentType")
            Me.columngender = MyBase.Columns("gender")
            Me.columnregDate = MyBase.Columns("regDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.columngender = New Global.System.Data.DataColumn("gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngender)
            Me.columnregDate = New Global.System.Data.DataColumn("regDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 1000
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 1000
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 1000
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 300
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 300
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 300
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 300
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
            Me.columnStudentType.MaxLength = 50
            Me.columngender.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsRow() As StudentsRow
            Return CType(Me.NewRow,StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanged(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanging(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleted(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleting(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjects"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsRowChanging As EnrollSubjectsRowChangeEventHandler
        
        Public Event EnrollSubjectsRowChanged As EnrollSubjectsRowChangeEventHandler
        
        Public Event EnrollSubjectsRowDeleting As EnrollSubjectsRowChangeEventHandler
        
        Public Event EnrollSubjectsRowDeleted As EnrollSubjectsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsRow(ByVal row As EnrollSubjectsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjectsRow
            Dim rowEnrollSubjectsRow As EnrollSubjectsRow = CType(Me.NewRow,EnrollSubjectsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjectsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsRow)
            Return rowEnrollSubjectsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsDataTable = CType(MyBase.Clone,EnrollSubjectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsRow() As EnrollSubjectsRow
            Return CType(Me.NewRow,EnrollSubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsRowChanged(Me, New EnrollSubjectsRowChangeEvent(CType(e.Row,EnrollSubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsRowChanging(Me, New EnrollSubjectsRowChangeEvent(CType(e.Row,EnrollSubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsRowDeleted(Me, New EnrollSubjectsRowChangeEvent(CType(e.Row,EnrollSubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsRowDeleting(Me, New EnrollSubjectsRowChangeEvent(CType(e.Row,EnrollSubjectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsRow(ByVal row As EnrollSubjectsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingSelectDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingSelectRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnclosed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingSelect"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property closedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingSelectRow
            Get
                Return CType(Me.Rows(index),SYOfferingSelectRow)
            End Get
        End Property
        
        Public Event SYOfferingSelectRowChanging As SYOfferingSelectRowChangeEventHandler
        
        Public Event SYOfferingSelectRowChanged As SYOfferingSelectRowChangeEventHandler
        
        Public Event SYOfferingSelectRowDeleting As SYOfferingSelectRowChangeEventHandler
        
        Public Event SYOfferingSelectRowDeleted As SYOfferingSelectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingSelectRow(ByVal row As SYOfferingSelectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingSelectRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Boolean) As SYOfferingSelectRow
            Dim rowSYOfferingSelectRow As SYOfferingSelectRow = CType(Me.NewRow,SYOfferingSelectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed}
            rowSYOfferingSelectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingSelectRow)
            Return rowSYOfferingSelectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingSelectRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingSelectDataTable = CType(MyBase.Clone,SYOfferingSelectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingSelectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnclosed = MyBase.Columns("closed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnclosed = New Global.System.Data.DataColumn("closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingSelectRow() As SYOfferingSelectRow
            Return CType(Me.NewRow,SYOfferingSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingSelectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingSelectRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelectRowChanged(Me, New SYOfferingSelectRowChangeEvent(CType(e.Row,SYOfferingSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingSelectRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelectRowChanging(Me, New SYOfferingSelectRowChangeEvent(CType(e.Row,SYOfferingSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingSelectRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelectRowDeleted(Me, New SYOfferingSelectRowChangeEvent(CType(e.Row,SYOfferingSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingSelectRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelectRowDeleting(Me, New SYOfferingSelectRowChangeEvent(CType(e.Row,SYOfferingSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingSelectRow(ByVal row As SYOfferingSelectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingSelectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsCountDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsCountRow)
        
        Private columnStudentCount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsCount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsCountRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsCountRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsCountRowChanging As EnrollSubjectsCountRowChangeEventHandler
        
        Public Event EnrollSubjectsCountRowChanged As EnrollSubjectsCountRowChangeEventHandler
        
        Public Event EnrollSubjectsCountRowDeleting As EnrollSubjectsCountRowChangeEventHandler
        
        Public Event EnrollSubjectsCountRowDeleted As EnrollSubjectsCountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsCountRow(ByVal row As EnrollSubjectsCountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsCountRow(ByVal StudentCount As Integer) As EnrollSubjectsCountRow
            Dim rowEnrollSubjectsCountRow As EnrollSubjectsCountRow = CType(Me.NewRow,EnrollSubjectsCountRow)
            Dim columnValuesArray() As Object = New Object() {StudentCount}
            rowEnrollSubjectsCountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsCountRow)
            Return rowEnrollSubjectsCountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsCountDataTable = CType(MyBase.Clone,EnrollSubjectsCountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsCountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentCount = MyBase.Columns("StudentCount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentCount = New Global.System.Data.DataColumn("StudentCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentCount)
            Me.columnStudentCount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsCountRow() As EnrollSubjectsCountRow
            Return CType(Me.NewRow,EnrollSubjectsCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsCountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsCountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsCountRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCountRowChanged(Me, New EnrollSubjectsCountRowChangeEvent(CType(e.Row,EnrollSubjectsCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsCountRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCountRowChanging(Me, New EnrollSubjectsCountRowChangeEvent(CType(e.Row,EnrollSubjectsCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsCountRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCountRowDeleted(Me, New EnrollSubjectsCountRowChangeEvent(CType(e.Row,EnrollSubjectsCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsCountRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCountRowDeleting(Me, New EnrollSubjectsCountRowChangeEvent(CType(e.Row,EnrollSubjectsCountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsCountRow(ByVal row As EnrollSubjectsCountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsCountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingbyPKRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnrequested As Global.System.Data.DataColumn
        
        Private columnclosed As Global.System.Data.DataColumn
        
        Private columnisFused As Global.System.Data.DataColumn
        
        Private columnisSpecialTutorial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property requestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property closedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isFusedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisFused
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isSpecialTutorialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisSpecialTutorial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingbyPKRow
            Get
                Return CType(Me.Rows(index),SYOfferingbyPKRow)
            End Get
        End Property
        
        Public Event SYOfferingbyPKRowChanging As SYOfferingbyPKRowChangeEventHandler
        
        Public Event SYOfferingbyPKRowChanged As SYOfferingbyPKRowChangeEventHandler
        
        Public Event SYOfferingbyPKRowDeleting As SYOfferingbyPKRowChangeEventHandler
        
        Public Event SYOfferingbyPKRowDeleted As SYOfferingbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingbyPKRow(ByVal row As SYOfferingbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingbyPKRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Boolean,  _
                    ByVal closed As Boolean,  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean) As SYOfferingbyPKRow
            Dim rowSYOfferingbyPKRow As SYOfferingbyPKRow = CType(Me.NewRow,SYOfferingbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requested, closed, isFused, isSpecialTutorial}
            rowSYOfferingbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingbyPKRow)
            Return rowSYOfferingbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingbyPKRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingbyPKDataTable = CType(MyBase.Clone,SYOfferingbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnrequested = MyBase.Columns("requested")
            Me.columnclosed = MyBase.Columns("closed")
            Me.columnisFused = MyBase.Columns("isFused")
            Me.columnisSpecialTutorial = MyBase.Columns("isSpecialTutorial")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnrequested = New Global.System.Data.DataColumn("requested", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequested)
            Me.columnclosed = New Global.System.Data.DataColumn("closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosed)
            Me.columnisFused = New Global.System.Data.DataColumn("isFused", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisFused)
            Me.columnisSpecialTutorial = New Global.System.Data.DataColumn("isSpecialTutorial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisSpecialTutorial)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingbyPKRow() As SYOfferingbyPKRow
            Return CType(Me.NewRow,SYOfferingbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyPKRowChanged(Me, New SYOfferingbyPKRowChangeEvent(CType(e.Row,SYOfferingbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyPKRowChanging(Me, New SYOfferingbyPKRowChangeEvent(CType(e.Row,SYOfferingbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyPKRowDeleted(Me, New SYOfferingbyPKRowChangeEvent(CType(e.Row,SYOfferingbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyPKRowDeleting(Me, New SYOfferingbyPKRowChangeEvent(CType(e.Row,SYOfferingbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingbyPKRow(ByVal row As SYOfferingbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LedgerSearchDataTable
        Inherits Global.System.Data.TypedTableBase(Of LedgerSearchRow)
        
        Private columnledgerpk As Global.System.Data.DataColumn
        
        Private columnledgerdate As Global.System.Data.DataColumn
        
        Private columnref As Global.System.Data.DataColumn
        
        Private columnlinetype As Global.System.Data.DataColumn
        
        Private columntrpk As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnbalance As Global.System.Data.DataColumn
        
        Private columnsourcepk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnsubject_coursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LedgerSearch"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property linetypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinetype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sourcepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsourcepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subject_coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubject_coursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerSearchRow
            Get
                Return CType(Me.Rows(index),LedgerSearchRow)
            End Get
        End Property
        
        Public Event LedgerSearchRowChanging As LedgerSearchRowChangeEventHandler
        
        Public Event LedgerSearchRowChanged As LedgerSearchRowChangeEventHandler
        
        Public Event LedgerSearchRowDeleting As LedgerSearchRowChangeEventHandler
        
        Public Event LedgerSearchRowDeleted As LedgerSearchRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLedgerSearchRow(ByVal row As LedgerSearchRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLedgerSearchRow(ByVal ledgerdate As Date, ByVal ref As String, ByVal linetype As String, ByVal trpk As Integer, ByVal amount As Decimal, ByVal balance As Decimal, ByVal sourcepk As Integer, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal remarks As String, ByVal subject_coursepk As Integer) As LedgerSearchRow
            Dim rowLedgerSearchRow As LedgerSearchRow = CType(Me.NewRow,LedgerSearchRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ledgerdate, ref, linetype, trpk, amount, balance, sourcepk, studentpk, sypk, remarks, subject_coursepk}
            rowLedgerSearchRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLedgerSearchRow)
            Return rowLedgerSearchRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByledgerpk(ByVal ledgerpk As Integer) As LedgerSearchRow
            Return CType(Me.Rows.Find(New Object() {ledgerpk}),LedgerSearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LedgerSearchDataTable = CType(MyBase.Clone,LedgerSearchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LedgerSearchDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnledgerpk = MyBase.Columns("ledgerpk")
            Me.columnledgerdate = MyBase.Columns("ledgerdate")
            Me.columnref = MyBase.Columns("ref")
            Me.columnlinetype = MyBase.Columns("linetype")
            Me.columntrpk = MyBase.Columns("trpk")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnbalance = MyBase.Columns("balance")
            Me.columnsourcepk = MyBase.Columns("sourcepk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnsubject_coursepk = MyBase.Columns("subject_coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnledgerpk = New Global.System.Data.DataColumn("ledgerpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerpk)
            Me.columnledgerdate = New Global.System.Data.DataColumn("ledgerdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerdate)
            Me.columnref = New Global.System.Data.DataColumn("ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref)
            Me.columnlinetype = New Global.System.Data.DataColumn("linetype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinetype)
            Me.columntrpk = New Global.System.Data.DataColumn("trpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrpk)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnbalance = New Global.System.Data.DataColumn("balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbalance)
            Me.columnsourcepk = New Global.System.Data.DataColumn("sourcepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsourcepk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnsubject_coursepk = New Global.System.Data.DataColumn("subject_coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubject_coursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnledgerpk}, true))
            Me.columnledgerpk.AutoIncrement = true
            Me.columnledgerpk.AllowDBNull = false
            Me.columnledgerpk.ReadOnly = true
            Me.columnledgerpk.Unique = true
            Me.columnledgerdate.AllowDBNull = false
            Me.columnref.AllowDBNull = false
            Me.columnref.MaxLength = 50
            Me.columnlinetype.AllowDBNull = false
            Me.columnlinetype.MaxLength = 50
            Me.columntrpk.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnbalance.AllowDBNull = false
            Me.columnsourcepk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 2048
            Me.columnsubject_coursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLedgerSearchRow() As LedgerSearchRow
            Return CType(Me.NewRow,LedgerSearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LedgerSearchRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LedgerSearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerSearchRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerSearchRowChanged(Me, New LedgerSearchRowChangeEvent(CType(e.Row,LedgerSearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerSearchRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerSearchRowChanging(Me, New LedgerSearchRowChangeEvent(CType(e.Row,LedgerSearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerSearchRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerSearchRowDeleted(Me, New LedgerSearchRowChangeEvent(CType(e.Row,LedgerSearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerSearchRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerSearchRowDeleting(Me, New LedgerSearchRowChangeEvent(CType(e.Row,LedgerSearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLedgerSearchRow(ByVal row As LedgerSearchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LedgerSearchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LedgerbyTRTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of LedgerbyTRTypeRow)
        
        Private columnledgerpk As Global.System.Data.DataColumn
        
        Private columnledgerdate As Global.System.Data.DataColumn
        
        Private columnref As Global.System.Data.DataColumn
        
        Private columnlinetype As Global.System.Data.DataColumn
        
        Private columntrpk As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnbalance As Global.System.Data.DataColumn
        
        Private columnsourcepk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnsubject_coursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LedgerbyTRType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property linetypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinetype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sourcepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsourcepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subject_coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubject_coursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerbyTRTypeRow
            Get
                Return CType(Me.Rows(index),LedgerbyTRTypeRow)
            End Get
        End Property
        
        Public Event LedgerbyTRTypeRowChanging As LedgerbyTRTypeRowChangeEventHandler
        
        Public Event LedgerbyTRTypeRowChanged As LedgerbyTRTypeRowChangeEventHandler
        
        Public Event LedgerbyTRTypeRowDeleting As LedgerbyTRTypeRowChangeEventHandler
        
        Public Event LedgerbyTRTypeRowDeleted As LedgerbyTRTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLedgerbyTRTypeRow(ByVal row As LedgerbyTRTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLedgerbyTRTypeRow(ByVal ledgerdate As Date, ByVal ref As String, ByVal linetype As String, ByVal trpk As Integer, ByVal amount As Decimal, ByVal balance As Decimal, ByVal sourcepk As Integer, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal remarks As String, ByVal subject_coursepk As Integer) As LedgerbyTRTypeRow
            Dim rowLedgerbyTRTypeRow As LedgerbyTRTypeRow = CType(Me.NewRow,LedgerbyTRTypeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ledgerdate, ref, linetype, trpk, amount, balance, sourcepk, studentpk, sypk, remarks, subject_coursepk}
            rowLedgerbyTRTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLedgerbyTRTypeRow)
            Return rowLedgerbyTRTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByledgerpk(ByVal ledgerpk As Integer) As LedgerbyTRTypeRow
            Return CType(Me.Rows.Find(New Object() {ledgerpk}),LedgerbyTRTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LedgerbyTRTypeDataTable = CType(MyBase.Clone,LedgerbyTRTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LedgerbyTRTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnledgerpk = MyBase.Columns("ledgerpk")
            Me.columnledgerdate = MyBase.Columns("ledgerdate")
            Me.columnref = MyBase.Columns("ref")
            Me.columnlinetype = MyBase.Columns("linetype")
            Me.columntrpk = MyBase.Columns("trpk")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnbalance = MyBase.Columns("balance")
            Me.columnsourcepk = MyBase.Columns("sourcepk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnsubject_coursepk = MyBase.Columns("subject_coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnledgerpk = New Global.System.Data.DataColumn("ledgerpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerpk)
            Me.columnledgerdate = New Global.System.Data.DataColumn("ledgerdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerdate)
            Me.columnref = New Global.System.Data.DataColumn("ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref)
            Me.columnlinetype = New Global.System.Data.DataColumn("linetype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinetype)
            Me.columntrpk = New Global.System.Data.DataColumn("trpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrpk)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnbalance = New Global.System.Data.DataColumn("balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbalance)
            Me.columnsourcepk = New Global.System.Data.DataColumn("sourcepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsourcepk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnsubject_coursepk = New Global.System.Data.DataColumn("subject_coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubject_coursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnledgerpk}, true))
            Me.columnledgerpk.AutoIncrement = true
            Me.columnledgerpk.AllowDBNull = false
            Me.columnledgerpk.ReadOnly = true
            Me.columnledgerpk.Unique = true
            Me.columnledgerdate.AllowDBNull = false
            Me.columnref.AllowDBNull = false
            Me.columnref.MaxLength = 50
            Me.columnlinetype.AllowDBNull = false
            Me.columnlinetype.MaxLength = 50
            Me.columntrpk.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnbalance.AllowDBNull = false
            Me.columnsourcepk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 2048
            Me.columnsubject_coursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLedgerbyTRTypeRow() As LedgerbyTRTypeRow
            Return CType(Me.NewRow,LedgerbyTRTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LedgerbyTRTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LedgerbyTRTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerbyTRTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerbyTRTypeRowChanged(Me, New LedgerbyTRTypeRowChangeEvent(CType(e.Row,LedgerbyTRTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerbyTRTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerbyTRTypeRowChanging(Me, New LedgerbyTRTypeRowChangeEvent(CType(e.Row,LedgerbyTRTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerbyTRTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerbyTRTypeRowDeleted(Me, New LedgerbyTRTypeRowChangeEvent(CType(e.Row,LedgerbyTRTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerbyTRTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerbyTRTypeRowDeleting(Me, New LedgerbyTRTypeRowChangeEvent(CType(e.Row,LedgerbyTRTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLedgerbyTRTypeRow(ByVal row As LedgerbyTRTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LedgerbyTRTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingbyResourceDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingbyResourceRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingbyResource"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingbyResourceRow
            Get
                Return CType(Me.Rows(index),SYOfferingbyResourceRow)
            End Get
        End Property
        
        Public Event SYOfferingbyResourceRowChanging As SYOfferingbyResourceRowChangeEventHandler
        
        Public Event SYOfferingbyResourceRowChanged As SYOfferingbyResourceRowChangeEventHandler
        
        Public Event SYOfferingbyResourceRowDeleting As SYOfferingbyResourceRowChangeEventHandler
        
        Public Event SYOfferingbyResourceRowDeleted As SYOfferingbyResourceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingbyResourceRow(ByVal row As SYOfferingbyResourceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingbyResourceRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer) As SYOfferingbyResourceRow
            Dim rowSYOfferingbyResourceRow As SYOfferingbyResourceRow = CType(Me.NewRow,SYOfferingbyResourceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents}
            rowSYOfferingbyResourceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingbyResourceRow)
            Return rowSYOfferingbyResourceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingbyResourceRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingbyResourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingbyResourceDataTable = CType(MyBase.Clone,SYOfferingbyResourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingbyResourceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingbyResourceRow() As SYOfferingbyResourceRow
            Return CType(Me.NewRow,SYOfferingbyResourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingbyResourceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingbyResourceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingbyResourceRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyResourceRowChanged(Me, New SYOfferingbyResourceRowChangeEvent(CType(e.Row,SYOfferingbyResourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingbyResourceRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyResourceRowChanging(Me, New SYOfferingbyResourceRowChangeEvent(CType(e.Row,SYOfferingbyResourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingbyResourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyResourceRowDeleted(Me, New SYOfferingbyResourceRowChangeEvent(CType(e.Row,SYOfferingbyResourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingbyResourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbyResourceRowDeleting(Me, New SYOfferingbyResourceRowChangeEvent(CType(e.Row,SYOfferingbyResourceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingbyResourceRow(ByVal row As SYOfferingbyResourceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingbyResourceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateResourceLoadDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateResourceLoadRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnSchedule As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnMin As Global.System.Data.DataColumn
        
        Private columnMax As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateResourceLoad"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateResourceLoadRow
            Get
                Return CType(Me.Rows(index),TemplateResourceLoadRow)
            End Get
        End Property
        
        Public Event TemplateResourceLoadRowChanging As TemplateResourceLoadRowChangeEventHandler
        
        Public Event TemplateResourceLoadRowChanged As TemplateResourceLoadRowChangeEventHandler
        
        Public Event TemplateResourceLoadRowDeleting As TemplateResourceLoadRowChangeEventHandler
        
        Public Event TemplateResourceLoadRowDeleted As TemplateResourceLoadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateResourceLoadRow(ByVal row As TemplateResourceLoadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateResourceLoadRow(ByVal SchoolYear As String, ByVal Subject As String, ByVal Teacher As String, ByVal Schedule As String, ByVal Semester As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer) As TemplateResourceLoadRow
            Dim rowTemplateResourceLoadRow As TemplateResourceLoadRow = CType(Me.NewRow,TemplateResourceLoadRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Subject, Teacher, Schedule, Semester, Min, Max, Enrolled}
            rowTemplateResourceLoadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateResourceLoadRow)
            Return rowTemplateResourceLoadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As TemplateResourceLoadRow
            Return CType(Me.Rows.Find(New Object() {PK}),TemplateResourceLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateResourceLoadDataTable = CType(MyBase.Clone,TemplateResourceLoadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateResourceLoadDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnSchedule = MyBase.Columns("Schedule")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnMin = MyBase.Columns("Min")
            Me.columnMax = MyBase.Columns("Max")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnSchedule = New Global.System.Data.DataColumn("Schedule", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedule)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnMin = New Global.System.Data.DataColumn("Min", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMin)
            Me.columnMax = New Global.System.Data.DataColumn("Max", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMax)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSubject.AllowDBNull = false
            Me.columnSubject.MaxLength = 50
            Me.columnTeacher.AllowDBNull = false
            Me.columnTeacher.MaxLength = 50
            Me.columnSchedule.AllowDBNull = false
            Me.columnSchedule.MaxLength = 100
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 50
            Me.columnMin.AllowDBNull = false
            Me.columnMax.AllowDBNull = false
            Me.columnEnrolled.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateResourceLoadRow() As TemplateResourceLoadRow
            Return CType(Me.NewRow,TemplateResourceLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateResourceLoadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateResourceLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateResourceLoadRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadRowChanged(Me, New TemplateResourceLoadRowChangeEvent(CType(e.Row,TemplateResourceLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateResourceLoadRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadRowChanging(Me, New TemplateResourceLoadRowChangeEvent(CType(e.Row,TemplateResourceLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateResourceLoadRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadRowDeleted(Me, New TemplateResourceLoadRowChangeEvent(CType(e.Row,TemplateResourceLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateResourceLoadRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadRowDeleting(Me, New TemplateResourceLoadRowChangeEvent(CType(e.Row,TemplateResourceLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateResourceLoadRow(ByVal row As TemplateResourceLoadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateResourceLoadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateSubjectLoadDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateSubjectLoadRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnResource As Global.System.Data.DataColumn
        
        Private columnSchedule As Global.System.Data.DataColumn
        
        Private columnMin As Global.System.Data.DataColumn
        
        Private columnMax As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateSubjectLoad"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateSubjectLoadRow
            Get
                Return CType(Me.Rows(index),TemplateSubjectLoadRow)
            End Get
        End Property
        
        Public Event TemplateSubjectLoadRowChanging As TemplateSubjectLoadRowChangeEventHandler
        
        Public Event TemplateSubjectLoadRowChanged As TemplateSubjectLoadRowChangeEventHandler
        
        Public Event TemplateSubjectLoadRowDeleting As TemplateSubjectLoadRowChangeEventHandler
        
        Public Event TemplateSubjectLoadRowDeleted As TemplateSubjectLoadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateSubjectLoadRow(ByVal row As TemplateSubjectLoadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateSubjectLoadRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Teacher As String, ByVal Resource As String, ByVal Schedule As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer) As TemplateSubjectLoadRow
            Dim rowTemplateSubjectLoadRow As TemplateSubjectLoadRow = CType(Me.NewRow,TemplateSubjectLoadRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Semester, Teacher, Resource, Schedule, Min, Max, Enrolled}
            rowTemplateSubjectLoadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateSubjectLoadRow)
            Return rowTemplateSubjectLoadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TemplateSubjectLoadRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateSubjectLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateSubjectLoadDataTable = CType(MyBase.Clone,TemplateSubjectLoadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateSubjectLoadDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnResource = MyBase.Columns("Resource")
            Me.columnSchedule = MyBase.Columns("Schedule")
            Me.columnMin = MyBase.Columns("Min")
            Me.columnMax = MyBase.Columns("Max")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnResource = New Global.System.Data.DataColumn("Resource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResource)
            Me.columnSchedule = New Global.System.Data.DataColumn("Schedule", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedule)
            Me.columnMin = New Global.System.Data.DataColumn("Min", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMin)
            Me.columnMax = New Global.System.Data.DataColumn("Max", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMax)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemester.MaxLength = 50
            Me.columnTeacher.MaxLength = 50
            Me.columnResource.MaxLength = 50
            Me.columnSchedule.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateSubjectLoadRow() As TemplateSubjectLoadRow
            Return CType(Me.NewRow,TemplateSubjectLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateSubjectLoadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateSubjectLoadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateSubjectLoadRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadRowChanged(Me, New TemplateSubjectLoadRowChangeEvent(CType(e.Row,TemplateSubjectLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateSubjectLoadRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadRowChanging(Me, New TemplateSubjectLoadRowChangeEvent(CType(e.Row,TemplateSubjectLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateSubjectLoadRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadRowDeleted(Me, New TemplateSubjectLoadRowChangeEvent(CType(e.Row,TemplateSubjectLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateSubjectLoadRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadRowDeleting(Me, New TemplateSubjectLoadRowChangeEvent(CType(e.Row,TemplateSubjectLoadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateSubjectLoadRow(ByVal row As TemplateSubjectLoadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateSubjectLoadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingbySubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingbySubjectRow)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingbySubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingbySubjectRow
            Get
                Return CType(Me.Rows(index),SYOfferingbySubjectRow)
            End Get
        End Property
        
        Public Event SYOfferingbySubjectRowChanging As SYOfferingbySubjectRowChangeEventHandler
        
        Public Event SYOfferingbySubjectRowChanged As SYOfferingbySubjectRowChangeEventHandler
        
        Public Event SYOfferingbySubjectRowDeleting As SYOfferingbySubjectRowChangeEventHandler
        
        Public Event SYOfferingbySubjectRowDeleted As SYOfferingbySubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingbySubjectRow(ByVal row As SYOfferingbySubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingbySubjectRow( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer) As SYOfferingbySubjectRow
            Dim rowSYOfferingbySubjectRow As SYOfferingbySubjectRow = CType(Me.NewRow,SYOfferingbySubjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents}
            rowSYOfferingbySubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingbySubjectRow)
            Return rowSYOfferingbySubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingbySubjectRow
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingbySubjectDataTable = CType(MyBase.Clone,SYOfferingbySubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingbySubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingbySubjectRow() As SYOfferingbySubjectRow
            Return CType(Me.NewRow,SYOfferingbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingbySubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingbySubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingbySubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbySubjectRowChanged(Me, New SYOfferingbySubjectRowChangeEvent(CType(e.Row,SYOfferingbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingbySubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbySubjectRowChanging(Me, New SYOfferingbySubjectRowChangeEvent(CType(e.Row,SYOfferingbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingbySubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingbySubjectRowDeleted(Me, New SYOfferingbySubjectRowChangeEvent(CType(e.Row,SYOfferingbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingbySubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingbySubjectRowDeleting(Me, New SYOfferingbySubjectRowChangeEvent(CType(e.Row,SYOfferingbySubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingbySubjectRow(ByVal row As SYOfferingbySubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingbySubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentsbyPKRow)
        
        Private columnStudentPK As Global.System.Data.DataColumn
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnAddress3 As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnMotherName As Global.System.Data.DataColumn
        
        Private columnFatherName As Global.System.Data.DataColumn
        
        Private columnGuardian As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnEdubackground1 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate1 As Global.System.Data.DataColumn
        
        Private columnEdubackground2 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate2 As Global.System.Data.DataColumn
        
        Private columnEdubackground3 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate3 As Global.System.Data.DataColumn
        
        Private columnEdubackground4 As Global.System.Data.DataColumn
        
        Private columnEdubackgrounddate4 As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnStudentType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentsbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FatherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GuardianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackground4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackground4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Edubackgrounddate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdubackgrounddate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsbyPKRow
            Get
                Return CType(Me.Rows(index),StudentsbyPKRow)
            End Get
        End Property
        
        Public Event StudentsbyPKRowChanging As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowChanged As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowDeleting As StudentsbyPKRowChangeEventHandler
        
        Public Event StudentsbyPKRowDeleted As StudentsbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentsbyPKRow(ByVal row As StudentsbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentsbyPKRow( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Gender As String,  _
                    ByVal StudentType As String) As StudentsbyPKRow
            Dim rowStudentsbyPKRow As StudentsbyPKRow = CType(Me.NewRow,StudentsbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Gender, StudentType}
            rowStudentsbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentsbyPKRow)
            Return rowStudentsbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudentPK(ByVal StudentPK As Integer) As StudentsbyPKRow
            Return CType(Me.Rows.Find(New Object() {StudentPK}),StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentsbyPKDataTable = CType(MyBase.Clone,StudentsbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentsbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentPK = MyBase.Columns("StudentPK")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnAddress3 = MyBase.Columns("Address3")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnMotherName = MyBase.Columns("MotherName")
            Me.columnFatherName = MyBase.Columns("FatherName")
            Me.columnGuardian = MyBase.Columns("Guardian")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnEdubackground1 = MyBase.Columns("Edubackground1")
            Me.columnEdubackgrounddate1 = MyBase.Columns("Edubackgrounddate1")
            Me.columnEdubackground2 = MyBase.Columns("Edubackground2")
            Me.columnEdubackgrounddate2 = MyBase.Columns("Edubackgrounddate2")
            Me.columnEdubackground3 = MyBase.Columns("Edubackground3")
            Me.columnEdubackgrounddate3 = MyBase.Columns("Edubackgrounddate3")
            Me.columnEdubackground4 = MyBase.Columns("Edubackground4")
            Me.columnEdubackgrounddate4 = MyBase.Columns("Edubackgrounddate4")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnStudentType = MyBase.Columns("StudentType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentPK = New Global.System.Data.DataColumn("StudentPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPK)
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnAddress3 = New Global.System.Data.DataColumn("Address3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress3)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnMotherName = New Global.System.Data.DataColumn("MotherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotherName)
            Me.columnFatherName = New Global.System.Data.DataColumn("FatherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFatherName)
            Me.columnGuardian = New Global.System.Data.DataColumn("Guardian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnEdubackground1 = New Global.System.Data.DataColumn("Edubackground1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground1)
            Me.columnEdubackgrounddate1 = New Global.System.Data.DataColumn("Edubackgrounddate1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate1)
            Me.columnEdubackground2 = New Global.System.Data.DataColumn("Edubackground2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground2)
            Me.columnEdubackgrounddate2 = New Global.System.Data.DataColumn("Edubackgrounddate2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate2)
            Me.columnEdubackground3 = New Global.System.Data.DataColumn("Edubackground3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground3)
            Me.columnEdubackgrounddate3 = New Global.System.Data.DataColumn("Edubackgrounddate3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate3)
            Me.columnEdubackground4 = New Global.System.Data.DataColumn("Edubackground4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackground4)
            Me.columnEdubackgrounddate4 = New Global.System.Data.DataColumn("Edubackgrounddate4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdubackgrounddate4)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnStudentType = New Global.System.Data.DataColumn("StudentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPK}, true))
            Me.columnStudentPK.AutoIncrement = true
            Me.columnStudentPK.AllowDBNull = false
            Me.columnStudentPK.ReadOnly = true
            Me.columnStudentPK.Unique = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.MaxLength = 50
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
            Me.columnAddress1.AllowDBNull = false
            Me.columnAddress1.MaxLength = 1000
            Me.columnAddress2.AllowDBNull = false
            Me.columnAddress2.MaxLength = 1000
            Me.columnAddress3.AllowDBNull = false
            Me.columnAddress3.MaxLength = 1000
            Me.columnPhone.AllowDBNull = false
            Me.columnPhone.MaxLength = 50
            Me.columnMotherName.AllowDBNull = false
            Me.columnMotherName.MaxLength = 50
            Me.columnFatherName.AllowDBNull = false
            Me.columnFatherName.MaxLength = 50
            Me.columnGuardian.AllowDBNull = false
            Me.columnGuardian.MaxLength = 50
            Me.columnBirthdate.AllowDBNull = false
            Me.columnBirthdate.MaxLength = 50
            Me.columnEdubackground1.AllowDBNull = false
            Me.columnEdubackground1.MaxLength = 300
            Me.columnEdubackgrounddate1.AllowDBNull = false
            Me.columnEdubackgrounddate1.MaxLength = 50
            Me.columnEdubackground2.AllowDBNull = false
            Me.columnEdubackground2.MaxLength = 300
            Me.columnEdubackgrounddate2.AllowDBNull = false
            Me.columnEdubackgrounddate2.MaxLength = 50
            Me.columnEdubackground3.AllowDBNull = false
            Me.columnEdubackground3.MaxLength = 300
            Me.columnEdubackgrounddate3.AllowDBNull = false
            Me.columnEdubackgrounddate3.MaxLength = 50
            Me.columnEdubackground4.AllowDBNull = false
            Me.columnEdubackground4.MaxLength = 300
            Me.columnEdubackgrounddate4.AllowDBNull = false
            Me.columnEdubackgrounddate4.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnStudentType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentsbyPKRow() As StudentsbyPKRow
            Return CType(Me.NewRow,StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentsbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentsbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowChanged(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowChanging(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowDeleted(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsbyPKRowDeleting(Me, New StudentsbyPKRowChangeEvent(CType(e.Row,StudentsbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentsbyPKRow(ByVal row As StudentsbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentGradesDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentGradesRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnexSubjectUnits As Global.System.Data.DataColumn
        
        Private columnexCreditGroup As Global.System.Data.DataColumn
        
        Private columnexSubjectCode As Global.System.Data.DataColumn
        
        Private columnexCompletionGrade As Global.System.Data.DataColumn
        
        Private columnisPrevSchoolGrade As Global.System.Data.DataColumn
        
        Private columnexUnits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentGrades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isPrevSchoolGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisPrevSchoolGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentGradesRow
            Get
                Return CType(Me.Rows(index),StudentGradesRow)
            End Get
        End Property
        
        Public Event StudentGradesRowChanging As StudentGradesRowChangeEventHandler
        
        Public Event StudentGradesRowChanged As StudentGradesRowChangeEventHandler
        
        Public Event StudentGradesRowDeleting As StudentGradesRowChangeEventHandler
        
        Public Event StudentGradesRowDeleted As StudentGradesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentGradesRow(ByVal row As StudentGradesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentGradesRow( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Integer,  _
                    ByVal exCreditGroup As Integer,  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Decimal,  _
                    ByVal isPrevSchoolGrade As Boolean,  _
                    ByVal exUnits As Integer) As StudentGradesRow
            Dim rowStudentGradesRow As StudentGradesRow = CType(Me.NewRow,StudentGradesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, exUnits}
            rowStudentGradesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentGradesRow)
            Return rowStudentGradesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentGradesRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentGradesDataTable = CType(MyBase.Clone,StudentGradesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentGradesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnexSubjectUnits = MyBase.Columns("exSubjectUnits")
            Me.columnexCreditGroup = MyBase.Columns("exCreditGroup")
            Me.columnexSubjectCode = MyBase.Columns("exSubjectCode")
            Me.columnexCompletionGrade = MyBase.Columns("exCompletionGrade")
            Me.columnisPrevSchoolGrade = MyBase.Columns("isPrevSchoolGrade")
            Me.columnexUnits = MyBase.Columns("exUnits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnexSubjectUnits = New Global.System.Data.DataColumn("exSubjectUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectUnits)
            Me.columnexCreditGroup = New Global.System.Data.DataColumn("exCreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCreditGroup)
            Me.columnexSubjectCode = New Global.System.Data.DataColumn("exSubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectCode)
            Me.columnexCompletionGrade = New Global.System.Data.DataColumn("exCompletionGrade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCompletionGrade)
            Me.columnisPrevSchoolGrade = New Global.System.Data.DataColumn("isPrevSchoolGrade", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisPrevSchoolGrade)
            Me.columnexUnits = New Global.System.Data.DataColumn("exUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexUnits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnexSubjectCode.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentGradesRow() As StudentGradesRow
            Return CType(Me.NewRow,StudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentGradesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentGradesRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentGradesRowChanged(Me, New StudentGradesRowChangeEvent(CType(e.Row,StudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentGradesRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentGradesRowChanging(Me, New StudentGradesRowChangeEvent(CType(e.Row,StudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentGradesRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentGradesRowDeleted(Me, New StudentGradesRowChangeEvent(CType(e.Row,StudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentGradesRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentGradesRowDeleting(Me, New StudentGradesRowChangeEvent(CType(e.Row,StudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentGradesRow(ByVal row As StudentGradesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentGradesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateGradeEntryDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateGradeEntryRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnStudent As Global.System.Data.DataColumn
        
        Private columnStudentpk As Global.System.Data.DataColumn
        
        Private columnGrade As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateGradeEntry"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateGradeEntryRow
            Get
                Return CType(Me.Rows(index),TemplateGradeEntryRow)
            End Get
        End Property
        
        Public Event TemplateGradeEntryRowChanging As TemplateGradeEntryRowChangeEventHandler
        
        Public Event TemplateGradeEntryRowChanged As TemplateGradeEntryRowChangeEventHandler
        
        Public Event TemplateGradeEntryRowDeleting As TemplateGradeEntryRowChangeEventHandler
        
        Public Event TemplateGradeEntryRowDeleted As TemplateGradeEntryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateGradeEntryRow(ByVal row As TemplateGradeEntryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateGradeEntryRow(ByVal Student As String, ByVal Studentpk As Integer, ByVal Grade As Decimal) As TemplateGradeEntryRow
            Dim rowTemplateGradeEntryRow As TemplateGradeEntryRow = CType(Me.NewRow,TemplateGradeEntryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Student, Studentpk, Grade}
            rowTemplateGradeEntryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateGradeEntryRow)
            Return rowTemplateGradeEntryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TemplateGradeEntryRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateGradeEntryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateGradeEntryDataTable = CType(MyBase.Clone,TemplateGradeEntryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateGradeEntryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnStudent = MyBase.Columns("Student")
            Me.columnStudentpk = MyBase.Columns("Studentpk")
            Me.columnGrade = MyBase.Columns("Grade")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnStudent = New Global.System.Data.DataColumn("Student", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudent)
            Me.columnStudentpk = New Global.System.Data.DataColumn("Studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentpk)
            Me.columnGrade = New Global.System.Data.DataColumn("Grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columnStudent.AllowDBNull = false
            Me.columnStudent.MaxLength = 50
            Me.columnStudentpk.AllowDBNull = false
            Me.columnGrade.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateGradeEntryRow() As TemplateGradeEntryRow
            Return CType(Me.NewRow,TemplateGradeEntryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateGradeEntryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateGradeEntryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateGradeEntryRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateGradeEntryRowChanged(Me, New TemplateGradeEntryRowChangeEvent(CType(e.Row,TemplateGradeEntryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateGradeEntryRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateGradeEntryRowChanging(Me, New TemplateGradeEntryRowChangeEvent(CType(e.Row,TemplateGradeEntryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateGradeEntryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateGradeEntryRowDeleted(Me, New TemplateGradeEntryRowChangeEvent(CType(e.Row,TemplateGradeEntryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateGradeEntryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateGradeEntryRowDeleting(Me, New TemplateGradeEntryRowChangeEvent(CType(e.Row,TemplateGradeEntryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateGradeEntryRow(ByVal row As TemplateGradeEntryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateGradeEntryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingSelect2DataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingSelect2Row)
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnresource As Global.System.Data.DataColumn
        
        Private columnsemesterpk As Global.System.Data.DataColumn
        
        Private columnmonday As Global.System.Data.DataColumn
        
        Private columntuesday As Global.System.Data.DataColumn
        
        Private columnwednesday As Global.System.Data.DataColumn
        
        Private columnthursday As Global.System.Data.DataColumn
        
        Private columnfriday As Global.System.Data.DataColumn
        
        Private columnsaturday As Global.System.Data.DataColumn
        
        Private columnsunday As Global.System.Data.DataColumn
        
        Private columnsunfrom As Global.System.Data.DataColumn
        
        Private columnsunto As Global.System.Data.DataColumn
        
        Private columnmonfrom As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columntuesfrom As Global.System.Data.DataColumn
        
        Private columntuesto As Global.System.Data.DataColumn
        
        Private columnwedfrom As Global.System.Data.DataColumn
        
        Private columnwedto As Global.System.Data.DataColumn
        
        Private columnthufrom As Global.System.Data.DataColumn
        
        Private columnthuto As Global.System.Data.DataColumn
        
        Private columnfrifrom As Global.System.Data.DataColumn
        
        Private columnfrito As Global.System.Data.DataColumn
        
        Private columnsatfrom As Global.System.Data.DataColumn
        
        Private columnsatto As Global.System.Data.DataColumn
        
        Private columnalternatefriday As Global.System.Data.DataColumn
        
        Private columnsemid As Global.System.Data.DataColumn
        
        Private columnteacherid As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnclosed As Global.System.Data.DataColumn
        
        Private columnrequested As Global.System.Data.DataColumn
        
        Private columnSubjectName As Global.System.Data.DataColumn
        
        Private columnIsFused As Global.System.Data.DataColumn
        
        Private columnIsSpecialTutorial As Global.System.Data.DataColumn
        
        Private columnsubjectcode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingSelect2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semesterpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemesterpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mondayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wednesdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwednesday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thursdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthursday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saturdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaturday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sundayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sunfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suntoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsunto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property monfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuesfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property wedtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwedto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thufromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthufrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property thutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnthuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property frifromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrifrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fritoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfrito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satfromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatfrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sattoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsatto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alternatefridayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalternatefriday
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property semidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsemid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property closedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property requestedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequested
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsFusedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsFused
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSpecialTutorialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSpecialTutorial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingSelect2Row
            Get
                Return CType(Me.Rows(index),SYOfferingSelect2Row)
            End Get
        End Property
        
        Public Event SYOfferingSelect2RowChanging As SYOfferingSelect2RowChangeEventHandler
        
        Public Event SYOfferingSelect2RowChanged As SYOfferingSelect2RowChangeEventHandler
        
        Public Event SYOfferingSelect2RowDeleting As SYOfferingSelect2RowChangeEventHandler
        
        Public Event SYOfferingSelect2RowDeleted As SYOfferingSelect2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingSelect2Row(ByVal row As SYOfferingSelect2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingSelect2Row( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Boolean,  _
                    ByVal requested As Boolean,  _
                    ByVal SubjectName As String,  _
                    ByVal IsFused As Boolean,  _
                    ByVal IsSpecialTutorial As Boolean,  _
                    ByVal subjectcode As String) As SYOfferingSelect2Row
            Dim rowSYOfferingSelect2Row As SYOfferingSelect2Row = CType(Me.NewRow,SYOfferingSelect2Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed, requested, SubjectName, IsFused, IsSpecialTutorial, subjectcode}
            rowSYOfferingSelect2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingSelect2Row)
            Return rowSYOfferingSelect2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyofferingpk(ByVal syofferingpk As Integer) As SYOfferingSelect2Row
            Return CType(Me.Rows.Find(New Object() {syofferingpk}),SYOfferingSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingSelect2DataTable = CType(MyBase.Clone,SYOfferingSelect2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingSelect2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnresource = MyBase.Columns("resource")
            Me.columnsemesterpk = MyBase.Columns("semesterpk")
            Me.columnmonday = MyBase.Columns("monday")
            Me.columntuesday = MyBase.Columns("tuesday")
            Me.columnwednesday = MyBase.Columns("wednesday")
            Me.columnthursday = MyBase.Columns("thursday")
            Me.columnfriday = MyBase.Columns("friday")
            Me.columnsaturday = MyBase.Columns("saturday")
            Me.columnsunday = MyBase.Columns("sunday")
            Me.columnsunfrom = MyBase.Columns("sunfrom")
            Me.columnsunto = MyBase.Columns("sunto")
            Me.columnmonfrom = MyBase.Columns("monfrom")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columntuesfrom = MyBase.Columns("tuesfrom")
            Me.columntuesto = MyBase.Columns("tuesto")
            Me.columnwedfrom = MyBase.Columns("wedfrom")
            Me.columnwedto = MyBase.Columns("wedto")
            Me.columnthufrom = MyBase.Columns("thufrom")
            Me.columnthuto = MyBase.Columns("thuto")
            Me.columnfrifrom = MyBase.Columns("frifrom")
            Me.columnfrito = MyBase.Columns("frito")
            Me.columnsatfrom = MyBase.Columns("satfrom")
            Me.columnsatto = MyBase.Columns("satto")
            Me.columnalternatefriday = MyBase.Columns("alternatefriday")
            Me.columnsemid = MyBase.Columns("semid")
            Me.columnteacherid = MyBase.Columns("teacherid")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnclosed = MyBase.Columns("closed")
            Me.columnrequested = MyBase.Columns("requested")
            Me.columnSubjectName = MyBase.Columns("SubjectName")
            Me.columnIsFused = MyBase.Columns("IsFused")
            Me.columnIsSpecialTutorial = MyBase.Columns("IsSpecialTutorial")
            Me.columnsubjectcode = MyBase.Columns("subjectcode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnresource = New Global.System.Data.DataColumn("resource", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresource)
            Me.columnsemesterpk = New Global.System.Data.DataColumn("semesterpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemesterpk)
            Me.columnmonday = New Global.System.Data.DataColumn("monday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonday)
            Me.columntuesday = New Global.System.Data.DataColumn("tuesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesday)
            Me.columnwednesday = New Global.System.Data.DataColumn("wednesday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwednesday)
            Me.columnthursday = New Global.System.Data.DataColumn("thursday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthursday)
            Me.columnfriday = New Global.System.Data.DataColumn("friday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfriday)
            Me.columnsaturday = New Global.System.Data.DataColumn("saturday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaturday)
            Me.columnsunday = New Global.System.Data.DataColumn("sunday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunday)
            Me.columnsunfrom = New Global.System.Data.DataColumn("sunfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunfrom)
            Me.columnsunto = New Global.System.Data.DataColumn("sunto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsunto)
            Me.columnmonfrom = New Global.System.Data.DataColumn("monfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonfrom)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columntuesfrom = New Global.System.Data.DataColumn("tuesfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesfrom)
            Me.columntuesto = New Global.System.Data.DataColumn("tuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntuesto)
            Me.columnwedfrom = New Global.System.Data.DataColumn("wedfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedfrom)
            Me.columnwedto = New Global.System.Data.DataColumn("wedto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwedto)
            Me.columnthufrom = New Global.System.Data.DataColumn("thufrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthufrom)
            Me.columnthuto = New Global.System.Data.DataColumn("thuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnthuto)
            Me.columnfrifrom = New Global.System.Data.DataColumn("frifrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrifrom)
            Me.columnfrito = New Global.System.Data.DataColumn("frito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfrito)
            Me.columnsatfrom = New Global.System.Data.DataColumn("satfrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatfrom)
            Me.columnsatto = New Global.System.Data.DataColumn("satto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatto)
            Me.columnalternatefriday = New Global.System.Data.DataColumn("alternatefriday", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalternatefriday)
            Me.columnsemid = New Global.System.Data.DataColumn("semid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsemid)
            Me.columnteacherid = New Global.System.Data.DataColumn("teacherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherid)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnclosed = New Global.System.Data.DataColumn("closed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclosed)
            Me.columnrequested = New Global.System.Data.DataColumn("requested", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequested)
            Me.columnSubjectName = New Global.System.Data.DataColumn("SubjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectName)
            Me.columnIsFused = New Global.System.Data.DataColumn("IsFused", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsFused)
            Me.columnIsSpecialTutorial = New Global.System.Data.DataColumn("IsSpecialTutorial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSpecialTutorial)
            Me.columnsubjectcode = New Global.System.Data.DataColumn("subjectcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectcode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyofferingpk}, true))
            Me.columnsyofferingpk.AutoIncrement = true
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnsyofferingpk.ReadOnly = true
            Me.columnsyofferingpk.Unique = true
            Me.columnsypk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnresource.AllowDBNull = false
            Me.columnsemesterpk.AllowDBNull = false
            Me.columnmonday.AllowDBNull = false
            Me.columntuesday.AllowDBNull = false
            Me.columnwednesday.AllowDBNull = false
            Me.columnthursday.AllowDBNull = false
            Me.columnfriday.AllowDBNull = false
            Me.columnsaturday.AllowDBNull = false
            Me.columnsunday.AllowDBNull = false
            Me.columnsunfrom.AllowDBNull = false
            Me.columnsunfrom.MaxLength = 50
            Me.columnsunto.AllowDBNull = false
            Me.columnsunto.MaxLength = 50
            Me.columnmonfrom.AllowDBNull = false
            Me.columnmonfrom.MaxLength = 50
            Me.columnmonto.AllowDBNull = false
            Me.columnmonto.MaxLength = 50
            Me.columntuesfrom.AllowDBNull = false
            Me.columntuesfrom.MaxLength = 50
            Me.columntuesto.AllowDBNull = false
            Me.columntuesto.MaxLength = 50
            Me.columnwedfrom.AllowDBNull = false
            Me.columnwedfrom.MaxLength = 50
            Me.columnwedto.AllowDBNull = false
            Me.columnwedto.MaxLength = 50
            Me.columnthufrom.AllowDBNull = false
            Me.columnthufrom.MaxLength = 50
            Me.columnthuto.AllowDBNull = false
            Me.columnthuto.MaxLength = 50
            Me.columnfrifrom.AllowDBNull = false
            Me.columnfrifrom.MaxLength = 50
            Me.columnfrito.AllowDBNull = false
            Me.columnfrito.MaxLength = 50
            Me.columnsatfrom.AllowDBNull = false
            Me.columnsatfrom.MaxLength = 50
            Me.columnsatto.AllowDBNull = false
            Me.columnsatto.MaxLength = 50
            Me.columnalternatefriday.AllowDBNull = false
            Me.columnsemid.AllowDBNull = false
            Me.columnteacherid.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 5128
            Me.columnMinStudents.AllowDBNull = false
            Me.columnMaxStudents.AllowDBNull = false
            Me.columnSubjectName.MaxLength = 1000
            Me.columnsubjectcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingSelect2Row() As SYOfferingSelect2Row
            Return CType(Me.NewRow,SYOfferingSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingSelect2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingSelect2RowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelect2RowChanged(Me, New SYOfferingSelect2RowChangeEvent(CType(e.Row,SYOfferingSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingSelect2RowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelect2RowChanging(Me, New SYOfferingSelect2RowChangeEvent(CType(e.Row,SYOfferingSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingSelect2RowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelect2RowDeleted(Me, New SYOfferingSelect2RowChangeEvent(CType(e.Row,SYOfferingSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingSelect2RowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingSelect2RowDeleting(Me, New SYOfferingSelect2RowChangeEvent(CType(e.Row,SYOfferingSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingSelect2Row(ByVal row As SYOfferingSelect2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingSelect2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsbySyOPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsbySyOPKRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsbySyOPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsbySyOPKRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsbySyOPKRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsbySyOPKRowChanging As EnrollSubjectsbySyOPKRowChangeEventHandler
        
        Public Event EnrollSubjectsbySyOPKRowChanged As EnrollSubjectsbySyOPKRowChangeEventHandler
        
        Public Event EnrollSubjectsbySyOPKRowDeleting As EnrollSubjectsbySyOPKRowChangeEventHandler
        
        Public Event EnrollSubjectsbySyOPKRowDeleted As EnrollSubjectsbySyOPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsbySyOPKRow(ByVal row As EnrollSubjectsbySyOPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsbySyOPKRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer, ByVal StudentName As String) As EnrollSubjectsbySyOPKRow
            Dim rowEnrollSubjectsbySyOPKRow As EnrollSubjectsbySyOPKRow = CType(Me.NewRow,EnrollSubjectsbySyOPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk, StudentName}
            rowEnrollSubjectsbySyOPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsbySyOPKRow)
            Return rowEnrollSubjectsbySyOPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsbySyOPKRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsbySyOPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsbySyOPKDataTable = CType(MyBase.Clone,EnrollSubjectsbySyOPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsbySyOPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnStudentName = MyBase.Columns("StudentName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnStudentName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsbySyOPKRow() As EnrollSubjectsbySyOPKRow
            Return CType(Me.NewRow,EnrollSubjectsbySyOPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsbySyOPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsbySyOPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsbySyOPKRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbySyOPKRowChanged(Me, New EnrollSubjectsbySyOPKRowChangeEvent(CType(e.Row,EnrollSubjectsbySyOPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsbySyOPKRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbySyOPKRowChanging(Me, New EnrollSubjectsbySyOPKRowChangeEvent(CType(e.Row,EnrollSubjectsbySyOPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsbySyOPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbySyOPKRowDeleted(Me, New EnrollSubjectsbySyOPKRowChangeEvent(CType(e.Row,EnrollSubjectsbySyOPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsbySyOPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbySyOPKRowDeleting(Me, New EnrollSubjectsbySyOPKRowChangeEvent(CType(e.Row,EnrollSubjectsbySyOPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsbySyOPKRow(ByVal row As EnrollSubjectsbySyOPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsbySyOPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BlockSectionTuitionDataTable
        Inherits Global.System.Data.TypedTableBase(Of BlockSectionTuitionRow)
        
        Private columnBlockSectionPK As Global.System.Data.DataColumn
        
        Private columnSEM As Global.System.Data.DataColumn
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        Private columneduyear As Global.System.Data.DataColumn
        
        Private columneffectivedate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BlockSectionTuition"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlockSectionPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlockSectionPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eduyearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneduyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property effectivedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffectivedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BlockSectionTuitionRow
            Get
                Return CType(Me.Rows(index),BlockSectionTuitionRow)
            End Get
        End Property
        
        Public Event BlockSectionTuitionRowChanging As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowChanged As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowDeleting As BlockSectionTuitionRowChangeEventHandler
        
        Public Event BlockSectionTuitionRowDeleted As BlockSectionTuitionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBlockSectionTuitionRow(ByVal row As BlockSectionTuitionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBlockSectionTuitionRow(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date) As BlockSectionTuitionRow
            Dim rowBlockSectionTuitionRow As BlockSectionTuitionRow = CType(Me.NewRow,BlockSectionTuitionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEM, course, subjectid, eduyear, effectivedate}
            rowBlockSectionTuitionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBlockSectionTuitionRow)
            Return rowBlockSectionTuitionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBlockSectionPK(ByVal BlockSectionPK As Integer) As BlockSectionTuitionRow
            Return CType(Me.Rows.Find(New Object() {BlockSectionPK}),BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BlockSectionTuitionDataTable = CType(MyBase.Clone,BlockSectionTuitionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BlockSectionTuitionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBlockSectionPK = MyBase.Columns("BlockSectionPK")
            Me.columnSEM = MyBase.Columns("SEM")
            Me.columncourse = MyBase.Columns("course")
            Me.columnsubjectid = MyBase.Columns("subjectid")
            Me.columneduyear = MyBase.Columns("eduyear")
            Me.columneffectivedate = MyBase.Columns("effectivedate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBlockSectionPK = New Global.System.Data.DataColumn("BlockSectionPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlockSectionPK)
            Me.columnSEM = New Global.System.Data.DataColumn("SEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEM)
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.columneduyear = New Global.System.Data.DataColumn("eduyear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneduyear)
            Me.columneffectivedate = New Global.System.Data.DataColumn("effectivedate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffectivedate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBlockSectionPK}, true))
            Me.columnBlockSectionPK.AutoIncrement = true
            Me.columnBlockSectionPK.AllowDBNull = false
            Me.columnBlockSectionPK.ReadOnly = true
            Me.columnBlockSectionPK.Unique = true
            Me.columnSEM.AllowDBNull = false
            Me.columncourse.AllowDBNull = false
            Me.columnsubjectid.AllowDBNull = false
            Me.columneduyear.AllowDBNull = false
            Me.columneffectivedate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBlockSectionTuitionRow() As BlockSectionTuitionRow
            Return CType(Me.NewRow,BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BlockSectionTuitionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BlockSectionTuitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BlockSectionTuitionRowChangedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowChanged(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BlockSectionTuitionRowChangingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowChanging(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BlockSectionTuitionRowDeletedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowDeleted(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BlockSectionTuitionRowDeletingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionRowDeleting(Me, New BlockSectionTuitionRowChangeEvent(CType(e.Row,BlockSectionTuitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBlockSectionTuitionRow(ByVal row As BlockSectionTuitionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BlockSectionTuitionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollHeaderDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollHeaderRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollHeader"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollHeaderRow
            Get
                Return CType(Me.Rows(index),EnrollHeaderRow)
            End Get
        End Property
        
        Public Event EnrollHeaderRowChanging As EnrollHeaderRowChangeEventHandler
        
        Public Event EnrollHeaderRowChanged As EnrollHeaderRowChangeEventHandler
        
        Public Event EnrollHeaderRowDeleting As EnrollHeaderRowChangeEventHandler
        
        Public Event EnrollHeaderRowDeleted As EnrollHeaderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollHeaderRow(ByVal row As EnrollHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollHeaderRow(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal studentpk As Integer, ByVal remarks As String, ByVal yrlevel As Integer) As EnrollHeaderRow
            Dim rowEnrollHeaderRow As EnrollHeaderRow = CType(Me.NewRow,EnrollHeaderRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, sempk, yearpk, studentpk, remarks, yrlevel}
            rowEnrollHeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollHeaderRow)
            Return rowEnrollHeaderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As EnrollHeaderRow
            Return CType(Me.Rows.Find(New Object() {PK}),EnrollHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollHeaderDataTable = CType(MyBase.Clone,EnrollHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollHeaderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnsempk.AllowDBNull = false
            Me.columnyearpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 5128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollHeaderRow() As EnrollHeaderRow
            Return CType(Me.NewRow,EnrollHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollHeaderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderRowChanged(Me, New EnrollHeaderRowChangeEvent(CType(e.Row,EnrollHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderRowChanging(Me, New EnrollHeaderRowChangeEvent(CType(e.Row,EnrollHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderRowDeleted(Me, New EnrollHeaderRowChangeEvent(CType(e.Row,EnrollHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollHeaderRowDeleting(Me, New EnrollHeaderRowChangeEvent(CType(e.Row,EnrollHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollHeaderRow(ByVal row As EnrollHeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BlockSectionTuitionbyCourseDataTable
        Inherits Global.System.Data.TypedTableBase(Of BlockSectionTuitionbyCourseRow)
        
        Private columnBlockSectionPK As Global.System.Data.DataColumn
        
        Private columnSEM As Global.System.Data.DataColumn
        
        Private columncourse As Global.System.Data.DataColumn
        
        Private columnsubjectid As Global.System.Data.DataColumn
        
        Private columneduyear As Global.System.Data.DataColumn
        
        Private columneffectivedate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BlockSectionTuitionbyCourse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlockSectionPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlockSectionPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property courseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eduyearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneduyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property effectivedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneffectivedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BlockSectionTuitionbyCourseRow
            Get
                Return CType(Me.Rows(index),BlockSectionTuitionbyCourseRow)
            End Get
        End Property
        
        Public Event BlockSectionTuitionbyCourseRowChanging As BlockSectionTuitionbyCourseRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyCourseRowChanged As BlockSectionTuitionbyCourseRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyCourseRowDeleting As BlockSectionTuitionbyCourseRowChangeEventHandler
        
        Public Event BlockSectionTuitionbyCourseRowDeleted As BlockSectionTuitionbyCourseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBlockSectionTuitionbyCourseRow(ByVal row As BlockSectionTuitionbyCourseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBlockSectionTuitionbyCourseRow(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date) As BlockSectionTuitionbyCourseRow
            Dim rowBlockSectionTuitionbyCourseRow As BlockSectionTuitionbyCourseRow = CType(Me.NewRow,BlockSectionTuitionbyCourseRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEM, course, subjectid, eduyear, effectivedate}
            rowBlockSectionTuitionbyCourseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBlockSectionTuitionbyCourseRow)
            Return rowBlockSectionTuitionbyCourseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBlockSectionPK(ByVal BlockSectionPK As Integer) As BlockSectionTuitionbyCourseRow
            Return CType(Me.Rows.Find(New Object() {BlockSectionPK}),BlockSectionTuitionbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BlockSectionTuitionbyCourseDataTable = CType(MyBase.Clone,BlockSectionTuitionbyCourseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BlockSectionTuitionbyCourseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBlockSectionPK = MyBase.Columns("BlockSectionPK")
            Me.columnSEM = MyBase.Columns("SEM")
            Me.columncourse = MyBase.Columns("course")
            Me.columnsubjectid = MyBase.Columns("subjectid")
            Me.columneduyear = MyBase.Columns("eduyear")
            Me.columneffectivedate = MyBase.Columns("effectivedate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBlockSectionPK = New Global.System.Data.DataColumn("BlockSectionPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlockSectionPK)
            Me.columnSEM = New Global.System.Data.DataColumn("SEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEM)
            Me.columncourse = New Global.System.Data.DataColumn("course", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncourse)
            Me.columnsubjectid = New Global.System.Data.DataColumn("subjectid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectid)
            Me.columneduyear = New Global.System.Data.DataColumn("eduyear", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneduyear)
            Me.columneffectivedate = New Global.System.Data.DataColumn("effectivedate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneffectivedate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBlockSectionPK}, true))
            Me.columnBlockSectionPK.AutoIncrement = true
            Me.columnBlockSectionPK.AllowDBNull = false
            Me.columnBlockSectionPK.ReadOnly = true
            Me.columnBlockSectionPK.Unique = true
            Me.columnSEM.AllowDBNull = false
            Me.columncourse.AllowDBNull = false
            Me.columnsubjectid.AllowDBNull = false
            Me.columneduyear.AllowDBNull = false
            Me.columneffectivedate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBlockSectionTuitionbyCourseRow() As BlockSectionTuitionbyCourseRow
            Return CType(Me.NewRow,BlockSectionTuitionbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BlockSectionTuitionbyCourseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BlockSectionTuitionbyCourseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BlockSectionTuitionbyCourseRowChangedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyCourseRowChanged(Me, New BlockSectionTuitionbyCourseRowChangeEvent(CType(e.Row,BlockSectionTuitionbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BlockSectionTuitionbyCourseRowChangingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyCourseRowChanging(Me, New BlockSectionTuitionbyCourseRowChangeEvent(CType(e.Row,BlockSectionTuitionbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BlockSectionTuitionbyCourseRowDeletedEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyCourseRowDeleted(Me, New BlockSectionTuitionbyCourseRowChangeEvent(CType(e.Row,BlockSectionTuitionbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BlockSectionTuitionbyCourseRowDeletingEvent) Is Nothing) Then
                RaiseEvent BlockSectionTuitionbyCourseRowDeleting(Me, New BlockSectionTuitionbyCourseRowChangeEvent(CType(e.Row,BlockSectionTuitionbyCourseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBlockSectionTuitionbyCourseRow(ByVal row As BlockSectionTuitionbyCourseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BlockSectionTuitionbyCourseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentGradesbyStudentDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentGradesbyStudentRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentGradesbyStudent"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentGradesbyStudentRow
            Get
                Return CType(Me.Rows(index),StudentGradesbyStudentRow)
            End Get
        End Property
        
        Public Event StudentGradesbyStudentRowChanging As StudentGradesbyStudentRowChangeEventHandler
        
        Public Event StudentGradesbyStudentRowChanged As StudentGradesbyStudentRowChangeEventHandler
        
        Public Event StudentGradesbyStudentRowDeleting As StudentGradesbyStudentRowChangeEventHandler
        
        Public Event StudentGradesbyStudentRowDeleted As StudentGradesbyStudentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentGradesbyStudentRow(ByVal row As StudentGradesbyStudentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentGradesbyStudentRow(ByVal datein As Date, ByVal grade As Decimal, ByVal keythrough As String, ByVal subjectpk As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal teacherpk As Integer, ByVal studentpk As Integer, ByVal extSubjectID As String, ByVal exSubjectDesc As String, ByVal exSubjectGrade As String, ByVal coursepk As Integer) As StudentGradesbyStudentRow
            Dim rowStudentGradesbyStudentRow As StudentGradesbyStudentRow = CType(Me.NewRow,StudentGradesbyStudentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk}
            rowStudentGradesbyStudentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentGradesbyStudentRow)
            Return rowStudentGradesbyStudentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentGradesbyStudentRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentGradesbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentGradesbyStudentDataTable = CType(MyBase.Clone,StudentGradesbyStudentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentGradesbyStudentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentGradesbyStudentRow() As StudentGradesbyStudentRow
            Return CType(Me.NewRow,StudentGradesbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentGradesbyStudentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentGradesbyStudentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentGradesbyStudentRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentRowChanged(Me, New StudentGradesbyStudentRowChangeEvent(CType(e.Row,StudentGradesbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentGradesbyStudentRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentRowChanging(Me, New StudentGradesbyStudentRowChangeEvent(CType(e.Row,StudentGradesbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentGradesbyStudentRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentRowDeleted(Me, New StudentGradesbyStudentRowChangeEvent(CType(e.Row,StudentGradesbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentGradesbyStudentRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentRowDeleting(Me, New StudentGradesbyStudentRowChangeEvent(CType(e.Row,StudentGradesbyStudentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentGradesbyStudentRow(ByVal row As StudentGradesbyStudentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentGradesbyStudentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsbyClassDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsbyClassRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsbyClass"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsbyClassRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsbyClassRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsbyClassRowChanging As EnrollSubjectsbyClassRowChangeEventHandler
        
        Public Event EnrollSubjectsbyClassRowChanged As EnrollSubjectsbyClassRowChangeEventHandler
        
        Public Event EnrollSubjectsbyClassRowDeleting As EnrollSubjectsbyClassRowChangeEventHandler
        
        Public Event EnrollSubjectsbyClassRowDeleted As EnrollSubjectsbyClassRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsbyClassRow(ByVal row As EnrollSubjectsbyClassRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsbyClassRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjectsbyClassRow
            Dim rowEnrollSubjectsbyClassRow As EnrollSubjectsbyClassRow = CType(Me.NewRow,EnrollSubjectsbyClassRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjectsbyClassRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsbyClassRow)
            Return rowEnrollSubjectsbyClassRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsbyClassRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsbyClassRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsbyClassDataTable = CType(MyBase.Clone,EnrollSubjectsbyClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsbyClassDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsbyClassRow() As EnrollSubjectsbyClassRow
            Return CType(Me.NewRow,EnrollSubjectsbyClassRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsbyClassRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsbyClassRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsbyClassRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyClassRowChanged(Me, New EnrollSubjectsbyClassRowChangeEvent(CType(e.Row,EnrollSubjectsbyClassRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsbyClassRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyClassRowChanging(Me, New EnrollSubjectsbyClassRowChangeEvent(CType(e.Row,EnrollSubjectsbyClassRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsbyClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyClassRowDeleted(Me, New EnrollSubjectsbyClassRowChangeEvent(CType(e.Row,EnrollSubjectsbyClassRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsbyClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyClassRowDeleting(Me, New EnrollSubjectsbyClassRowChangeEvent(CType(e.Row,EnrollSubjectsbyClassRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsbyClassRow(ByVal row As EnrollSubjectsbyClassRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsbyClassDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SpecialCourseGradesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SpecialCourseGradesRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSPK As Global.System.Data.DataColumn
        
        Private columnEPK As Global.System.Data.DataColumn
        
        Private columnSYOfferingPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SpecialCourseGrades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYOfferingPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYOfferingPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialCourseGradesRow
            Get
                Return CType(Me.Rows(index),SpecialCourseGradesRow)
            End Get
        End Property
        
        Public Event SpecialCourseGradesRowChanging As SpecialCourseGradesRowChangeEventHandler
        
        Public Event SpecialCourseGradesRowChanged As SpecialCourseGradesRowChangeEventHandler
        
        Public Event SpecialCourseGradesRowDeleting As SpecialCourseGradesRowChangeEventHandler
        
        Public Event SpecialCourseGradesRowDeleted As SpecialCourseGradesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSpecialCourseGradesRow(ByVal row As SpecialCourseGradesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSpecialCourseGradesRow(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Integer) As SpecialCourseGradesRow
            Dim rowSpecialCourseGradesRow As SpecialCourseGradesRow = CType(Me.NewRow,SpecialCourseGradesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SPK, EPK, SYOfferingPK}
            rowSpecialCourseGradesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpecialCourseGradesRow)
            Return rowSpecialCourseGradesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As SpecialCourseGradesRow
            Return CType(Me.Rows.Find(New Object() {PK}),SpecialCourseGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SpecialCourseGradesDataTable = CType(MyBase.Clone,SpecialCourseGradesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SpecialCourseGradesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSPK = MyBase.Columns("SPK")
            Me.columnEPK = MyBase.Columns("EPK")
            Me.columnSYOfferingPK = MyBase.Columns("SYOfferingPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSPK = New Global.System.Data.DataColumn("SPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK)
            Me.columnEPK = New Global.System.Data.DataColumn("EPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEPK)
            Me.columnSYOfferingPK = New Global.System.Data.DataColumn("SYOfferingPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYOfferingPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSPK.AllowDBNull = false
            Me.columnEPK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSpecialCourseGradesRow() As SpecialCourseGradesRow
            Return CType(Me.NewRow,SpecialCourseGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SpecialCourseGradesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SpecialCourseGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialCourseGradesRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesRowChanged(Me, New SpecialCourseGradesRowChangeEvent(CType(e.Row,SpecialCourseGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialCourseGradesRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesRowChanging(Me, New SpecialCourseGradesRowChangeEvent(CType(e.Row,SpecialCourseGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialCourseGradesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesRowDeleted(Me, New SpecialCourseGradesRowChangeEvent(CType(e.Row,SpecialCourseGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialCourseGradesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesRowDeleting(Me, New SpecialCourseGradesRowChangeEvent(CType(e.Row,SpecialCourseGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSpecialCourseGradesRow(ByVal row As SpecialCourseGradesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpecialCourseGradesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SpecialCourseGradesbySPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SpecialCourseGradesbySPKRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSPK As Global.System.Data.DataColumn
        
        Private columnEPK As Global.System.Data.DataColumn
        
        Private columnSYOfferingPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SpecialCourseGradesbySPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYOfferingPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYOfferingPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialCourseGradesbySPKRow
            Get
                Return CType(Me.Rows(index),SpecialCourseGradesbySPKRow)
            End Get
        End Property
        
        Public Event SpecialCourseGradesbySPKRowChanging As SpecialCourseGradesbySPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbySPKRowChanged As SpecialCourseGradesbySPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbySPKRowDeleting As SpecialCourseGradesbySPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbySPKRowDeleted As SpecialCourseGradesbySPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSpecialCourseGradesbySPKRow(ByVal row As SpecialCourseGradesbySPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSpecialCourseGradesbySPKRow(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Integer) As SpecialCourseGradesbySPKRow
            Dim rowSpecialCourseGradesbySPKRow As SpecialCourseGradesbySPKRow = CType(Me.NewRow,SpecialCourseGradesbySPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SPK, EPK, SYOfferingPK}
            rowSpecialCourseGradesbySPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpecialCourseGradesbySPKRow)
            Return rowSpecialCourseGradesbySPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As SpecialCourseGradesbySPKRow
            Return CType(Me.Rows.Find(New Object() {PK}),SpecialCourseGradesbySPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SpecialCourseGradesbySPKDataTable = CType(MyBase.Clone,SpecialCourseGradesbySPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SpecialCourseGradesbySPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSPK = MyBase.Columns("SPK")
            Me.columnEPK = MyBase.Columns("EPK")
            Me.columnSYOfferingPK = MyBase.Columns("SYOfferingPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSPK = New Global.System.Data.DataColumn("SPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK)
            Me.columnEPK = New Global.System.Data.DataColumn("EPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEPK)
            Me.columnSYOfferingPK = New Global.System.Data.DataColumn("SYOfferingPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYOfferingPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSPK.AllowDBNull = false
            Me.columnEPK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSpecialCourseGradesbySPKRow() As SpecialCourseGradesbySPKRow
            Return CType(Me.NewRow,SpecialCourseGradesbySPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SpecialCourseGradesbySPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SpecialCourseGradesbySPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialCourseGradesbySPKRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbySPKRowChanged(Me, New SpecialCourseGradesbySPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbySPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialCourseGradesbySPKRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbySPKRowChanging(Me, New SpecialCourseGradesbySPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbySPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialCourseGradesbySPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbySPKRowDeleted(Me, New SpecialCourseGradesbySPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbySPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialCourseGradesbySPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbySPKRowDeleting(Me, New SpecialCourseGradesbySPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbySPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSpecialCourseGradesbySPKRow(ByVal row As SpecialCourseGradesbySPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpecialCourseGradesbySPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsbyPkDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsbyPkRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsbyPk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsbyPkRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsbyPkRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsbyPkRowChanging As EnrollSubjectsbyPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyPkRowChanged As EnrollSubjectsbyPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyPkRowDeleting As EnrollSubjectsbyPkRowChangeEventHandler
        
        Public Event EnrollSubjectsbyPkRowDeleted As EnrollSubjectsbyPkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsbyPkRow(ByVal row As EnrollSubjectsbyPkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsbyPkRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjectsbyPkRow
            Dim rowEnrollSubjectsbyPkRow As EnrollSubjectsbyPkRow = CType(Me.NewRow,EnrollSubjectsbyPkRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjectsbyPkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsbyPkRow)
            Return rowEnrollSubjectsbyPkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjectsbyPkRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjectsbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsbyPkDataTable = CType(MyBase.Clone,EnrollSubjectsbyPkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsbyPkDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsbyPkRow() As EnrollSubjectsbyPkRow
            Return CType(Me.NewRow,EnrollSubjectsbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsbyPkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsbyPkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsbyPkRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyPkRowChanged(Me, New EnrollSubjectsbyPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsbyPkRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyPkRowChanging(Me, New EnrollSubjectsbyPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsbyPkRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyPkRowDeleted(Me, New EnrollSubjectsbyPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsbyPkRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsbyPkRowDeleting(Me, New EnrollSubjectsbyPkRowChangeEvent(CType(e.Row,EnrollSubjectsbyPkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsbyPkRow(ByVal row As EnrollSubjectsbyPkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsbyPkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SpecialCourseGradesbyEPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SpecialCourseGradesbyEPKRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSPK As Global.System.Data.DataColumn
        
        Private columnEPK As Global.System.Data.DataColumn
        
        Private columnSYOfferingPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SpecialCourseGradesbyEPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYOfferingPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYOfferingPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialCourseGradesbyEPKRow
            Get
                Return CType(Me.Rows(index),SpecialCourseGradesbyEPKRow)
            End Get
        End Property
        
        Public Event SpecialCourseGradesbyEPKRowChanging As SpecialCourseGradesbyEPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbyEPKRowChanged As SpecialCourseGradesbyEPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbyEPKRowDeleting As SpecialCourseGradesbyEPKRowChangeEventHandler
        
        Public Event SpecialCourseGradesbyEPKRowDeleted As SpecialCourseGradesbyEPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSpecialCourseGradesbyEPKRow(ByVal row As SpecialCourseGradesbyEPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSpecialCourseGradesbyEPKRow(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Integer) As SpecialCourseGradesbyEPKRow
            Dim rowSpecialCourseGradesbyEPKRow As SpecialCourseGradesbyEPKRow = CType(Me.NewRow,SpecialCourseGradesbyEPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SPK, EPK, SYOfferingPK}
            rowSpecialCourseGradesbyEPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpecialCourseGradesbyEPKRow)
            Return rowSpecialCourseGradesbyEPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As SpecialCourseGradesbyEPKRow
            Return CType(Me.Rows.Find(New Object() {PK}),SpecialCourseGradesbyEPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SpecialCourseGradesbyEPKDataTable = CType(MyBase.Clone,SpecialCourseGradesbyEPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SpecialCourseGradesbyEPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSPK = MyBase.Columns("SPK")
            Me.columnEPK = MyBase.Columns("EPK")
            Me.columnSYOfferingPK = MyBase.Columns("SYOfferingPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSPK = New Global.System.Data.DataColumn("SPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK)
            Me.columnEPK = New Global.System.Data.DataColumn("EPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEPK)
            Me.columnSYOfferingPK = New Global.System.Data.DataColumn("SYOfferingPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYOfferingPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSPK.AllowDBNull = false
            Me.columnEPK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSpecialCourseGradesbyEPKRow() As SpecialCourseGradesbyEPKRow
            Return CType(Me.NewRow,SpecialCourseGradesbyEPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SpecialCourseGradesbyEPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SpecialCourseGradesbyEPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialCourseGradesbyEPKRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbyEPKRowChanged(Me, New SpecialCourseGradesbyEPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbyEPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialCourseGradesbyEPKRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbyEPKRowChanging(Me, New SpecialCourseGradesbyEPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbyEPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialCourseGradesbyEPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbyEPKRowDeleted(Me, New SpecialCourseGradesbyEPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbyEPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialCourseGradesbyEPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialCourseGradesbyEPKRowDeleting(Me, New SpecialCourseGradesbyEPKRowChangeEvent(CType(e.Row,SpecialCourseGradesbyEPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSpecialCourseGradesbyEPKRow(ByVal row As SpecialCourseGradesbyEPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpecialCourseGradesbyEPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WhiteFormDataTable
        Inherits Global.System.Data.TypedTableBase(Of WhiteFormRow)
        
        Private columnledgerpk As Global.System.Data.DataColumn
        
        Private columnledgerdate As Global.System.Data.DataColumn
        
        Private columnref As Global.System.Data.DataColumn
        
        Private columnlinetype As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnbalance As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WhiteForm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ledgerdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnledgerdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property linetypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinetype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property balanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WhiteFormRow
            Get
                Return CType(Me.Rows(index),WhiteFormRow)
            End Get
        End Property
        
        Public Event WhiteFormRowChanging As WhiteFormRowChangeEventHandler
        
        Public Event WhiteFormRowChanged As WhiteFormRowChangeEventHandler
        
        Public Event WhiteFormRowDeleting As WhiteFormRowChangeEventHandler
        
        Public Event WhiteFormRowDeleted As WhiteFormRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWhiteFormRow(ByVal row As WhiteFormRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWhiteFormRow(ByVal ledgerdate As Date, ByVal ref As String, ByVal linetype As String, ByVal amount As Decimal, ByVal balance As Decimal, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal subjectpk As Integer, ByVal coursepk As Integer, ByVal remarks As String) As WhiteFormRow
            Dim rowWhiteFormRow As WhiteFormRow = CType(Me.NewRow,WhiteFormRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ledgerdate, ref, linetype, amount, balance, studentpk, sypk, sempk, subjectpk, coursepk, remarks}
            rowWhiteFormRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWhiteFormRow)
            Return rowWhiteFormRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByledgerpk(ByVal ledgerpk As Integer) As WhiteFormRow
            Return CType(Me.Rows.Find(New Object() {ledgerpk}),WhiteFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WhiteFormDataTable = CType(MyBase.Clone,WhiteFormDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WhiteFormDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnledgerpk = MyBase.Columns("ledgerpk")
            Me.columnledgerdate = MyBase.Columns("ledgerdate")
            Me.columnref = MyBase.Columns("ref")
            Me.columnlinetype = MyBase.Columns("linetype")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnbalance = MyBase.Columns("balance")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnremarks = MyBase.Columns("remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnledgerpk = New Global.System.Data.DataColumn("ledgerpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerpk)
            Me.columnledgerdate = New Global.System.Data.DataColumn("ledgerdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnledgerdate)
            Me.columnref = New Global.System.Data.DataColumn("ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref)
            Me.columnlinetype = New Global.System.Data.DataColumn("linetype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinetype)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnbalance = New Global.System.Data.DataColumn("balance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbalance)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnledgerpk}, true))
            Me.columnledgerpk.AutoIncrement = true
            Me.columnledgerpk.AllowDBNull = false
            Me.columnledgerpk.ReadOnly = true
            Me.columnledgerpk.Unique = true
            Me.columnledgerdate.AllowDBNull = false
            Me.columnref.AllowDBNull = false
            Me.columnref.MaxLength = 50
            Me.columnlinetype.AllowDBNull = false
            Me.columnlinetype.MaxLength = 50
            Me.columnamount.AllowDBNull = false
            Me.columnbalance.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnsubjectpk.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 2048
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWhiteFormRow() As WhiteFormRow
            Return CType(Me.NewRow,WhiteFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WhiteFormRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WhiteFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WhiteFormRowChangedEvent) Is Nothing) Then
                RaiseEvent WhiteFormRowChanged(Me, New WhiteFormRowChangeEvent(CType(e.Row,WhiteFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WhiteFormRowChangingEvent) Is Nothing) Then
                RaiseEvent WhiteFormRowChanging(Me, New WhiteFormRowChangeEvent(CType(e.Row,WhiteFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WhiteFormRowDeletedEvent) Is Nothing) Then
                RaiseEvent WhiteFormRowDeleted(Me, New WhiteFormRowChangeEvent(CType(e.Row,WhiteFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WhiteFormRowDeletingEvent) Is Nothing) Then
                RaiseEvent WhiteFormRowDeleting(Me, New WhiteFormRowChangeEvent(CType(e.Row,WhiteFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWhiteFormRow(ByVal row As WhiteFormRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WhiteFormDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClassListDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClassListRow)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClassList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassListRow
            Get
                Return CType(Me.Rows(index),ClassListRow)
            End Get
        End Property
        
        Public Event ClassListRowChanging As ClassListRowChangeEventHandler
        
        Public Event ClassListRowChanged As ClassListRowChangeEventHandler
        
        Public Event ClassListRowDeleting As ClassListRowChangeEventHandler
        
        Public Event ClassListRowDeleted As ClassListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClassListRow(ByVal row As ClassListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClassListRow(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As ClassListRow
            Dim rowClassListRow As ClassListRow = CType(Me.NewRow,ClassListRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowClassListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClassListRow)
            Return rowClassListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As ClassListRow
            Return CType(Me.Rows.Find(New Object() {enrollpk}),ClassListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClassListDataTable = CType(MyBase.Clone,ClassListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClassListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClassListRow() As ClassListRow
            Return CType(Me.NewRow,ClassListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClassListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClassListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassListRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassListRowChanged(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassListRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassListRowChanging(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassListRowDeleted(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassListRowDeleting(Me, New ClassListRowChangeEvent(CType(e.Row,ClassListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClassListRow(ByVal row As ClassListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClassListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentGradesbyStudentSubjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentGradesbyStudentSubjectRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnisPrevSchoolGrade As Global.System.Data.DataColumn
        
        Private columnexCompletionGrade As Global.System.Data.DataColumn
        
        Private columnexSubjectCode As Global.System.Data.DataColumn
        
        Private columnexCreditGroup As Global.System.Data.DataColumn
        
        Private columnexSubjectUnits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentGradesbyStudentSubject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isPrevSchoolGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisPrevSchoolGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentGradesbyStudentSubjectRow
            Get
                Return CType(Me.Rows(index),StudentGradesbyStudentSubjectRow)
            End Get
        End Property
        
        Public Event StudentGradesbyStudentSubjectRowChanging As StudentGradesbyStudentSubjectRowChangeEventHandler
        
        Public Event StudentGradesbyStudentSubjectRowChanged As StudentGradesbyStudentSubjectRowChangeEventHandler
        
        Public Event StudentGradesbyStudentSubjectRowDeleting As StudentGradesbyStudentSubjectRowChangeEventHandler
        
        Public Event StudentGradesbyStudentSubjectRowDeleted As StudentGradesbyStudentSubjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentGradesbyStudentSubjectRow(ByVal row As StudentGradesbyStudentSubjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentGradesbyStudentSubjectRow( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal isPrevSchoolGrade As Boolean,  _
                    ByVal exCompletionGrade As Decimal,  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCreditGroup As Integer,  _
                    ByVal exSubjectUnits As Integer) As StudentGradesbyStudentSubjectRow
            Dim rowStudentGradesbyStudentSubjectRow As StudentGradesbyStudentSubjectRow = CType(Me.NewRow,StudentGradesbyStudentSubjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, isPrevSchoolGrade, exCompletionGrade, exSubjectCode, exCreditGroup, exSubjectUnits}
            rowStudentGradesbyStudentSubjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentGradesbyStudentSubjectRow)
            Return rowStudentGradesbyStudentSubjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentGradesbyStudentSubjectRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentGradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentGradesbyStudentSubjectDataTable = CType(MyBase.Clone,StudentGradesbyStudentSubjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentGradesbyStudentSubjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnisPrevSchoolGrade = MyBase.Columns("isPrevSchoolGrade")
            Me.columnexCompletionGrade = MyBase.Columns("exCompletionGrade")
            Me.columnexSubjectCode = MyBase.Columns("exSubjectCode")
            Me.columnexCreditGroup = MyBase.Columns("exCreditGroup")
            Me.columnexSubjectUnits = MyBase.Columns("exSubjectUnits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnisPrevSchoolGrade = New Global.System.Data.DataColumn("isPrevSchoolGrade", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisPrevSchoolGrade)
            Me.columnexCompletionGrade = New Global.System.Data.DataColumn("exCompletionGrade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCompletionGrade)
            Me.columnexSubjectCode = New Global.System.Data.DataColumn("exSubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectCode)
            Me.columnexCreditGroup = New Global.System.Data.DataColumn("exCreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCreditGroup)
            Me.columnexSubjectUnits = New Global.System.Data.DataColumn("exSubjectUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectUnits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnexSubjectCode.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentGradesbyStudentSubjectRow() As StudentGradesbyStudentSubjectRow
            Return CType(Me.NewRow,StudentGradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentGradesbyStudentSubjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentGradesbyStudentSubjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentGradesbyStudentSubjectRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentSubjectRowChanged(Me, New StudentGradesbyStudentSubjectRowChangeEvent(CType(e.Row,StudentGradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentGradesbyStudentSubjectRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentSubjectRowChanging(Me, New StudentGradesbyStudentSubjectRowChangeEvent(CType(e.Row,StudentGradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentGradesbyStudentSubjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentSubjectRowDeleted(Me, New StudentGradesbyStudentSubjectRowChangeEvent(CType(e.Row,StudentGradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentGradesbyStudentSubjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentGradesbyStudentSubjectRowDeleting(Me, New StudentGradesbyStudentSubjectRowChangeEvent(CType(e.Row,StudentGradesbyStudentSubjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentGradesbyStudentSubjectRow(ByVal row As StudentGradesbyStudentSubjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentGradesbyStudentSubjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsCostDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsCostRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnheaderpk As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columntrpk As Global.System.Data.DataColumn
        
        Private columnquantity As Global.System.Data.DataColumn
        
        Private columnunitamount As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnlinenumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsCost"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property headerpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnheaderpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property linenumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinenumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsCostRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsCostRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsCostRowChanging As EnrollSubjectsCostRowChangeEventHandler
        
        Public Event EnrollSubjectsCostRowChanged As EnrollSubjectsCostRowChangeEventHandler
        
        Public Event EnrollSubjectsCostRowDeleting As EnrollSubjectsCostRowChangeEventHandler
        
        Public Event EnrollSubjectsCostRowDeleted As EnrollSubjectsCostRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsCostRow(ByVal row As EnrollSubjectsCostRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsCostRow(ByVal headerpk As Integer, ByVal yrlevel As Integer, ByVal trpk As Integer, ByVal quantity As Single, ByVal unitamount As Decimal, ByVal amount As Decimal, ByVal linenumber As Integer) As EnrollSubjectsCostRow
            Dim rowEnrollSubjectsCostRow As EnrollSubjectsCostRow = CType(Me.NewRow,EnrollSubjectsCostRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber}
            rowEnrollSubjectsCostRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsCostRow)
            Return rowEnrollSubjectsCostRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As EnrollSubjectsCostRow
            Return CType(Me.Rows.Find(New Object() {pk}),EnrollSubjectsCostRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsCostDataTable = CType(MyBase.Clone,EnrollSubjectsCostDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsCostDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnheaderpk = MyBase.Columns("headerpk")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columntrpk = MyBase.Columns("trpk")
            Me.columnquantity = MyBase.Columns("quantity")
            Me.columnunitamount = MyBase.Columns("unitamount")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnlinenumber = MyBase.Columns("linenumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnheaderpk = New Global.System.Data.DataColumn("headerpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnheaderpk)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columntrpk = New Global.System.Data.DataColumn("trpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrpk)
            Me.columnquantity = New Global.System.Data.DataColumn("quantity", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity)
            Me.columnunitamount = New Global.System.Data.DataColumn("unitamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitamount)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnlinenumber = New Global.System.Data.DataColumn("linenumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinenumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columnheaderpk.AllowDBNull = false
            Me.columnyrlevel.AllowDBNull = false
            Me.columntrpk.AllowDBNull = false
            Me.columnquantity.AllowDBNull = false
            Me.columnunitamount.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnlinenumber.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsCostRow() As EnrollSubjectsCostRow
            Return CType(Me.NewRow,EnrollSubjectsCostRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsCostRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsCostRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsCostRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostRowChanged(Me, New EnrollSubjectsCostRowChangeEvent(CType(e.Row,EnrollSubjectsCostRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsCostRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostRowChanging(Me, New EnrollSubjectsCostRowChangeEvent(CType(e.Row,EnrollSubjectsCostRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsCostRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostRowDeleted(Me, New EnrollSubjectsCostRowChangeEvent(CType(e.Row,EnrollSubjectsCostRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsCostRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostRowDeleting(Me, New EnrollSubjectsCostRowChangeEvent(CType(e.Row,EnrollSubjectsCostRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsCostRow(ByVal row As EnrollSubjectsCostRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsCostDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjectsCostbyPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjectsCostbyPKRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnheaderpk As Global.System.Data.DataColumn
        
        Private columnyrlevel As Global.System.Data.DataColumn
        
        Private columntrpk As Global.System.Data.DataColumn
        
        Private columnquantity As Global.System.Data.DataColumn
        
        Private columnunitamount As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnlinenumber As Global.System.Data.DataColumn
        
        Private columnisTuition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjectsCostbyPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property headerpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnheaderpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yrlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyrlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property linenumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinenumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isTuitionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisTuition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjectsCostbyPKRow
            Get
                Return CType(Me.Rows(index),EnrollSubjectsCostbyPKRow)
            End Get
        End Property
        
        Public Event EnrollSubjectsCostbyPKRowChanging As EnrollSubjectsCostbyPKRowChangeEventHandler
        
        Public Event EnrollSubjectsCostbyPKRowChanged As EnrollSubjectsCostbyPKRowChangeEventHandler
        
        Public Event EnrollSubjectsCostbyPKRowDeleting As EnrollSubjectsCostbyPKRowChangeEventHandler
        
        Public Event EnrollSubjectsCostbyPKRowDeleted As EnrollSubjectsCostbyPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjectsCostbyPKRow(ByVal row As EnrollSubjectsCostbyPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjectsCostbyPKRow(ByVal headerpk As Integer, ByVal yrlevel As Integer, ByVal trpk As Integer, ByVal quantity As Single, ByVal unitamount As Decimal, ByVal amount As Decimal, ByVal linenumber As Integer, ByVal isTuition As Boolean) As EnrollSubjectsCostbyPKRow
            Dim rowEnrollSubjectsCostbyPKRow As EnrollSubjectsCostbyPKRow = CType(Me.NewRow,EnrollSubjectsCostbyPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber, isTuition}
            rowEnrollSubjectsCostbyPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjectsCostbyPKRow)
            Return rowEnrollSubjectsCostbyPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As EnrollSubjectsCostbyPKRow
            Return CType(Me.Rows.Find(New Object() {pk}),EnrollSubjectsCostbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjectsCostbyPKDataTable = CType(MyBase.Clone,EnrollSubjectsCostbyPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjectsCostbyPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnheaderpk = MyBase.Columns("headerpk")
            Me.columnyrlevel = MyBase.Columns("yrlevel")
            Me.columntrpk = MyBase.Columns("trpk")
            Me.columnquantity = MyBase.Columns("quantity")
            Me.columnunitamount = MyBase.Columns("unitamount")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnlinenumber = MyBase.Columns("linenumber")
            Me.columnisTuition = MyBase.Columns("isTuition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnheaderpk = New Global.System.Data.DataColumn("headerpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnheaderpk)
            Me.columnyrlevel = New Global.System.Data.DataColumn("yrlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyrlevel)
            Me.columntrpk = New Global.System.Data.DataColumn("trpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrpk)
            Me.columnquantity = New Global.System.Data.DataColumn("quantity", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity)
            Me.columnunitamount = New Global.System.Data.DataColumn("unitamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitamount)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnlinenumber = New Global.System.Data.DataColumn("linenumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinenumber)
            Me.columnisTuition = New Global.System.Data.DataColumn("isTuition", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisTuition)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columnheaderpk.AllowDBNull = false
            Me.columnyrlevel.AllowDBNull = false
            Me.columntrpk.AllowDBNull = false
            Me.columnquantity.AllowDBNull = false
            Me.columnunitamount.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnlinenumber.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjectsCostbyPKRow() As EnrollSubjectsCostbyPKRow
            Return CType(Me.NewRow,EnrollSubjectsCostbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjectsCostbyPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjectsCostbyPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjectsCostbyPKRowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostbyPKRowChanged(Me, New EnrollSubjectsCostbyPKRowChangeEvent(CType(e.Row,EnrollSubjectsCostbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjectsCostbyPKRowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostbyPKRowChanging(Me, New EnrollSubjectsCostbyPKRowChangeEvent(CType(e.Row,EnrollSubjectsCostbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjectsCostbyPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostbyPKRowDeleted(Me, New EnrollSubjectsCostbyPKRowChangeEvent(CType(e.Row,EnrollSubjectsCostbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjectsCostbyPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjectsCostbyPKRowDeleting(Me, New EnrollSubjectsCostbyPKRowChangeEvent(CType(e.Row,EnrollSubjectsCostbyPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjectsCostbyPKRow(ByVal row As EnrollSubjectsCostbyPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjectsCostbyPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentGradesByPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of StudentGradesByPKRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columndatein As Global.System.Data.DataColumn
        
        Private columngrade As Global.System.Data.DataColumn
        
        Private columnkeythrough As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnteacherpk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columnextSubjectID As Global.System.Data.DataColumn
        
        Private columnexSubjectDesc As Global.System.Data.DataColumn
        
        Private columnexSubjectGrade As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnexSubjectUnits As Global.System.Data.DataColumn
        
        Private columnexCreditGroup As Global.System.Data.DataColumn
        
        Private columnexSubjectCode As Global.System.Data.DataColumn
        
        Private columnexCompletionGrade As Global.System.Data.DataColumn
        
        Private columnisPrevSchoolGrade As Global.System.Data.DataColumn
        
        Private columnexUnits As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentGradesByPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatein
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keythroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeythrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property teacherpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnteacherpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extSubjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextSubjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCreditGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCreditGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exSubjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexSubjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exCompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isPrevSchoolGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisPrevSchoolGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property exUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentGradesByPKRow
            Get
                Return CType(Me.Rows(index),StudentGradesByPKRow)
            End Get
        End Property
        
        Public Event StudentGradesByPKRowChanging As StudentGradesByPKRowChangeEventHandler
        
        Public Event StudentGradesByPKRowChanged As StudentGradesByPKRowChangeEventHandler
        
        Public Event StudentGradesByPKRowDeleting As StudentGradesByPKRowChangeEventHandler
        
        Public Event StudentGradesByPKRowDeleted As StudentGradesByPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudentGradesByPKRow(ByVal row As StudentGradesByPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudentGradesByPKRow( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Integer,  _
                    ByVal exCreditGroup As Integer,  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Decimal,  _
                    ByVal isPrevSchoolGrade As Boolean,  _
                    ByVal exUnits As Integer) As StudentGradesByPKRow
            Dim rowStudentGradesByPKRow As StudentGradesByPKRow = CType(Me.NewRow,StudentGradesByPKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, exUnits}
            rowStudentGradesByPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudentGradesByPKRow)
            Return rowStudentGradesByPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As StudentGradesByPKRow
            Return CType(Me.Rows.Find(New Object() {pk}),StudentGradesByPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudentGradesByPKDataTable = CType(MyBase.Clone,StudentGradesByPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudentGradesByPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columndatein = MyBase.Columns("datein")
            Me.columngrade = MyBase.Columns("grade")
            Me.columnkeythrough = MyBase.Columns("keythrough")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnteacherpk = MyBase.Columns("teacherpk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columnextSubjectID = MyBase.Columns("extSubjectID")
            Me.columnexSubjectDesc = MyBase.Columns("exSubjectDesc")
            Me.columnexSubjectGrade = MyBase.Columns("exSubjectGrade")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnexSubjectUnits = MyBase.Columns("exSubjectUnits")
            Me.columnexCreditGroup = MyBase.Columns("exCreditGroup")
            Me.columnexSubjectCode = MyBase.Columns("exSubjectCode")
            Me.columnexCompletionGrade = MyBase.Columns("exCompletionGrade")
            Me.columnisPrevSchoolGrade = MyBase.Columns("isPrevSchoolGrade")
            Me.columnexUnits = MyBase.Columns("exUnits")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columndatein = New Global.System.Data.DataColumn("datein", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatein)
            Me.columngrade = New Global.System.Data.DataColumn("grade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrade)
            Me.columnkeythrough = New Global.System.Data.DataColumn("keythrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeythrough)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnteacherpk = New Global.System.Data.DataColumn("teacherpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnteacherpk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columnextSubjectID = New Global.System.Data.DataColumn("extSubjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextSubjectID)
            Me.columnexSubjectDesc = New Global.System.Data.DataColumn("exSubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectDesc)
            Me.columnexSubjectGrade = New Global.System.Data.DataColumn("exSubjectGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectGrade)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnexSubjectUnits = New Global.System.Data.DataColumn("exSubjectUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectUnits)
            Me.columnexCreditGroup = New Global.System.Data.DataColumn("exCreditGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCreditGroup)
            Me.columnexSubjectCode = New Global.System.Data.DataColumn("exSubjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexSubjectCode)
            Me.columnexCompletionGrade = New Global.System.Data.DataColumn("exCompletionGrade", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexCompletionGrade)
            Me.columnisPrevSchoolGrade = New Global.System.Data.DataColumn("isPrevSchoolGrade", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisPrevSchoolGrade)
            Me.columnexUnits = New Global.System.Data.DataColumn("exUnits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexUnits)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columndatein.AllowDBNull = false
            Me.columngrade.AllowDBNull = false
            Me.columnkeythrough.AllowDBNull = false
            Me.columnkeythrough.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsypk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnteacherpk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columnextSubjectID.AllowDBNull = false
            Me.columnextSubjectID.MaxLength = 1000
            Me.columnexSubjectDesc.AllowDBNull = false
            Me.columnexSubjectDesc.MaxLength = 1000
            Me.columnexSubjectGrade.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
            Me.columnexSubjectCode.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudentGradesByPKRow() As StudentGradesByPKRow
            Return CType(Me.NewRow,StudentGradesByPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudentGradesByPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudentGradesByPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentGradesByPKRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentGradesByPKRowChanged(Me, New StudentGradesByPKRowChangeEvent(CType(e.Row,StudentGradesByPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentGradesByPKRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentGradesByPKRowChanging(Me, New StudentGradesByPKRowChangeEvent(CType(e.Row,StudentGradesByPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentGradesByPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentGradesByPKRowDeleted(Me, New StudentGradesByPKRowChangeEvent(CType(e.Row,StudentGradesByPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentGradesByPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentGradesByPKRowDeleting(Me, New StudentGradesByPKRowChangeEvent(CType(e.Row,StudentGradesByPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudentGradesByPKRow(ByVal row As StudentGradesByPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentGradesByPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingExtraHoursDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingExtraHoursRow)
        
        Private columnsyOfferingExtraHoursPK As Global.System.Data.DataColumn
        
        Private columnsyOfferingFK As Global.System.Data.DataColumn
        
        Private columndayType As Global.System.Data.DataColumn
        
        Private columntimeStart As Global.System.Data.DataColumn
        
        Private columntimeEnd As Global.System.Data.DataColumn
        
        Private columninactive As Global.System.Data.DataColumn
        
        Private columndateCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingExtraHours"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syOfferingExtraHoursPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyOfferingExtraHoursPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syOfferingFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyOfferingFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dayTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndayType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property timeStartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimeStart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property timeEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimeEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingExtraHoursRow
            Get
                Return CType(Me.Rows(index),SYOfferingExtraHoursRow)
            End Get
        End Property
        
        Public Event SYOfferingExtraHoursRowChanging As SYOfferingExtraHoursRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursRowChanged As SYOfferingExtraHoursRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursRowDeleting As SYOfferingExtraHoursRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursRowDeleted As SYOfferingExtraHoursRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingExtraHoursRow(ByVal row As SYOfferingExtraHoursRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingExtraHoursRow(ByVal syOfferingFK As Integer, ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Boolean, ByVal dateCreated As Date) As SYOfferingExtraHoursRow
            Dim rowSYOfferingExtraHoursRow As SYOfferingExtraHoursRow = CType(Me.NewRow,SYOfferingExtraHoursRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, syOfferingFK, dayType, timeStart, timeEnd, inactive, dateCreated}
            rowSYOfferingExtraHoursRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingExtraHoursRow)
            Return rowSYOfferingExtraHoursRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyOfferingExtraHoursPK(ByVal syOfferingExtraHoursPK As Integer) As SYOfferingExtraHoursRow
            Return CType(Me.Rows.Find(New Object() {syOfferingExtraHoursPK}),SYOfferingExtraHoursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingExtraHoursDataTable = CType(MyBase.Clone,SYOfferingExtraHoursDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingExtraHoursDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyOfferingExtraHoursPK = MyBase.Columns("syOfferingExtraHoursPK")
            Me.columnsyOfferingFK = MyBase.Columns("syOfferingFK")
            Me.columndayType = MyBase.Columns("dayType")
            Me.columntimeStart = MyBase.Columns("timeStart")
            Me.columntimeEnd = MyBase.Columns("timeEnd")
            Me.columninactive = MyBase.Columns("inactive")
            Me.columndateCreated = MyBase.Columns("dateCreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyOfferingExtraHoursPK = New Global.System.Data.DataColumn("syOfferingExtraHoursPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyOfferingExtraHoursPK)
            Me.columnsyOfferingFK = New Global.System.Data.DataColumn("syOfferingFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyOfferingFK)
            Me.columndayType = New Global.System.Data.DataColumn("dayType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndayType)
            Me.columntimeStart = New Global.System.Data.DataColumn("timeStart", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimeStart)
            Me.columntimeEnd = New Global.System.Data.DataColumn("timeEnd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimeEnd)
            Me.columninactive = New Global.System.Data.DataColumn("inactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninactive)
            Me.columndateCreated = New Global.System.Data.DataColumn("dateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyOfferingExtraHoursPK}, true))
            Me.columnsyOfferingExtraHoursPK.AutoIncrement = true
            Me.columnsyOfferingExtraHoursPK.AutoIncrementSeed = -1
            Me.columnsyOfferingExtraHoursPK.AutoIncrementStep = -1
            Me.columnsyOfferingExtraHoursPK.AllowDBNull = false
            Me.columnsyOfferingExtraHoursPK.ReadOnly = true
            Me.columnsyOfferingExtraHoursPK.Unique = true
            Me.columndayType.MaxLength = 3
            Me.columntimeStart.MaxLength = 50
            Me.columntimeEnd.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingExtraHoursRow() As SYOfferingExtraHoursRow
            Return CType(Me.NewRow,SYOfferingExtraHoursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingExtraHoursRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingExtraHoursRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingExtraHoursRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursRowChanged(Me, New SYOfferingExtraHoursRowChangeEvent(CType(e.Row,SYOfferingExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingExtraHoursRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursRowChanging(Me, New SYOfferingExtraHoursRowChangeEvent(CType(e.Row,SYOfferingExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingExtraHoursRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursRowDeleted(Me, New SYOfferingExtraHoursRowChangeEvent(CType(e.Row,SYOfferingExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingExtraHoursRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursRowDeleting(Me, New SYOfferingExtraHoursRowChangeEvent(CType(e.Row,SYOfferingExtraHoursRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingExtraHoursRow(ByVal row As SYOfferingExtraHoursRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingExtraHoursDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingExtraHoursByFKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingExtraHoursByFKRow)
        
        Private columnsyOfferingExtraHoursPK As Global.System.Data.DataColumn
        
        Private columnsyOfferingFK As Global.System.Data.DataColumn
        
        Private columndayType As Global.System.Data.DataColumn
        
        Private columntimeStart As Global.System.Data.DataColumn
        
        Private columntimeEnd As Global.System.Data.DataColumn
        
        Private columninactive As Global.System.Data.DataColumn
        
        Private columndateCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingExtraHoursByFK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syOfferingExtraHoursPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyOfferingExtraHoursPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syOfferingFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyOfferingFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dayTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndayType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property timeStartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimeStart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property timeEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimeEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingExtraHoursByFKRow
            Get
                Return CType(Me.Rows(index),SYOfferingExtraHoursByFKRow)
            End Get
        End Property
        
        Public Event SYOfferingExtraHoursByFKRowChanging As SYOfferingExtraHoursByFKRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursByFKRowChanged As SYOfferingExtraHoursByFKRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursByFKRowDeleting As SYOfferingExtraHoursByFKRowChangeEventHandler
        
        Public Event SYOfferingExtraHoursByFKRowDeleted As SYOfferingExtraHoursByFKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingExtraHoursByFKRow(ByVal row As SYOfferingExtraHoursByFKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingExtraHoursByFKRow(ByVal syOfferingFK As Integer, ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Boolean, ByVal dateCreated As Date) As SYOfferingExtraHoursByFKRow
            Dim rowSYOfferingExtraHoursByFKRow As SYOfferingExtraHoursByFKRow = CType(Me.NewRow,SYOfferingExtraHoursByFKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, syOfferingFK, dayType, timeStart, timeEnd, inactive, dateCreated}
            rowSYOfferingExtraHoursByFKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingExtraHoursByFKRow)
            Return rowSYOfferingExtraHoursByFKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBysyOfferingExtraHoursPK(ByVal syOfferingExtraHoursPK As Integer) As SYOfferingExtraHoursByFKRow
            Return CType(Me.Rows.Find(New Object() {syOfferingExtraHoursPK}),SYOfferingExtraHoursByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingExtraHoursByFKDataTable = CType(MyBase.Clone,SYOfferingExtraHoursByFKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingExtraHoursByFKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsyOfferingExtraHoursPK = MyBase.Columns("syOfferingExtraHoursPK")
            Me.columnsyOfferingFK = MyBase.Columns("syOfferingFK")
            Me.columndayType = MyBase.Columns("dayType")
            Me.columntimeStart = MyBase.Columns("timeStart")
            Me.columntimeEnd = MyBase.Columns("timeEnd")
            Me.columninactive = MyBase.Columns("inactive")
            Me.columndateCreated = MyBase.Columns("dateCreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsyOfferingExtraHoursPK = New Global.System.Data.DataColumn("syOfferingExtraHoursPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyOfferingExtraHoursPK)
            Me.columnsyOfferingFK = New Global.System.Data.DataColumn("syOfferingFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyOfferingFK)
            Me.columndayType = New Global.System.Data.DataColumn("dayType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndayType)
            Me.columntimeStart = New Global.System.Data.DataColumn("timeStart", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimeStart)
            Me.columntimeEnd = New Global.System.Data.DataColumn("timeEnd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimeEnd)
            Me.columninactive = New Global.System.Data.DataColumn("inactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninactive)
            Me.columndateCreated = New Global.System.Data.DataColumn("dateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsyOfferingExtraHoursPK}, true))
            Me.columnsyOfferingExtraHoursPK.AutoIncrement = true
            Me.columnsyOfferingExtraHoursPK.AutoIncrementSeed = -1
            Me.columnsyOfferingExtraHoursPK.AutoIncrementStep = -1
            Me.columnsyOfferingExtraHoursPK.AllowDBNull = false
            Me.columnsyOfferingExtraHoursPK.ReadOnly = true
            Me.columnsyOfferingExtraHoursPK.Unique = true
            Me.columndayType.MaxLength = 3
            Me.columntimeStart.MaxLength = 50
            Me.columntimeEnd.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingExtraHoursByFKRow() As SYOfferingExtraHoursByFKRow
            Return CType(Me.NewRow,SYOfferingExtraHoursByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingExtraHoursByFKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingExtraHoursByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingExtraHoursByFKRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursByFKRowChanged(Me, New SYOfferingExtraHoursByFKRowChangeEvent(CType(e.Row,SYOfferingExtraHoursByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingExtraHoursByFKRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursByFKRowChanging(Me, New SYOfferingExtraHoursByFKRowChangeEvent(CType(e.Row,SYOfferingExtraHoursByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingExtraHoursByFKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursByFKRowDeleted(Me, New SYOfferingExtraHoursByFKRowChangeEvent(CType(e.Row,SYOfferingExtraHoursByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingExtraHoursByFKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingExtraHoursByFKRowDeleting(Me, New SYOfferingExtraHoursByFKRowChangeEvent(CType(e.Row,SYOfferingExtraHoursByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingExtraHoursByFKRow(ByVal row As SYOfferingExtraHoursByFKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingExtraHoursByFKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingFusedSubjectsByFKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingFusedSubjectsByFKRow)
        
        Private columndateCreated As Global.System.Data.DataColumn
        
        Private columnSYOfferingFusedSubjectsPK As Global.System.Data.DataColumn
        
        Private columnsyofferingFK As Global.System.Data.DataColumn
        
        Private columnsubjectPK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingFusedSubjectsByFK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYOfferingFusedSubjectsPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYOfferingFusedSubjectsPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingFusedSubjectsByFKRow
            Get
                Return CType(Me.Rows(index),SYOfferingFusedSubjectsByFKRow)
            End Get
        End Property
        
        Public Event SYOfferingFusedSubjectsByFKRowChanging As SYOfferingFusedSubjectsByFKRowChangeEventHandler
        
        Public Event SYOfferingFusedSubjectsByFKRowChanged As SYOfferingFusedSubjectsByFKRowChangeEventHandler
        
        Public Event SYOfferingFusedSubjectsByFKRowDeleting As SYOfferingFusedSubjectsByFKRowChangeEventHandler
        
        Public Event SYOfferingFusedSubjectsByFKRowDeleted As SYOfferingFusedSubjectsByFKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingFusedSubjectsByFKRow(ByVal row As SYOfferingFusedSubjectsByFKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingFusedSubjectsByFKRow(ByVal dateCreated As Date, ByVal syofferingFK As Integer, ByVal subjectPK As Integer) As SYOfferingFusedSubjectsByFKRow
            Dim rowSYOfferingFusedSubjectsByFKRow As SYOfferingFusedSubjectsByFKRow = CType(Me.NewRow,SYOfferingFusedSubjectsByFKRow)
            Dim columnValuesArray() As Object = New Object() {dateCreated, Nothing, syofferingFK, subjectPK}
            rowSYOfferingFusedSubjectsByFKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingFusedSubjectsByFKRow)
            Return rowSYOfferingFusedSubjectsByFKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYOfferingFusedSubjectsPK(ByVal SYOfferingFusedSubjectsPK As Integer) As SYOfferingFusedSubjectsByFKRow
            Return CType(Me.Rows.Find(New Object() {SYOfferingFusedSubjectsPK}),SYOfferingFusedSubjectsByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingFusedSubjectsByFKDataTable = CType(MyBase.Clone,SYOfferingFusedSubjectsByFKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingFusedSubjectsByFKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndateCreated = MyBase.Columns("dateCreated")
            Me.columnSYOfferingFusedSubjectsPK = MyBase.Columns("SYOfferingFusedSubjectsPK")
            Me.columnsyofferingFK = MyBase.Columns("syofferingFK")
            Me.columnsubjectPK = MyBase.Columns("subjectPK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndateCreated = New Global.System.Data.DataColumn("dateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateCreated)
            Me.columnSYOfferingFusedSubjectsPK = New Global.System.Data.DataColumn("SYOfferingFusedSubjectsPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYOfferingFusedSubjectsPK)
            Me.columnsyofferingFK = New Global.System.Data.DataColumn("syofferingFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingFK)
            Me.columnsubjectPK = New Global.System.Data.DataColumn("subjectPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectPK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSYOfferingFusedSubjectsPK}, true))
            Me.columnSYOfferingFusedSubjectsPK.AutoIncrement = true
            Me.columnSYOfferingFusedSubjectsPK.AutoIncrementSeed = -1
            Me.columnSYOfferingFusedSubjectsPK.AutoIncrementStep = -1
            Me.columnSYOfferingFusedSubjectsPK.AllowDBNull = false
            Me.columnSYOfferingFusedSubjectsPK.ReadOnly = true
            Me.columnSYOfferingFusedSubjectsPK.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingFusedSubjectsByFKRow() As SYOfferingFusedSubjectsByFKRow
            Return CType(Me.NewRow,SYOfferingFusedSubjectsByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingFusedSubjectsByFKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingFusedSubjectsByFKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingFusedSubjectsByFKRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingFusedSubjectsByFKRowChanged(Me, New SYOfferingFusedSubjectsByFKRowChangeEvent(CType(e.Row,SYOfferingFusedSubjectsByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingFusedSubjectsByFKRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingFusedSubjectsByFKRowChanging(Me, New SYOfferingFusedSubjectsByFKRowChangeEvent(CType(e.Row,SYOfferingFusedSubjectsByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingFusedSubjectsByFKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingFusedSubjectsByFKRowDeleted(Me, New SYOfferingFusedSubjectsByFKRowChangeEvent(CType(e.Row,SYOfferingFusedSubjectsByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingFusedSubjectsByFKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingFusedSubjectsByFKRowDeleting(Me, New SYOfferingFusedSubjectsByFKRowChangeEvent(CType(e.Row,SYOfferingFusedSubjectsByFKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingFusedSubjectsByFKRow(ByVal row As SYOfferingFusedSubjectsByFKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingFusedSubjectsByFKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EnrollSubjects1DataTable
        Inherits Global.System.Data.TypedTableBase(Of EnrollSubjects1Row)
        
        Private columnenrollpk As Global.System.Data.DataColumn
        
        Private columnyearpk As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columnstudentpk As Global.System.Data.DataColumn
        
        Private columndate As Global.System.Data.DataColumn
        
        Private columntransref As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsyofferingpk As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EnrollSubjects1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrollpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrollpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yearpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyearpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studentpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudentpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property transrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntransref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property syofferingpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsyofferingpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EnrollSubjects1Row
            Get
                Return CType(Me.Rows(index),EnrollSubjects1Row)
            End Get
        End Property
        
        Public Event EnrollSubjects1RowChanging As EnrollSubjects1RowChangeEventHandler
        
        Public Event EnrollSubjects1RowChanged As EnrollSubjects1RowChangeEventHandler
        
        Public Event EnrollSubjects1RowDeleting As EnrollSubjects1RowChangeEventHandler
        
        Public Event EnrollSubjects1RowDeleted As EnrollSubjects1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEnrollSubjects1Row(ByVal row As EnrollSubjects1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEnrollSubjects1Row(ByVal yearpk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer, ByVal _date As Date, ByVal transref As String, ByVal subjectpk As Integer, ByVal syofferingpk As Integer, ByVal status As Integer, ByVal coursepk As Integer) As EnrollSubjects1Row
            Dim rowEnrollSubjects1Row As EnrollSubjects1Row = CType(Me.NewRow,EnrollSubjects1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, yearpk, sempk, studentpk, _date, transref, subjectpk, syofferingpk, status, coursepk}
            rowEnrollSubjects1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowEnrollSubjects1Row)
            Return rowEnrollSubjects1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByenrollpk(ByVal enrollpk As Integer) As EnrollSubjects1Row
            Return CType(Me.Rows.Find(New Object() {enrollpk}),EnrollSubjects1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EnrollSubjects1DataTable = CType(MyBase.Clone,EnrollSubjects1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EnrollSubjects1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnenrollpk = MyBase.Columns("enrollpk")
            Me.columnyearpk = MyBase.Columns("yearpk")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columnstudentpk = MyBase.Columns("studentpk")
            Me.columndate = MyBase.Columns("date")
            Me.columntransref = MyBase.Columns("transref")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsyofferingpk = MyBase.Columns("syofferingpk")
            Me.columnstatus = MyBase.Columns("status")
            Me.columncoursepk = MyBase.Columns("coursepk")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnenrollpk = New Global.System.Data.DataColumn("enrollpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrollpk)
            Me.columnyearpk = New Global.System.Data.DataColumn("yearpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyearpk)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columnstudentpk = New Global.System.Data.DataColumn("studentpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudentpk)
            Me.columndate = New Global.System.Data.DataColumn("date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn")
            Me.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate")
            Me.columndate.ExtendedProperties.Add("Generator_UserColumnName", "date")
            MyBase.Columns.Add(Me.columndate)
            Me.columntransref = New Global.System.Data.DataColumn("transref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntransref)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsyofferingpk = New Global.System.Data.DataColumn("syofferingpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsyofferingpk)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnenrollpk}, true))
            Me.columnenrollpk.AutoIncrement = true
            Me.columnenrollpk.AllowDBNull = false
            Me.columnenrollpk.ReadOnly = true
            Me.columnenrollpk.Unique = true
            Me.columnyearpk.AllowDBNull = false
            Me.columnsempk.AllowDBNull = false
            Me.columnstudentpk.AllowDBNull = false
            Me.columndate.AllowDBNull = false
            Me.columntransref.AllowDBNull = false
            Me.columntransref.MaxLength = 50
            Me.columnsubjectpk.AllowDBNull = false
            Me.columnsyofferingpk.AllowDBNull = false
            Me.columnstatus.AllowDBNull = false
            Me.columncoursepk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEnrollSubjects1Row() As EnrollSubjects1Row
            Return CType(Me.NewRow,EnrollSubjects1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EnrollSubjects1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EnrollSubjects1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EnrollSubjects1RowChangedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjects1RowChanged(Me, New EnrollSubjects1RowChangeEvent(CType(e.Row,EnrollSubjects1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EnrollSubjects1RowChangingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjects1RowChanging(Me, New EnrollSubjects1RowChangeEvent(CType(e.Row,EnrollSubjects1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EnrollSubjects1RowDeletedEvent) Is Nothing) Then
                RaiseEvent EnrollSubjects1RowDeleted(Me, New EnrollSubjects1RowChangeEvent(CType(e.Row,EnrollSubjects1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EnrollSubjects1RowDeletingEvent) Is Nothing) Then
                RaiseEvent EnrollSubjects1RowDeleting(Me, New EnrollSubjects1RowChangeEvent(CType(e.Row,EnrollSubjects1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEnrollSubjects1Row(ByVal row As EnrollSubjects1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EnrollSubjects1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYOfferingByFusedSubjectPKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SYOfferingByFusedSubjectPKRow)
        
        Private columndateCreated As Global.System.Data.DataColumn
        
        Private columnMainSubject As Global.System.Data.DataColumn
        
        Private columnFusedSubject As Global.System.Data.DataColumn
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemesterName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYOfferingByFusedSubjectPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FusedSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFusedSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemesterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYOfferingByFusedSubjectPKRow
            Get
                Return CType(Me.Rows(index),SYOfferingByFusedSubjectPKRow)
            End Get
        End Property
        
        Public Event SYOfferingByFusedSubjectPKRowChanging As SYOfferingByFusedSubjectPKRowChangeEventHandler
        
        Public Event SYOfferingByFusedSubjectPKRowChanged As SYOfferingByFusedSubjectPKRowChangeEventHandler
        
        Public Event SYOfferingByFusedSubjectPKRowDeleting As SYOfferingByFusedSubjectPKRowChangeEventHandler
        
        Public Event SYOfferingByFusedSubjectPKRowDeleted As SYOfferingByFusedSubjectPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYOfferingByFusedSubjectPKRow(ByVal row As SYOfferingByFusedSubjectPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYOfferingByFusedSubjectPKRow(ByVal dateCreated As Date, ByVal MainSubject As String, ByVal FusedSubject As String, ByVal Teacher As String, ByVal SchoolYear As String, ByVal SemesterName As String) As SYOfferingByFusedSubjectPKRow
            Dim rowSYOfferingByFusedSubjectPKRow As SYOfferingByFusedSubjectPKRow = CType(Me.NewRow,SYOfferingByFusedSubjectPKRow)
            Dim columnValuesArray() As Object = New Object() {dateCreated, MainSubject, FusedSubject, Teacher, SchoolYear, SemesterName}
            rowSYOfferingByFusedSubjectPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYOfferingByFusedSubjectPKRow)
            Return rowSYOfferingByFusedSubjectPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYOfferingByFusedSubjectPKDataTable = CType(MyBase.Clone,SYOfferingByFusedSubjectPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYOfferingByFusedSubjectPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndateCreated = MyBase.Columns("dateCreated")
            Me.columnMainSubject = MyBase.Columns("MainSubject")
            Me.columnFusedSubject = MyBase.Columns("FusedSubject")
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemesterName = MyBase.Columns("SemesterName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndateCreated = New Global.System.Data.DataColumn("dateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateCreated)
            Me.columnMainSubject = New Global.System.Data.DataColumn("MainSubject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainSubject)
            Me.columnFusedSubject = New Global.System.Data.DataColumn("FusedSubject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFusedSubject)
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemesterName = New Global.System.Data.DataColumn("SemesterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemesterName)
            Me.columnMainSubject.AllowDBNull = false
            Me.columnMainSubject.MaxLength = 1000
            Me.columnFusedSubject.AllowDBNull = false
            Me.columnFusedSubject.MaxLength = 1000
            Me.columnTeacher.AllowDBNull = false
            Me.columnTeacher.MaxLength = 50
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemesterName.AllowDBNull = false
            Me.columnSemesterName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYOfferingByFusedSubjectPKRow() As SYOfferingByFusedSubjectPKRow
            Return CType(Me.NewRow,SYOfferingByFusedSubjectPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYOfferingByFusedSubjectPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYOfferingByFusedSubjectPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYOfferingByFusedSubjectPKRowChangedEvent) Is Nothing) Then
                RaiseEvent SYOfferingByFusedSubjectPKRowChanged(Me, New SYOfferingByFusedSubjectPKRowChangeEvent(CType(e.Row,SYOfferingByFusedSubjectPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYOfferingByFusedSubjectPKRowChangingEvent) Is Nothing) Then
                RaiseEvent SYOfferingByFusedSubjectPKRowChanging(Me, New SYOfferingByFusedSubjectPKRowChangeEvent(CType(e.Row,SYOfferingByFusedSubjectPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYOfferingByFusedSubjectPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYOfferingByFusedSubjectPKRowDeleted(Me, New SYOfferingByFusedSubjectPKRowChangeEvent(CType(e.Row,SYOfferingByFusedSubjectPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYOfferingByFusedSubjectPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYOfferingByFusedSubjectPKRowDeleting(Me, New SYOfferingByFusedSubjectPKRowChangeEvent(CType(e.Row,SYOfferingByFusedSubjectPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYOfferingByFusedSubjectPKRow(ByVal row As SYOfferingByFusedSubjectPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYOfferingByFusedSubjectPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateEnrollmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateEnrollmentRow)
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnRoom As Global.System.Data.DataColumn
        
        Private columnStart As Global.System.Data.DataColumn
        
        Private columnEnd As Global.System.Data.DataColumn
        
        Private columnDays As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateEnrollment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateEnrollmentRow
            Get
                Return CType(Me.Rows(index),TemplateEnrollmentRow)
            End Get
        End Property
        
        Public Event TemplateEnrollmentRowChanging As TemplateEnrollmentRowChangeEventHandler
        
        Public Event TemplateEnrollmentRowChanged As TemplateEnrollmentRowChangeEventHandler
        
        Public Event TemplateEnrollmentRowDeleting As TemplateEnrollmentRowChangeEventHandler
        
        Public Event TemplateEnrollmentRowDeleted As TemplateEnrollmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateEnrollmentRow(ByVal row As TemplateEnrollmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateEnrollmentRow(ByVal GroupName As String, ByVal Code As String, ByVal Description As String, ByVal Room As String, ByVal Start As String, ByVal _End As String, ByVal Days As String, ByVal Units As String, ByVal Type As String) As TemplateEnrollmentRow
            Dim rowTemplateEnrollmentRow As TemplateEnrollmentRow = CType(Me.NewRow,TemplateEnrollmentRow)
            Dim columnValuesArray() As Object = New Object() {GroupName, Code, Description, Room, Start, _End, Days, Units, Type}
            rowTemplateEnrollmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateEnrollmentRow)
            Return rowTemplateEnrollmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateEnrollmentDataTable = CType(MyBase.Clone,TemplateEnrollmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateEnrollmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnRoom = MyBase.Columns("Room")
            Me.columnStart = MyBase.Columns("Start")
            Me.columnEnd = MyBase.Columns("End")
            Me.columnDays = MyBase.Columns("Days")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnRoom = New Global.System.Data.DataColumn("Room", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoom)
            Me.columnStart = New Global.System.Data.DataColumn("Start", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStart)
            Me.columnEnd = New Global.System.Data.DataColumn("End", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnEnd.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EndColumn")
            Me.columnEnd.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEnd")
            Me.columnEnd.ExtendedProperties.Add("Generator_UserColumnName", "End")
            MyBase.Columns.Add(Me.columnEnd)
            Me.columnDays = New Global.System.Data.DataColumn("Days", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateEnrollmentRow() As TemplateEnrollmentRow
            Return CType(Me.NewRow,TemplateEnrollmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateEnrollmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateEnrollmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateEnrollmentRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateEnrollmentRowChanged(Me, New TemplateEnrollmentRowChangeEvent(CType(e.Row,TemplateEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateEnrollmentRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateEnrollmentRowChanging(Me, New TemplateEnrollmentRowChangeEvent(CType(e.Row,TemplateEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateEnrollmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateEnrollmentRowDeleted(Me, New TemplateEnrollmentRowChangeEvent(CType(e.Row,TemplateEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateEnrollmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateEnrollmentRowDeleting(Me, New TemplateEnrollmentRowChangeEvent(CType(e.Row,TemplateEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateEnrollmentRow(ByVal row As TemplateEnrollmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateEnrollmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateStudentGradesDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateStudentGradesRow)
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnCourse As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnGrade As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnKeyThrough As Global.System.Data.DataColumn
        
        Private columnsempk As Global.System.Data.DataColumn
        
        Private columncoursepk As Global.System.Data.DataColumn
        
        Private columnsubjectpk As Global.System.Data.DataColumn
        
        Private columnsypk As Global.System.Data.DataColumn
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnExSubject As Global.System.Data.DataColumn
        
        Private columnExCollege As Global.System.Data.DataColumn
        
        Private columnCompletionGrade As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateStudentGrades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CourseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeyThroughColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyThrough
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sempkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsempk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coursepkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoursepk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subjectpkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubjectpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sypkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsypk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExCollegeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExCollege
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompletionGradeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompletionGrade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateStudentGradesRow
            Get
                Return CType(Me.Rows(index),TemplateStudentGradesRow)
            End Get
        End Property
        
        Public Event TemplateStudentGradesRowChanging As TemplateStudentGradesRowChangeEventHandler
        
        Public Event TemplateStudentGradesRowChanged As TemplateStudentGradesRowChangeEventHandler
        
        Public Event TemplateStudentGradesRowDeleting As TemplateStudentGradesRowChangeEventHandler
        
        Public Event TemplateStudentGradesRowDeleted As TemplateStudentGradesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateStudentGradesRow(ByVal row As TemplateStudentGradesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateStudentGradesRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Course As String, ByVal Subject As String, ByVal Grade As String, ByVal Units As String, ByVal KeyThrough As String, ByVal sempk As Integer, ByVal coursepk As Integer, ByVal subjectpk As Integer, ByVal sypk As Integer, ByVal pk As String, ByVal ExSubject As String, ByVal ExCollege As String, ByVal CompletionGrade As String) As TemplateStudentGradesRow
            Dim rowTemplateStudentGradesRow As TemplateStudentGradesRow = CType(Me.NewRow,TemplateStudentGradesRow)
            Dim columnValuesArray() As Object = New Object() {SchoolYear, Semester, Course, Subject, Grade, Units, KeyThrough, sempk, coursepk, subjectpk, sypk, pk, ExSubject, ExCollege, CompletionGrade}
            rowTemplateStudentGradesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateStudentGradesRow)
            Return rowTemplateStudentGradesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As String) As TemplateStudentGradesRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateStudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateStudentGradesDataTable = CType(MyBase.Clone,TemplateStudentGradesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateStudentGradesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnCourse = MyBase.Columns("Course")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnGrade = MyBase.Columns("Grade")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnKeyThrough = MyBase.Columns("KeyThrough")
            Me.columnsempk = MyBase.Columns("sempk")
            Me.columncoursepk = MyBase.Columns("coursepk")
            Me.columnsubjectpk = MyBase.Columns("subjectpk")
            Me.columnsypk = MyBase.Columns("sypk")
            Me.columnpk = MyBase.Columns("pk")
            Me.columnExSubject = MyBase.Columns("ExSubject")
            Me.columnExCollege = MyBase.Columns("ExCollege")
            Me.columnCompletionGrade = MyBase.Columns("CompletionGrade")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnCourse = New Global.System.Data.DataColumn("Course", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourse)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnGrade = New Global.System.Data.DataColumn("Grade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnKeyThrough = New Global.System.Data.DataColumn("KeyThrough", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyThrough)
            Me.columnsempk = New Global.System.Data.DataColumn("sempk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsempk)
            Me.columncoursepk = New Global.System.Data.DataColumn("coursepk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoursepk)
            Me.columnsubjectpk = New Global.System.Data.DataColumn("subjectpk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubjectpk)
            Me.columnsypk = New Global.System.Data.DataColumn("sypk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsypk)
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnExSubject = New Global.System.Data.DataColumn("ExSubject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExSubject)
            Me.columnExCollege = New Global.System.Data.DataColumn("ExCollege", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExCollege)
            Me.columnCompletionGrade = New Global.System.Data.DataColumn("CompletionGrade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompletionGrade)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AllowDBNull = false
            Me.columnpk.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateStudentGradesRow() As TemplateStudentGradesRow
            Return CType(Me.NewRow,TemplateStudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateStudentGradesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateStudentGradesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateStudentGradesRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateStudentGradesRowChanged(Me, New TemplateStudentGradesRowChangeEvent(CType(e.Row,TemplateStudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateStudentGradesRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateStudentGradesRowChanging(Me, New TemplateStudentGradesRowChangeEvent(CType(e.Row,TemplateStudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateStudentGradesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateStudentGradesRowDeleted(Me, New TemplateStudentGradesRowChangeEvent(CType(e.Row,TemplateStudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateStudentGradesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateStudentGradesRowDeleting(Me, New TemplateStudentGradesRowChangeEvent(CType(e.Row,TemplateStudentGradesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateStudentGradesRow(ByVal row As TemplateStudentGradesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateStudentGradesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateSYOfferingDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateSYOfferingRow)
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnResource As Global.System.Data.DataColumn
        
        Private columnstartTime As Global.System.Data.DataColumn
        
        Private columnendTime As Global.System.Data.DataColumn
        
        Private columndaySked As Global.System.Data.DataColumn
        
        Private columnMinStudents As Global.System.Data.DataColumn
        
        Private columnMaxStudents As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnenrolledFlag As Global.System.Data.DataColumn
        
        Private columnCurriculum As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateSYOffering"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property startTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property endTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnendTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property daySkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndaySked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxStudentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxStudents
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enrolledFlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenrolledFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurriculumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurriculum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateSYOfferingRow
            Get
                Return CType(Me.Rows(index),TemplateSYOfferingRow)
            End Get
        End Property
        
        Public Event TemplateSYOfferingRowChanging As TemplateSYOfferingRowChangeEventHandler
        
        Public Event TemplateSYOfferingRowChanged As TemplateSYOfferingRowChangeEventHandler
        
        Public Event TemplateSYOfferingRowDeleting As TemplateSYOfferingRowChangeEventHandler
        
        Public Event TemplateSYOfferingRowDeleted As TemplateSYOfferingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateSYOfferingRow(ByVal row As TemplateSYOfferingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateSYOfferingRow(ByVal Teacher As String, ByVal Resource As String, ByVal startTime As String, ByVal endTime As String, ByVal daySked As String, ByVal MinStudents As String, ByVal MaxStudents As String, ByVal Enrolled As String, ByVal Status As String, ByVal Subject As String, ByVal enrolledFlag As String, ByVal Curriculum As String) As TemplateSYOfferingRow
            Dim rowTemplateSYOfferingRow As TemplateSYOfferingRow = CType(Me.NewRow,TemplateSYOfferingRow)
            Dim columnValuesArray() As Object = New Object() {Teacher, Resource, startTime, endTime, daySked, MinStudents, MaxStudents, Enrolled, Status, Subject, enrolledFlag, Curriculum}
            rowTemplateSYOfferingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateSYOfferingRow)
            Return rowTemplateSYOfferingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateSYOfferingDataTable = CType(MyBase.Clone,TemplateSYOfferingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateSYOfferingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnResource = MyBase.Columns("Resource")
            Me.columnstartTime = MyBase.Columns("startTime")
            Me.columnendTime = MyBase.Columns("endTime")
            Me.columndaySked = MyBase.Columns("daySked")
            Me.columnMinStudents = MyBase.Columns("MinStudents")
            Me.columnMaxStudents = MyBase.Columns("MaxStudents")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnenrolledFlag = MyBase.Columns("enrolledFlag")
            Me.columnCurriculum = MyBase.Columns("Curriculum")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnResource = New Global.System.Data.DataColumn("Resource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResource)
            Me.columnstartTime = New Global.System.Data.DataColumn("startTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstartTime)
            Me.columnendTime = New Global.System.Data.DataColumn("endTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnendTime)
            Me.columndaySked = New Global.System.Data.DataColumn("daySked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndaySked)
            Me.columnMinStudents = New Global.System.Data.DataColumn("MinStudents", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinStudents)
            Me.columnMaxStudents = New Global.System.Data.DataColumn("MaxStudents", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxStudents)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnenrolledFlag = New Global.System.Data.DataColumn("enrolledFlag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenrolledFlag)
            Me.columnCurriculum = New Global.System.Data.DataColumn("Curriculum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurriculum)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateSYOfferingRow() As TemplateSYOfferingRow
            Return CType(Me.NewRow,TemplateSYOfferingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateSYOfferingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateSYOfferingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateSYOfferingRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateSYOfferingRowChanged(Me, New TemplateSYOfferingRowChangeEvent(CType(e.Row,TemplateSYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateSYOfferingRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateSYOfferingRowChanging(Me, New TemplateSYOfferingRowChangeEvent(CType(e.Row,TemplateSYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateSYOfferingRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateSYOfferingRowDeleted(Me, New TemplateSYOfferingRowChangeEvent(CType(e.Row,TemplateSYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateSYOfferingRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateSYOfferingRowDeleting(Me, New TemplateSYOfferingRowChangeEvent(CType(e.Row,TemplateSYOfferingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateSYOfferingRow(ByVal row As TemplateSYOfferingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateSYOfferingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateResourceLoadReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateResourceLoadReportRow)
        
        Private columnPK As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnDays As Global.System.Data.DataColumn
        
        Private columnstart As Global.System.Data.DataColumn
        
        Private columnend As Global.System.Data.DataColumn
        
        Private columnsorter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateResourceLoadReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property startColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property endColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sorterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsorter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateResourceLoadReportRow
            Get
                Return CType(Me.Rows(index),TemplateResourceLoadReportRow)
            End Get
        End Property
        
        Public Event TemplateResourceLoadReportRowChanging As TemplateResourceLoadReportRowChangeEventHandler
        
        Public Event TemplateResourceLoadReportRowChanged As TemplateResourceLoadReportRowChangeEventHandler
        
        Public Event TemplateResourceLoadReportRowDeleting As TemplateResourceLoadReportRowChangeEventHandler
        
        Public Event TemplateResourceLoadReportRowDeleted As TemplateResourceLoadReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateResourceLoadReportRow(ByVal row As TemplateResourceLoadReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateResourceLoadReportRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Teacher As String, ByVal Subject As String, ByVal Days As String, ByVal start As String, ByVal _end As String, ByVal sorter As Short) As TemplateResourceLoadReportRow
            Dim rowTemplateResourceLoadReportRow As TemplateResourceLoadReportRow = CType(Me.NewRow,TemplateResourceLoadReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Semester, Teacher, Subject, Days, start, _end, sorter}
            rowTemplateResourceLoadReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateResourceLoadReportRow)
            Return rowTemplateResourceLoadReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPK(ByVal PK As Integer) As TemplateResourceLoadReportRow
            Return CType(Me.Rows.Find(New Object() {PK}),TemplateResourceLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateResourceLoadReportDataTable = CType(MyBase.Clone,TemplateResourceLoadReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateResourceLoadReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPK = MyBase.Columns("PK")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnDays = MyBase.Columns("Days")
            Me.columnstart = MyBase.Columns("start")
            Me.columnend = MyBase.Columns("end")
            Me.columnsorter = MyBase.Columns("sorter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPK = New Global.System.Data.DataColumn("PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPK)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnDays = New Global.System.Data.DataColumn("Days", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDays)
            Me.columnstart = New Global.System.Data.DataColumn("start", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstart)
            Me.columnend = New Global.System.Data.DataColumn("end", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnend.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "endColumn")
            Me.columnend.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnend")
            Me.columnend.ExtendedProperties.Add("Generator_UserColumnName", "end")
            MyBase.Columns.Add(Me.columnend)
            Me.columnsorter = New Global.System.Data.DataColumn("sorter", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsorter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPK}, true))
            Me.columnPK.AutoIncrement = true
            Me.columnPK.AllowDBNull = false
            Me.columnPK.ReadOnly = true
            Me.columnPK.Unique = true
            Me.columnSchoolYear.AllowDBNull = false
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemester.AllowDBNull = false
            Me.columnSemester.MaxLength = 50
            Me.columnTeacher.AllowDBNull = false
            Me.columnTeacher.MaxLength = 500
            Me.columnSubject.AllowDBNull = false
            Me.columnSubject.MaxLength = 500
            Me.columnDays.AllowDBNull = false
            Me.columnDays.Caption = "Schedule"
            Me.columnDays.MaxLength = 1024
            Me.columnstart.AllowDBNull = false
            Me.columnstart.Caption = "Start"
            Me.columnend.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateResourceLoadReportRow() As TemplateResourceLoadReportRow
            Return CType(Me.NewRow,TemplateResourceLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateResourceLoadReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateResourceLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateResourceLoadReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadReportRowChanged(Me, New TemplateResourceLoadReportRowChangeEvent(CType(e.Row,TemplateResourceLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateResourceLoadReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadReportRowChanging(Me, New TemplateResourceLoadReportRowChangeEvent(CType(e.Row,TemplateResourceLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateResourceLoadReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadReportRowDeleted(Me, New TemplateResourceLoadReportRowChangeEvent(CType(e.Row,TemplateResourceLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateResourceLoadReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateResourceLoadReportRowDeleting(Me, New TemplateResourceLoadReportRowChangeEvent(CType(e.Row,TemplateResourceLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateResourceLoadReportRow(ByVal row As TemplateResourceLoadReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateResourceLoadReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TemplateSubjectLoadReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of TemplateSubjectLoadReportRow)
        
        Private columnpk As Global.System.Data.DataColumn
        
        Private columnSchoolYear As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnTeacher As Global.System.Data.DataColumn
        
        Private columnResource As Global.System.Data.DataColumn
        
        Private columnSchedule As Global.System.Data.DataColumn
        
        Private columnMin As Global.System.Data.DataColumn
        
        Private columnMax As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TemplateSubjectLoadReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeacherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacher
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchedule
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemplateSubjectLoadReportRow
            Get
                Return CType(Me.Rows(index),TemplateSubjectLoadReportRow)
            End Get
        End Property
        
        Public Event TemplateSubjectLoadReportRowChanging As TemplateSubjectLoadReportRowChangeEventHandler
        
        Public Event TemplateSubjectLoadReportRowChanged As TemplateSubjectLoadReportRowChangeEventHandler
        
        Public Event TemplateSubjectLoadReportRowDeleting As TemplateSubjectLoadReportRowChangeEventHandler
        
        Public Event TemplateSubjectLoadReportRowDeleted As TemplateSubjectLoadReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemplateSubjectLoadReportRow(ByVal row As TemplateSubjectLoadReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemplateSubjectLoadReportRow(ByVal SchoolYear As String, ByVal Semester As String, ByVal Teacher As String, ByVal Resource As String, ByVal Schedule As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer, ByVal status As String) As TemplateSubjectLoadReportRow
            Dim rowTemplateSubjectLoadReportRow As TemplateSubjectLoadReportRow = CType(Me.NewRow,TemplateSubjectLoadReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SchoolYear, Semester, Teacher, Resource, Schedule, Min, Max, Enrolled, status}
            rowTemplateSubjectLoadReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemplateSubjectLoadReportRow)
            Return rowTemplateSubjectLoadReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk(ByVal pk As Integer) As TemplateSubjectLoadReportRow
            Return CType(Me.Rows.Find(New Object() {pk}),TemplateSubjectLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TemplateSubjectLoadReportDataTable = CType(MyBase.Clone,TemplateSubjectLoadReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TemplateSubjectLoadReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk = MyBase.Columns("pk")
            Me.columnSchoolYear = MyBase.Columns("SchoolYear")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnTeacher = MyBase.Columns("Teacher")
            Me.columnResource = MyBase.Columns("Resource")
            Me.columnSchedule = MyBase.Columns("Schedule")
            Me.columnMin = MyBase.Columns("Min")
            Me.columnMax = MyBase.Columns("Max")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
            Me.columnstatus = MyBase.Columns("status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk = New Global.System.Data.DataColumn("pk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk)
            Me.columnSchoolYear = New Global.System.Data.DataColumn("SchoolYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolYear)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnTeacher = New Global.System.Data.DataColumn("Teacher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacher)
            Me.columnResource = New Global.System.Data.DataColumn("Resource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResource)
            Me.columnSchedule = New Global.System.Data.DataColumn("Schedule", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchedule)
            Me.columnMin = New Global.System.Data.DataColumn("Min", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMin)
            Me.columnMax = New Global.System.Data.DataColumn("Max", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMax)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpk}, true))
            Me.columnpk.AutoIncrement = true
            Me.columnpk.AllowDBNull = false
            Me.columnpk.ReadOnly = true
            Me.columnpk.Unique = true
            Me.columnSchoolYear.MaxLength = 50
            Me.columnSemester.MaxLength = 50
            Me.columnTeacher.MaxLength = 50
            Me.columnResource.MaxLength = 50
            Me.columnSchedule.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemplateSubjectLoadReportRow() As TemplateSubjectLoadReportRow
            Return CType(Me.NewRow,TemplateSubjectLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TemplateSubjectLoadReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TemplateSubjectLoadReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemplateSubjectLoadReportRowChangedEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadReportRowChanged(Me, New TemplateSubjectLoadReportRowChangeEvent(CType(e.Row,TemplateSubjectLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemplateSubjectLoadReportRowChangingEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadReportRowChanging(Me, New TemplateSubjectLoadReportRowChangeEvent(CType(e.Row,TemplateSubjectLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemplateSubjectLoadReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadReportRowDeleted(Me, New TemplateSubjectLoadReportRowChangeEvent(CType(e.Row,TemplateSubjectLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemplateSubjectLoadReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemplateSubjectLoadReportRowDeleting(Me, New TemplateSubjectLoadReportRowChangeEvent(CType(e.Row,TemplateSubjectLoadReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemplateSubjectLoadReportRow(ByVal row As TemplateSubjectLoadReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TemplateSubjectLoadReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WhiteFormMiscChargesDataTable
        Inherits Global.System.Data.TypedTableBase(Of WhiteFormMiscChargesRow)
        
        Private columnMiscNameCol1 As Global.System.Data.DataColumn
        
        Private columnAmountCol1 As Global.System.Data.DataColumn
        
        Private columnMiscNameCol2 As Global.System.Data.DataColumn
        
        Private columnAmountCol2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WhiteFormMiscCharges"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiscNameCol1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiscNameCol1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountCol1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountCol1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiscNameCol2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiscNameCol2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountCol2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountCol2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WhiteFormMiscChargesRow
            Get
                Return CType(Me.Rows(index),WhiteFormMiscChargesRow)
            End Get
        End Property
        
        Public Event WhiteFormMiscChargesRowChanging As WhiteFormMiscChargesRowChangeEventHandler
        
        Public Event WhiteFormMiscChargesRowChanged As WhiteFormMiscChargesRowChangeEventHandler
        
        Public Event WhiteFormMiscChargesRowDeleting As WhiteFormMiscChargesRowChangeEventHandler
        
        Public Event WhiteFormMiscChargesRowDeleted As WhiteFormMiscChargesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWhiteFormMiscChargesRow(ByVal row As WhiteFormMiscChargesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWhiteFormMiscChargesRow(ByVal MiscNameCol1 As String, ByVal AmountCol1 As Single, ByVal MiscNameCol2 As String, ByVal AmountCol2 As Single) As WhiteFormMiscChargesRow
            Dim rowWhiteFormMiscChargesRow As WhiteFormMiscChargesRow = CType(Me.NewRow,WhiteFormMiscChargesRow)
            Dim columnValuesArray() As Object = New Object() {MiscNameCol1, AmountCol1, MiscNameCol2, AmountCol2}
            rowWhiteFormMiscChargesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWhiteFormMiscChargesRow)
            Return rowWhiteFormMiscChargesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WhiteFormMiscChargesDataTable = CType(MyBase.Clone,WhiteFormMiscChargesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WhiteFormMiscChargesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMiscNameCol1 = MyBase.Columns("MiscNameCol1")
            Me.columnAmountCol1 = MyBase.Columns("AmountCol1")
            Me.columnMiscNameCol2 = MyBase.Columns("MiscNameCol2")
            Me.columnAmountCol2 = MyBase.Columns("AmountCol2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMiscNameCol1 = New Global.System.Data.DataColumn("MiscNameCol1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiscNameCol1)
            Me.columnAmountCol1 = New Global.System.Data.DataColumn("AmountCol1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountCol1)
            Me.columnMiscNameCol2 = New Global.System.Data.DataColumn("MiscNameCol2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiscNameCol2)
            Me.columnAmountCol2 = New Global.System.Data.DataColumn("AmountCol2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountCol2)
            Me.columnMiscNameCol1.DefaultValue = CType("",String)
            Me.columnAmountCol1.DefaultValue = CType(0!,Single)
            Me.columnMiscNameCol2.DefaultValue = CType("",String)
            Me.columnAmountCol2.DefaultValue = CType(0!,Single)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWhiteFormMiscChargesRow() As WhiteFormMiscChargesRow
            Return CType(Me.NewRow,WhiteFormMiscChargesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WhiteFormMiscChargesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WhiteFormMiscChargesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WhiteFormMiscChargesRowChangedEvent) Is Nothing) Then
                RaiseEvent WhiteFormMiscChargesRowChanged(Me, New WhiteFormMiscChargesRowChangeEvent(CType(e.Row,WhiteFormMiscChargesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WhiteFormMiscChargesRowChangingEvent) Is Nothing) Then
                RaiseEvent WhiteFormMiscChargesRowChanging(Me, New WhiteFormMiscChargesRowChangeEvent(CType(e.Row,WhiteFormMiscChargesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WhiteFormMiscChargesRowDeletedEvent) Is Nothing) Then
                RaiseEvent WhiteFormMiscChargesRowDeleted(Me, New WhiteFormMiscChargesRowChangeEvent(CType(e.Row,WhiteFormMiscChargesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WhiteFormMiscChargesRowDeletingEvent) Is Nothing) Then
                RaiseEvent WhiteFormMiscChargesRowDeleting(Me, New WhiteFormMiscChargesRowChangeEvent(CType(e.Row,WhiteFormMiscChargesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWhiteFormMiscChargesRow(ByVal row As WhiteFormMiscChargesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WhiteFormMiscChargesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BrokenHoursTemplateDataTable
        Inherits Global.System.Data.TypedTableBase(Of BrokenHoursTemplateRow)
        
        Private columnSubjectDesc As Global.System.Data.DataColumn
        
        Private columnDayTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BrokenHoursTemplate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDayTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BrokenHoursTemplateRow
            Get
                Return CType(Me.Rows(index),BrokenHoursTemplateRow)
            End Get
        End Property
        
        Public Event BrokenHoursTemplateRowChanging As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowChanged As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowDeleting As BrokenHoursTemplateRowChangeEventHandler
        
        Public Event BrokenHoursTemplateRowDeleted As BrokenHoursTemplateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBrokenHoursTemplateRow(ByVal row As BrokenHoursTemplateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBrokenHoursTemplateRow(ByVal SubjectDesc As String, ByVal DayTime As String) As BrokenHoursTemplateRow
            Dim rowBrokenHoursTemplateRow As BrokenHoursTemplateRow = CType(Me.NewRow,BrokenHoursTemplateRow)
            Dim columnValuesArray() As Object = New Object() {SubjectDesc, DayTime}
            rowBrokenHoursTemplateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBrokenHoursTemplateRow)
            Return rowBrokenHoursTemplateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BrokenHoursTemplateDataTable = CType(MyBase.Clone,BrokenHoursTemplateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BrokenHoursTemplateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSubjectDesc = MyBase.Columns("SubjectDesc")
            Me.columnDayTime = MyBase.Columns("DayTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSubjectDesc = New Global.System.Data.DataColumn("SubjectDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectDesc)
            Me.columnDayTime = New Global.System.Data.DataColumn("DayTime", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDayTime)
            Me.columnSubjectDesc.DefaultValue = CType("",String)
            Me.columnDayTime.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBrokenHoursTemplateRow() As BrokenHoursTemplateRow
            Return CType(Me.NewRow,BrokenHoursTemplateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BrokenHoursTemplateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BrokenHoursTemplateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrokenHoursTemplateRowChangedEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowChanged(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrokenHoursTemplateRowChangingEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowChanging(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrokenHoursTemplateRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowDeleted(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrokenHoursTemplateRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrokenHoursTemplateRowDeleting(Me, New BrokenHoursTemplateRowChangeEvent(CType(e.Row,BrokenHoursTemplateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBrokenHoursTemplateRow(ByVal row As BrokenHoursTemplateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRegistrar = New dsRegistrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BrokenHoursTemplateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudents As StudentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudents = CType(Me.Table,StudentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudents.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudents.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudents.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudents.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudents.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudents.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudents.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudents.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudents.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudents.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudents.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudents.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudents.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudents.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudents.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudents.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudents.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudents.Edubackgrounddate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.genderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gender' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.genderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableStudents.regDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regDate' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.regDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudents.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudents.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgenderNull() As Boolean
            Return Me.IsNull(Me.tableStudents.genderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgenderNull()
            Me(Me.tableStudents.genderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregDateNull() As Boolean
            Return Me.IsNull(Me.tableStudents.regDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregDateNull()
            Me(Me.tableStudents.regDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjects As EnrollSubjectsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjects = CType(Me.Table,EnrollSubjectsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjects.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjects.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjects.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjects.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingSelectRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingSelect As SYOfferingSelectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingSelect = CType(Me.Table,SYOfferingSelectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect.closedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'closed' in table 'SYOfferingSelect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect.closedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclosedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect.closedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclosedNull()
            Me(Me.tableSYOfferingSelect.closedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsCountRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsCount As EnrollSubjectsCountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsCount = CType(Me.Table,EnrollSubjectsCountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollSubjectsCount.StudentCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentCount' in table 'EnrollSubjectsCount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollSubjectsCount.StudentCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentCountNull() As Boolean
            Return Me.IsNull(Me.tableEnrollSubjectsCount.StudentCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentCountNull()
            Me(Me.tableEnrollSubjectsCount.StudentCountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingbyPK As SYOfferingbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingbyPK = CType(Me.Table,SYOfferingbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyPK.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property requested() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingbyPK.requestedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'requested' in table 'SYOfferingbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.requestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingbyPK.closedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'closed' in table 'SYOfferingbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.closedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isFused() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingbyPK.isFusedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isFused' in table 'SYOfferingbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.isFusedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isSpecialTutorial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingbyPK.isSpecialTutorialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isSpecialTutorial' in table 'SYOfferingbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingbyPK.isSpecialTutorialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrequestedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingbyPK.requestedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrequestedNull()
            Me(Me.tableSYOfferingbyPK.requestedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclosedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingbyPK.closedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclosedNull()
            Me(Me.tableSYOfferingbyPK.closedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisFusedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingbyPK.isFusedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisFusedNull()
            Me(Me.tableSYOfferingbyPK.isFusedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisSpecialTutorialNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingbyPK.isSpecialTutorialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisSpecialTutorialNull()
            Me(Me.tableSYOfferingbyPK.isSpecialTutorialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LedgerSearchRow
        Inherits Global.System.Data.DataRow
        
        Private tableLedgerSearch As LedgerSearchDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedgerSearch = CType(Me.Table,LedgerSearchDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.ledgerpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.ledgerpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerdate() As Date
            Get
                Return CType(Me(Me.tableLedgerSearch.ledgerdateColumn),Date)
            End Get
            Set
                Me(Me.tableLedgerSearch.ledgerdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref() As String
            Get
                Return CType(Me(Me.tableLedgerSearch.refColumn),String)
            End Get
            Set
                Me(Me.tableLedgerSearch.refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property linetype() As String
            Get
                Return CType(Me(Me.tableLedgerSearch.linetypeColumn),String)
            End Get
            Set
                Me(Me.tableLedgerSearch.linetypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.trpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.trpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Return CType(Me(Me.tableLedgerSearch.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableLedgerSearch.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property balance() As Decimal
            Get
                Return CType(Me(Me.tableLedgerSearch.balanceColumn),Decimal)
            End Get
            Set
                Me(Me.tableLedgerSearch.balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sourcepk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.sourcepkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.sourcepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tableLedgerSearch.remarksColumn),String)
            End Get
            Set
                Me(Me.tableLedgerSearch.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subject_coursepk() As Integer
            Get
                Return CType(Me(Me.tableLedgerSearch.subject_coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerSearch.subject_coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LedgerbyTRTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableLedgerbyTRType As LedgerbyTRTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedgerbyTRType = CType(Me.Table,LedgerbyTRTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.ledgerpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.ledgerpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerdate() As Date
            Get
                Return CType(Me(Me.tableLedgerbyTRType.ledgerdateColumn),Date)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.ledgerdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref() As String
            Get
                Return CType(Me(Me.tableLedgerbyTRType.refColumn),String)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property linetype() As String
            Get
                Return CType(Me(Me.tableLedgerbyTRType.linetypeColumn),String)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.linetypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.trpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.trpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Return CType(Me(Me.tableLedgerbyTRType.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property balance() As Decimal
            Get
                Return CType(Me(Me.tableLedgerbyTRType.balanceColumn),Decimal)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sourcepk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.sourcepkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.sourcepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tableLedgerbyTRType.remarksColumn),String)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subject_coursepk() As Integer
            Get
                Return CType(Me(Me.tableLedgerbyTRType.subject_coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerbyTRType.subject_coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingbyResourceRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingbyResource As SYOfferingbyResourceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingbyResource = CType(Me.Table,SYOfferingbyResourceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbyResource.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbyResource.MaxStudentsColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateResourceLoadRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateResourceLoad As TemplateResourceLoadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateResourceLoad = CType(Me.Table,TemplateResourceLoadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.SubjectColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.TeacherColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Schedule() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.ScheduleColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.ScheduleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Min() As Integer
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.MinColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.MinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Max() As Integer
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.MaxColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.MaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As Integer
            Get
                Return CType(Me(Me.tableTemplateResourceLoad.EnrolledColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateResourceLoad.EnrolledColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateSubjectLoadRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateSubjectLoad As TemplateSubjectLoadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateSubjectLoad = CType(Me.Table,TemplateSubjectLoadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTemplateSubjectLoad.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.SchoolYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolYear' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.TeacherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Teacher' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resource() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.ResourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resource' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.ResourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Schedule() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.ScheduleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Schedule' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.ScheduleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Min() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.MinColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Min' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.MinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Max() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.MaxColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Max' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.MaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoad.EnrolledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Enrolled' in table 'TemplateSubjectLoad' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoad.EnrolledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolYearNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.SchoolYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolYearNull()
            Me(Me.tableTemplateSubjectLoad.SchoolYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableTemplateSubjectLoad.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeacherNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.TeacherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeacherNull()
            Me(Me.tableTemplateSubjectLoad.TeacherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.ResourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceNull()
            Me(Me.tableTemplateSubjectLoad.ResourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.ScheduleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleNull()
            Me(Me.tableTemplateSubjectLoad.ScheduleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.MinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinNull()
            Me(Me.tableTemplateSubjectLoad.MinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaxNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.MaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaxNull()
            Me(Me.tableTemplateSubjectLoad.MaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrolledNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoad.EnrolledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrolledNull()
            Me(Me.tableTemplateSubjectLoad.EnrolledColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingbySubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingbySubject As SYOfferingbySubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingbySubject = CType(Me.Table,SYOfferingbySubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingbySubject.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingbySubject.MaxStudentsColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentsbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentsbyPK As StudentsbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentsbyPK = CType(Me.Table,StudentsbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentPK() As Integer
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentPKColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Address3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Address3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.PhoneColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.MotherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.MotherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FatherName() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.FatherNameColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.FatherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.GuardianColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.GuardianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Birthdate() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.BirthdateColumn),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate1() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate1Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate2() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate2Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate3() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate3Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackground4() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackground4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackground4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edubackgrounddate4() As String
            Get
                Return CType(Me(Me.tableStudentsbyPK.Edubackgrounddate4Column),String)
            End Get
            Set
                Me(Me.tableStudentsbyPK.Edubackgrounddate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentsbyPK.StudentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentType' in table 'StudentsbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentsbyPK.StudentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableStudentsbyPK.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentTypeNull() As Boolean
            Return Me.IsNull(Me.tableStudentsbyPK.StudentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentTypeNull()
            Me(Me.tableStudentsbyPK.StudentTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentGradesRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentGrades As StudentGradesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentGrades = CType(Me.Table,StudentGradesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableStudentGrades.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableStudentGrades.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableStudentGrades.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableStudentGrades.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableStudentGrades.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableStudentGrades.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableStudentGrades.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentGrades.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableStudentGrades.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableStudentGrades.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableStudentGrades.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableStudentGrades.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableStudentGrades.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGrades.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.exSubjectUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectUnits' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.exSubjectUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.exCreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCreditGroup' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.exCreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.exSubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectCode' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.exSubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCompletionGrade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.exCompletionGradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCompletionGrade' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.exCompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isPrevSchoolGrade() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.isPrevSchoolGradeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isPrevSchoolGrade' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.isPrevSchoolGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGrades.exUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exUnits' in table 'StudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGrades.exUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectUnitsNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.exSubjectUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectUnitsNull()
            Me(Me.tableStudentGrades.exSubjectUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.exCreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCreditGroupNull()
            Me(Me.tableStudentGrades.exCreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.exSubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectCodeNull()
            Me(Me.tableStudentGrades.exSubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.exCompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCompletionGradeNull()
            Me(Me.tableStudentGrades.exCompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisPrevSchoolGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.isPrevSchoolGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisPrevSchoolGradeNull()
            Me(Me.tableStudentGrades.isPrevSchoolGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexUnitsNull() As Boolean
            Return Me.IsNull(Me.tableStudentGrades.exUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexUnitsNull()
            Me(Me.tableStudentGrades.exUnitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateGradeEntryRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateGradeEntry As TemplateGradeEntryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateGradeEntry = CType(Me.Table,TemplateGradeEntryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTemplateGradeEntry.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateGradeEntry.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Student() As String
            Get
                Return CType(Me(Me.tableTemplateGradeEntry.StudentColumn),String)
            End Get
            Set
                Me(Me.tableTemplateGradeEntry.StudentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Studentpk() As Integer
            Get
                Return CType(Me(Me.tableTemplateGradeEntry.StudentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateGradeEntry.StudentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade() As Decimal
            Get
                Return CType(Me(Me.tableTemplateGradeEntry.GradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableTemplateGradeEntry.GradeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingSelect2Row
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingSelect2 As SYOfferingSelect2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingSelect2 = CType(Me.Table,SYOfferingSelect2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resource() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.resourceColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.resourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semesterpk() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.semesterpkColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.semesterpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.mondayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.mondayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.tuesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.tuesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wednesday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.wednesdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.wednesdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thursday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.thursdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.thursdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property friday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.fridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.fridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saturday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.saturdayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.saturdayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.sundayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.sundayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.sunfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.sunfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sunto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.suntoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.suntoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.monfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.monfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.montoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.tuesfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.tuesfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tuesto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.tuestoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.tuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.wedfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.wedfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property wedto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.wedtoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.wedtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thufrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.thufromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.thufromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property thuto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.thutoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.thutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frifrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.frifromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.frifromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property frito() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.fritoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.fritoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satfrom() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.satfromColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.satfromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satto() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.sattoColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.sattoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alternatefriday() As Boolean
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.alternatefridayColumn),Boolean)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.alternatefridayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property semid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.semidColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.semidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherid() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.teacheridColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.teacheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.MinStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingSelect2.MaxStudentsColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property closed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.closedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'closed' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.closedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property requested() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.requestedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'requested' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.requestedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.SubjectNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectName' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.SubjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsFused() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.IsFusedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsFused' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.IsFusedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSpecialTutorial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.IsSpecialTutorialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsSpecialTutorial' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.IsSpecialTutorialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingSelect2.subjectcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectcode' in table 'SYOfferingSelect2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingSelect2.subjectcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclosedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.closedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclosedNull()
            Me(Me.tableSYOfferingSelect2.closedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrequestedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.requestedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrequestedNull()
            Me(Me.tableSYOfferingSelect2.requestedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNameNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.SubjectNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNameNull()
            Me(Me.tableSYOfferingSelect2.SubjectNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsFusedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.IsFusedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsFusedNull()
            Me(Me.tableSYOfferingSelect2.IsFusedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsSpecialTutorialNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.IsSpecialTutorialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsSpecialTutorialNull()
            Me(Me.tableSYOfferingSelect2.IsSpecialTutorialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectcodeNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingSelect2.subjectcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectcodeNull()
            Me(Me.tableSYOfferingSelect2.subjectcodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsbySyOPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsbySyOPK As EnrollSubjectsbySyOPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsbySyOPK = CType(Me.Table,EnrollSubjectsbySyOPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbySyOPK.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEnrollSubjectsbySyOPK.StudentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentName' in table 'EnrollSubjectsbySyOPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollSubjectsbySyOPK.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentNameNull() As Boolean
            Return Me.IsNull(Me.tableEnrollSubjectsbySyOPK.StudentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentNameNull()
            Me(Me.tableEnrollSubjectsbySyOPK.StudentNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BlockSectionTuitionRow
        Inherits Global.System.Data.DataRow
        
        Private tableBlockSectionTuition As BlockSectionTuitionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBlockSectionTuition = CType(Me.Table,BlockSectionTuitionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlockSectionPK() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.BlockSectionPKColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.BlockSectionPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEM() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.SEMColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.SEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.courseColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.subjectidColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.subjectidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eduyear() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuition.eduyearColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.eduyearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property effectivedate() As Date
            Get
                Return CType(Me(Me.tableBlockSectionTuition.effectivedateColumn),Date)
            End Get
            Set
                Me(Me.tableBlockSectionTuition.effectivedateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollHeaderRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollHeader As EnrollHeaderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollHeader = CType(Me.Table,EnrollHeaderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeader.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeader.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeader.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeader.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeader.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeader.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollHeader.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollHeader.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tableEnrollHeader.remarksColumn),String)
            End Get
            Set
                Me(Me.tableEnrollHeader.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEnrollHeader.yrlevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yrlevel' in table 'EnrollHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollHeader.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsyrlevelNull() As Boolean
            Return Me.IsNull(Me.tableEnrollHeader.yrlevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetyrlevelNull()
            Me(Me.tableEnrollHeader.yrlevelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BlockSectionTuitionbyCourseRow
        Inherits Global.System.Data.DataRow
        
        Private tableBlockSectionTuitionbyCourse As BlockSectionTuitionbyCourseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBlockSectionTuitionbyCourse = CType(Me.Table,BlockSectionTuitionbyCourseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlockSectionPK() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.BlockSectionPKColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.BlockSectionPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEM() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.SEMColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.SEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property course() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.courseColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.courseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectid() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.subjectidColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.subjectidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eduyear() As Integer
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.eduyearColumn),Integer)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.eduyearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property effectivedate() As Date
            Get
                Return CType(Me(Me.tableBlockSectionTuitionbyCourse.effectivedateColumn),Date)
            End Get
            Set
                Me(Me.tableBlockSectionTuitionbyCourse.effectivedateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentGradesbyStudentRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentGradesbyStudent As StudentGradesbyStudentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentGradesbyStudent = CType(Me.Table,StudentGradesbyStudentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudent.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudent.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsbyClassRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsbyClass As EnrollSubjectsbyClassDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsbyClass = CType(Me.Table,EnrollSubjectsbyClassDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyClass.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyClass.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SpecialCourseGradesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpecialCourseGrades As SpecialCourseGradesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialCourseGrades = CType(Me.Table,SpecialCourseGradesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGrades.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGrades.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGrades.SPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGrades.SPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGrades.EPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGrades.EPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYOfferingPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpecialCourseGrades.SYOfferingPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYOfferingPK' in table 'SpecialCourseGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialCourseGrades.SYOfferingPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYOfferingPKNull() As Boolean
            Return Me.IsNull(Me.tableSpecialCourseGrades.SYOfferingPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYOfferingPKNull()
            Me(Me.tableSpecialCourseGrades.SYOfferingPKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SpecialCourseGradesbySPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpecialCourseGradesbySPK As SpecialCourseGradesbySPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialCourseGradesbySPK = CType(Me.Table,SpecialCourseGradesbySPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbySPK.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbySPK.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbySPK.SPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbySPK.SPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbySPK.EPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbySPK.EPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYOfferingPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpecialCourseGradesbySPK.SYOfferingPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYOfferingPK' in table 'SpecialCourseGradesbySPK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbySPK.SYOfferingPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYOfferingPKNull() As Boolean
            Return Me.IsNull(Me.tableSpecialCourseGradesbySPK.SYOfferingPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYOfferingPKNull()
            Me(Me.tableSpecialCourseGradesbySPK.SYOfferingPKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsbyPkRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsbyPk As EnrollSubjectsbyPkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsbyPk = CType(Me.Table,EnrollSubjectsbyPkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsbyPk.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsbyPk.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SpecialCourseGradesbyEPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSpecialCourseGradesbyEPK As SpecialCourseGradesbyEPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialCourseGradesbyEPK = CType(Me.Table,SpecialCourseGradesbyEPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbyEPK.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbyEPK.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbyEPK.SPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbyEPK.SPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EPK() As Integer
            Get
                Return CType(Me(Me.tableSpecialCourseGradesbyEPK.EPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbyEPK.EPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYOfferingPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSpecialCourseGradesbyEPK.SYOfferingPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYOfferingPK' in table 'SpecialCourseGradesbyEPK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialCourseGradesbyEPK.SYOfferingPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYOfferingPKNull() As Boolean
            Return Me.IsNull(Me.tableSpecialCourseGradesbyEPK.SYOfferingPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYOfferingPKNull()
            Me(Me.tableSpecialCourseGradesbyEPK.SYOfferingPKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WhiteFormRow
        Inherits Global.System.Data.DataRow
        
        Private tableWhiteForm As WhiteFormDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWhiteForm = CType(Me.Table,WhiteFormDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerpk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.ledgerpkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.ledgerpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ledgerdate() As Date
            Get
                Return CType(Me(Me.tableWhiteForm.ledgerdateColumn),Date)
            End Get
            Set
                Me(Me.tableWhiteForm.ledgerdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref() As String
            Get
                Return CType(Me(Me.tableWhiteForm.refColumn),String)
            End Get
            Set
                Me(Me.tableWhiteForm.refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property linetype() As String
            Get
                Return CType(Me(Me.tableWhiteForm.linetypeColumn),String)
            End Get
            Set
                Me(Me.tableWhiteForm.linetypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Return CType(Me(Me.tableWhiteForm.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableWhiteForm.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property balance() As Decimal
            Get
                Return CType(Me(Me.tableWhiteForm.balanceColumn),Decimal)
            End Get
            Set
                Me(Me.tableWhiteForm.balanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableWhiteForm.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableWhiteForm.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tableWhiteForm.remarksColumn),String)
            End Get
            Set
                Me(Me.tableWhiteForm.remarksColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClassListRow
        Inherits Global.System.Data.DataRow
        
        Private tableClassList As ClassListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassList = CType(Me.Table,ClassListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableClassList.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableClassList.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableClassList.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableClassList.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableClassList.dateColumn),Date)
            End Get
            Set
                Me(Me.tableClassList.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableClassList.transrefColumn),String)
            End Get
            Set
                Me(Me.tableClassList.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableClassList.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableClassList.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableClassList.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableClassList.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableClassList.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentGradesbyStudentSubjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentGradesbyStudentSubject As StudentGradesbyStudentSubjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentGradesbyStudentSubject = CType(Me.Table,StudentGradesbyStudentSubjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesbyStudentSubject.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isPrevSchoolGrade() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesbyStudentSubject.isPrevSchoolGradeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isPrevSchoolGrade' in table 'StudentGradesbyStudentSubject'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.isPrevSchoolGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCompletionGrade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesbyStudentSubject.exCompletionGradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCompletionGrade' in table 'StudentGradesbyStudentSubject'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exCompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesbyStudentSubject.exSubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectCode' in table 'StudentGradesbyStudentSubject' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exSubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesbyStudentSubject.exCreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCreditGroup' in table 'StudentGradesbyStudentSubject' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exCreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesbyStudentSubject.exSubjectUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectUnits' in table 'StudentGradesbyStudentSubject' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesbyStudentSubject.exSubjectUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisPrevSchoolGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesbyStudentSubject.isPrevSchoolGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisPrevSchoolGradeNull()
            Me(Me.tableStudentGradesbyStudentSubject.isPrevSchoolGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesbyStudentSubject.exCompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCompletionGradeNull()
            Me(Me.tableStudentGradesbyStudentSubject.exCompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesbyStudentSubject.exSubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectCodeNull()
            Me(Me.tableStudentGradesbyStudentSubject.exSubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesbyStudentSubject.exCreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCreditGroupNull()
            Me(Me.tableStudentGradesbyStudentSubject.exCreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectUnitsNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesbyStudentSubject.exSubjectUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectUnitsNull()
            Me(Me.tableStudentGradesbyStudentSubject.exSubjectUnitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsCostRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsCost As EnrollSubjectsCostDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsCost = CType(Me.Table,EnrollSubjectsCostDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property headerpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.headerpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.headerpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.yrlevelColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.trpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.trpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantity() As Single
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.quantityColumn),Single)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitamount() As Decimal
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.unitamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.unitamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property linenumber() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCost.linenumberColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCost.linenumberColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjectsCostbyPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjectsCostbyPK As EnrollSubjectsCostbyPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjectsCostbyPK = CType(Me.Table,EnrollSubjectsCostbyPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property headerpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.headerpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.headerpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yrlevel() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.yrlevelColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.yrlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.trpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.trpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantity() As Single
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.quantityColumn),Single)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitamount() As Decimal
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.unitamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.unitamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Decimal
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.amountColumn),Decimal)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property linenumber() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjectsCostbyPK.linenumberColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.linenumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isTuition() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEnrollSubjectsCostbyPK.isTuitionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isTuition' in table 'EnrollSubjectsCostbyPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEnrollSubjectsCostbyPK.isTuitionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisTuitionNull() As Boolean
            Return Me.IsNull(Me.tableEnrollSubjectsCostbyPK.isTuitionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisTuitionNull()
            Me(Me.tableEnrollSubjectsCostbyPK.isTuitionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudentGradesByPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudentGradesByPK As StudentGradesByPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudentGradesByPK = CType(Me.Table,StudentGradesByPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datein() As Date
            Get
                Return CType(Me(Me.tableStudentGradesByPK.dateinColumn),Date)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.dateinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grade() As Decimal
            Get
                Return CType(Me(Me.tableStudentGradesByPK.gradeColumn),Decimal)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.gradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keythrough() As String
            Get
                Return CType(Me(Me.tableStudentGradesByPK.keythroughColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.keythroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.sypkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property teacherpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.teacherpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.teacherpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extSubjectID() As String
            Get
                Return CType(Me(Me.tableStudentGradesByPK.extSubjectIDColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.extSubjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectDesc() As String
            Get
                Return CType(Me(Me.tableStudentGradesByPK.exSubjectDescColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exSubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectGrade() As String
            Get
                Return CType(Me(Me.tableStudentGradesByPK.exSubjectGradeColumn),String)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exSubjectGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableStudentGradesByPK.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableStudentGradesByPK.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.exSubjectUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectUnits' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exSubjectUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCreditGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.exCreditGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCreditGroup' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exCreditGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exSubjectCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.exSubjectCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exSubjectCode' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exSubjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exCompletionGrade() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.exCompletionGradeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exCompletionGrade' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exCompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isPrevSchoolGrade() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.isPrevSchoolGradeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isPrevSchoolGrade' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.isPrevSchoolGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property exUnits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudentGradesByPK.exUnitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'exUnits' in table 'StudentGradesByPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudentGradesByPK.exUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectUnitsNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.exSubjectUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectUnitsNull()
            Me(Me.tableStudentGradesByPK.exSubjectUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCreditGroupNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.exCreditGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCreditGroupNull()
            Me(Me.tableStudentGradesByPK.exCreditGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexSubjectCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.exSubjectCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexSubjectCodeNull()
            Me(Me.tableStudentGradesByPK.exSubjectCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.exCompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexCompletionGradeNull()
            Me(Me.tableStudentGradesByPK.exCompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsisPrevSchoolGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.isPrevSchoolGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetisPrevSchoolGradeNull()
            Me(Me.tableStudentGradesByPK.isPrevSchoolGradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexUnitsNull() As Boolean
            Return Me.IsNull(Me.tableStudentGradesByPK.exUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexUnitsNull()
            Me(Me.tableStudentGradesByPK.exUnitsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingExtraHoursRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingExtraHours As SYOfferingExtraHoursDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingExtraHours = CType(Me.Table,SYOfferingExtraHoursDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syOfferingExtraHoursPK() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingExtraHours.syOfferingExtraHoursPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.syOfferingExtraHoursPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syOfferingFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.syOfferingFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'syOfferingFK' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.syOfferingFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dayType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.dayTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dayType' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.dayTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property timeStart() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.timeStartColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timeStart' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.timeStartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property timeEnd() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.timeEndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timeEnd' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.timeEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inactive() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.inactiveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'inactive' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.inactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHours.dateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateCreated' in table 'SYOfferingExtraHours' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHours.dateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssyOfferingFKNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.syOfferingFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsyOfferingFKNull()
            Me(Me.tableSYOfferingExtraHours.syOfferingFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdayTypeNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.dayTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdayTypeNull()
            Me(Me.tableSYOfferingExtraHours.dayTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstimeStartNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.timeStartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettimeStartNull()
            Me(Me.tableSYOfferingExtraHours.timeStartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstimeEndNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.timeEndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettimeEndNull()
            Me(Me.tableSYOfferingExtraHours.timeEndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.inactiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinactiveNull()
            Me(Me.tableSYOfferingExtraHours.inactiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHours.dateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateCreatedNull()
            Me(Me.tableSYOfferingExtraHours.dateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingExtraHoursByFKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingExtraHoursByFK As SYOfferingExtraHoursByFKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingExtraHoursByFK = CType(Me.Table,SYOfferingExtraHoursByFKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syOfferingExtraHoursPK() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingExtraHoursByFK.syOfferingExtraHoursPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.syOfferingExtraHoursPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syOfferingFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.syOfferingFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'syOfferingFK' in table 'SYOfferingExtraHoursByFK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.syOfferingFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dayType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.dayTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dayType' in table 'SYOfferingExtraHoursByFK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.dayTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property timeStart() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.timeStartColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timeStart' in table 'SYOfferingExtraHoursByFK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.timeStartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property timeEnd() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.timeEndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timeEnd' in table 'SYOfferingExtraHoursByFK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.timeEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inactive() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.inactiveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'inactive' in table 'SYOfferingExtraHoursByFK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.inactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingExtraHoursByFK.dateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateCreated' in table 'SYOfferingExtraHoursByFK' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingExtraHoursByFK.dateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssyOfferingFKNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.syOfferingFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsyOfferingFKNull()
            Me(Me.tableSYOfferingExtraHoursByFK.syOfferingFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdayTypeNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.dayTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdayTypeNull()
            Me(Me.tableSYOfferingExtraHoursByFK.dayTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstimeStartNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.timeStartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettimeStartNull()
            Me(Me.tableSYOfferingExtraHoursByFK.timeStartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstimeEndNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.timeEndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettimeEndNull()
            Me(Me.tableSYOfferingExtraHoursByFK.timeEndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinactiveNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.inactiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinactiveNull()
            Me(Me.tableSYOfferingExtraHoursByFK.inactiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingExtraHoursByFK.dateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateCreatedNull()
            Me(Me.tableSYOfferingExtraHoursByFK.dateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingFusedSubjectsByFKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingFusedSubjectsByFK As SYOfferingFusedSubjectsByFKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingFusedSubjectsByFK = CType(Me.Table,SYOfferingFusedSubjectsByFKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingFusedSubjectsByFK.dateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateCreated' in table 'SYOfferingFusedSubjectsByFK' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingFusedSubjectsByFK.dateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYOfferingFusedSubjectsPK() As Integer
            Get
                Return CType(Me(Me.tableSYOfferingFusedSubjectsByFK.SYOfferingFusedSubjectsPKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYOfferingFusedSubjectsByFK.SYOfferingFusedSubjectsPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingFusedSubjectsByFK.syofferingFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'syofferingFK' in table 'SYOfferingFusedSubjectsByFK' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingFusedSubjectsByFK.syofferingFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingFusedSubjectsByFK.subjectPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectPK' in table 'SYOfferingFusedSubjectsByFK' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingFusedSubjectsByFK.subjectPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingFusedSubjectsByFK.dateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateCreatedNull()
            Me(Me.tableSYOfferingFusedSubjectsByFK.dateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssyofferingFKNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingFusedSubjectsByFK.syofferingFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsyofferingFKNull()
            Me(Me.tableSYOfferingFusedSubjectsByFK.syofferingFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectPKNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingFusedSubjectsByFK.subjectPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectPKNull()
            Me(Me.tableSYOfferingFusedSubjectsByFK.subjectPKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EnrollSubjects1Row
        Inherits Global.System.Data.DataRow
        
        Private tableEnrollSubjects1 As EnrollSubjects1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEnrollSubjects1 = CType(Me.Table,EnrollSubjects1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrollpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.enrollpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.enrollpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yearpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.yearpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.yearpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.sempkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studentpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.studentpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.studentpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _date() As Date
            Get
                Return CType(Me(Me.tableEnrollSubjects1.dateColumn),Date)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property transref() As String
            Get
                Return CType(Me(Me.tableEnrollSubjects1.transrefColumn),String)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.transrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.subjectpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property syofferingpk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.syofferingpkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.syofferingpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.statusColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Return CType(Me(Me.tableEnrollSubjects1.coursepkColumn),Integer)
            End Get
            Set
                Me(Me.tableEnrollSubjects1.coursepkColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYOfferingByFusedSubjectPKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYOfferingByFusedSubjectPK As SYOfferingByFusedSubjectPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYOfferingByFusedSubjectPK = CType(Me.Table,SYOfferingByFusedSubjectPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.dateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateCreated' in table 'SYOfferingByFusedSubjectPK' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.dateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainSubject() As String
            Get
                Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.MainSubjectColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.MainSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FusedSubject() As String
            Get
                Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.FusedSubjectColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.FusedSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.TeacherColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SemesterName() As String
            Get
                Return CType(Me(Me.tableSYOfferingByFusedSubjectPK.SemesterNameColumn),String)
            End Get
            Set
                Me(Me.tableSYOfferingByFusedSubjectPK.SemesterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableSYOfferingByFusedSubjectPK.dateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateCreatedNull()
            Me(Me.tableSYOfferingByFusedSubjectPK.dateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateEnrollmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateEnrollment As TemplateEnrollmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateEnrollment = CType(Me.Table,TemplateEnrollmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.GroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupName' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Code' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Room() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.RoomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Room' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Start() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.StartColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Start' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.StartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _End() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.EndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'End' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.EndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.DaysColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Days' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.DaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.UnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateEnrollment.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'TemplateEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateEnrollment.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.GroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNameNull()
            Me(Me.tableTemplateEnrollment.GroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNull()
            Me(Me.tableTemplateEnrollment.CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableTemplateEnrollment.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.RoomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNull()
            Me(Me.tableTemplateEnrollment.RoomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.StartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartNull()
            Me(Me.tableTemplateEnrollment.StartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_EndNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.EndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_EndNull()
            Me(Me.tableTemplateEnrollment.EndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDaysNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.DaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDaysNull()
            Me(Me.tableTemplateEnrollment.DaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tableTemplateEnrollment.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateEnrollment.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableTemplateEnrollment.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateStudentGradesRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateStudentGrades As TemplateStudentGradesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateStudentGrades = CType(Me.Table,TemplateStudentGradesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.SchoolYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolYear' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Course() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.CourseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Course' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.CourseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.SubjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subject' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.GradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grade' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.GradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Units() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.UnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeyThrough() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.KeyThroughColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyThrough' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.KeyThroughColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sempk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.sempkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sempk' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.sempkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coursepk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.coursepkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'coursepk' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.coursepkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subjectpk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.subjectpkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subjectpk' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.subjectpkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sypk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.sypkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sypk' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.sypkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As String
            Get
                Return CType(Me(Me.tableTemplateStudentGrades.pkColumn),String)
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExSubject() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.ExSubjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExSubject' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.ExSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExCollege() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.ExCollegeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExCollege' in table 'TemplateStudentGrades' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.ExCollegeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompletionGrade() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateStudentGrades.CompletionGradeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompletionGrade' in table 'TemplateStudentGrades' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateStudentGrades.CompletionGradeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolYearNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.SchoolYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolYearNull()
            Me(Me.tableTemplateStudentGrades.SchoolYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableTemplateStudentGrades.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCourseNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.CourseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCourseNull()
            Me(Me.tableTemplateStudentGrades.CourseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.SubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNull()
            Me(Me.tableTemplateStudentGrades.SubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.GradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradeNull()
            Me(Me.tableTemplateStudentGrades.GradeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitsNull()
            Me(Me.tableTemplateStudentGrades.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeyThroughNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.KeyThroughColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeyThroughNull()
            Me(Me.tableTemplateStudentGrades.KeyThroughColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssempkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.sempkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsempkNull()
            Me(Me.tableTemplateStudentGrades.sempkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscoursepkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.coursepkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcoursepkNull()
            Me(Me.tableTemplateStudentGrades.coursepkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubjectpkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.subjectpkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubjectpkNull()
            Me(Me.tableTemplateStudentGrades.subjectpkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssypkNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.sypkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsypkNull()
            Me(Me.tableTemplateStudentGrades.sypkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.ExSubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExSubjectNull()
            Me(Me.tableTemplateStudentGrades.ExSubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExCollegeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.ExCollegeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExCollegeNull()
            Me(Me.tableTemplateStudentGrades.ExCollegeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompletionGradeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateStudentGrades.CompletionGradeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompletionGradeNull()
            Me(Me.tableTemplateStudentGrades.CompletionGradeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateSYOfferingRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateSYOffering As TemplateSYOfferingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateSYOffering = CType(Me.Table,TemplateSYOfferingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.TeacherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Teacher' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resource() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.ResourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resource' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.ResourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property startTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.startTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'startTime' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.startTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property endTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.endTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'endTime' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.endTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property daySked() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.daySkedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'daySked' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.daySkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinStudents() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.MinStudentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MinStudents' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.MinStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxStudents() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.MaxStudentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaxStudents' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.MaxStudentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.EnrolledColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Enrolled' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.EnrolledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.SubjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subject' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enrolledFlag() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.enrolledFlagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'enrolledFlag' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.enrolledFlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curriculum() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSYOffering.CurriculumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Curriculum' in table 'TemplateSYOffering' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSYOffering.CurriculumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeacherNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.TeacherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeacherNull()
            Me(Me.tableTemplateSYOffering.TeacherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.ResourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceNull()
            Me(Me.tableTemplateSYOffering.ResourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstartTimeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.startTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstartTimeNull()
            Me(Me.tableTemplateSYOffering.startTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsendTimeNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.endTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetendTimeNull()
            Me(Me.tableTemplateSYOffering.endTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdaySkedNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.daySkedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdaySkedNull()
            Me(Me.tableTemplateSYOffering.daySkedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinStudentsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.MinStudentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinStudentsNull()
            Me(Me.tableTemplateSYOffering.MinStudentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaxStudentsNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.MaxStudentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaxStudentsNull()
            Me(Me.tableTemplateSYOffering.MaxStudentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrolledNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.EnrolledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrolledNull()
            Me(Me.tableTemplateSYOffering.EnrolledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableTemplateSYOffering.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.SubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNull()
            Me(Me.tableTemplateSYOffering.SubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsenrolledFlagNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.enrolledFlagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetenrolledFlagNull()
            Me(Me.tableTemplateSYOffering.enrolledFlagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurriculumNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSYOffering.CurriculumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurriculumNull()
            Me(Me.tableTemplateSYOffering.CurriculumColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateResourceLoadReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateResourceLoadReport As TemplateResourceLoadReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateResourceLoadReport = CType(Me.Table,TemplateResourceLoadReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PK() As Integer
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.PKColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.SchoolYearColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.SemesterColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.TeacherColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.SubjectColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Days() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.DaysColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.DaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property start() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.startColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.startColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _end() As String
            Get
                Return CType(Me(Me.tableTemplateResourceLoadReport.endColumn),String)
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.endColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sorter() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTemplateResourceLoadReport.sorterColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sorter' in table 'TemplateResourceLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateResourceLoadReport.sorterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssorterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateResourceLoadReport.sorterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsorterNull()
            Me(Me.tableTemplateResourceLoadReport.sorterColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TemplateSubjectLoadReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemplateSubjectLoadReport As TemplateSubjectLoadReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemplateSubjectLoadReport = CType(Me.Table,TemplateSubjectLoadReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk() As Integer
            Get
                Return CType(Me(Me.tableTemplateSubjectLoadReport.pkColumn),Integer)
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.pkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.SchoolYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolYear' in table 'TemplateSubjectLoadReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.SchoolYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teacher() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.TeacherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Teacher' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.TeacherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resource() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.ResourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resource' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.ResourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Schedule() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.ScheduleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Schedule' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.ScheduleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Min() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.MinColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Min' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.MinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Max() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.MaxColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Max' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.MaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.EnrolledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Enrolled' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.EnrolledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As String
            Get
                Try 
                    Return CType(Me(Me.tableTemplateSubjectLoadReport.statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status' in table 'TemplateSubjectLoadReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTemplateSubjectLoadReport.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolYearNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.SchoolYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolYearNull()
            Me(Me.tableTemplateSubjectLoadReport.SchoolYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tableTemplateSubjectLoadReport.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeacherNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.TeacherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeacherNull()
            Me(Me.tableTemplateSubjectLoadReport.TeacherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.ResourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceNull()
            Me(Me.tableTemplateSubjectLoadReport.ResourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.ScheduleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleNull()
            Me(Me.tableTemplateSubjectLoadReport.ScheduleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.MinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinNull()
            Me(Me.tableTemplateSubjectLoadReport.MinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaxNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.MaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaxNull()
            Me(Me.tableTemplateSubjectLoadReport.MaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrolledNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.EnrolledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrolledNull()
            Me(Me.tableTemplateSubjectLoadReport.EnrolledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tableTemplateSubjectLoadReport.statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusNull()
            Me(Me.tableTemplateSubjectLoadReport.statusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WhiteFormMiscChargesRow
        Inherits Global.System.Data.DataRow
        
        Private tableWhiteFormMiscCharges As WhiteFormMiscChargesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWhiteFormMiscCharges = CType(Me.Table,WhiteFormMiscChargesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiscNameCol1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteFormMiscCharges.MiscNameCol1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiscNameCol1' in table 'WhiteFormMiscCharges' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteFormMiscCharges.MiscNameCol1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountCol1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableWhiteFormMiscCharges.AmountCol1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountCol1' in table 'WhiteFormMiscCharges' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteFormMiscCharges.AmountCol1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiscNameCol2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteFormMiscCharges.MiscNameCol2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiscNameCol2' in table 'WhiteFormMiscCharges' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteFormMiscCharges.MiscNameCol2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AmountCol2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableWhiteFormMiscCharges.AmountCol2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountCol2' in table 'WhiteFormMiscCharges' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteFormMiscCharges.AmountCol2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiscNameCol1Null() As Boolean
            Return Me.IsNull(Me.tableWhiteFormMiscCharges.MiscNameCol1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiscNameCol1Null()
            Me(Me.tableWhiteFormMiscCharges.MiscNameCol1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountCol1Null() As Boolean
            Return Me.IsNull(Me.tableWhiteFormMiscCharges.AmountCol1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountCol1Null()
            Me(Me.tableWhiteFormMiscCharges.AmountCol1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiscNameCol2Null() As Boolean
            Return Me.IsNull(Me.tableWhiteFormMiscCharges.MiscNameCol2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiscNameCol2Null()
            Me(Me.tableWhiteFormMiscCharges.MiscNameCol2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountCol2Null() As Boolean
            Return Me.IsNull(Me.tableWhiteFormMiscCharges.AmountCol2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountCol2Null()
            Me(Me.tableWhiteFormMiscCharges.AmountCol2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BrokenHoursTemplateRow
        Inherits Global.System.Data.DataRow
        
        Private tableBrokenHoursTemplate As BrokenHoursTemplateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBrokenHoursTemplate = CType(Me.Table,BrokenHoursTemplateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableBrokenHoursTemplate.SubjectDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubjectDesc' in table 'BrokenHoursTemplate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBrokenHoursTemplate.SubjectDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DayTime() As String
            Get
                Try 
                    Return CType(Me(Me.tableBrokenHoursTemplate.DayTimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DayTime' in table 'BrokenHoursTemplate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBrokenHoursTemplate.DayTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectDescNull() As Boolean
            Return Me.IsNull(Me.tableBrokenHoursTemplate.SubjectDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectDescNull()
            Me(Me.tableBrokenHoursTemplate.SubjectDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDayTimeNull() As Boolean
            Return Me.IsNull(Me.tableBrokenHoursTemplate.DayTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDayTimeNull()
            Me(Me.tableBrokenHoursTemplate.DayTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingSelectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingSelectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingSelectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingSelectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsCountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsCountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsCountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsCountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LedgerSearchRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LedgerSearchRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LedgerSearchRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LedgerSearchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LedgerbyTRTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LedgerbyTRTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LedgerbyTRTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LedgerbyTRTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingbyResourceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingbyResourceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingbyResourceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingbyResourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateResourceLoadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateResourceLoadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateResourceLoadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateResourceLoadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateSubjectLoadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateSubjectLoadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateSubjectLoadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateSubjectLoadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingbySubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingbySubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingbySubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingbySubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentsbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentsbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentsbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentsbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentGradesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentGradesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentGradesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentGradesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateGradeEntryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateGradeEntryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateGradeEntryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateGradeEntryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingSelect2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingSelect2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingSelect2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingSelect2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsbySyOPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsbySyOPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsbySyOPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsbySyOPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BlockSectionTuitionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BlockSectionTuitionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BlockSectionTuitionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BlockSectionTuitionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollHeaderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollHeaderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollHeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BlockSectionTuitionbyCourseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BlockSectionTuitionbyCourseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BlockSectionTuitionbyCourseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BlockSectionTuitionbyCourseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentGradesbyStudentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentGradesbyStudentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentGradesbyStudentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentGradesbyStudentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsbyClassRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsbyClassRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsbyClassRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsbyClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SpecialCourseGradesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SpecialCourseGradesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SpecialCourseGradesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SpecialCourseGradesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SpecialCourseGradesbySPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SpecialCourseGradesbySPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SpecialCourseGradesbySPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SpecialCourseGradesbySPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsbyPkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsbyPkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsbyPkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsbyPkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SpecialCourseGradesbyEPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SpecialCourseGradesbyEPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SpecialCourseGradesbyEPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SpecialCourseGradesbyEPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WhiteFormRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WhiteFormRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WhiteFormRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WhiteFormRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClassListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClassListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClassListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClassListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentGradesbyStudentSubjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentGradesbyStudentSubjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentGradesbyStudentSubjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentGradesbyStudentSubjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsCostRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsCostRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsCostRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsCostRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjectsCostbyPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjectsCostbyPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjectsCostbyPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjectsCostbyPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudentGradesByPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudentGradesByPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudentGradesByPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudentGradesByPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingExtraHoursRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingExtraHoursRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingExtraHoursRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingExtraHoursRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingExtraHoursByFKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingExtraHoursByFKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingExtraHoursByFKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingExtraHoursByFKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingFusedSubjectsByFKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingFusedSubjectsByFKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingFusedSubjectsByFKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingFusedSubjectsByFKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EnrollSubjects1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EnrollSubjects1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EnrollSubjects1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EnrollSubjects1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYOfferingByFusedSubjectPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYOfferingByFusedSubjectPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYOfferingByFusedSubjectPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYOfferingByFusedSubjectPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateEnrollmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateEnrollmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateEnrollmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateEnrollmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateStudentGradesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateStudentGradesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateStudentGradesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateStudentGradesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateSYOfferingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateSYOfferingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateSYOfferingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateSYOfferingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateResourceLoadReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateResourceLoadReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateResourceLoadReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateResourceLoadReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TemplateSubjectLoadReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TemplateSubjectLoadReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TemplateSubjectLoadReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TemplateSubjectLoadReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WhiteFormMiscChargesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WhiteFormMiscChargesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WhiteFormMiscChargesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WhiteFormMiscChargesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BrokenHoursTemplateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BrokenHoursTemplateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BrokenHoursTemplateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BrokenHoursTemplateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsRegistrarTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Students"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            tableMapping.ColumnMappings.Add("gender", "gender")
            tableMapping.ColumnMappings.Add("regDate", "regDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([Stu"& _ 
                "dentID] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ("& _ 
                "(@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([StudentType] = @Origina"& _ 
                "l_StudentType)) AND ([Address1] = @Original_Address1) AND ([Address2] = @Origina"& _ 
                "l_Address2) AND ([Address3] = @Original_Address3) AND ([Phone] = @Original_Phone"& _ 
                ") AND ([MotherName] = @Original_MotherName) AND ([FatherName] = @Original_Father"& _ 
                "Name) AND ([Guardian] = @Original_Guardian) AND ([Birthdate] = @Original_Birthda"& _ 
                "te) AND ([Edubackground1] = @Original_Edubackground1) AND ([Edubackgrounddate1] "& _ 
                "= @Original_Edubackgrounddate1) AND ([Edubackground2] = @Original_Edubackground2"& _ 
                ") AND ([Edubackgrounddate2] = @Original_Edubackgrounddate2) AND ([Edubackground3"& _ 
                "] = @Original_Edubackground3) AND ([Edubackgrounddate3] = @Original_Edubackgroun"& _ 
                "ddate3) AND ([Edubackground4] = @Original_Edubackground4) AND ([Edubackgrounddat"& _ 
                "e4] = @Original_Edubackgrounddate4) AND ((@IsNull_gender = 1 AND [gender] IS NUL"& _ 
                "L) OR ([gender] = @Original_gender)) AND ((@IsNull_regDate = 1 AND [regDate] IS "& _ 
                "NULL) OR ([regDate] = @Original_regDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Students] ([StudentID], [StudentName], [StudentType], [Address"& _ 
                "1], [Address2], [Address3], [Phone], [MotherName], [FatherName], [Guardian], [Bi"& _ 
                "rthdate], [Edubackground1], [Edubackgrounddate1], [Edubackground2], [Edubackgrou"& _ 
                "nddate2], [Edubackground3], [Edubackgrounddate3], [Edubackground4], [Edubackgrou"& _ 
                "nddate4], [gender], [regDate]) VALUES (@StudentID, @StudentName, @StudentType, @"& _ 
                "Address1, @Address2, @Address3, @Phone, @MotherName, @FatherName, @Guardian, @Bi"& _ 
                "rthdate, @Edubackground1, @Edubackgrounddate1, @Edubackground2, @Edubackgroundda"& _ 
                "te2, @Edubackground3, @Edubackgrounddate3, @Edubackground4, @Edubackgrounddate4,"& _ 
                " @gender, @regDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, StudentType, Add"& _ 
                "ress1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, E"& _ 
                "dubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackgr"& _ 
                "ound3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Gender, regDate F"& _ 
                "ROM Students WHERE (StudentPK = SCOPE_IDENTITY()) ORDER BY StudentName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Students] SET [StudentID] = @StudentID, [StudentName] = @StudentNam"& _ 
                "e, [StudentType] = @StudentType, [Address1] = @Address1, [Address2] = @Address2,"& _ 
                " [Address3] = @Address3, [Phone] = @Phone, [MotherName] = @MotherName, [FatherNa"& _ 
                "me] = @FatherName, [Guardian] = @Guardian, [Birthdate] = @Birthdate, [Edubackgro"& _ 
                "und1] = @Edubackground1, [Edubackgrounddate1] = @Edubackgrounddate1, [Edubackgro"& _ 
                "und2] = @Edubackground2, [Edubackgrounddate2] = @Edubackgrounddate2, [Edubackgro"& _ 
                "und3] = @Edubackground3, [Edubackgrounddate3] = @Edubackgrounddate3, [Edubackgro"& _ 
                "und4] = @Edubackground4, [Edubackgrounddate4] = @Edubackgrounddate4, [gender] = "& _ 
                "@gender, [regDate] = @regDate WHERE (([StudentPK] = @Original_StudentPK) AND ([S"& _ 
                "tudentID] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND"& _ 
                " ((@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([StudentType] = @Origi"& _ 
                "nal_StudentType)) AND ([Address1] = @Original_Address1) AND ([Address2] = @Origi"& _ 
                "nal_Address2) AND ([Address3] = @Original_Address3) AND ([Phone] = @Original_Pho"& _ 
                "ne) AND ([MotherName] = @Original_MotherName) AND ([FatherName] = @Original_Fath"& _ 
                "erName) AND ([Guardian] = @Original_Guardian) AND ([Birthdate] = @Original_Birth"& _ 
                "date) AND ([Edubackground1] = @Original_Edubackground1) AND ([Edubackgrounddate1"& _ 
                "] = @Original_Edubackgrounddate1) AND ([Edubackground2] = @Original_Edubackgroun"& _ 
                "d2) AND ([Edubackgrounddate2] = @Original_Edubackgrounddate2) AND ([Edubackgroun"& _ 
                "d3] = @Original_Edubackground3) AND ([Edubackgrounddate3] = @Original_Edubackgro"& _ 
                "unddate3) AND ([Edubackground4] = @Original_Edubackground4) AND ([Edubackgroundd"& _ 
                "ate4] = @Original_Edubackgrounddate4) AND ((@IsNull_gender = 1 AND [gender] IS N"& _ 
                "ULL) OR ([gender] = @Original_gender)) AND ((@IsNull_regDate = 1 AND [regDate] I"& _ 
                "S NULL) OR ([regDate] = @Original_regDate)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, Stud"& _ 
                "entName, StudentType, Address1, Address2, Address3, Phone, MotherName, FatherNam"& _ 
                "e, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edub"& _ 
                "ackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgroun"& _ 
                "ddate4, Gender, regDate FROM Students WHERE (StudentPK = @StudentPK) ORDER BY St"& _ 
                "udentName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_regDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_regDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "regDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT StudentPK, StudentID, StudentName, StudentType, Address1, Address2, Addres"& _ 
                "s3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackg"& _ 
                "rounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddat"& _ 
                "e3, Edubackground4, Edubackgrounddate4 , gender, regDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.Students wher"& _ 
                "e studentname like @name order by studentname"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentsDataTable, ByVal name As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(name,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal name As String) As dsRegistrar.StudentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(name,String)
            End If
            Dim dataTable As dsRegistrar.StudentsDataTable = New dsRegistrar.StudentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "Students")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_StudentType,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_gender")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal StudentType As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date)) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(StudentType,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Edubackgrounddate4,String)
            End If
            If (gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("gender")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal StudentType As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date),  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(StudentType,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Edubackgrounddate4,String)
            End If
            If (gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(gender,String)
            End If
            If (regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_StudentName,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_StudentType,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_gender,String)
            End If
            If (Original_regDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_regDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal StudentType As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal gender As String,  _
                    ByVal regDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_gender As String,  _
                    ByVal Original_regDate As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(StudentID, StudentName, StudentType, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, gender, regDate, Original_StudentPK, Original_StudentID, Original_StudentName, Original_StudentType, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_gender, Original_regDate, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjects"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syofferingpk, "& _ 
                "status, coursepk FROM EnrollSubjects WHERE (enrollpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT enrollpk, yearpk, sempk, "& _ 
                "studentpk, date, transref, subjectpk, syofferingpk, status, coursepk FROM Enroll"& _ 
                "Subjects WHERE (enrollpk = @enrollpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (yearpk"& _ 
                " = @year) AND (sempk = @sem) AND (studentpk = @student)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsDataTable, ByVal year As Integer, ByVal sem As Integer, ByVal student As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(student,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal year As Integer, ByVal sem As Integer, ByVal student As Integer) As dsRegistrar.EnrollSubjectsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(student,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsDataTable = New dsRegistrar.EnrollSubjectsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjectsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjects")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingSelectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingSelect"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("closed", "closed")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts) AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([closed] = @Original_clo"& _ 
                "sed)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents], [closed]) VALUES (@sypk, @"& _ 
                "subjectpk, @resource, @semesterpk, @monday, @tuesday, @wednesday, @thursday, @fr"& _ 
                "iday, @saturday, @sunday, @sunfrom, @sunto, @monfrom, @monto, @tuesfrom, @tuesto"& _ 
                ", @wedfrom, @wedto, @thufrom, @thuto, @frifrom, @frito, @satfrom, @satto, @alter"& _ 
                "natefriday, @semid, @teacherid, @Remarks, @MinStudents, @MaxStudents, @closed);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, we"& _ 
                "dnesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tue"& _ 
                "sfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, a"& _ 
                "lternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed FROM"& _ 
                " SYOffering WHERE (syofferingpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents,"& _ 
                " [closed] = @closed WHERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk]"& _ 
                " = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] = @Or"& _ 
                "iginal_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @Orig"& _ 
                "inal_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Original_we"& _ 
                "dnesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_friday)"& _ 
                " AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND ([s"& _ 
                "unfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @O"& _ 
                "riginal_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original_tue"& _ 
                "sfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND"& _ 
                " ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = "& _ 
                "@Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Original_fr"& _ 
                "ito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND ([a"& _ 
                "lternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid) AND"& _ 
                " ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND ([M"& _ 
                "inStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStudents)"& _ 
                " AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([closed] = @Original_closed)"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesday"& _ 
                ", wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto,"& _ 
                " tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satt"& _ 
                "o, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed "& _ 
                "FROM SYOffering WHERE (syofferingpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         closed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOfferi"& _ 
                "ng"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (sypk = @sy) AND (subjectpk = @subject) AND (semesterpk = @sem)"& _ 
                " AND (semid = @sem) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND  (  ISNULL(IsDeleted,0) <> 1 )"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingSelectDataTable, ByVal sy As Integer, ByVal subject As Integer, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal subject As Integer, ByVal sem As Integer) As dsRegistrar.SYOfferingSelectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            Dim dataTable As dsRegistrar.SYOfferingSelectDataTable = New dsRegistrar.SYOfferingSelectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingSelectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingSelect")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            If (Original_closed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (closed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_MaxStudents,Integer)
            If (Original_closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, closed, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_closed, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsCountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsCount"
            tableMapping.ColumnMappings.Add("StudentCount", "StudentCount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        COUNT(*) AS StudentCount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                "    (yearpk = @year) AND (sempk = @sem) AND (status = 1) AND (syofferingpk = @sy"& _ 
                "offering)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syoffering", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsCountDataTable, ByVal year As Integer, ByVal sem As Integer, ByVal syoffering As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(syoffering,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal year As Integer, ByVal sem As Integer, ByVal syoffering As Integer) As dsRegistrar.EnrollSubjectsCountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(syoffering,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsCountDataTable = New dsRegistrar.EnrollSubjectsCountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingbyPK"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("requested", "requested")
            tableMapping.ColumnMappings.Add("closed", "closed")
            tableMapping.ColumnMappings.Add("isFused", "isFused")
            tableMapping.ColumnMappings.Add("isSpecialTutorial", "isSpecialTutorial")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested] = @Ori"& _ 
                "ginal_requested)) AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([closed] = "& _ 
                "@Original_closed)) AND ((@IsNull_isFused = 1 AND [isFused] IS NULL) OR ([isFused"& _ 
                "] = @Original_isFused)) AND ((@IsNull_isSpecialTutorial = 1 AND [isSpecialTutori"& _ 
                "al] IS NULL) OR ([isSpecialTutorial] = @Original_isSpecialTutorial)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isFused", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isSpecialTutorial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents], [requested], [closed], [is"& _ 
                "Fused], [isSpecialTutorial]) VALUES (@sypk, @subjectpk, @resource, @semesterpk, "& _ 
                "@monday, @tuesday, @wednesday, @thursday, @friday, @saturday, @sunday, @sunfrom,"& _ 
                " @sunto, @monfrom, @monto, @tuesfrom, @tuesto, @wedfrom, @wedto, @thufrom, @thut"& _ 
                "o, @frifrom, @frito, @satfrom, @satto, @alternatefriday, @semid, @teacherid, @Re"& _ 
                "marks, @MinStudents, @MaxStudents, @requested, @closed, @isFused, @isSpecialTuto"& _ 
                "rial);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tues"& _ 
                "day, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, mon"& _ 
                "to, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, s"& _ 
                "atto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requ"& _ 
                "ested, closed, IsFused, IsSpecialTutorial FROM SYOffering WHERE (syofferingpk = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents,"& _ 
                " [requested] = @requested, [closed] = @closed, [isFused] = @isFused, [isSpecialT"& _ 
                "utorial] = @isSpecialTutorial WHERE (([syofferingpk] = @Original_syofferingpk) A"& _ 
                "ND ([sypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resou"& _ 
                "rce] = @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monda"& _ 
                "y] = @Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @O"& _ 
                "riginal_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Origin"& _ 
                "al_friday) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunda"& _ 
                "y) AND ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([mon"& _ 
                "from] = @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Or"& _ 
                "iginal_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_we"& _ 
                "dfrom) AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ("& _ 
                "[thuto] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @O"& _ 
                "riginal_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satt"& _ 
                "o) AND ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_"& _ 
                "semid) AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remark"& _ 
                "s) AND ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_Ma"& _ 
                "xStudents) AND ((@IsNull_requested = 1 AND [requested] IS NULL) OR ([requested] "& _ 
                "= @Original_requested)) AND ((@IsNull_closed = 1 AND [closed] IS NULL) OR ([clos"& _ 
                "ed] = @Original_closed)) AND ((@IsNull_isFused = 1 AND [isFused] IS NULL) OR ([i"& _ 
                "sFused] = @Original_isFused)) AND ((@IsNull_isSpecialTutorial = 1 AND [isSpecial"& _ 
                "Tutorial] IS NULL) OR ([isSpecialTutorial] = @Original_isSpecialTutorial)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, wedne"& _ 
                "sday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfr"& _ 
                "om, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alte"& _ 
                "rnatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requested, clo"& _ 
                "sed, IsFused, IsSpecialTutorial FROM SYOffering WHERE (syofferingpk = @syofferin"& _ 
                "gpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_requested", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_requested", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "requested", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_closed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_closed", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "closed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isFused", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isFused", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isFused", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isSpecialTutorial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isSpecialTutorial", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isSpecialTutorial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents , requested , closed, isFused, isSpecialTutorial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "      SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        syofferingpk=@pk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingbyPKDataTable, ByVal pk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(pk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal pk As Integer) As dsRegistrar.SYOfferingbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(pk,Integer)
            Dim dataTable As dsRegistrar.SYOfferingbyPKDataTable = New dsRegistrar.SYOfferingbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            If (Original_requested.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_closed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_isFused,Boolean)
            Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_isSpecialTutorial,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (requested.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (closed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(isFused,Boolean)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(isSpecialTutorial,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            If (requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(isFused,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(isSpecialTutorial,Boolean)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_MaxStudents,Integer)
            If (Original_requested.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_requested.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_closed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_closed.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_isFused,Boolean)
            Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_isSpecialTutorial,Boolean)
            Me.Adapter.UpdateCommand.Parameters(75).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal requested As Global.System.Nullable(Of Boolean),  _
                    ByVal closed As Global.System.Nullable(Of Boolean),  _
                    ByVal isFused As Boolean,  _
                    ByVal isSpecialTutorial As Boolean,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal Original_requested As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_closed As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_isFused As Boolean,  _
                    ByVal Original_isSpecialTutorial As Boolean) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, requested, closed, isFused, isSpecialTutorial, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_requested, Original_closed, Original_isFused, Original_isSpecialTutorial, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LedgerSearchTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LedgerSearch"
            tableMapping.ColumnMappings.Add("ledgerpk", "ledgerpk")
            tableMapping.ColumnMappings.Add("ledgerdate", "ledgerdate")
            tableMapping.ColumnMappings.Add("ref", "ref")
            tableMapping.ColumnMappings.Add("linetype", "linetype")
            tableMapping.ColumnMappings.Add("trpk", "trpk")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("balance", "balance")
            tableMapping.ColumnMappings.Add("sourcepk", "sourcepk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("subject_coursepk", "subject_coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Ledger] WHERE (([ledgerpk] = @Original_ledgerpk) AND ([ledgerdate] ="& _ 
                " @Original_ledgerdate) AND ([ref] = @Original_ref) AND ([remarks] = @Original_re"& _ 
                "marks) AND ([linetype] = @Original_linetype) AND ([trpk] = @Original_trpk) AND ("& _ 
                "[amount] = @Original_amount) AND ([balance] = @Original_balance) AND ([sourcepk]"& _ 
                " = @Original_sourcepk) AND ([studentpk] = @Original_studentpk) AND ([sypk] = @Or"& _ 
                "iginal_sypk) AND ([subject_coursepk] = @Original_subject_coursepk))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Ledger] ([ledgerdate], [ref], [remarks], [linetype], [trpk], [amount"& _ 
                "], [balance], [sourcepk], [studentpk], [sypk], [subject_coursepk]) VALUES (@ledg"& _ 
                "erdate, @ref, @remarks, @linetype, @trpk, @amount, @balance, @sourcepk, @student"& _ 
                "pk, @sypk, @subject_coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ledgerpk, ledgerdate, ref, remarks, linet"& _ 
                "ype, trpk, amount, balance, sourcepk, studentpk, sypk, subject_coursepk FROM Led"& _ 
                "ger WHERE (ledgerpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Ledger] SET [ledgerdate] = @ledgerdate, [ref] = @ref, [remarks] = @remark"& _ 
                "s, [linetype] = @linetype, [trpk] = @trpk, [amount] = @amount, [balance] = @bala"& _ 
                "nce, [sourcepk] = @sourcepk, [studentpk] = @studentpk, [sypk] = @sypk, [subject_"& _ 
                "coursepk] = @subject_coursepk WHERE (([ledgerpk] = @Original_ledgerpk) AND ([led"& _ 
                "gerdate] = @Original_ledgerdate) AND ([ref] = @Original_ref) AND ([remarks] = @O"& _ 
                "riginal_remarks) AND ([linetype] = @Original_linetype) AND ([trpk] = @Original_t"& _ 
                "rpk) AND ([amount] = @Original_amount) AND ([balance] = @Original_balance) AND ("& _ 
                "[sourcepk] = @Original_sourcepk) AND ([studentpk] = @Original_studentpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subject_coursepk] = @Original_subject_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT ledgerpk, ledgerdate, ref, remarks, linetype, trpk, amount, balance, sour"& _ 
                "cepk, studentpk, sypk, subject_coursepk FROM Ledger WHERE (ledgerpk = @ledgerpk)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ledgerpk, ledgerdate, ref, remarks, linetype, trpk, amount, balance"& _ 
                ", sourcepk, studentpk, sypk, subject_coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Ledger"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                "    (linetype = @linetype) AND (trpk = @trpk) AND (sourcepk = @sourcepk) AND (st"& _ 
                "udentpk = @studentpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.LedgerSearchDataTable, ByVal linetype As String, ByVal trpk As Integer, ByVal sourcepk As Integer, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(linetype,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(trpk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sourcepk,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal linetype As String, ByVal trpk As Integer, ByVal sourcepk As Integer, ByVal studentpk As Integer) As dsRegistrar.LedgerSearchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(linetype,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(trpk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sourcepk,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(studentpk,Integer)
            Dim dataTable As dsRegistrar.LedgerSearchDataTable = New dsRegistrar.LedgerSearchDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.LedgerSearchDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "LedgerSearch")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ledgerpk As Integer, ByVal Original_ledgerdate As Date, ByVal Original_ref As String, ByVal Original_remarks As String, ByVal Original_linetype As String, ByVal Original_trpk As Integer, ByVal Original_amount As Decimal, ByVal Original_balance As Decimal, ByVal Original_sourcepk As Integer, ByVal Original_studentpk As Integer, ByVal Original_sypk As Integer, ByVal Original_subject_coursepk As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ref,String)
            End If
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_remarks,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_trpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_balance,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_sourcepk,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_subject_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ledgerdate As Date, ByVal ref As String, ByVal remarks As String, ByVal linetype As String, ByVal trpk As Integer, ByVal amount As Decimal, ByVal balance As Decimal, ByVal sourcepk As Integer, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal subject_coursepk As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(remarks,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(linetype,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(trpk,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(balance,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(sourcepk,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(subject_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal remarks As String,  _
                    ByVal linetype As String,  _
                    ByVal trpk As Integer,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal sourcepk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal subject_coursepk As Integer,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_sourcepk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subject_coursepk As Integer,  _
                    ByVal ledgerpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(remarks,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(sourcepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(subject_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ref,String)
            End If
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_remarks,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_sourcepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_subject_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ledgerpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal remarks As String,  _
                    ByVal linetype As String,  _
                    ByVal trpk As Integer,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal sourcepk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal subject_coursepk As Integer,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_sourcepk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subject_coursepk As Integer) As Integer
            Return Me.Update(ledgerdate, ref, remarks, linetype, trpk, amount, balance, sourcepk, studentpk, sypk, subject_coursepk, Original_ledgerpk, Original_ledgerdate, Original_ref, Original_remarks, Original_linetype, Original_trpk, Original_amount, Original_balance, Original_sourcepk, Original_studentpk, Original_sypk, Original_subject_coursepk, Original_ledgerpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LedgerbyTRTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LedgerbyTRType"
            tableMapping.ColumnMappings.Add("ledgerpk", "ledgerpk")
            tableMapping.ColumnMappings.Add("ledgerdate", "ledgerdate")
            tableMapping.ColumnMappings.Add("ref", "ref")
            tableMapping.ColumnMappings.Add("linetype", "linetype")
            tableMapping.ColumnMappings.Add("trpk", "trpk")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("balance", "balance")
            tableMapping.ColumnMappings.Add("sourcepk", "sourcepk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("subject_coursepk", "subject_coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Ledger] WHERE (([ledgerpk] = @Original_ledgerpk) AND ([ledgerdate] ="& _ 
                " @Original_ledgerdate) AND ([ref] = @Original_ref) AND ([linetype] = @Original_l"& _ 
                "inetype) AND ([trpk] = @Original_trpk) AND ([amount] = @Original_amount) AND ([b"& _ 
                "alance] = @Original_balance) AND ([sourcepk] = @Original_sourcepk) AND ([student"& _ 
                "pk] = @Original_studentpk) AND ([sypk] = @Original_sypk) AND ([remarks] = @Origi"& _ 
                "nal_remarks) AND ([subject_coursepk] = @Original_subject_coursepk))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Ledger] ([ledgerdate], [ref], [linetype], [trpk], [amount], [balance"& _ 
                "], [sourcepk], [studentpk], [sypk], [remarks], [subject_coursepk]) VALUES (@ledg"& _ 
                "erdate, @ref, @linetype, @trpk, @amount, @balance, @sourcepk, @studentpk, @sypk,"& _ 
                " @remarks, @subject_coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ledgerpk, ledgerdate, ref, linetype, trpk"& _ 
                ", amount, balance, sourcepk, studentpk, sypk, remarks, subject_coursepk FROM Led"& _ 
                "ger WHERE (ledgerpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Ledger] SET [ledgerdate] = @ledgerdate, [ref] = @ref, [linetype] = @linet"& _ 
                "ype, [trpk] = @trpk, [amount] = @amount, [balance] = @balance, [sourcepk] = @sou"& _ 
                "rcepk, [studentpk] = @studentpk, [sypk] = @sypk, [remarks] = @remarks, [subject_"& _ 
                "coursepk] = @subject_coursepk WHERE (([ledgerpk] = @Original_ledgerpk) AND ([led"& _ 
                "gerdate] = @Original_ledgerdate) AND ([ref] = @Original_ref) AND ([linetype] = @"& _ 
                "Original_linetype) AND ([trpk] = @Original_trpk) AND ([amount] = @Original_amoun"& _ 
                "t) AND ([balance] = @Original_balance) AND ([sourcepk] = @Original_sourcepk) AND"& _ 
                " ([studentpk] = @Original_studentpk) AND ([sypk] = @Original_sypk) AND ([remarks"& _ 
                "] = @Original_remarks) AND ([subject_coursepk] = @Original_subject_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT ledgerpk, ledgerdate, ref, linetype, trpk, amount, balance, sourcepk, stu"& _ 
                "dentpk, sypk, remarks, subject_coursepk FROM Ledger WHERE (ledgerpk = @ledgerpk)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subject_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subject_coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ledgerpk, ledgerdate, ref, linetype, trpk, amount, balance, sourcep"& _ 
                "k, studentpk, sypk, remarks, subject_coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Ledger"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                "    (studentpk = @student) AND (sypk = @sy) AND (linetype = @ltype)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ltype", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.LedgerbyTRTypeDataTable, ByVal student As Integer, ByVal sy As Integer, ByVal ltype As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sy,Integer)
            If (ltype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ltype")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ltype,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal student As Integer, ByVal sy As Integer, ByVal ltype As String) As dsRegistrar.LedgerbyTRTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sy,Integer)
            If (ltype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ltype")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ltype,String)
            End If
            Dim dataTable As dsRegistrar.LedgerbyTRTypeDataTable = New dsRegistrar.LedgerbyTRTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.LedgerbyTRTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "LedgerbyTRType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ledgerpk As Integer, ByVal Original_ledgerdate As Date, ByVal Original_ref As String, ByVal Original_linetype As String, ByVal Original_trpk As Integer, ByVal Original_amount As Decimal, ByVal Original_balance As Decimal, ByVal Original_sourcepk As Integer, ByVal Original_studentpk As Integer, ByVal Original_sypk As Integer, ByVal Original_remarks As String, ByVal Original_subject_coursepk As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ref,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_trpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_balance,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_sourcepk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_sypk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_subject_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ledgerdate As Date, ByVal ref As String, ByVal linetype As String, ByVal trpk As Integer, ByVal amount As Decimal, ByVal balance As Decimal, ByVal sourcepk As Integer, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal remarks As String, ByVal subject_coursepk As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(linetype,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(trpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(balance,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(sourcepk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(sypk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(subject_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal linetype As String,  _
                    ByVal trpk As Integer,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal sourcepk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal remarks As String,  _
                    ByVal subject_coursepk As Integer,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_sourcepk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_subject_coursepk As Integer,  _
                    ByVal ledgerpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sourcepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(sypk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(subject_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ref,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_sourcepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_sypk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_subject_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ledgerpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal linetype As String,  _
                    ByVal trpk As Integer,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal sourcepk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal remarks As String,  _
                    ByVal subject_coursepk As Integer,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_sourcepk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_subject_coursepk As Integer) As Integer
            Return Me.Update(ledgerdate, ref, linetype, trpk, amount, balance, sourcepk, studentpk, sypk, remarks, subject_coursepk, Original_ledgerpk, Original_ledgerdate, Original_ref, Original_linetype, Original_trpk, Original_amount, Original_balance, Original_sourcepk, Original_studentpk, Original_sypk, Original_remarks, Original_subject_coursepk, Original_ledgerpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingbyResourceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingbyResource"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents]) VALUES (@sypk, @subjectpk,"& _ 
                " @resource, @semesterpk, @monday, @tuesday, @wednesday, @thursday, @friday, @sat"& _ 
                "urday, @sunday, @sunfrom, @sunto, @monfrom, @monto, @tuesfrom, @tuesto, @wedfrom"& _ 
                ", @wedto, @thufrom, @thuto, @frifrom, @frito, @satfrom, @satto, @alternatefriday"& _ 
                ", @semid, @teacherid, @Remarks, @MinStudents, @MaxStudents);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingp"& _ 
                "k, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, "& _ 
                "friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedf"& _ 
                "rom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, sem"& _ 
                "id, teacherid, Remarks, MinStudents, MaxStudents FROM SYOffering WHERE (syofferi"& _ 
                "ngpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents "& _ 
                "WHERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) A"& _ 
                "ND ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND"& _ 
                " ([semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([t"& _ 
                "uesday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thurs"& _ 
                "day] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @"& _ 
                "Original_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_"& _ 
                "sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND"& _ 
                " ([monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto]"& _ 
                " = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Origina"& _ 
                "l_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND"& _ 
                " ([frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] "& _ 
                "= @Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @O"& _ 
                "riginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Ori"& _ 
                "ginal_teacherid) AND ([Remarks] = @Original_Remarks) AND ([MinStudents] = @Origi"& _ 
                "nal_MinStudents) AND ([MaxStudents] = @Original_MaxStudents));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferin"& _ 
                "gpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday"& _ 
                ", friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, we"& _ 
                "dfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, s"& _ 
                "emid, teacherid, Remarks, MinStudents, MaxStudents FROM SYOffering WHERE (syoffe"& _ 
                "ringpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        resource=@resource"& _ 
                "pk and sypk=@sypk and semid=@sem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resourcepk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingbyResourceDataTable, ByVal resourcepk As Integer, ByVal sypk As Integer, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(resourcepk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal resourcepk As Integer, ByVal sypk As Integer, ByVal sem As Integer) As dsRegistrar.SYOfferingbyResourceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(resourcepk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            Dim dataTable As dsRegistrar.SYOfferingbyResourceDataTable = New dsRegistrar.SYOfferingbyResourceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingbyResourceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingbyResource")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MaxStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TemplateResourceLoadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TemplateResourceLoad"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("Subject", "Subject")
            tableMapping.ColumnMappings.Add("Teacher", "Teacher")
            tableMapping.ColumnMappings.Add("Schedule", "Schedule")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Min", "Min")
            tableMapping.ColumnMappings.Add("Max", "Max")
            tableMapping.ColumnMappings.Add("Enrolled", "Enrolled")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TemplateResourceLoad] WHERE (([PK] = @Original_PK) AND ([Schoo"& _ 
                "lYear] = @Original_SchoolYear) AND ([Subject] = @Original_Subject) AND ([Teacher"& _ 
                "] = @Original_Teacher) AND ([Schedule] = @Original_Schedule) AND ([Semester] = @"& _ 
                "Original_Semester) AND ([Min] = @Original_Min) AND ([Max] = @Original_Max) AND ("& _ 
                "[Enrolled] = @Original_Enrolled))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TemplateResourceLoad] ([SchoolYear], [Subject], [Teacher], [Sc"& _ 
                "hedule], [Semester], [Min], [Max], [Enrolled]) VALUES (@SchoolYear, @Subject, @T"& _ 
                "eacher, @Schedule, @Semester, @Min, @Max, @Enrolled);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SchoolYear, Su"& _ 
                "bject, Teacher, Schedule, Semester, Min, Max, Enrolled FROM TemplateResourceLoad"& _ 
                " WHERE (PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TemplateResourceLoad] SET [SchoolYear] = @SchoolYear, [Subject] = @"& _ 
                "Subject, [Teacher] = @Teacher, [Schedule] = @Schedule, [Semester] = @Semester, ["& _ 
                "Min] = @Min, [Max] = @Max, [Enrolled] = @Enrolled WHERE (([PK] = @Original_PK) A"& _ 
                "ND ([SchoolYear] = @Original_SchoolYear) AND ([Subject] = @Original_Subject) AND"& _ 
                " ([Teacher] = @Original_Teacher) AND ([Schedule] = @Original_Schedule) AND ([Sem"& _ 
                "ester] = @Original_Semester) AND ([Min] = @Original_Min) AND ([Max] = @Original_"& _ 
                "Max) AND ([Enrolled] = @Original_Enrolled));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SchoolYear, Subject, Te"& _ 
                "acher, Schedule, Semester, Min, Max, Enrolled FROM TemplateResourceLoad WHERE (P"& _ 
                "K = @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PK, SchoolYear, Subject, Teacher, Schedule, Semester, Min, Max, Enrolled F"& _ 
                "ROM dbo.TemplateResourceLoad"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.TemplateResourceLoadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRegistrar.TemplateResourceLoadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRegistrar.TemplateResourceLoadDataTable = New dsRegistrar.TemplateResourceLoadDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.TemplateResourceLoadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "TemplateResourceLoad")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_SchoolYear As String, ByVal Original_Subject As String, ByVal Original_Teacher As String, ByVal Original_Schedule As String, ByVal Original_Semester As String, ByVal Original_Min As Integer, ByVal Original_Max As Integer, ByVal Original_Enrolled As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Subject")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Subject,String)
            End If
            If (Original_Teacher Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Teacher")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Teacher,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Schedule")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Schedule,String)
            End If
            If (Original_Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Semester")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Semester,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Min,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Max,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Enrolled,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolYear As String, ByVal Subject As String, ByVal Teacher As String, ByVal Schedule As String, ByVal Semester As String, ByVal Min As Integer, ByVal Max As Integer, ByVal Enrolled As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Subject")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Subject,String)
            End If
            If (Teacher Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Teacher")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Teacher,String)
            End If
            If (Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Schedule")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Schedule,String)
            End If
            If (Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Semester")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Semester,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Min,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Max,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Enrolled,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Subject As String,  _
                    ByVal Teacher As String,  _
                    ByVal Schedule As String,  _
                    ByVal Semester As String,  _
                    ByVal Min As Integer,  _
                    ByVal Max As Integer,  _
                    ByVal Enrolled As Integer,  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Teacher As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Min As Integer,  _
                    ByVal Original_Max As Integer,  _
                    ByVal Original_Enrolled As Integer,  _
                    ByVal PK As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Subject")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Subject,String)
            End If
            If (Teacher Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Teacher")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Teacher,String)
            End If
            If (Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Schedule")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Schedule,String)
            End If
            If (Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Semester,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Min,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Max,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Enrolled,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PK,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SchoolYear")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Subject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Subject")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Subject,String)
            End If
            If (Original_Teacher Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Teacher")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Teacher,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Schedule")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Schedule,String)
            End If
            If (Original_Semester Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Semester")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Semester,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Min,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Max,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Enrolled,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Subject As String,  _
                    ByVal Teacher As String,  _
                    ByVal Schedule As String,  _
                    ByVal Semester As String,  _
                    ByVal Min As Integer,  _
                    ByVal Max As Integer,  _
                    ByVal Enrolled As Integer,  _
                    ByVal Original_PK As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Teacher As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Min As Integer,  _
                    ByVal Original_Max As Integer,  _
                    ByVal Original_Enrolled As Integer) As Integer
            Return Me.Update(SchoolYear, Subject, Teacher, Schedule, Semester, Min, Max, Enrolled, Original_PK, Original_SchoolYear, Original_Subject, Original_Teacher, Original_Schedule, Original_Semester, Original_Min, Original_Max, Original_Enrolled, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TemplateSubjectLoadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TemplateSubjectLoad"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("Semester", "Semester")
            tableMapping.ColumnMappings.Add("Teacher", "Teacher")
            tableMapping.ColumnMappings.Add("Resource", "Resource")
            tableMapping.ColumnMappings.Add("Schedule", "Schedule")
            tableMapping.ColumnMappings.Add("Min", "Min")
            tableMapping.ColumnMappings.Add("Max", "Max")
            tableMapping.ColumnMappings.Add("Enrolled", "Enrolled")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TemplateSubjectLoad] WHERE (([pk] = @Original_pk) AND ((@IsNul"& _ 
                "l_SchoolYear = 1 AND [SchoolYear] IS NULL) OR ([SchoolYear] = @Original_SchoolYe"& _ 
                "ar)) AND ((@IsNull_Semester = 1 AND [Semester] IS NULL) OR ([Semester] = @Origin"& _ 
                "al_Semester)) AND ((@IsNull_Teacher = 1 AND [Teacher] IS NULL) OR ([Teacher] = @"& _ 
                "Original_Teacher)) AND ((@IsNull_Resource = 1 AND [Resource] IS NULL) OR ([Resou"& _ 
                "rce] = @Original_Resource)) AND ((@IsNull_Schedule = 1 AND [Schedule] IS NULL) O"& _ 
                "R ([Schedule] = @Original_Schedule)) AND ((@IsNull_Min = 1 AND [Min] IS NULL) OR"& _ 
                " ([Min] = @Original_Min)) AND ((@IsNull_Max = 1 AND [Max] IS NULL) OR ([Max] = @"& _ 
                "Original_Max)) AND ((@IsNull_Enrolled = 1 AND [Enrolled] IS NULL) OR ([Enrolled]"& _ 
                " = @Original_Enrolled)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SchoolYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semester", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Teacher", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Schedule", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TemplateSubjectLoad] ([SchoolYear], [Semester], [Teacher], [Re"& _ 
                "source], [Schedule], [Min], [Max], [Enrolled]) VALUES (@SchoolYear, @Semester, @"& _ 
                "Teacher, @Resource, @Schedule, @Min, @Max, @Enrolled);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, SchoolYear, S"& _ 
                "emester, Teacher, Resource, Schedule, Min, Max, Enrolled FROM TemplateSubjectLoa"& _ 
                "d WHERE (pk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TemplateSubjectLoad] SET [SchoolYear] = @SchoolYear, [Semester] = @"& _ 
                "Semester, [Teacher] = @Teacher, [Resource] = @Resource, [Schedule] = @Schedule, "& _ 
                "[Min] = @Min, [Max] = @Max, [Enrolled] = @Enrolled WHERE (([pk] = @Original_pk) "& _ 
                "AND ((@IsNull_SchoolYear = 1 AND [SchoolYear] IS NULL) OR ([SchoolYear] = @Origi"& _ 
                "nal_SchoolYear)) AND ((@IsNull_Semester = 1 AND [Semester] IS NULL) OR ([Semeste"& _ 
                "r] = @Original_Semester)) AND ((@IsNull_Teacher = 1 AND [Teacher] IS NULL) OR (["& _ 
                "Teacher] = @Original_Teacher)) AND ((@IsNull_Resource = 1 AND [Resource] IS NULL"& _ 
                ") OR ([Resource] = @Original_Resource)) AND ((@IsNull_Schedule = 1 AND [Schedule"& _ 
                "] IS NULL) OR ([Schedule] = @Original_Schedule)) AND ((@IsNull_Min = 1 AND [Min]"& _ 
                " IS NULL) OR ([Min] = @Original_Min)) AND ((@IsNull_Max = 1 AND [Max] IS NULL) O"& _ 
                "R ([Max] = @Original_Max)) AND ((@IsNull_Enrolled = 1 AND [Enrolled] IS NULL) OR"& _ 
                " ([Enrolled] = @Original_Enrolled)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, SchoolYear, Semester, Teacher,"& _ 
                " Resource, Schedule, Min, Max, Enrolled FROM TemplateSubjectLoad WHERE (pk = @pk"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SchoolYear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SchoolYear", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SchoolYear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Semester", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Semester", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Semester", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Teacher", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Teacher", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Teacher", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Resource", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Schedule", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Schedule", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Schedule", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Min", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Min", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Max", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Max", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Enrolled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Enrolled", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk, SchoolYear, Semester, Teacher, Resource, Schedule, Min, Max, Enrolled "& _ 
                "FROM dbo.TemplateSubjectLoad"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.TemplateSubjectLoadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRegistrar.TemplateSubjectLoadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRegistrar.TemplateSubjectLoadDataTable = New dsRegistrar.TemplateSubjectLoadDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.TemplateSubjectLoadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "TemplateSubjectLoad")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk As Integer, ByVal Original_SchoolYear As String, ByVal Original_Semester As String, ByVal Original_Teacher As String, ByVal Original_Resource As String, ByVal Original_Schedule As String, ByVal Original_Min As Global.System.Nullable(Of Integer), ByVal Original_Max As Global.System.Nullable(Of Integer), ByVal Original_Enrolled As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Semester Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Semester,String)
            End If
            If (Original_Teacher Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Teacher,String)
            End If
            If (Original_Resource Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Resource,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Schedule,String)
            End If
            If (Original_Min.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Min.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Max.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Max.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Enrolled.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Enrolled.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SchoolYear As String, ByVal Semester As String, ByVal Teacher As String, ByVal Resource As String, ByVal Schedule As String, ByVal Min As Global.System.Nullable(Of Integer), ByVal Max As Global.System.Nullable(Of Integer), ByVal Enrolled As Global.System.Nullable(Of Integer)) As Integer
            If (SchoolYear Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Semester Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Semester,String)
            End If
            If (Teacher Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Teacher,String)
            End If
            If (Resource Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Resource,String)
            End If
            If (Schedule Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Schedule,String)
            End If
            If (Min.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Min.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Max.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Max.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Enrolled.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Enrolled.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Semester As String,  _
                    ByVal Teacher As String,  _
                    ByVal Resource As String,  _
                    ByVal Schedule As String,  _
                    ByVal Min As Global.System.Nullable(Of Integer),  _
                    ByVal Max As Global.System.Nullable(Of Integer),  _
                    ByVal Enrolled As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Teacher As String,  _
                    ByVal Original_Resource As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Min As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Max As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Enrolled As Global.System.Nullable(Of Integer),  _
                    ByVal pk As Integer) As Integer
            If (SchoolYear Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SchoolYear,String)
            End If
            If (Semester Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Semester,String)
            End If
            If (Teacher Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Teacher,String)
            End If
            If (Resource Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Resource,String)
            End If
            If (Schedule Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Schedule,String)
            End If
            If (Min.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Min.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Max.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Max.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Enrolled.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Enrolled.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_pk,Integer)
            If (Original_SchoolYear Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SchoolYear,String)
            End If
            If (Original_Semester Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Semester,String)
            End If
            If (Original_Teacher Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Teacher,String)
            End If
            If (Original_Resource Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Resource,String)
            End If
            If (Original_Schedule Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Schedule,String)
            End If
            If (Original_Min.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Min.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Max.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Max.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Enrolled.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Enrolled.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SchoolYear As String,  _
                    ByVal Semester As String,  _
                    ByVal Teacher As String,  _
                    ByVal Resource As String,  _
                    ByVal Schedule As String,  _
                    ByVal Min As Global.System.Nullable(Of Integer),  _
                    ByVal Max As Global.System.Nullable(Of Integer),  _
                    ByVal Enrolled As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_SchoolYear As String,  _
                    ByVal Original_Semester As String,  _
                    ByVal Original_Teacher As String,  _
                    ByVal Original_Resource As String,  _
                    ByVal Original_Schedule As String,  _
                    ByVal Original_Min As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Max As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Enrolled As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SchoolYear, Semester, Teacher, Resource, Schedule, Min, Max, Enrolled, Original_pk, Original_SchoolYear, Original_Semester, Original_Teacher, Original_Resource, Original_Schedule, Original_Min, Original_Max, Original_Enrolled, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingbySubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingbySubject"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOffering] WHERE (([syofferingpk] = @Original_syofferingpk) AND ([s"& _ 
                "ypk] = @Original_sypk) AND ([subjectpk] = @Original_subjectpk) AND ([resource] ="& _ 
                " @Original_resource) AND ([semesterpk] = @Original_semesterpk) AND ([monday] = @"& _ 
                "Original_monday) AND ([tuesday] = @Original_tuesday) AND ([wednesday] = @Origina"& _ 
                "l_wednesday) AND ([thursday] = @Original_thursday) AND ([friday] = @Original_fri"& _ 
                "day) AND ([saturday] = @Original_saturday) AND ([sunday] = @Original_sunday) AND"& _ 
                " ([sunfrom] = @Original_sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] "& _ 
                "= @Original_monfrom) AND ([monto] = @Original_monto) AND ([tuesfrom] = @Original"& _ 
                "_tuesfrom) AND ([tuesto] = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom)"& _ 
                " AND ([wedto] = @Original_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto"& _ 
                "] = @Original_thuto) AND ([frifrom] = @Original_frifrom) AND ([frito] = @Origina"& _ 
                "l_frito) AND ([satfrom] = @Original_satfrom) AND ([satto] = @Original_satto) AND"& _ 
                " ([alternatefriday] = @Original_alternatefriday) AND ([semid] = @Original_semid)"& _ 
                " AND ([teacherid] = @Original_teacherid) AND ([Remarks] = @Original_Remarks) AND"& _ 
                " ([MinStudents] = @Original_MinStudents) AND ([MaxStudents] = @Original_MaxStude"& _ 
                "nts))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOffering] ([sypk], [subjectpk], [resource], [semesterpk], [monday]"& _ 
                ", [tuesday], [wednesday], [thursday], [friday], [saturday], [sunday], [sunfrom],"& _ 
                " [sunto], [monfrom], [monto], [tuesfrom], [tuesto], [wedfrom], [wedto], [thufrom"& _ 
                "], [thuto], [frifrom], [frito], [satfrom], [satto], [alternatefriday], [semid], "& _ 
                "[teacherid], [Remarks], [MinStudents], [MaxStudents]) VALUES (@sypk, @subjectpk,"& _ 
                " @resource, @semesterpk, @monday, @tuesday, @wednesday, @thursday, @friday, @sat"& _ 
                "urday, @sunday, @sunfrom, @sunto, @monfrom, @monto, @tuesfrom, @tuesto, @wedfrom"& _ 
                ", @wedto, @thufrom, @thuto, @frifrom, @frito, @satfrom, @satto, @alternatefriday"& _ 
                ", @semid, @teacherid, @Remarks, @MinStudents, @MaxStudents);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferingp"& _ 
                "k, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, "& _ 
                "friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedf"& _ 
                "rom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, sem"& _ 
                "id, teacherid, Remarks, MinStudents, MaxStudents FROM SYOffering WHERE (syofferi"& _ 
                "ngpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOffering] SET [sypk] = @sypk, [subjectpk] = @subjectpk, [resource] = @r"& _ 
                "esource, [semesterpk] = @semesterpk, [monday] = @monday, [tuesday] = @tuesday, ["& _ 
                "wednesday] = @wednesday, [thursday] = @thursday, [friday] = @friday, [saturday] "& _ 
                "= @saturday, [sunday] = @sunday, [sunfrom] = @sunfrom, [sunto] = @sunto, [monfro"& _ 
                "m] = @monfrom, [monto] = @monto, [tuesfrom] = @tuesfrom, [tuesto] = @tuesto, [we"& _ 
                "dfrom] = @wedfrom, [wedto] = @wedto, [thufrom] = @thufrom, [thuto] = @thuto, [fr"& _ 
                "ifrom] = @frifrom, [frito] = @frito, [satfrom] = @satfrom, [satto] = @satto, [al"& _ 
                "ternatefriday] = @alternatefriday, [semid] = @semid, [teacherid] = @teacherid, ["& _ 
                "Remarks] = @Remarks, [MinStudents] = @MinStudents, [MaxStudents] = @MaxStudents "& _ 
                "WHERE (([syofferingpk] = @Original_syofferingpk) AND ([sypk] = @Original_sypk) A"& _ 
                "ND ([subjectpk] = @Original_subjectpk) AND ([resource] = @Original_resource) AND"& _ 
                " ([semesterpk] = @Original_semesterpk) AND ([monday] = @Original_monday) AND ([t"& _ 
                "uesday] = @Original_tuesday) AND ([wednesday] = @Original_wednesday) AND ([thurs"& _ 
                "day] = @Original_thursday) AND ([friday] = @Original_friday) AND ([saturday] = @"& _ 
                "Original_saturday) AND ([sunday] = @Original_sunday) AND ([sunfrom] = @Original_"& _ 
                "sunfrom) AND ([sunto] = @Original_sunto) AND ([monfrom] = @Original_monfrom) AND"& _ 
                " ([monto] = @Original_monto) AND ([tuesfrom] = @Original_tuesfrom) AND ([tuesto]"& _ 
                " = @Original_tuesto) AND ([wedfrom] = @Original_wedfrom) AND ([wedto] = @Origina"& _ 
                "l_wedto) AND ([thufrom] = @Original_thufrom) AND ([thuto] = @Original_thuto) AND"& _ 
                " ([frifrom] = @Original_frifrom) AND ([frito] = @Original_frito) AND ([satfrom] "& _ 
                "= @Original_satfrom) AND ([satto] = @Original_satto) AND ([alternatefriday] = @O"& _ 
                "riginal_alternatefriday) AND ([semid] = @Original_semid) AND ([teacherid] = @Ori"& _ 
                "ginal_teacherid) AND ([Remarks] = @Original_Remarks) AND ([MinStudents] = @Origi"& _ 
                "nal_MinStudents) AND ([MaxStudents] = @Original_MaxStudents));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syofferin"& _ 
                "gpk, sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday"& _ 
                ", friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, we"& _ 
                "dfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, s"& _ 
                "emid, teacherid, Remarks, MinStudents, MaxStudents FROM SYOffering WHERE (syoffe"& _ 
                "ringpk = @syofferingpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_resource", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "resource", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semesterpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wednesday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wednesday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thursday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thursday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_friday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "friday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_saturday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "saturday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sunto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sunto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_monto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tuesto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tuesto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wedto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wedto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thufrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thufrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_thuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "thuto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frifrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frifrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_frito", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "frito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satfrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satfrom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_satto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "satto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alternatefriday", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alternatefriday", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_semid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MinStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaxStudents", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxStudents", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        syofferingpk, sypk, subjectpk, resource, semesterpk, monday, tuesda"& _ 
                "y, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, f"& _ 
                "rifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinSt"& _ 
                "udents, MaxStudents"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOffering"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        subjectpk=@subject"& _ 
                "pk and sypk=@sypk and semid=@sem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingbySubjectDataTable, ByVal subjectpk As Integer, ByVal sypk As Integer, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal subjectpk As Integer, ByVal sypk As Integer, ByVal sem As Integer) As dsRegistrar.SYOfferingbySubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectpk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sem,Integer)
            Dim dataTable As dsRegistrar.SYOfferingbySubjectDataTable = New dsRegistrar.SYOfferingbySubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingbySubjectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingbySubject")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_resource,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_monday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_thursday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_friday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_saturday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_satto,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_semid,Integer)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MaxStudents,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer,  _
                    ByVal syofferingpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sunday,Boolean)
            If (sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sunfrom,String)
            End If
            If (sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sunto,String)
            End If
            If (monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(monfrom,String)
            End If
            If (monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(monto,String)
            End If
            If (tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tuesfrom,String)
            End If
            If (tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(tuesto,String)
            End If
            If (wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(wedfrom,String)
            End If
            If (wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(wedto,String)
            End If
            If (thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(thufrom,String)
            End If
            If (thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(thuto,String)
            End If
            If (frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(frifrom,String)
            End If
            If (frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(frito,String)
            End If
            If (satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(satfrom,String)
            End If
            If (satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(teacherid,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MaxStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_syofferingpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_resource,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_semesterpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_monday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_tuesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_wednesday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_thursday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_friday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_saturday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_sunday,Boolean)
            If (Original_sunfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_sunfrom,String)
            End If
            If (Original_sunto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sunto")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_sunto,String)
            End If
            If (Original_monfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_monfrom,String)
            End If
            If (Original_monto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_monto")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_monto,String)
            End If
            If (Original_tuesfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_tuesfrom,String)
            End If
            If (Original_tuesto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tuesto")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_tuesto,String)
            End If
            If (Original_wedfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_wedfrom,String)
            End If
            If (Original_wedto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_wedto")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_wedto,String)
            End If
            If (Original_thufrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thufrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_thufrom,String)
            End If
            If (Original_thuto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_thuto")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_thuto,String)
            End If
            If (Original_frifrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frifrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_frifrom,String)
            End If
            If (Original_frito Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_frito")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_frito,String)
            End If
            If (Original_satfrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satfrom")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_satfrom,String)
            End If
            If (Original_satto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_satto")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_satto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_alternatefriday,Boolean)
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_semid,Integer)
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_teacherid,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_MinStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MaxStudents,Integer)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(syofferingpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sypk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal resource As Integer,  _
                    ByVal semesterpk As Integer,  _
                    ByVal monday As Boolean,  _
                    ByVal tuesday As Boolean,  _
                    ByVal wednesday As Boolean,  _
                    ByVal thursday As Boolean,  _
                    ByVal friday As Boolean,  _
                    ByVal saturday As Boolean,  _
                    ByVal sunday As Boolean,  _
                    ByVal sunfrom As String,  _
                    ByVal sunto As String,  _
                    ByVal monfrom As String,  _
                    ByVal monto As String,  _
                    ByVal tuesfrom As String,  _
                    ByVal tuesto As String,  _
                    ByVal wedfrom As String,  _
                    ByVal wedto As String,  _
                    ByVal thufrom As String,  _
                    ByVal thuto As String,  _
                    ByVal frifrom As String,  _
                    ByVal frito As String,  _
                    ByVal satfrom As String,  _
                    ByVal satto As String,  _
                    ByVal alternatefriday As Boolean,  _
                    ByVal semid As Integer,  _
                    ByVal teacherid As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal MinStudents As Integer,  _
                    ByVal MaxStudents As Integer,  _
                    ByVal Original_syofferingpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_resource As Integer,  _
                    ByVal Original_semesterpk As Integer,  _
                    ByVal Original_monday As Boolean,  _
                    ByVal Original_tuesday As Boolean,  _
                    ByVal Original_wednesday As Boolean,  _
                    ByVal Original_thursday As Boolean,  _
                    ByVal Original_friday As Boolean,  _
                    ByVal Original_saturday As Boolean,  _
                    ByVal Original_sunday As Boolean,  _
                    ByVal Original_sunfrom As String,  _
                    ByVal Original_sunto As String,  _
                    ByVal Original_monfrom As String,  _
                    ByVal Original_monto As String,  _
                    ByVal Original_tuesfrom As String,  _
                    ByVal Original_tuesto As String,  _
                    ByVal Original_wedfrom As String,  _
                    ByVal Original_wedto As String,  _
                    ByVal Original_thufrom As String,  _
                    ByVal Original_thuto As String,  _
                    ByVal Original_frifrom As String,  _
                    ByVal Original_frito As String,  _
                    ByVal Original_satfrom As String,  _
                    ByVal Original_satto As String,  _
                    ByVal Original_alternatefriday As Boolean,  _
                    ByVal Original_semid As Integer,  _
                    ByVal Original_teacherid As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_MinStudents As Integer,  _
                    ByVal Original_MaxStudents As Integer) As Integer
            Return Me.Update(sypk, subjectpk, resource, semesterpk, monday, tuesday, wednesday, thursday, friday, saturday, sunday, sunfrom, sunto, monfrom, monto, tuesfrom, tuesto, wedfrom, wedto, thufrom, thuto, frifrom, frito, satfrom, satto, alternatefriday, semid, teacherid, Remarks, MinStudents, MaxStudents, Original_syofferingpk, Original_sypk, Original_subjectpk, Original_resource, Original_semesterpk, Original_monday, Original_tuesday, Original_wednesday, Original_thursday, Original_friday, Original_saturday, Original_sunday, Original_sunfrom, Original_sunto, Original_monfrom, Original_monto, Original_tuesfrom, Original_tuesto, Original_wedfrom, Original_wedto, Original_thufrom, Original_thuto, Original_frifrom, Original_frito, Original_satfrom, Original_satto, Original_alternatefriday, Original_semid, Original_teacherid, Original_Remarks, Original_MinStudents, Original_MaxStudents, Original_syofferingpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentsbyPK"
            tableMapping.ColumnMappings.Add("StudentPK", "StudentPK")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("Address1", "Address1")
            tableMapping.ColumnMappings.Add("Address2", "Address2")
            tableMapping.ColumnMappings.Add("Address3", "Address3")
            tableMapping.ColumnMappings.Add("Phone", "Phone")
            tableMapping.ColumnMappings.Add("MotherName", "MotherName")
            tableMapping.ColumnMappings.Add("FatherName", "FatherName")
            tableMapping.ColumnMappings.Add("Guardian", "Guardian")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("Edubackground1", "Edubackground1")
            tableMapping.ColumnMappings.Add("Edubackgrounddate1", "Edubackgrounddate1")
            tableMapping.ColumnMappings.Add("Edubackground2", "Edubackground2")
            tableMapping.ColumnMappings.Add("Edubackgrounddate2", "Edubackgrounddate2")
            tableMapping.ColumnMappings.Add("Edubackground3", "Edubackground3")
            tableMapping.ColumnMappings.Add("Edubackgrounddate3", "Edubackgrounddate3")
            tableMapping.ColumnMappings.Add("Edubackground4", "Edubackground4")
            tableMapping.ColumnMappings.Add("Edubackgrounddate4", "Edubackgrounddate4")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("StudentType", "StudentType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Students] WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID"& _ 
                "] = @Original_StudentID) AND ([StudentName] = @Original_StudentName) AND ([Addre"& _ 
                "ss1] = @Original_Address1) AND ([Address2] = @Original_Address2) AND ([Address3]"& _ 
                " = @Original_Address3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Orig"& _ 
                "inal_MotherName) AND ([FatherName] = @Original_FatherName) AND ([Guardian] = @Or"& _ 
                "iginal_Guardian) AND ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] ="& _ 
                " @Original_Edubackground1) AND ([Edubackgrounddate1] = @Original_Edubackgroundda"& _ 
                "te1) AND ([Edubackground2] = @Original_Edubackground2) AND ([Edubackgrounddate2]"& _ 
                " = @Original_Edubackgrounddate2) AND ([Edubackground3] = @Original_Edubackground"& _ 
                "3) AND ([Edubackgrounddate3] = @Original_Edubackgrounddate3) AND ([Edubackground"& _ 
                "4] = @Original_Edubackground4) AND ([Edubackgrounddate4] = @Original_Edubackgrou"& _ 
                "nddate4) AND ((@IsNull_Gender = 1 AND [Gender] IS NULL) OR ([Gender] = @Original"& _ 
                "_Gender)) AND ((@IsNull_StudentType = 1 AND [StudentType] IS NULL) OR ([StudentT"& _ 
                "ype] = @Original_StudentType)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Students] ([StudentID], [StudentName], [Address1], [Address2], [Addr"& _ 
                "ess3], [Phone], [MotherName], [FatherName], [Guardian], [Birthdate], [Edubackgro"& _ 
                "und1], [Edubackgrounddate1], [Edubackground2], [Edubackgrounddate2], [Edubackgro"& _ 
                "und3], [Edubackgrounddate3], [Edubackground4], [Edubackgrounddate4], [Gender], ["& _ 
                "StudentType]) VALUES (@StudentID, @StudentName, @Address1, @Address2, @Address3,"& _ 
                " @Phone, @MotherName, @FatherName, @Guardian, @Birthdate, @Edubackground1, @Edub"& _ 
                "ackgrounddate1, @Edubackground2, @Edubackgrounddate2, @Edubackground3, @Edubackg"& _ 
                "rounddate3, @Edubackground4, @Edubackgrounddate4, @Gender, @StudentType);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T StudentPK, StudentID, StudentName, Address1, Address2, Address3, Phone, Mother"& _ 
                "Name, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Eduba"& _ 
                "ckground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground"& _ 
                "4, Edubackgrounddate4, Gender, StudentType FROM Students WHERE (StudentPK = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Students] SET [StudentID] = @StudentID, [StudentName] = @StudentName, [Ad"& _ 
                "dress1] = @Address1, [Address2] = @Address2, [Address3] = @Address3, [Phone] = @"& _ 
                "Phone, [MotherName] = @MotherName, [FatherName] = @FatherName, [Guardian] = @Gua"& _ 
                "rdian, [Birthdate] = @Birthdate, [Edubackground1] = @Edubackground1, [Edubackgro"& _ 
                "unddate1] = @Edubackgrounddate1, [Edubackground2] = @Edubackground2, [Edubackgro"& _ 
                "unddate2] = @Edubackgrounddate2, [Edubackground3] = @Edubackground3, [Edubackgro"& _ 
                "unddate3] = @Edubackgrounddate3, [Edubackground4] = @Edubackground4, [Edubackgro"& _ 
                "unddate4] = @Edubackgrounddate4, [Gender] = @Gender, [StudentType] = @StudentTyp"& _ 
                "e WHERE (([StudentPK] = @Original_StudentPK) AND ([StudentID] = @Original_Studen"& _ 
                "tID) AND ([StudentName] = @Original_StudentName) AND ([Address1] = @Original_Add"& _ 
                "ress1) AND ([Address2] = @Original_Address2) AND ([Address3] = @Original_Address"& _ 
                "3) AND ([Phone] = @Original_Phone) AND ([MotherName] = @Original_MotherName) AND"& _ 
                " ([FatherName] = @Original_FatherName) AND ([Guardian] = @Original_Guardian) AND"& _ 
                " ([Birthdate] = @Original_Birthdate) AND ([Edubackground1] = @Original_Edubackgr"& _ 
                "ound1) AND ([Edubackgrounddate1] = @Original_Edubackgrounddate1) AND ([Edubackgr"& _ 
                "ound2] = @Original_Edubackground2) AND ([Edubackgrounddate2] = @Original_Eduback"& _ 
                "grounddate2) AND ([Edubackground3] = @Original_Edubackground3) AND ([Edubackgrou"& _ 
                "nddate3] = @Original_Edubackgrounddate3) AND ([Edubackground4] = @Original_Eduba"& _ 
                "ckground4) AND ([Edubackgrounddate4] = @Original_Edubackgrounddate4) AND ((@IsNu"& _ 
                "ll_Gender = 1 AND [Gender] IS NULL) OR ([Gender] = @Original_Gender)) AND ((@IsN"& _ 
                "ull_StudentType = 1 AND [StudentType] IS NULL) OR ([StudentType] = @Original_Stu"& _ 
                "dentType)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT StudentPK, StudentID, StudentName, Address1, Address2, Addr"& _ 
                "ess3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubac"& _ 
                "kgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgroundd"& _ 
                "ate3, Edubackground4, Edubackgrounddate4, Gender, StudentType FROM Students WHER"& _ 
                "E (StudentPK = @StudentPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MotherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MotherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FatherName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FatherName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Guardian", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Guardian", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Birthdate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Birthdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackground4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackground4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Edubackgrounddate4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Edubackgrounddate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Gender", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StudentType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StudentType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StudentPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     StudentPK, StudentID, StudentName, Address1, Address2, Address3, Phone"& _ 
                ", MotherName, FatherName, Guardian, Birthdate, Edubackground1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, E"& _ 
                "dubackgrounddate3, Edubackground4, Edubackgrounddate4, Gender, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       StudentType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Students"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (StudentPK = @studentpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "StudentPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentsbyPKDataTable, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal studentpk As Integer) As dsRegistrar.StudentsbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(studentpk,Integer)
            Dim dataTable As dsRegistrar.StudentsbyPKDataTable = New dsRegistrar.StudentsbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentsbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "StudentsbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_StudentType As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Gender,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_StudentType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Gender As String,  _
                    ByVal StudentType As String) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Gender,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(StudentType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Gender As String,  _
                    ByVal StudentType As String,  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_StudentType As String,  _
                    ByVal StudentPK As Integer) As Integer
            If (StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StudentID,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StudentName,String)
            End If
            If (Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Address1,String)
            End If
            If (Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address2,String)
            End If
            If (Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Address3,String)
            End If
            If (Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone,String)
            End If
            If (MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MotherName,String)
            End If
            If (FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FatherName,String)
            End If
            If (Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Guardian,String)
            End If
            If (Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Birthdate,String)
            End If
            If (Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Edubackground1,String)
            End If
            If (Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Edubackgrounddate1,String)
            End If
            If (Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Edubackground2,String)
            End If
            If (Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Edubackgrounddate2,String)
            End If
            If (Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Edubackground3,String)
            End If
            If (Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Edubackgrounddate3,String)
            End If
            If (Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Edubackground4,String)
            End If
            If (Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Edubackgrounddate4,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Gender,String)
            End If
            If (StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(StudentType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_StudentPK,Integer)
            If (Original_StudentID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentID")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_StudentID,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_StudentName,String)
            End If
            If (Original_Address1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address1")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Address1,String)
            End If
            If (Original_Address2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address2")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Address2,String)
            End If
            If (Original_Address3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Address3")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Address3,String)
            End If
            If (Original_Phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Phone,String)
            End If
            If (Original_MotherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MotherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_MotherName,String)
            End If
            If (Original_FatherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FatherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_FatherName,String)
            End If
            If (Original_Guardian Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Guardian")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Guardian,String)
            End If
            If (Original_Birthdate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Birthdate")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Birthdate,String)
            End If
            If (Original_Edubackground1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground1")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Edubackground1,String)
            End If
            If (Original_Edubackgrounddate1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate1")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Edubackgrounddate1,String)
            End If
            If (Original_Edubackground2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground2")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Edubackground2,String)
            End If
            If (Original_Edubackgrounddate2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate2")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Edubackgrounddate2,String)
            End If
            If (Original_Edubackground3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground3")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Edubackground3,String)
            End If
            If (Original_Edubackgrounddate3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate3")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Edubackgrounddate3,String)
            End If
            If (Original_Edubackground4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackground4")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Edubackground4,String)
            End If
            If (Original_Edubackgrounddate4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Edubackgrounddate4")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Edubackgrounddate4,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Gender,String)
            End If
            If (Original_StudentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_StudentType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(StudentPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal StudentID As String,  _
                    ByVal StudentName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal Address3 As String,  _
                    ByVal Phone As String,  _
                    ByVal MotherName As String,  _
                    ByVal FatherName As String,  _
                    ByVal Guardian As String,  _
                    ByVal Birthdate As String,  _
                    ByVal Edubackground1 As String,  _
                    ByVal Edubackgrounddate1 As String,  _
                    ByVal Edubackground2 As String,  _
                    ByVal Edubackgrounddate2 As String,  _
                    ByVal Edubackground3 As String,  _
                    ByVal Edubackgrounddate3 As String,  _
                    ByVal Edubackground4 As String,  _
                    ByVal Edubackgrounddate4 As String,  _
                    ByVal Gender As String,  _
                    ByVal StudentType As String,  _
                    ByVal Original_StudentPK As Integer,  _
                    ByVal Original_StudentID As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_Address1 As String,  _
                    ByVal Original_Address2 As String,  _
                    ByVal Original_Address3 As String,  _
                    ByVal Original_Phone As String,  _
                    ByVal Original_MotherName As String,  _
                    ByVal Original_FatherName As String,  _
                    ByVal Original_Guardian As String,  _
                    ByVal Original_Birthdate As String,  _
                    ByVal Original_Edubackground1 As String,  _
                    ByVal Original_Edubackgrounddate1 As String,  _
                    ByVal Original_Edubackground2 As String,  _
                    ByVal Original_Edubackgrounddate2 As String,  _
                    ByVal Original_Edubackground3 As String,  _
                    ByVal Original_Edubackgrounddate3 As String,  _
                    ByVal Original_Edubackground4 As String,  _
                    ByVal Original_Edubackgrounddate4 As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_StudentType As String) As Integer
            Return Me.Update(StudentID, StudentName, Address1, Address2, Address3, Phone, MotherName, FatherName, Guardian, Birthdate, Edubackground1, Edubackgrounddate1, Edubackground2, Edubackgrounddate2, Edubackground3, Edubackgrounddate3, Edubackground4, Edubackgrounddate4, Gender, StudentType, Original_StudentPK, Original_StudentID, Original_StudentName, Original_Address1, Original_Address2, Original_Address3, Original_Phone, Original_MotherName, Original_FatherName, Original_Guardian, Original_Birthdate, Original_Edubackground1, Original_Edubackgrounddate1, Original_Edubackground2, Original_Edubackgrounddate2, Original_Edubackground3, Original_Edubackgrounddate3, Original_Edubackground4, Original_Edubackgrounddate4, Original_Gender, Original_StudentType, Original_StudentPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentGradesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentGrades"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("exSubjectUnits", "exSubjectUnits")
            tableMapping.ColumnMappings.Add("exCreditGroup", "exCreditGroup")
            tableMapping.ColumnMappings.Add("exSubjectCode", "exSubjectCode")
            tableMapping.ColumnMappings.Add("exCompletionGrade", "exCompletionGrade")
            tableMapping.ColumnMappings.Add("isPrevSchoolGrade", "isPrevSchoolGrade")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("exUnits", "exUnits")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [StudentGrades] WHERE (([pk] = @Original_pk) AND ([datein] = @Origina"& _ 
                "l_datein) AND ([grade] = @Original_grade) AND ([keythrough] = @Original_keythrou"& _ 
                "gh) AND ([subjectpk] = @Original_subjectpk) AND ([sypk] = @Original_sypk) AND (["& _ 
                "sempk] = @Original_sempk) AND ([teacherpk] = @Original_teacherpk) AND ([studentp"& _ 
                "k] = @Original_studentpk) AND ([extSubjectID] = @Original_extSubjectID) AND ([ex"& _ 
                "SubjectDesc] = @Original_exSubjectDesc) AND ([exSubjectGrade] = @Original_exSubj"& _ 
                "ectGrade) AND ([coursepk] = @Original_coursepk) AND ((@IsNull_exSubjectUnits = 1"& _ 
                " AND [exSubjectUnits] IS NULL) OR ([exSubjectUnits] = @Original_exSubjectUnits))"& _ 
                " AND ((@IsNull_exCreditGroup = 1 AND [exCreditGroup] IS NULL) OR ([exCreditGroup"& _ 
                "] = @Original_exCreditGroup)) AND ((@IsNull_exSubjectCode = 1 AND [exSubjectCode"& _ 
                "] IS NULL) OR ([exSubjectCode] = @Original_exSubjectCode)) AND ((@IsNull_exCompl"& _ 
                "etionGrade = 1 AND [exCompletionGrade] IS NULL) OR ([exCompletionGrade] = @Origi"& _ 
                "nal_exCompletionGrade)) AND ((@IsNull_isPrevSchoolGrade = 1 AND [isPrevSchoolGra"& _ 
                "de] IS NULL) OR ([isPrevSchoolGrade] = @Original_isPrevSchoolGrade)) AND ((@IsNu"& _ 
                "ll_exUnits = 1 AND [exUnits] IS NULL) OR ([exUnits] = @Original_exUnits)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [StudentGrades] ([datein], [grade], [keythrough], [subjectpk], [sypk]"& _ 
                ", [sempk], [teacherpk], [studentpk], [extSubjectID], [exSubjectDesc], [exSubject"& _ 
                "Grade], [coursepk], [exSubjectUnits], [exCreditGroup], [exSubjectCode], [exCompl"& _ 
                "etionGrade], [isPrevSchoolGrade], [exUnits]) VALUES (@datein, @grade, @keythroug"& _ 
                "h, @subjectpk, @sypk, @sempk, @teacherpk, @studentpk, @extSubjectID, @exSubjectD"& _ 
                "esc, @exSubjectGrade, @coursepk, @exSubjectUnits, @exCreditGroup, @exSubjectCode"& _ 
                ", @exCompletionGrade, @isPrevSchoolGrade, @exUnits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, "& _ 
                "keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjec"& _ 
                "tDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, e"& _ 
                "xCompletionGrade, isPrevSchoolGrade, exUnits FROM StudentGrades WHERE (pk = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [StudentGrades] SET [datein] = @datein, [grade] = @grade, [keythrough] = @"& _ 
                "keythrough, [subjectpk] = @subjectpk, [sypk] = @sypk, [sempk] = @sempk, [teacher"& _ 
                "pk] = @teacherpk, [studentpk] = @studentpk, [extSubjectID] = @extSubjectID, [exS"& _ 
                "ubjectDesc] = @exSubjectDesc, [exSubjectGrade] = @exSubjectGrade, [coursepk] = @"& _ 
                "coursepk, [exSubjectUnits] = @exSubjectUnits, [exCreditGroup] = @exCreditGroup, "& _ 
                "[exSubjectCode] = @exSubjectCode, [exCompletionGrade] = @exCompletionGrade, [isP"& _ 
                "revSchoolGrade] = @isPrevSchoolGrade, [exUnits] = @exUnits WHERE (([pk] = @Origi"& _ 
                "nal_pk) AND ([datein] = @Original_datein) AND ([grade] = @Original_grade) AND (["& _ 
                "keythrough] = @Original_keythrough) AND ([subjectpk] = @Original_subjectpk) AND "& _ 
                "([sypk] = @Original_sypk) AND ([sempk] = @Original_sempk) AND ([teacherpk] = @Or"& _ 
                "iginal_teacherpk) AND ([studentpk] = @Original_studentpk) AND ([extSubjectID] = "& _ 
                "@Original_extSubjectID) AND ([exSubjectDesc] = @Original_exSubjectDesc) AND ([ex"& _ 
                "SubjectGrade] = @Original_exSubjectGrade) AND ([coursepk] = @Original_coursepk) "& _ 
                "AND ((@IsNull_exSubjectUnits = 1 AND [exSubjectUnits] IS NULL) OR ([exSubjectUni"& _ 
                "ts] = @Original_exSubjectUnits)) AND ((@IsNull_exCreditGroup = 1 AND [exCreditGr"& _ 
                "oup] IS NULL) OR ([exCreditGroup] = @Original_exCreditGroup)) AND ((@IsNull_exSu"& _ 
                "bjectCode = 1 AND [exSubjectCode] IS NULL) OR ([exSubjectCode] = @Original_exSub"& _ 
                "jectCode)) AND ((@IsNull_exCompletionGrade = 1 AND [exCompletionGrade] IS NULL) "& _ 
                "OR ([exCompletionGrade] = @Original_exCompletionGrade)) AND ((@IsNull_isPrevScho"& _ 
                "olGrade = 1 AND [isPrevSchoolGrade] IS NULL) OR ([isPrevSchoolGrade] = @Original"& _ 
                "_isPrevSchoolGrade)) AND ((@IsNull_exUnits = 1 AND [exUnits] IS NULL) OR ([exUni"& _ 
                "ts] = @Original_exUnits)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk, sy"& _ 
                "pk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, co"& _ 
                "ursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevS"& _ 
                "choolGrade, exUnits FROM StudentGrades WHERE (pk = @pk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentp"& _ 
                "k, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCred"& _ 
                "itGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, exUnits"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" FROM Stu"& _ 
                "dentGrades WHERE (keythrough = @keythrough) AND (subjectpk = @subject) AND (sypk"& _ 
                " = @sypk) AND (sempk = @sempk) AND (studentpk = @student)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentGradesDataTable, ByVal keythrough As String, ByVal subject As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal student As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(keythrough,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(student,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal keythrough As String, ByVal subject As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal student As Integer) As dsRegistrar.StudentGradesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(keythrough,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(student,Integer)
            Dim dataTable As dsRegistrar.StudentGradesDataTable = New dsRegistrar.StudentGradesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentGradesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "StudentGrades")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_datein,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_coursepk,Integer)
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_exUnits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_exUnits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (exUnits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(exUnits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (exUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(exUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_datein,Date)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_coursepk,Integer)
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_exUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_exUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, exUnits, Original_pk, Original_datein, Original_grade, Original_keythrough, Original_subjectpk, Original_sypk, Original_sempk, Original_teacherpk, Original_studentpk, Original_extSubjectID, Original_exSubjectDesc, Original_exSubjectGrade, Original_coursepk, Original_exSubjectUnits, Original_exCreditGroup, Original_exSubjectCode, Original_exCompletionGrade, Original_isPrevSchoolGrade, Original_exUnits, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TemplateGradeEntryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TemplateGradeEntry"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("Student", "Student")
            tableMapping.ColumnMappings.Add("Studentpk", "Studentpk")
            tableMapping.ColumnMappings.Add("Grade", "Grade")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TemplateGradeEntry] WHERE (([pk] = @Original_pk) AND ([Student] = @O"& _ 
                "riginal_Student) AND ([Studentpk] = @Original_Studentpk) AND ([Grade] = @Origina"& _ 
                "l_Grade))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Student", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Student", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TemplateGradeEntry] ([Student], [Studentpk], [Grade]) VALUES (@Stude"& _ 
                "nt, @Studentpk, @Grade);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, Student, Studentpk, Grade FROM TemplateGrad"& _ 
                "eEntry WHERE (pk = SCOPE_IDENTITY()) ORDER BY Student"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Student", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Student", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TemplateGradeEntry] SET [Student] = @Student, [Studentpk] = @Studentpk, ["& _ 
                "Grade] = @Grade WHERE (([pk] = @Original_pk) AND ([Student] = @Original_Student)"& _ 
                " AND ([Studentpk] = @Original_Studentpk) AND ([Grade] = @Original_Grade));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT pk, Student, Studentpk, Grade FROM TemplateGradeEntry WHERE (pk = @pk) ORDER "& _ 
                "BY Student"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Student", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Student", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Student", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Student", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk, Student, Studentpk, Grade FROM TemplateGradeEntry"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Student"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.TemplateGradeEntryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRegistrar.TemplateGradeEntryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRegistrar.TemplateGradeEntryDataTable = New dsRegistrar.TemplateGradeEntryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.TemplateGradeEntryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "TemplateGradeEntry")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk As Integer, ByVal Original_Student As String, ByVal Original_Studentpk As Integer, ByVal Original_Grade As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            If (Original_Student Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Student")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Student,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Grade,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Student As String, ByVal Studentpk As Integer, ByVal Grade As Decimal) As Integer
            If (Student Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Student")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Student,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Grade,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Student As String, ByVal Studentpk As Integer, ByVal Grade As Decimal, ByVal Original_pk As Integer, ByVal Original_Student As String, ByVal Original_Studentpk As Integer, ByVal Original_Grade As Decimal, ByVal pk As Integer) As Integer
            If (Student Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Student")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Student,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Grade,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_pk,Integer)
            If (Original_Student Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Student")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Student,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Grade,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Student As String, ByVal Studentpk As Integer, ByVal Grade As Decimal, ByVal Original_pk As Integer, ByVal Original_Student As String, ByVal Original_Studentpk As Integer, ByVal Original_Grade As Decimal) As Integer
            Return Me.Update(Student, Studentpk, Grade, Original_pk, Original_Student, Original_Studentpk, Original_Grade, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingSelect2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingSelect2"
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("resource", "resource")
            tableMapping.ColumnMappings.Add("semesterpk", "semesterpk")
            tableMapping.ColumnMappings.Add("monday", "monday")
            tableMapping.ColumnMappings.Add("tuesday", "tuesday")
            tableMapping.ColumnMappings.Add("wednesday", "wednesday")
            tableMapping.ColumnMappings.Add("thursday", "thursday")
            tableMapping.ColumnMappings.Add("friday", "friday")
            tableMapping.ColumnMappings.Add("saturday", "saturday")
            tableMapping.ColumnMappings.Add("sunday", "sunday")
            tableMapping.ColumnMappings.Add("sunfrom", "sunfrom")
            tableMapping.ColumnMappings.Add("sunto", "sunto")
            tableMapping.ColumnMappings.Add("monfrom", "monfrom")
            tableMapping.ColumnMappings.Add("monto", "monto")
            tableMapping.ColumnMappings.Add("tuesfrom", "tuesfrom")
            tableMapping.ColumnMappings.Add("tuesto", "tuesto")
            tableMapping.ColumnMappings.Add("wedfrom", "wedfrom")
            tableMapping.ColumnMappings.Add("wedto", "wedto")
            tableMapping.ColumnMappings.Add("thufrom", "thufrom")
            tableMapping.ColumnMappings.Add("thuto", "thuto")
            tableMapping.ColumnMappings.Add("frifrom", "frifrom")
            tableMapping.ColumnMappings.Add("frito", "frito")
            tableMapping.ColumnMappings.Add("satfrom", "satfrom")
            tableMapping.ColumnMappings.Add("satto", "satto")
            tableMapping.ColumnMappings.Add("alternatefriday", "alternatefriday")
            tableMapping.ColumnMappings.Add("semid", "semid")
            tableMapping.ColumnMappings.Add("teacherid", "teacherid")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("MinStudents", "MinStudents")
            tableMapping.ColumnMappings.Add("MaxStudents", "MaxStudents")
            tableMapping.ColumnMappings.Add("closed", "closed")
            tableMapping.ColumnMappings.Add("requested", "requested")
            tableMapping.ColumnMappings.Add("SubjectName", "SubjectName")
            tableMapping.ColumnMappings.Add("IsFused", "IsFused")
            tableMapping.ColumnMappings.Add("IsSpecialTutorial", "IsSpecialTutorial")
            tableMapping.ColumnMappings.Add("subjectcode", "subjectcode")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT       subjectcode, Subjects.SubjectName, SYOffering.syofferingpk, SYOfferi"& _ 
                "ng.sypk, SYOffering.subjectpk, SYOffering.resource, SYOffering.semesterpk, SYOff"& _ 
                "ering.monday, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SYOffering.tuesday, SYOffering.wednesda"& _ 
                "y, SYOffering.thursday, SYOffering.friday, SYOffering.saturday, SYOffering.sunda"& _ 
                "y, SYOffering.sunfrom, SYOffering.sunto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SYOffering.m"& _ 
                "onfrom, SYOffering.monto, SYOffering.tuesfrom, SYOffering.tuesto, SYOffering.wed"& _ 
                "from, SYOffering.wedto, SYOffering.thufrom, SYOffering.thuto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         SYOffering.frifrom, SYOffering.frito, SYOffering.satfrom, SYOffering.sa"& _ 
                "tto, SYOffering.alternatefriday, SYOffering.semid, SYOffering.teacherid, SYOffer"& _ 
                "ing.Remarks, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SYOffering.MinStudents, SYOffering.MaxSt"& _ 
                "udents, SYOffering.closed, SYOffering.requested, SYOffering.IsFused, SYOffering."& _ 
                "IsSpecialTutorial"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SYOffering LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "        Subjects ON SYOffering.subjectpk = Subjects.SubjectPriKey"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "(SYOffering.sypk = @sy) AND (SYOffering.semesterpk = @sem) AND (SYOffering.semid"& _ 
                " = @sem) AND (ISNULL(SYOffering.IsDeleted, 0) <> 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Subjects.SubjectCo"& _ 
                "de"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sy", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "semesterpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingSelect2DataTable, ByVal sy As Integer, ByVal sem As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sy As Integer, ByVal sem As Integer) As dsRegistrar.SYOfferingSelect2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sy,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Dim dataTable As dsRegistrar.SYOfferingSelect2DataTable = New dsRegistrar.SYOfferingSelect2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsbySyOPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsbySyOPK"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     a.enrollpk, a.yearpk, a.sempk, a.studentpk, a.date, a.transref, a.subj"& _ 
                "ectpk, a.syofferingpk, a.status, a.coursepk, b.StudentName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EnrollS"& _ 
                "ubjects AS a LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Students AS b ON a.studentpk"& _ 
                " = b.StudentPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (a.syofferingpk = @syofferingpk)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY b.StudentNa"& _ 
                "me"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsbySyOPKDataTable, ByVal syofferingpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferingpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal syofferingpk As Integer) As dsRegistrar.EnrollSubjectsbySyOPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferingpk,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsbySyOPKDataTable = New dsRegistrar.EnrollSubjectsbySyOPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BlockSectionTuitionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BlockSectionTuition"
            tableMapping.ColumnMappings.Add("BlockSectionPK", "BlockSectionPK")
            tableMapping.ColumnMappings.Add("SEM", "SEM")
            tableMapping.ColumnMappings.Add("course", "course")
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            tableMapping.ColumnMappings.Add("eduyear", "eduyear")
            tableMapping.ColumnMappings.Add("effectivedate", "effectivedate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BlockSectionTuition] WHERE (([BlockSectionPK] = @Original_Bloc"& _ 
                "kSectionPK) AND ([SEM] = @Original_SEM) AND ([course] = @Original_course) AND (["& _ 
                "subjectid] = @Original_subjectid) AND ([eduyear] = @Original_eduyear) AND ([effe"& _ 
                "ctivedate] = @Original_effectivedate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BlockSectionTuition] ([SEM], [course], [subjectid], [eduyear],"& _ 
                " [effectivedate]) VALUES (@SEM, @course, @subjectid, @eduyear, @effectivedate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM Bloc"& _ 
                "kSectionTuition WHERE (BlockSectionPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[BlockSectionTuition] SET [SEM] = @SEM, [course] = @course, [subject"& _ 
                "id] = @subjectid, [eduyear] = @eduyear, [effectivedate] = @effectivedate WHERE ("& _ 
                "([BlockSectionPK] = @Original_BlockSectionPK) AND ([SEM] = @Original_SEM) AND (["& _ 
                "course] = @Original_course) AND ([subjectid] = @Original_subjectid) AND ([eduyea"& _ 
                "r] = @Original_eduyear) AND ([effectivedate] = @Original_effectivedate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM BlockSecti"& _ 
                "onTuition WHERE (BlockSectionPK = @BlockSectionPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BlockSectionPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM dbo.Bl"& _ 
                "ockSectionTuition where"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"course=@course "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and sem=@sem "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"and eduyear=@eduyear "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "and effectivedate<=@date"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.BlockSectionTuitionDataTable, ByVal course As Integer, ByVal sem As Integer, ByVal eduyear As Integer, ByVal _date As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(eduyear,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(_date,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal course As Integer, ByVal sem As Integer, ByVal eduyear As Integer, ByVal _date As Date) As dsRegistrar.BlockSectionTuitionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(eduyear,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(_date,Date)
            Dim dataTable As dsRegistrar.BlockSectionTuitionDataTable = New dsRegistrar.BlockSectionTuitionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.BlockSectionTuitionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "BlockSectionTuition")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEM,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_course,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_subjectid,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_eduyear,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_effectivedate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(eduyear,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(effectivedate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date, ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date, ByVal BlockSectionPK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(eduyear,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(effectivedate,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_course,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_eduyear,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_effectivedate,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BlockSectionPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date, ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date) As Integer
            Return Me.Update(SEM, course, subjectid, eduyear, effectivedate, Original_BlockSectionPK, Original_SEM, Original_course, Original_subjectid, Original_eduyear, Original_effectivedate, Original_BlockSectionPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollHeaderTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollHeader"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollHeader] WHERE (([PK] = @Original_PK) AND ([sempk] = @Original_"& _ 
                "sempk) AND ([yearpk] = @Original_yearpk) AND ([studentpk] = @Original_studentpk)"& _ 
                " AND ([remarks] = @Original_remarks) AND ((@IsNull_yrlevel = 1 AND [yrlevel] IS "& _ 
                "NULL) OR ([yrlevel] = @Original_yrlevel)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollHeader] ([sempk], [yearpk], [studentpk], [remarks], [yrlevel])"& _ 
                " VALUES (@sempk, @yearpk, @studentpk, @remarks, @yrlevel);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, sempk, ye"& _ 
                "arpk, studentpk, remarks, yrlevel FROM EnrollHeader WHERE (PK = SCOPE_IDENTITY()"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollHeader] SET [sempk] = @sempk, [yearpk] = @yearpk, [studentpk] = @st"& _ 
                "udentpk, [remarks] = @remarks, [yrlevel] = @yrlevel WHERE (([PK] = @Original_PK)"& _ 
                " AND ([sempk] = @Original_sempk) AND ([yearpk] = @Original_yearpk) AND ([student"& _ 
                "pk] = @Original_studentpk) AND ([remarks] = @Original_remarks) AND ((@IsNull_yrl"& _ 
                "evel = 1 AND [yrlevel] IS NULL) OR ([yrlevel] = @Original_yrlevel)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK"& _ 
                ", sempk, yearpk, studentpk, remarks, yrlevel FROM EnrollHeader WHERE (PK = @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PK, sempk, yearpk, studentpk, remarks, yrlevel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Enr"& _ 
                "ollHeader"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (sempk = @sem) AND (yearpk = @year) AND (studentpk = @st"& _ 
                "udnet)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studnet", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollHeaderDataTable, ByVal sem As Integer, ByVal year As Integer, ByVal studnet As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(studnet,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sem As Integer, ByVal year As Integer, ByVal studnet As Integer) As dsRegistrar.EnrollHeaderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(studnet,Integer)
            Dim dataTable As dsRegistrar.EnrollHeaderDataTable = New dsRegistrar.EnrollHeaderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollHeaderDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollHeader")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_sempk As Integer, ByVal Original_yearpk As Integer, ByVal Original_studentpk As Integer, ByVal Original_remarks As String, ByVal Original_yrlevel As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_yearpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_studentpk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_remarks,String)
            End If
            If (Original_yrlevel.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_yrlevel.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal studentpk As Integer, ByVal remarks As String, ByVal yrlevel As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(yearpk,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(studentpk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(remarks,String)
            End If
            If (yrlevel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(yrlevel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal studentpk As Integer, ByVal remarks As String, ByVal yrlevel As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_sempk As Integer, ByVal Original_yearpk As Integer, ByVal Original_studentpk As Integer, ByVal Original_remarks As String, ByVal Original_yrlevel As Global.System.Nullable(Of Integer), ByVal PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(studentpk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(remarks,String)
            End If
            If (yrlevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(yrlevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_yearpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_remarks,String)
            End If
            If (Original_yrlevel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_yrlevel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal sempk As Integer, ByVal yearpk As Integer, ByVal studentpk As Integer, ByVal remarks As String, ByVal yrlevel As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_sempk As Integer, ByVal Original_yearpk As Integer, ByVal Original_studentpk As Integer, ByVal Original_remarks As String, ByVal Original_yrlevel As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(sempk, yearpk, studentpk, remarks, yrlevel, Original_PK, Original_sempk, Original_yearpk, Original_studentpk, Original_remarks, Original_yrlevel, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BlockSectionTuitionbyCourseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BlockSectionTuitionbyCourse"
            tableMapping.ColumnMappings.Add("BlockSectionPK", "BlockSectionPK")
            tableMapping.ColumnMappings.Add("SEM", "SEM")
            tableMapping.ColumnMappings.Add("course", "course")
            tableMapping.ColumnMappings.Add("subjectid", "subjectid")
            tableMapping.ColumnMappings.Add("eduyear", "eduyear")
            tableMapping.ColumnMappings.Add("effectivedate", "effectivedate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BlockSectionTuition] WHERE (([BlockSectionPK] = @Original_Bloc"& _ 
                "kSectionPK) AND ([SEM] = @Original_SEM) AND ([course] = @Original_course) AND (["& _ 
                "subjectid] = @Original_subjectid) AND ([eduyear] = @Original_eduyear) AND ([effe"& _ 
                "ctivedate] = @Original_effectivedate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BlockSectionTuition] ([SEM], [course], [subjectid], [eduyear],"& _ 
                " [effectivedate]) VALUES (@SEM, @course, @subjectid, @eduyear, @effectivedate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM Bloc"& _ 
                "kSectionTuition WHERE (BlockSectionPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[BlockSectionTuition] SET [SEM] = @SEM, [course] = @course, [subject"& _ 
                "id] = @subjectid, [eduyear] = @eduyear, [effectivedate] = @effectivedate WHERE ("& _ 
                "([BlockSectionPK] = @Original_BlockSectionPK) AND ([SEM] = @Original_SEM) AND (["& _ 
                "course] = @Original_course) AND ([subjectid] = @Original_subjectid) AND ([eduyea"& _ 
                "r] = @Original_eduyear) AND ([effectivedate] = @Original_effectivedate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM BlockSecti"& _ 
                "onTuition WHERE (BlockSectionPK = @BlockSectionPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BlockSectionPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_course", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eduyear", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eduyear", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_effectivedate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "effectivedate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BlockSectionPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "BlockSectionPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BlockSectionPK, SEM, course, subjectid, eduyear, effectivedate FROM dbo.Bl"& _ 
                "ockSectionTuition where"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"course=@course"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "course", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.BlockSectionTuitionbyCourseDataTable, ByVal course As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal course As Integer) As dsRegistrar.BlockSectionTuitionbyCourseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(course,Integer)
            Dim dataTable As dsRegistrar.BlockSectionTuitionbyCourseDataTable = New dsRegistrar.BlockSectionTuitionbyCourseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.BlockSectionTuitionbyCourseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "BlockSectionTuitionbyCourse")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEM,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_course,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_subjectid,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_eduyear,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_effectivedate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(eduyear,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(effectivedate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date, ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date, ByVal BlockSectionPK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(course,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(eduyear,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(effectivedate,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_BlockSectionPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SEM,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_course,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_subjectid,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_eduyear,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_effectivedate,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BlockSectionPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEM As Integer, ByVal course As Integer, ByVal subjectid As Integer, ByVal eduyear As Integer, ByVal effectivedate As Date, ByVal Original_BlockSectionPK As Integer, ByVal Original_SEM As Integer, ByVal Original_course As Integer, ByVal Original_subjectid As Integer, ByVal Original_eduyear As Integer, ByVal Original_effectivedate As Date) As Integer
            Return Me.Update(SEM, course, subjectid, eduyear, effectivedate, Original_BlockSectionPK, Original_SEM, Original_course, Original_subjectid, Original_eduyear, Original_effectivedate, Original_BlockSectionPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentGradesbyStudentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentGradesbyStudent"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [StudentGrades] WHERE (([pk] = @Original_pk) AND ([datein] = @Origina"& _ 
                "l_datein) AND ([grade] = @Original_grade) AND ([keythrough] = @Original_keythrou"& _ 
                "gh) AND ([subjectpk] = @Original_subjectpk) AND ([sypk] = @Original_sypk) AND (["& _ 
                "sempk] = @Original_sempk) AND ([teacherpk] = @Original_teacherpk) AND ([studentp"& _ 
                "k] = @Original_studentpk) AND ([extSubjectID] = @Original_extSubjectID) AND ([ex"& _ 
                "SubjectDesc] = @Original_exSubjectDesc) AND ([exSubjectGrade] = @Original_exSubj"& _ 
                "ectGrade) AND ([coursepk] = @Original_coursepk))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [StudentGrades] ([datein], [grade], [keythrough], [subjectpk], [sypk]"& _ 
                ", [sempk], [teacherpk], [studentpk], [extSubjectID], [exSubjectDesc], [exSubject"& _ 
                "Grade], [coursepk]) VALUES (@datein, @grade, @keythrough, @subjectpk, @sypk, @se"& _ 
                "mpk, @teacherpk, @studentpk, @extSubjectID, @exSubjectDesc, @exSubjectGrade, @co"& _ 
                "ursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherp"& _ 
                "k, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk FROM Student"& _ 
                "Grades WHERE (pk = SCOPE_IDENTITY()) ORDER BY sypk, sempk, datein DESC"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [StudentGrades] SET [datein] = @datein, [grade] = @grade, [keythrough] = @"& _ 
                "keythrough, [subjectpk] = @subjectpk, [sypk] = @sypk, [sempk] = @sempk, [teacher"& _ 
                "pk] = @teacherpk, [studentpk] = @studentpk, [extSubjectID] = @extSubjectID, [exS"& _ 
                "ubjectDesc] = @exSubjectDesc, [exSubjectGrade] = @exSubjectGrade, [coursepk] = @"& _ 
                "coursepk WHERE (([pk] = @Original_pk) AND ([datein] = @Original_datein) AND ([gr"& _ 
                "ade] = @Original_grade) AND ([keythrough] = @Original_keythrough) AND ([subjectp"& _ 
                "k] = @Original_subjectpk) AND ([sypk] = @Original_sypk) AND ([sempk] = @Original"& _ 
                "_sempk) AND ([teacherpk] = @Original_teacherpk) AND ([studentpk] = @Original_stu"& _ 
                "dentpk) AND ([extSubjectID] = @Original_extSubjectID) AND ([exSubjectDesc] = @Or"& _ 
                "iginal_exSubjectDesc) AND ([exSubjectGrade] = @Original_exSubjectGrade) AND ([co"& _ 
                "ursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk"& _ 
                ", sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade"& _ 
                ", coursepk FROM StudentGrades WHERE (pk = @pk) ORDER BY sypk, sempk, datein DESC"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, s"& _ 
                "tudentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " StudentGrades"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (studentpk = @student)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY sypk, sempk, datei"& _ 
                "n DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentGradesbyStudentDataTable, ByVal student As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal student As Integer) As dsRegistrar.StudentGradesbyStudentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Dim dataTable As dsRegistrar.StudentGradesbyStudentDataTable = New dsRegistrar.StudentGradesbyStudentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentGradesbyStudentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "StudentGradesbyStudent")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk As Integer, ByVal Original_datein As Date, ByVal Original_grade As Decimal, ByVal Original_keythrough As String, ByVal Original_subjectpk As Integer, ByVal Original_sypk As Integer, ByVal Original_sempk As Integer, ByVal Original_teacherpk As Integer, ByVal Original_studentpk As Integer, ByVal Original_extSubjectID As String, ByVal Original_exSubjectDesc As String, ByVal Original_exSubjectGrade As Decimal, ByVal Original_coursepk As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_datein,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_exSubjectDesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_exSubjectGrade,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal datein As Date, ByVal grade As Decimal, ByVal keythrough As String, ByVal subjectpk As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal teacherpk As Integer, ByVal studentpk As Integer, ByVal extSubjectID As String, ByVal exSubjectDesc As String, ByVal exSubjectGrade As Decimal, ByVal coursepk As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(exSubjectGrade,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(coursepk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As Decimal,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As Decimal,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(exSubjectGrade,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_datein,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_exSubjectDesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_exSubjectGrade,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_coursepk,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As Decimal,  _
                    ByVal coursepk As Integer,  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As Decimal,  _
                    ByVal Original_coursepk As Integer) As Integer
            Return Me.Update(datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, Original_pk, Original_datein, Original_grade, Original_keythrough, Original_subjectpk, Original_sypk, Original_sempk, Original_teacherpk, Original_studentpk, Original_extSubjectID, Original_exSubjectDesc, Original_exSubjectGrade, Original_coursepk, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsbyClassTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsbyClass"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (yearpk"& _ 
                " = @year) AND (sempk = @sem) AND coursepk=@course and subjectpk=@subject"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@course", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsbyClassDataTable, ByVal year As Integer, ByVal sem As Integer, ByVal course As Integer, ByVal subject As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(course,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(subject,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal year As Integer, ByVal sem As Integer, ByVal course As Integer, ByVal subject As Integer) As dsRegistrar.EnrollSubjectsbyClassDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(course,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(subject,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsbyClassDataTable = New dsRegistrar.EnrollSubjectsbyClassDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjectsbyClassDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsbyClass")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SpecialCourseGradesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SpecialCourseGrades"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("SPK", "SPK")
            tableMapping.ColumnMappings.Add("EPK", "EPK")
            tableMapping.ColumnMappings.Add("SYOfferingPK", "SYOfferingPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SpecialCourseGrades] WHERE (([PK] = @Original_PK) AND ([SPK] = @Orig"& _ 
                "inal_SPK) AND ([EPK] = @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOffe"& _ 
                "ringPK] IS NULL) OR ([SYOfferingPK] = @Original_SYOfferingPK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SpecialCourseGrades] ([SPK], [EPK], [SYOfferingPK]) VALUES (@SPK, @E"& _ 
                "PK, @SYOfferingPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FROM SpecialCourseGrades "& _ 
                "WHERE (PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SpecialCourseGrades] SET [SPK] = @SPK, [EPK] = @EPK, [SYOfferingPK] = @SY"& _ 
                "OfferingPK WHERE (([PK] = @Original_PK) AND ([SPK] = @Original_SPK) AND ([EPK] ="& _ 
                " @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOfferingPK] IS NULL) OR (["& _ 
                "SYOfferingPK] = @Original_SYOfferingPK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FR"& _ 
                "OM SpecialCourseGrades WHERE (PK = @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PK, SPK, EPK, SYOfferingPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SpecialCourseGrades"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (SPK = @spk) AND (EPK = @epk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@epk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SpecialCourseGradesDataTable, ByVal spk As Integer, ByVal epk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(spk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(epk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal spk As Integer, ByVal epk As Integer) As dsRegistrar.SpecialCourseGradesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(spk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(epk,Integer)
            Dim dataTable As dsRegistrar.SpecialCourseGradesDataTable = New dsRegistrar.SpecialCourseGradesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SpecialCourseGradesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SpecialCourseGrades")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer), ByVal PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SPK, EPK, SYOfferingPK, Original_PK, Original_SPK, Original_EPK, Original_SYOfferingPK, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SpecialCourseGradesbySPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SpecialCourseGradesbySPK"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("SPK", "SPK")
            tableMapping.ColumnMappings.Add("EPK", "EPK")
            tableMapping.ColumnMappings.Add("SYOfferingPK", "SYOfferingPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SpecialCourseGrades] WHERE (([PK] = @Original_PK) AND ([SPK] = @Orig"& _ 
                "inal_SPK) AND ([EPK] = @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOffe"& _ 
                "ringPK] IS NULL) OR ([SYOfferingPK] = @Original_SYOfferingPK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SpecialCourseGrades] ([SPK], [EPK], [SYOfferingPK]) VALUES (@SPK, @E"& _ 
                "PK, @SYOfferingPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FROM SpecialCourseGrades "& _ 
                "WHERE (PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SpecialCourseGrades] SET [SPK] = @SPK, [EPK] = @EPK, [SYOfferingPK] = @SY"& _ 
                "OfferingPK WHERE (([PK] = @Original_PK) AND ([SPK] = @Original_SPK) AND ([EPK] ="& _ 
                " @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOfferingPK] IS NULL) OR (["& _ 
                "SYOfferingPK] = @Original_SYOfferingPK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FR"& _ 
                "OM SpecialCourseGrades WHERE (PK = @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PK, SPK, EPK, SYOfferingPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SpecialCourseGrades"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (SPK = @spk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SpecialCourseGradesbySPKDataTable, ByVal spk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(spk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal spk As Integer) As dsRegistrar.SpecialCourseGradesbySPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(spk,Integer)
            Dim dataTable As dsRegistrar.SpecialCourseGradesbySPKDataTable = New dsRegistrar.SpecialCourseGradesbySPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SpecialCourseGradesbySPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SpecialCourseGradesbySPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer), ByVal PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SPK, EPK, SYOfferingPK, Original_PK, Original_SPK, Original_EPK, Original_SYOfferingPK, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsbyPkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsbyPk"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        enrollp"& _ 
                "k=@enrollpk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsbyPkDataTable, ByVal enrollpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(enrollpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal enrollpk As Integer) As dsRegistrar.EnrollSubjectsbyPkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(enrollpk,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsbyPkDataTable = New dsRegistrar.EnrollSubjectsbyPkDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjectsbyPkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsbyPk")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SpecialCourseGradesbyEPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SpecialCourseGradesbyEPK"
            tableMapping.ColumnMappings.Add("PK", "PK")
            tableMapping.ColumnMappings.Add("SPK", "SPK")
            tableMapping.ColumnMappings.Add("EPK", "EPK")
            tableMapping.ColumnMappings.Add("SYOfferingPK", "SYOfferingPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SpecialCourseGrades] WHERE (([PK] = @Original_PK) AND ([SPK] = @Orig"& _ 
                "inal_SPK) AND ([EPK] = @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOffe"& _ 
                "ringPK] IS NULL) OR ([SYOfferingPK] = @Original_SYOfferingPK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SpecialCourseGrades] ([SPK], [EPK], [SYOfferingPK]) VALUES (@SPK, @E"& _ 
                "PK, @SYOfferingPK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FROM SpecialCourseGrades "& _ 
                "WHERE (PK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SpecialCourseGrades] SET [SPK] = @SPK, [EPK] = @EPK, [SYOfferingPK] = @SY"& _ 
                "OfferingPK WHERE (([PK] = @Original_PK) AND ([SPK] = @Original_SPK) AND ([EPK] ="& _ 
                " @Original_EPK) AND ((@IsNull_SYOfferingPK = 1 AND [SYOfferingPK] IS NULL) OR (["& _ 
                "SYOfferingPK] = @Original_SYOfferingPK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PK, SPK, EPK, SYOfferingPK FR"& _ 
                "OM SpecialCourseGrades WHERE (PK = @PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PK, SPK, EPK, SYOfferingPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SpecialCourseGrades"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (EPK = @epk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@epk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "EPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SpecialCourseGradesbyEPKDataTable, ByVal epk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(epk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal epk As Integer) As dsRegistrar.SpecialCourseGradesbyEPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(epk,Integer)
            Dim dataTable As dsRegistrar.SpecialCourseGradesbyEPKDataTable = New dsRegistrar.SpecialCourseGradesbyEPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SpecialCourseGradesbyEPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SpecialCourseGradesbyEPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer), ByVal PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EPK,Integer)
            If (SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_EPK,Integer)
            If (Original_SYOfferingPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SYOfferingPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPK As Integer, ByVal EPK As Integer, ByVal SYOfferingPK As Global.System.Nullable(Of Integer), ByVal Original_PK As Integer, ByVal Original_SPK As Integer, ByVal Original_EPK As Integer, ByVal Original_SYOfferingPK As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(SPK, EPK, SYOfferingPK, Original_PK, Original_SPK, Original_EPK, Original_SYOfferingPK, Original_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WhiteFormTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WhiteForm"
            tableMapping.ColumnMappings.Add("ledgerpk", "ledgerpk")
            tableMapping.ColumnMappings.Add("ledgerdate", "ledgerdate")
            tableMapping.ColumnMappings.Add("ref", "ref")
            tableMapping.ColumnMappings.Add("linetype", "linetype")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("balance", "balance")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Ledger] WHERE (([ledgerpk] = @Original_ledgerpk) AND ([ledgerdate] ="& _ 
                " @Original_ledgerdate) AND ([ref] = @Original_ref) AND ([linetype] = @Original_l"& _ 
                "inetype) AND ([amount] = @Original_amount) AND ([balance] = @Original_balance) A"& _ 
                "ND ([studentpk] = @Original_studentpk) AND ([sypk] = @Original_sypk) AND ([sempk"& _ 
                "] = @Original_sempk) AND ([subjectpk] = @Original_subjectpk) AND ([coursepk] = @"& _ 
                "Original_coursepk) AND ([remarks] = @Original_remarks))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Ledger] ([ledgerdate], [ref], [linetype], [amount], [balance], [stud"& _ 
                "entpk], [sypk], [sempk], [subjectpk], [coursepk], [remarks]) VALUES (@ledgerdate"& _ 
                ", @ref, @linetype, @amount, @balance, @studentpk, @sypk, @sempk, @subjectpk, @co"& _ 
                "ursepk, @remarks);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ledgerpk, ledgerdate, ref, linetype, amount, balance,"& _ 
                " studentpk, sypk, sempk, subjectpk, coursepk, remarks FROM Ledger WHERE (ledgerp"& _ 
                "k = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Ledger] SET [ledgerdate] = @ledgerdate, [ref] = @ref, [linetype] = @linet"& _ 
                "ype, [amount] = @amount, [balance] = @balance, [studentpk] = @studentpk, [sypk] "& _ 
                "= @sypk, [sempk] = @sempk, [subjectpk] = @subjectpk, [coursepk] = @coursepk, [re"& _ 
                "marks] = @remarks WHERE (([ledgerpk] = @Original_ledgerpk) AND ([ledgerdate] = @"& _ 
                "Original_ledgerdate) AND ([ref] = @Original_ref) AND ([linetype] = @Original_lin"& _ 
                "etype) AND ([amount] = @Original_amount) AND ([balance] = @Original_balance) AND"& _ 
                " ([studentpk] = @Original_studentpk) AND ([sypk] = @Original_sypk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([subjectpk] = @Original_subjectpk) AND ([coursepk] = @Or"& _ 
                "iginal_coursepk) AND ([remarks] = @Original_remarks));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ledgerpk, ledgerd"& _ 
                "ate, ref, linetype, amount, balance, studentpk, sypk, sempk, subjectpk, coursepk"& _ 
                ", remarks FROM Ledger WHERE (ledgerpk = @ledgerpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ledgerdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linetype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linetype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_balance", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ledgerpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ledgerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ledgerpk, ledgerdate, ref, linetype, amount, balance, studentpk, sy"& _ 
                "pk, sempk, subjectpk, coursepk, remarks"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Ledger"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (s"& _ 
                "ypk = @sypk) AND (sempk = @sempk) AND (studentpk = @studentpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.WhiteFormDataTable, ByVal sypk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal sypk As Integer, ByVal sempk As Integer, ByVal studentpk As Integer) As dsRegistrar.WhiteFormDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(sypk,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sempk,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(studentpk,Integer)
            Dim dataTable As dsRegistrar.WhiteFormDataTable = New dsRegistrar.WhiteFormDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.WhiteFormDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "WhiteForm")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ledgerpk As Integer, ByVal Original_ledgerdate As Date, ByVal Original_ref As String, ByVal Original_linetype As String, ByVal Original_amount As Decimal, ByVal Original_balance As Decimal, ByVal Original_studentpk As Integer, ByVal Original_sypk As Integer, ByVal Original_sempk As Integer, ByVal Original_subjectpk As Integer, ByVal Original_coursepk As Integer, ByVal Original_remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ref,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_balance,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_studentpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_coursepk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ledgerdate As Date, ByVal ref As String, ByVal linetype As String, ByVal amount As Decimal, ByVal balance As Decimal, ByVal studentpk As Integer, ByVal sypk As Integer, ByVal sempk As Integer, ByVal subjectpk As Integer, ByVal coursepk As Integer, ByVal remarks As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(linetype,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(balance,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(studentpk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(coursepk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal linetype As String,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal remarks As String,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_remarks As String,  _
                    ByVal ledgerpk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ledgerdate,Date)
            If (ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ref,String)
            End If
            If (linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(coursepk,Integer)
            If (remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ledgerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ledgerdate,Date)
            If (Original_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ref,String)
            End If
            If (Original_linetype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_linetype")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_linetype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_balance,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_studentpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_coursepk,Integer)
            If (Original_remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ledgerpk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ledgerdate As Date,  _
                    ByVal ref As String,  _
                    ByVal linetype As String,  _
                    ByVal amount As Decimal,  _
                    ByVal balance As Decimal,  _
                    ByVal studentpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal subjectpk As Integer,  _
                    ByVal coursepk As Integer,  _
                    ByVal remarks As String,  _
                    ByVal Original_ledgerpk As Integer,  _
                    ByVal Original_ledgerdate As Date,  _
                    ByVal Original_ref As String,  _
                    ByVal Original_linetype As String,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_balance As Decimal,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_remarks As String) As Integer
            Return Me.Update(ledgerdate, ref, linetype, amount, balance, studentpk, sypk, sempk, subjectpk, coursepk, remarks, Original_ledgerpk, Original_ledgerdate, Original_ref, Original_linetype, Original_amount, Original_balance, Original_studentpk, Original_sypk, Original_sempk, Original_subjectpk, Original_coursepk, Original_remarks, Original_ledgerpk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClassListTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ClassList"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syofferingpk, "& _ 
                "status, coursepk FROM EnrollSubjects WHERE (enrollpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT enrollpk, yearpk, sempk, "& _ 
                "studentpk, date, transref, subjectpk, syofferingpk, status, coursepk FROM Enroll"& _ 
                "Subjects WHERE (enrollpk = @enrollpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (yearpk"& _ 
                " = @year) AND (sempk = @sem) AND (syofferingpk=@syoffering)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sem", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syoffering", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.ClassListDataTable, ByVal year As Integer, ByVal sem As Integer, ByVal syoffering As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(syoffering,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal year As Integer, ByVal sem As Integer, ByVal syoffering As Integer) As dsRegistrar.ClassListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(year,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(sem,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(syoffering,Integer)
            Dim dataTable As dsRegistrar.ClassListDataTable = New dsRegistrar.ClassListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.ClassListDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "ClassList")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentGradesbyStudentSubjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentGradesbyStudentSubject"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("isPrevSchoolGrade", "isPrevSchoolGrade")
            tableMapping.ColumnMappings.Add("exCompletionGrade", "exCompletionGrade")
            tableMapping.ColumnMappings.Add("exSubjectCode", "exSubjectCode")
            tableMapping.ColumnMappings.Add("exCreditGroup", "exCreditGroup")
            tableMapping.ColumnMappings.Add("exSubjectUnits", "exSubjectUnits")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [StudentGrades] WHERE (([pk] = @Original_pk) AND ([datein] = @Origina"& _ 
                "l_datein) AND ([grade] = @Original_grade) AND ([keythrough] = @Original_keythrou"& _ 
                "gh) AND ([subjectpk] = @Original_subjectpk) AND ([sypk] = @Original_sypk) AND (["& _ 
                "sempk] = @Original_sempk) AND ([teacherpk] = @Original_teacherpk) AND ([studentp"& _ 
                "k] = @Original_studentpk) AND ([extSubjectID] = @Original_extSubjectID) AND ([ex"& _ 
                "SubjectDesc] = @Original_exSubjectDesc) AND ([exSubjectGrade] = @Original_exSubj"& _ 
                "ectGrade) AND ([coursepk] = @Original_coursepk) AND ((@IsNull_isPrevSchoolGrade "& _ 
                "= 1 AND [isPrevSchoolGrade] IS NULL) OR ([isPrevSchoolGrade] = @Original_isPrevS"& _ 
                "choolGrade)) AND ((@IsNull_exCompletionGrade = 1 AND [exCompletionGrade] IS NULL"& _ 
                ") OR ([exCompletionGrade] = @Original_exCompletionGrade)) AND ((@IsNull_exSubjec"& _ 
                "tCode = 1 AND [exSubjectCode] IS NULL) OR ([exSubjectCode] = @Original_exSubject"& _ 
                "Code)) AND ((@IsNull_exCreditGroup = 1 AND [exCreditGroup] IS NULL) OR ([exCredi"& _ 
                "tGroup] = @Original_exCreditGroup)) AND ((@IsNull_exSubjectUnits = 1 AND [exSubj"& _ 
                "ectUnits] IS NULL) OR ([exSubjectUnits] = @Original_exSubjectUnits)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [StudentGrades] ([datein], [grade], [keythrough], [subjectpk], [sypk]"& _ 
                ", [sempk], [teacherpk], [studentpk], [extSubjectID], [exSubjectDesc], [exSubject"& _ 
                "Grade], [coursepk], [isPrevSchoolGrade], [exCompletionGrade], [exSubjectCode], ["& _ 
                "exCreditGroup], [exSubjectUnits]) VALUES (@datein, @grade, @keythrough, @subject"& _ 
                "pk, @sypk, @sempk, @teacherpk, @studentpk, @extSubjectID, @exSubjectDesc, @exSub"& _ 
                "jectGrade, @coursepk, @isPrevSchoolGrade, @exCompletionGrade, @exSubjectCode, @e"& _ 
                "xCreditGroup, @exSubjectUnits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk"& _ 
                ", sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade"& _ 
                ", coursepk, isPrevSchoolGrade, exCompletionGrade, exSubjectCode, exCreditGroup, "& _ 
                "exSubjectUnits FROM StudentGrades WHERE (pk = SCOPE_IDENTITY()) ORDER BY datein "& _ 
                "DESC"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [StudentGrades] SET [datein] = @datein, [grade] = @grade, [keythrough] = @"& _ 
                "keythrough, [subjectpk] = @subjectpk, [sypk] = @sypk, [sempk] = @sempk, [teacher"& _ 
                "pk] = @teacherpk, [studentpk] = @studentpk, [extSubjectID] = @extSubjectID, [exS"& _ 
                "ubjectDesc] = @exSubjectDesc, [exSubjectGrade] = @exSubjectGrade, [coursepk] = @"& _ 
                "coursepk, [isPrevSchoolGrade] = @isPrevSchoolGrade, [exCompletionGrade] = @exCom"& _ 
                "pletionGrade, [exSubjectCode] = @exSubjectCode, [exCreditGroup] = @exCreditGroup"& _ 
                ", [exSubjectUnits] = @exSubjectUnits WHERE (([pk] = @Original_pk) AND ([datein] "& _ 
                "= @Original_datein) AND ([grade] = @Original_grade) AND ([keythrough] = @Origina"& _ 
                "l_keythrough) AND ([subjectpk] = @Original_subjectpk) AND ([sypk] = @Original_sy"& _ 
                "pk) AND ([sempk] = @Original_sempk) AND ([teacherpk] = @Original_teacherpk) AND "& _ 
                "([studentpk] = @Original_studentpk) AND ([extSubjectID] = @Original_extSubjectID"& _ 
                ") AND ([exSubjectDesc] = @Original_exSubjectDesc) AND ([exSubjectGrade] = @Origi"& _ 
                "nal_exSubjectGrade) AND ([coursepk] = @Original_coursepk) AND ((@IsNull_isPrevSc"& _ 
                "hoolGrade = 1 AND [isPrevSchoolGrade] IS NULL) OR ([isPrevSchoolGrade] = @Origin"& _ 
                "al_isPrevSchoolGrade)) AND ((@IsNull_exCompletionGrade = 1 AND [exCompletionGrad"& _ 
                "e] IS NULL) OR ([exCompletionGrade] = @Original_exCompletionGrade)) AND ((@IsNul"& _ 
                "l_exSubjectCode = 1 AND [exSubjectCode] IS NULL) OR ([exSubjectCode] = @Original"& _ 
                "_exSubjectCode)) AND ((@IsNull_exCreditGroup = 1 AND [exCreditGroup] IS NULL) OR"& _ 
                " ([exCreditGroup] = @Original_exCreditGroup)) AND ((@IsNull_exSubjectUnits = 1 A"& _ 
                "ND [exSubjectUnits] IS NULL) OR ([exSubjectUnits] = @Original_exSubjectUnits)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, stude"& _ 
                "ntpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, isPrevSchoolGrade, "& _ 
                "exCompletionGrade, exSubjectCode, exCreditGroup, exSubjectUnits FROM StudentGrad"& _ 
                "es WHERE (pk = @pk) ORDER BY datein DESC"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, s"& _ 
                "tudentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, isPrevSchoolGra"& _ 
                "de, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         exCompletionGrade, exSubjectCode, exCreditGroup, "& _ 
                "exSubjectUnits"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            StudentGrades"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (studentpk = @studen"& _ 
                "t) AND (subjectpk = @subject)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY datein DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subject", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentGradesbyStudentSubjectDataTable, ByVal student As Integer, ByVal subject As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal student As Integer, ByVal subject As Integer) As dsRegistrar.StudentGradesbyStudentSubjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(subject,Integer)
            Dim dataTable As dsRegistrar.StudentGradesbyStudentSubjectDataTable = New dsRegistrar.StudentGradesbyStudentSubjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentGradesbyStudentSubjectDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "StudentGradesbyStudentSubject")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_datein,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_coursepk,Integer)
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_datein,Date)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_coursepk,Integer)
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, isPrevSchoolGrade, exCompletionGrade, exSubjectCode, exCreditGroup, exSubjectUnits, Original_pk, Original_datein, Original_grade, Original_keythrough, Original_subjectpk, Original_sypk, Original_sempk, Original_teacherpk, Original_studentpk, Original_extSubjectID, Original_exSubjectDesc, Original_exSubjectGrade, Original_coursepk, Original_isPrevSchoolGrade, Original_exCompletionGrade, Original_exSubjectCode, Original_exCreditGroup, Original_exSubjectUnits, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsCostTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsCost"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("headerpk", "headerpk")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            tableMapping.ColumnMappings.Add("trpk", "trpk")
            tableMapping.ColumnMappings.Add("quantity", "quantity")
            tableMapping.ColumnMappings.Add("unitamount", "unitamount")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("linenumber", "linenumber")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjectsCost] WHERE (([pk] = @Original_pk) AND ([headerpk] = @"& _ 
                "Original_headerpk) AND ([yrlevel] = @Original_yrlevel) AND ([trpk] = @Original_t"& _ 
                "rpk) AND ([quantity] = @Original_quantity) AND ([unitamount] = @Original_unitamo"& _ 
                "unt) AND ([amount] = @Original_amount) AND ([linenumber] = @Original_linenumber)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjectsCost] ([headerpk], [yrlevel], [trpk], [quantity], [uni"& _ 
                "tamount], [amount], [linenumber]) VALUES (@headerpk, @yrlevel, @trpk, @quantity,"& _ 
                " @unitamount, @amount, @linenumber);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, headerpk, yrlevel, trpk, quanti"& _ 
                "ty, unitamount, amount, linenumber FROM EnrollSubjectsCost WHERE (pk = SCOPE_IDE"& _ 
                "NTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjectsCost] SET [headerpk] = @headerpk, [yrlevel] = @yrlevel, [tr"& _ 
                "pk] = @trpk, [quantity] = @quantity, [unitamount] = @unitamount, [amount] = @amo"& _ 
                "unt, [linenumber] = @linenumber WHERE (([pk] = @Original_pk) AND ([headerpk] = @"& _ 
                "Original_headerpk) AND ([yrlevel] = @Original_yrlevel) AND ([trpk] = @Original_t"& _ 
                "rpk) AND ([quantity] = @Original_quantity) AND ([unitamount] = @Original_unitamo"& _ 
                "unt) AND ([amount] = @Original_amount) AND ([linenumber] = @Original_linenumber)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber"& _ 
                " FROM EnrollSubjectsCost WHERE (pk = @pk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM EnrollSubjectsCost"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsCostDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRegistrar.EnrollSubjectsCostDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRegistrar.EnrollSubjectsCostDataTable = New dsRegistrar.EnrollSubjectsCostDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjectsCostDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsCost")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk As Integer, ByVal Original_headerpk As Integer, ByVal Original_yrlevel As Integer, ByVal Original_trpk As Integer, ByVal Original_quantity As Single, ByVal Original_unitamount As Decimal, ByVal Original_amount As Decimal, ByVal Original_linenumber As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_headerpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_yrlevel,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_trpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_quantity,Single)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_unitamount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_linenumber,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal headerpk As Integer, ByVal yrlevel As Integer, ByVal trpk As Integer, ByVal quantity As Single, ByVal unitamount As Decimal, ByVal amount As Decimal, ByVal linenumber As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(headerpk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(yrlevel,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(trpk,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(quantity,Single)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(unitamount,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(linenumber,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal headerpk As Integer,  _
                    ByVal yrlevel As Integer,  _
                    ByVal trpk As Integer,  _
                    ByVal quantity As Single,  _
                    ByVal unitamount As Decimal,  _
                    ByVal amount As Decimal,  _
                    ByVal linenumber As Integer,  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_headerpk As Integer,  _
                    ByVal Original_yrlevel As Integer,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_quantity As Single,  _
                    ByVal Original_unitamount As Decimal,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_linenumber As Integer,  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(headerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(yrlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(quantity,Single)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(unitamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(linenumber,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_headerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_yrlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_quantity,Single)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_unitamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_linenumber,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal headerpk As Integer, ByVal yrlevel As Integer, ByVal trpk As Integer, ByVal quantity As Single, ByVal unitamount As Decimal, ByVal amount As Decimal, ByVal linenumber As Integer, ByVal Original_pk As Integer, ByVal Original_headerpk As Integer, ByVal Original_yrlevel As Integer, ByVal Original_trpk As Integer, ByVal Original_quantity As Single, ByVal Original_unitamount As Decimal, ByVal Original_amount As Decimal, ByVal Original_linenumber As Integer) As Integer
            Return Me.Update(headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber, Original_pk, Original_headerpk, Original_yrlevel, Original_trpk, Original_quantity, Original_unitamount, Original_amount, Original_linenumber, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjectsCostbyPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjectsCostbyPK"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("headerpk", "headerpk")
            tableMapping.ColumnMappings.Add("yrlevel", "yrlevel")
            tableMapping.ColumnMappings.Add("trpk", "trpk")
            tableMapping.ColumnMappings.Add("quantity", "quantity")
            tableMapping.ColumnMappings.Add("unitamount", "unitamount")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("linenumber", "linenumber")
            tableMapping.ColumnMappings.Add("isTuition", "isTuition")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjectsCost] WHERE (([pk] = @Original_pk) AND ([headerpk] = @"& _ 
                "Original_headerpk) AND ([yrlevel] = @Original_yrlevel) AND ([trpk] = @Original_t"& _ 
                "rpk) AND ([quantity] = @Original_quantity) AND ([unitamount] = @Original_unitamo"& _ 
                "unt) AND ([amount] = @Original_amount) AND ([linenumber] = @Original_linenumber)"& _ 
                " AND ((@IsNull_isTuition = 1 AND [isTuition] IS NULL) OR ([isTuition] = @Origina"& _ 
                "l_isTuition)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isTuition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isTuition", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjectsCost] ([headerpk], [yrlevel], [trpk], [quantity], [uni"& _ 
                "tamount], [amount], [linenumber], [isTuition]) VALUES (@headerpk, @yrlevel, @trp"& _ 
                "k, @quantity, @unitamount, @amount, @linenumber, @isTuition);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, header"& _ 
                "pk, yrlevel, trpk, quantity, unitamount, amount, linenumber, isTuition FROM Enro"& _ 
                "llSubjectsCost WHERE (pk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isTuition", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjectsCost] SET [headerpk] = @headerpk, [yrlevel] = @yrlevel, [tr"& _ 
                "pk] = @trpk, [quantity] = @quantity, [unitamount] = @unitamount, [amount] = @amo"& _ 
                "unt, [linenumber] = @linenumber, [isTuition] = @isTuition WHERE (([pk] = @Origin"& _ 
                "al_pk) AND ([headerpk] = @Original_headerpk) AND ([yrlevel] = @Original_yrlevel)"& _ 
                " AND ([trpk] = @Original_trpk) AND ([quantity] = @Original_quantity) AND ([unita"& _ 
                "mount] = @Original_unitamount) AND ([amount] = @Original_amount) AND ([linenumbe"& _ 
                "r] = @Original_linenumber) AND ((@IsNull_isTuition = 1 AND [isTuition] IS NULL) "& _ 
                "OR ([isTuition] = @Original_isTuition)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, headerpk, yrlevel, trpk, q"& _ 
                "uantity, unitamount, amount, linenumber, isTuition FROM EnrollSubjectsCost WHERE"& _ 
                " (pk = @pk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isTuition", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_headerpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yrlevel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yrlevel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_trpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "trpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantity", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unitamount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unitamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_amount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "amount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linenumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isTuition", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isTuition", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isTuition", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     pk, headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber,"& _ 
                " isTuition"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EnrollSubjectsCost"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (headerpk = @enrollsubjec"& _ 
                "tpk)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollsubjectpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "headerpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjectsCostbyPKDataTable, ByVal enrollsubjectpk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(enrollsubjectpk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal enrollsubjectpk As Integer) As dsRegistrar.EnrollSubjectsCostbyPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(enrollsubjectpk,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjectsCostbyPKDataTable = New dsRegistrar.EnrollSubjectsCostbyPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjectsCostbyPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjectsCostbyPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk As Integer, ByVal Original_headerpk As Integer, ByVal Original_yrlevel As Integer, ByVal Original_trpk As Integer, ByVal Original_quantity As Single, ByVal Original_unitamount As Decimal, ByVal Original_amount As Decimal, ByVal Original_linenumber As Integer, ByVal Original_isTuition As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_headerpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_yrlevel,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_trpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_quantity,Single)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_unitamount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_amount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_linenumber,Integer)
            If (Original_isTuition.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_isTuition.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal headerpk As Integer, ByVal yrlevel As Integer, ByVal trpk As Integer, ByVal quantity As Single, ByVal unitamount As Decimal, ByVal amount As Decimal, ByVal linenumber As Integer, ByVal isTuition As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(headerpk,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(yrlevel,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(trpk,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(quantity,Single)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(unitamount,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(linenumber,Integer)
            If (isTuition.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(isTuition.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal headerpk As Integer,  _
                    ByVal yrlevel As Integer,  _
                    ByVal trpk As Integer,  _
                    ByVal quantity As Single,  _
                    ByVal unitamount As Decimal,  _
                    ByVal amount As Decimal,  _
                    ByVal linenumber As Integer,  _
                    ByVal isTuition As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_headerpk As Integer,  _
                    ByVal Original_yrlevel As Integer,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_quantity As Single,  _
                    ByVal Original_unitamount As Decimal,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_linenumber As Integer,  _
                    ByVal Original_isTuition As Global.System.Nullable(Of Boolean),  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(headerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(yrlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(quantity,Single)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(unitamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(linenumber,Integer)
            If (isTuition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(isTuition.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_headerpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_yrlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_trpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_quantity,Single)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_unitamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_amount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_linenumber,Integer)
            If (Original_isTuition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_isTuition.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal headerpk As Integer,  _
                    ByVal yrlevel As Integer,  _
                    ByVal trpk As Integer,  _
                    ByVal quantity As Single,  _
                    ByVal unitamount As Decimal,  _
                    ByVal amount As Decimal,  _
                    ByVal linenumber As Integer,  _
                    ByVal isTuition As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_headerpk As Integer,  _
                    ByVal Original_yrlevel As Integer,  _
                    ByVal Original_trpk As Integer,  _
                    ByVal Original_quantity As Single,  _
                    ByVal Original_unitamount As Decimal,  _
                    ByVal Original_amount As Decimal,  _
                    ByVal Original_linenumber As Integer,  _
                    ByVal Original_isTuition As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(headerpk, yrlevel, trpk, quantity, unitamount, amount, linenumber, isTuition, Original_pk, Original_headerpk, Original_yrlevel, Original_trpk, Original_quantity, Original_unitamount, Original_amount, Original_linenumber, Original_isTuition, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentGradesByPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StudentGradesByPK"
            tableMapping.ColumnMappings.Add("pk", "pk")
            tableMapping.ColumnMappings.Add("datein", "datein")
            tableMapping.ColumnMappings.Add("grade", "grade")
            tableMapping.ColumnMappings.Add("keythrough", "keythrough")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("sypk", "sypk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("teacherpk", "teacherpk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("extSubjectID", "extSubjectID")
            tableMapping.ColumnMappings.Add("exSubjectDesc", "exSubjectDesc")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            tableMapping.ColumnMappings.Add("exSubjectUnits", "exSubjectUnits")
            tableMapping.ColumnMappings.Add("exCreditGroup", "exCreditGroup")
            tableMapping.ColumnMappings.Add("exSubjectCode", "exSubjectCode")
            tableMapping.ColumnMappings.Add("exCompletionGrade", "exCompletionGrade")
            tableMapping.ColumnMappings.Add("isPrevSchoolGrade", "isPrevSchoolGrade")
            tableMapping.ColumnMappings.Add("exSubjectGrade", "exSubjectGrade")
            tableMapping.ColumnMappings.Add("exUnits", "exUnits")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [StudentGrades] WHERE (([pk] = @Original_pk) AND ([datein] = @Origina"& _ 
                "l_datein) AND ([grade] = @Original_grade) AND ([keythrough] = @Original_keythrou"& _ 
                "gh) AND ([subjectpk] = @Original_subjectpk) AND ([sypk] = @Original_sypk) AND (["& _ 
                "sempk] = @Original_sempk) AND ([teacherpk] = @Original_teacherpk) AND ([studentp"& _ 
                "k] = @Original_studentpk) AND ([extSubjectID] = @Original_extSubjectID) AND ([ex"& _ 
                "SubjectDesc] = @Original_exSubjectDesc) AND ([exSubjectGrade] = @Original_exSubj"& _ 
                "ectGrade) AND ([coursepk] = @Original_coursepk) AND ((@IsNull_exSubjectUnits = 1"& _ 
                " AND [exSubjectUnits] IS NULL) OR ([exSubjectUnits] = @Original_exSubjectUnits))"& _ 
                " AND ((@IsNull_exCreditGroup = 1 AND [exCreditGroup] IS NULL) OR ([exCreditGroup"& _ 
                "] = @Original_exCreditGroup)) AND ((@IsNull_exSubjectCode = 1 AND [exSubjectCode"& _ 
                "] IS NULL) OR ([exSubjectCode] = @Original_exSubjectCode)) AND ((@IsNull_exCompl"& _ 
                "etionGrade = 1 AND [exCompletionGrade] IS NULL) OR ([exCompletionGrade] = @Origi"& _ 
                "nal_exCompletionGrade)) AND ((@IsNull_isPrevSchoolGrade = 1 AND [isPrevSchoolGra"& _ 
                "de] IS NULL) OR ([isPrevSchoolGrade] = @Original_isPrevSchoolGrade)) AND ((@IsNu"& _ 
                "ll_exUnits = 1 AND [exUnits] IS NULL) OR ([exUnits] = @Original_exUnits)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [StudentGrades] ([datein], [grade], [keythrough], [subjectpk], [sypk]"& _ 
                ", [sempk], [teacherpk], [studentpk], [extSubjectID], [exSubjectDesc], [exSubject"& _ 
                "Grade], [coursepk], [exSubjectUnits], [exCreditGroup], [exSubjectCode], [exCompl"& _ 
                "etionGrade], [isPrevSchoolGrade], [exUnits]) VALUES (@datein, @grade, @keythroug"& _ 
                "h, @subjectpk, @sypk, @sempk, @teacherpk, @studentpk, @extSubjectID, @exSubjectD"& _ 
                "esc, @exSubjectGrade, @coursepk, @exSubjectUnits, @exCreditGroup, @exSubjectCode"& _ 
                ", @exCompletionGrade, @isPrevSchoolGrade, @exUnits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, "& _ 
                "keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjec"& _ 
                "tDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, e"& _ 
                "xCompletionGrade, isPrevSchoolGrade, exUnits FROM StudentGrades WHERE (pk = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [StudentGrades] SET [datein] = @datein, [grade] = @grade, [keythrough] = @"& _ 
                "keythrough, [subjectpk] = @subjectpk, [sypk] = @sypk, [sempk] = @sempk, [teacher"& _ 
                "pk] = @teacherpk, [studentpk] = @studentpk, [extSubjectID] = @extSubjectID, [exS"& _ 
                "ubjectDesc] = @exSubjectDesc, [exSubjectGrade] = @exSubjectGrade, [coursepk] = @"& _ 
                "coursepk, [exSubjectUnits] = @exSubjectUnits, [exCreditGroup] = @exCreditGroup, "& _ 
                "[exSubjectCode] = @exSubjectCode, [exCompletionGrade] = @exCompletionGrade, [isP"& _ 
                "revSchoolGrade] = @isPrevSchoolGrade, [exUnits] = @exUnits WHERE (([pk] = @Origi"& _ 
                "nal_pk) AND ([datein] = @Original_datein) AND ([grade] = @Original_grade) AND (["& _ 
                "keythrough] = @Original_keythrough) AND ([subjectpk] = @Original_subjectpk) AND "& _ 
                "([sypk] = @Original_sypk) AND ([sempk] = @Original_sempk) AND ([teacherpk] = @Or"& _ 
                "iginal_teacherpk) AND ([studentpk] = @Original_studentpk) AND ([extSubjectID] = "& _ 
                "@Original_extSubjectID) AND ([exSubjectDesc] = @Original_exSubjectDesc) AND ([ex"& _ 
                "SubjectGrade] = @Original_exSubjectGrade) AND ([coursepk] = @Original_coursepk) "& _ 
                "AND ((@IsNull_exSubjectUnits = 1 AND [exSubjectUnits] IS NULL) OR ([exSubjectUni"& _ 
                "ts] = @Original_exSubjectUnits)) AND ((@IsNull_exCreditGroup = 1 AND [exCreditGr"& _ 
                "oup] IS NULL) OR ([exCreditGroup] = @Original_exCreditGroup)) AND ((@IsNull_exSu"& _ 
                "bjectCode = 1 AND [exSubjectCode] IS NULL) OR ([exSubjectCode] = @Original_exSub"& _ 
                "jectCode)) AND ((@IsNull_exCompletionGrade = 1 AND [exCompletionGrade] IS NULL) "& _ 
                "OR ([exCompletionGrade] = @Original_exCompletionGrade)) AND ((@IsNull_isPrevScho"& _ 
                "olGrade = 1 AND [isPrevSchoolGrade] IS NULL) OR ([isPrevSchoolGrade] = @Original"& _ 
                "_isPrevSchoolGrade)) AND ((@IsNull_exUnits = 1 AND [exUnits] IS NULL) OR ([exUni"& _ 
                "ts] = @Original_exUnits)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk, datein, grade, keythrough, subjectpk, sy"& _ 
                "pk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, co"& _ 
                "ursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevS"& _ 
                "choolGrade, exUnits FROM StudentGrades WHERE (pk = @pk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_datein", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "datein", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_grade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "grade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_keythrough", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "keythrough", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sypk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sypk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_teacherpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "teacherpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_extSubjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extSubjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectDesc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectDesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectGrade", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCreditGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCreditGroup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exSubjectCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exSubjectCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exSubjectCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exCompletionGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exCompletionGrade", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "exCompletionGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isPrevSchoolGrade", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isPrevSchoolGrade", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isPrevSchoolGrade", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_exUnits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "exUnits", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk, datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentp"& _ 
                "k, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCred"& _ 
                "itGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&", exUnits FROM St"& _ 
                "udentGrades "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE pk =@pk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.StudentGradesByPKDataTable, ByVal pk As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(pk,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal pk As Integer) As dsRegistrar.StudentGradesByPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(pk,Integer)
            Dim dataTable As dsRegistrar.StudentGradesByPKDataTable = New dsRegistrar.StudentGradesByPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.StudentGradesByPKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "StudentGradesByPK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_datein,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_sypk,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sempk,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_coursepk,Integer)
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_exUnits.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_exUnits.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (exUnits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(exUnits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal pk As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(datein,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(grade,Decimal)
            If (keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(studentpk,Integer)
            If (extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(extSubjectID,String)
            End If
            If (exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(exSubjectDesc,String)
            End If
            If (exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(coursepk,Integer)
            If (exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(exSubjectCode,String)
            End If
            If (exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (exUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(exUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_pk,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_datein,Date)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_grade,Decimal)
            If (Original_keythrough Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_keythrough")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_keythrough,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_subjectpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_sypk,Integer)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_sempk,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_teacherpk,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_studentpk,Integer)
            If (Original_extSubjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_extSubjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_extSubjectID,String)
            End If
            If (Original_exSubjectDesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectDesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_exSubjectDesc,String)
            End If
            If (Original_exSubjectGrade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_exSubjectGrade")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_exSubjectGrade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_coursepk,Integer)
            If (Original_exSubjectUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_exSubjectUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_exCreditGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_exCreditGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_exSubjectCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_exSubjectCode,String)
            End If
            If (Original_exCompletionGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_exCompletionGrade.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_isPrevSchoolGrade.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_isPrevSchoolGrade.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_exUnits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_exUnits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(pk,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal datein As Date,  _
                    ByVal grade As Decimal,  _
                    ByVal keythrough As String,  _
                    ByVal subjectpk As Integer,  _
                    ByVal sypk As Integer,  _
                    ByVal sempk As Integer,  _
                    ByVal teacherpk As Integer,  _
                    ByVal studentpk As Integer,  _
                    ByVal extSubjectID As String,  _
                    ByVal exSubjectDesc As String,  _
                    ByVal exSubjectGrade As String,  _
                    ByVal coursepk As Integer,  _
                    ByVal exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal exSubjectCode As String,  _
                    ByVal exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal exUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_pk As Integer,  _
                    ByVal Original_datein As Date,  _
                    ByVal Original_grade As Decimal,  _
                    ByVal Original_keythrough As String,  _
                    ByVal Original_subjectpk As Integer,  _
                    ByVal Original_sypk As Integer,  _
                    ByVal Original_sempk As Integer,  _
                    ByVal Original_teacherpk As Integer,  _
                    ByVal Original_studentpk As Integer,  _
                    ByVal Original_extSubjectID As String,  _
                    ByVal Original_exSubjectDesc As String,  _
                    ByVal Original_exSubjectGrade As String,  _
                    ByVal Original_coursepk As Integer,  _
                    ByVal Original_exSubjectUnits As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exCreditGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_exSubjectCode As String,  _
                    ByVal Original_exCompletionGrade As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_isPrevSchoolGrade As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_exUnits As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(datein, grade, keythrough, subjectpk, sypk, sempk, teacherpk, studentpk, extSubjectID, exSubjectDesc, exSubjectGrade, coursepk, exSubjectUnits, exCreditGroup, exSubjectCode, exCompletionGrade, isPrevSchoolGrade, exUnits, Original_pk, Original_datein, Original_grade, Original_keythrough, Original_subjectpk, Original_sypk, Original_sempk, Original_teacherpk, Original_studentpk, Original_extSubjectID, Original_exSubjectDesc, Original_exSubjectGrade, Original_coursepk, Original_exSubjectUnits, Original_exCreditGroup, Original_exSubjectCode, Original_exCompletionGrade, Original_isPrevSchoolGrade, Original_exUnits, Original_pk)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingExtraHoursTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingExtraHours"
            tableMapping.ColumnMappings.Add("syOfferingExtraHoursPK", "syOfferingExtraHoursPK")
            tableMapping.ColumnMappings.Add("syOfferingFK", "syOfferingFK")
            tableMapping.ColumnMappings.Add("dayType", "dayType")
            tableMapping.ColumnMappings.Add("timeStart", "timeStart")
            tableMapping.ColumnMappings.Add("timeEnd", "timeEnd")
            tableMapping.ColumnMappings.Add("inactive", "inactive")
            tableMapping.ColumnMappings.Add("dateCreated", "dateCreated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYOfferingExtraHours] WHERE (([syOfferingExtraHoursPK] = @Orig"& _ 
                "inal_syOfferingExtraHoursPK) AND ((@IsNull_syOfferingFK = 1 AND [syOfferingFK] I"& _ 
                "S NULL) OR ([syOfferingFK] = @Original_syOfferingFK)) AND ((@IsNull_dayType = 1 "& _ 
                "AND [dayType] IS NULL) OR ([dayType] = @Original_dayType)) AND ((@IsNull_timeSta"& _ 
                "rt = 1 AND [timeStart] IS NULL) OR ([timeStart] = @Original_timeStart)) AND ((@I"& _ 
                "sNull_timeEnd = 1 AND [timeEnd] IS NULL) OR ([timeEnd] = @Original_timeEnd)) AND"& _ 
                " ((@IsNull_inactive = 1 AND [inactive] IS NULL) OR ([inactive] = @Original_inact"& _ 
                "ive)) AND ((@IsNull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated]"& _ 
                " = @Original_dateCreated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dayType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeStart", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYOfferingExtraHours] ([syOfferingFK], [dayType], [timeStart],"& _ 
                " [timeEnd], [inactive], [dateCreated]) VALUES (@syOfferingFK, @dayType, @timeSta"& _ 
                "rt, @timeEnd, @inactive, @dateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syOfferingExtraHoursPK, syOfferi"& _ 
                "ngFK, dayType, timeStart, timeEnd, inactive, dateCreated FROM SYOfferingExtraHou"& _ 
                "rs WHERE (syOfferingExtraHoursPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYOfferingExtraHours] SET [syOfferingFK] = @syOfferingFK, [dayType]"& _ 
                " = @dayType, [timeStart] = @timeStart, [timeEnd] = @timeEnd, [inactive] = @inact"& _ 
                "ive, [dateCreated] = @dateCreated WHERE (([syOfferingExtraHoursPK] = @Original_s"& _ 
                "yOfferingExtraHoursPK) AND ((@IsNull_syOfferingFK = 1 AND [syOfferingFK] IS NULL"& _ 
                ") OR ([syOfferingFK] = @Original_syOfferingFK)) AND ((@IsNull_dayType = 1 AND [d"& _ 
                "ayType] IS NULL) OR ([dayType] = @Original_dayType)) AND ((@IsNull_timeStart = 1"& _ 
                " AND [timeStart] IS NULL) OR ([timeStart] = @Original_timeStart)) AND ((@IsNull_"& _ 
                "timeEnd = 1 AND [timeEnd] IS NULL) OR ([timeEnd] = @Original_timeEnd)) AND ((@Is"& _ 
                "Null_inactive = 1 AND [inactive] IS NULL) OR ([inactive] = @Original_inactive)) "& _ 
                "AND ((@IsNull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated] = @Or"& _ 
                "iginal_dateCreated)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syOfferingExtraHoursPK, syOfferingFK, dayType, ti"& _ 
                "meStart, timeEnd, inactive, dateCreated FROM SYOfferingExtraHours WHERE (syOffer"& _ 
                "ingExtraHoursPK = @syOfferingExtraHoursPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dayType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeStart", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT syOfferingExtraHoursPK, syOfferingFK, dayType, timeStart, timeEnd, inactiv"& _ 
                "e, dateCreated FROM dbo.SYOfferingExtraHours"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingExtraHoursDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRegistrar.SYOfferingExtraHoursDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRegistrar.SYOfferingExtraHoursDataTable = New dsRegistrar.SYOfferingExtraHoursDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingExtraHoursDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingExtraHours")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syOfferingExtraHoursPK,Integer)
            If (Original_syOfferingFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_syOfferingFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_dayType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_dayType,String)
            End If
            If (Original_timeStart Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_timeStart,String)
            End If
            If (Original_timeEnd Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_timeEnd,String)
            End If
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date)) As Integer
            If (syOfferingFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(syOfferingFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (dayType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dayType,String)
            End If
            If (timeStart Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(timeStart,String)
            End If
            If (timeEnd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(timeEnd,String)
            End If
            If (inactive.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date), ByVal syOfferingExtraHoursPK As Integer) As Integer
            If (syOfferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(syOfferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (dayType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dayType,String)
            End If
            If (timeStart Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(timeStart,String)
            End If
            If (timeEnd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(timeEnd,String)
            End If
            If (inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_syOfferingExtraHoursPK,Integer)
            If (Original_syOfferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_syOfferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_dayType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_dayType,String)
            End If
            If (Original_timeStart Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_timeStart,String)
            End If
            If (Original_timeEnd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_timeEnd,String)
            End If
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(syOfferingExtraHoursPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(syOfferingFK, dayType, timeStart, timeEnd, inactive, dateCreated, Original_syOfferingExtraHoursPK, Original_syOfferingFK, Original_dayType, Original_timeStart, Original_timeEnd, Original_inactive, Original_dateCreated, Original_syOfferingExtraHoursPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingExtraHoursByFKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingExtraHoursByFK"
            tableMapping.ColumnMappings.Add("syOfferingExtraHoursPK", "syOfferingExtraHoursPK")
            tableMapping.ColumnMappings.Add("syOfferingFK", "syOfferingFK")
            tableMapping.ColumnMappings.Add("dayType", "dayType")
            tableMapping.ColumnMappings.Add("timeStart", "timeStart")
            tableMapping.ColumnMappings.Add("timeEnd", "timeEnd")
            tableMapping.ColumnMappings.Add("inactive", "inactive")
            tableMapping.ColumnMappings.Add("dateCreated", "dateCreated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYOfferingExtraHours] WHERE (([syOfferingExtraHoursPK] = @Orig"& _ 
                "inal_syOfferingExtraHoursPK) AND ((@IsNull_syOfferingFK = 1 AND [syOfferingFK] I"& _ 
                "S NULL) OR ([syOfferingFK] = @Original_syOfferingFK)) AND ((@IsNull_dayType = 1 "& _ 
                "AND [dayType] IS NULL) OR ([dayType] = @Original_dayType)) AND ((@IsNull_timeSta"& _ 
                "rt = 1 AND [timeStart] IS NULL) OR ([timeStart] = @Original_timeStart)) AND ((@I"& _ 
                "sNull_timeEnd = 1 AND [timeEnd] IS NULL) OR ([timeEnd] = @Original_timeEnd)) AND"& _ 
                " ((@IsNull_inactive = 1 AND [inactive] IS NULL) OR ([inactive] = @Original_inact"& _ 
                "ive)) AND ((@IsNull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated]"& _ 
                " = @Original_dateCreated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dayType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeStart", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYOfferingExtraHours] ([syOfferingFK], [dayType], [timeStart],"& _ 
                " [timeEnd], [inactive], [dateCreated]) VALUES (@syOfferingFK, @dayType, @timeSta"& _ 
                "rt, @timeEnd, @inactive, @dateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syOfferingExtraHoursPK, syOfferi"& _ 
                "ngFK, dayType, timeStart, timeEnd, inactive, dateCreated FROM SYOfferingExtraHou"& _ 
                "rs WHERE (syOfferingExtraHoursPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYOfferingExtraHours] SET [syOfferingFK] = @syOfferingFK, [dayType]"& _ 
                " = @dayType, [timeStart] = @timeStart, [timeEnd] = @timeEnd, [inactive] = @inact"& _ 
                "ive, [dateCreated] = @dateCreated WHERE (([syOfferingExtraHoursPK] = @Original_s"& _ 
                "yOfferingExtraHoursPK) AND ((@IsNull_syOfferingFK = 1 AND [syOfferingFK] IS NULL"& _ 
                ") OR ([syOfferingFK] = @Original_syOfferingFK)) AND ((@IsNull_dayType = 1 AND [d"& _ 
                "ayType] IS NULL) OR ([dayType] = @Original_dayType)) AND ((@IsNull_timeStart = 1"& _ 
                " AND [timeStart] IS NULL) OR ([timeStart] = @Original_timeStart)) AND ((@IsNull_"& _ 
                "timeEnd = 1 AND [timeEnd] IS NULL) OR ([timeEnd] = @Original_timeEnd)) AND ((@Is"& _ 
                "Null_inactive = 1 AND [inactive] IS NULL) OR ([inactive] = @Original_inactive)) "& _ 
                "AND ((@IsNull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated] = @Or"& _ 
                "iginal_dateCreated)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT syOfferingExtraHoursPK, syOfferingFK, dayType, ti"& _ 
                "meStart, timeEnd, inactive, dateCreated FROM SYOfferingExtraHours WHERE (syOffer"& _ 
                "ingExtraHoursPK = @syOfferingExtraHoursPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syOfferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dayType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dayType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dayType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeStart", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeStart", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeStart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_timeEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timeEnd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timeEnd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_inactive", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inactive", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inactive", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syOfferingExtraHoursPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingExtraHoursPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT syOfferingExtraHoursPK, syOfferingFK, dayType, timeStart, timeEnd, inactiv"& _ 
                "e, dateCreated FROM dbo.SYOfferingExtraHours WHERE syOfferingFK = @syofferingpk"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syOfferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingExtraHoursByFKDataTable, ByVal syofferingpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (syofferingpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferingpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal syofferingpk As Global.System.Nullable(Of Integer)) As dsRegistrar.SYOfferingExtraHoursByFKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (syofferingpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferingpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsRegistrar.SYOfferingExtraHoursByFKDataTable = New dsRegistrar.SYOfferingExtraHoursByFKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingExtraHoursByFKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingExtraHoursByFK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_syOfferingExtraHoursPK,Integer)
            If (Original_syOfferingFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_syOfferingFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_dayType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_dayType,String)
            End If
            If (Original_timeStart Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_timeStart,String)
            End If
            If (Original_timeEnd Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_timeEnd,String)
            End If
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date)) As Integer
            If (syOfferingFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(syOfferingFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (dayType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dayType,String)
            End If
            If (timeStart Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(timeStart,String)
            End If
            If (timeEnd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(timeEnd,String)
            End If
            If (inactive.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date), ByVal syOfferingExtraHoursPK As Integer) As Integer
            If (syOfferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(syOfferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (dayType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dayType,String)
            End If
            If (timeStart Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(timeStart,String)
            End If
            If (timeEnd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(timeEnd,String)
            End If
            If (inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_syOfferingExtraHoursPK,Integer)
            If (Original_syOfferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_syOfferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_dayType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_dayType,String)
            End If
            If (Original_timeStart Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_timeStart,String)
            End If
            If (Original_timeEnd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_timeEnd,String)
            End If
            If (Original_inactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_inactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(syOfferingExtraHoursPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syOfferingFK As Global.System.Nullable(Of Integer), ByVal dayType As String, ByVal timeStart As String, ByVal timeEnd As String, ByVal inactive As Global.System.Nullable(Of Boolean), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_syOfferingExtraHoursPK As Integer, ByVal Original_syOfferingFK As Global.System.Nullable(Of Integer), ByVal Original_dayType As String, ByVal Original_timeStart As String, ByVal Original_timeEnd As String, ByVal Original_inactive As Global.System.Nullable(Of Boolean), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(syOfferingFK, dayType, timeStart, timeEnd, inactive, dateCreated, Original_syOfferingExtraHoursPK, Original_syOfferingFK, Original_dayType, Original_timeStart, Original_timeEnd, Original_inactive, Original_dateCreated, Original_syOfferingExtraHoursPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingFusedSubjectsByFKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingFusedSubjectsByFK"
            tableMapping.ColumnMappings.Add("dateCreated", "dateCreated")
            tableMapping.ColumnMappings.Add("SYOfferingFusedSubjectsPK", "SYOfferingFusedSubjectsPK")
            tableMapping.ColumnMappings.Add("syofferingFK", "syofferingFK")
            tableMapping.ColumnMappings.Add("subjectPK", "subjectPK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SYOfferingFusedSubjects] WHERE (([SYOfferingFusedSubjectsPK] = @Orig"& _ 
                "inal_SYOfferingFusedSubjectsPK) AND ((@IsNull_syofferingFK = 1 AND [syofferingFK"& _ 
                "] IS NULL) OR ([syofferingFK] = @Original_syofferingFK)) AND ((@IsNull_subjectPK"& _ 
                " = 1 AND [subjectPK] IS NULL) OR ([subjectPK] = @Original_subjectPK)) AND ((@IsN"& _ 
                "ull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated] = @Original_dat"& _ 
                "eCreated)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingFusedSubjectsPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingFusedSubjectsPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SYOfferingFusedSubjects] ([syofferingFK], [subjectPK], [dateCreated]"& _ 
                ") VALUES (@syofferingFK, @subjectPK, @dateCreated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYOfferingFusedSubje"& _ 
                "ctsPK, syofferingFK, subjectPK, dateCreated FROM SYOfferingFusedSubjects WHERE ("& _ 
                "SYOfferingFusedSubjectsPK = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SYOfferingFusedSubjects] SET [syofferingFK] = @syofferingFK, [subjectPK] "& _ 
                "= @subjectPK, [dateCreated] = @dateCreated WHERE (([SYOfferingFusedSubjectsPK] ="& _ 
                " @Original_SYOfferingFusedSubjectsPK) AND ((@IsNull_syofferingFK = 1 AND [syoffe"& _ 
                "ringFK] IS NULL) OR ([syofferingFK] = @Original_syofferingFK)) AND ((@IsNull_sub"& _ 
                "jectPK = 1 AND [subjectPK] IS NULL) OR ([subjectPK] = @Original_subjectPK)) AND "& _ 
                "((@IsNull_dateCreated = 1 AND [dateCreated] IS NULL) OR ([dateCreated] = @Origin"& _ 
                "al_dateCreated)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYOfferingFusedSubjectsPK, syofferingFK, subjectPK, d"& _ 
                "ateCreated FROM SYOfferingFusedSubjects WHERE (SYOfferingFusedSubjectsPK = @SYOf"& _ 
                "feringFusedSubjectsPK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYOfferingFusedSubjectsPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingFusedSubjectsPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingFK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectPK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYOfferingFusedSubjectsPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SYOfferingFusedSubjectsPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        SYOfferingFusedSubjectsPK, syofferingFK, subjectPK, dateCreated"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            SYOfferingFusedSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE syofferingFK = @syofferpk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingFK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingFusedSubjectsByFKDataTable, ByVal syofferpk As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (syofferpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal syofferpk As Global.System.Nullable(Of Integer)) As dsRegistrar.SYOfferingFusedSubjectsByFKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (syofferpk.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(syofferpk.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsRegistrar.SYOfferingFusedSubjectsByFKDataTable = New dsRegistrar.SYOfferingFusedSubjectsByFKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.SYOfferingFusedSubjectsByFKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "SYOfferingFusedSubjectsByFK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SYOfferingFusedSubjectsPK As Integer, ByVal Original_syofferingFK As Global.System.Nullable(Of Integer), ByVal Original_subjectPK As Global.System.Nullable(Of Integer), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYOfferingFusedSubjectsPK,Integer)
            If (Original_syofferingFK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_syofferingFK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_subjectPK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_subjectPK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal syofferingFK As Global.System.Nullable(Of Integer), ByVal subjectPK As Global.System.Nullable(Of Integer), ByVal dateCreated As Global.System.Nullable(Of Date)) As Integer
            If (syofferingFK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(syofferingFK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectPK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(subjectPK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syofferingFK As Global.System.Nullable(Of Integer), ByVal subjectPK As Global.System.Nullable(Of Integer), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_SYOfferingFusedSubjectsPK As Integer, ByVal Original_syofferingFK As Global.System.Nullable(Of Integer), ByVal Original_subjectPK As Global.System.Nullable(Of Integer), ByVal Original_dateCreated As Global.System.Nullable(Of Date), ByVal SYOfferingFusedSubjectsPK As Integer) As Integer
            If (syofferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(syofferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (subjectPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(subjectPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYOfferingFusedSubjectsPK,Integer)
            If (Original_syofferingFK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_syofferingFK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_subjectPK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_subjectPK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_dateCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_dateCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SYOfferingFusedSubjectsPK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal syofferingFK As Global.System.Nullable(Of Integer), ByVal subjectPK As Global.System.Nullable(Of Integer), ByVal dateCreated As Global.System.Nullable(Of Date), ByVal Original_SYOfferingFusedSubjectsPK As Integer, ByVal Original_syofferingFK As Global.System.Nullable(Of Integer), ByVal Original_subjectPK As Global.System.Nullable(Of Integer), ByVal Original_dateCreated As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(syofferingFK, subjectPK, dateCreated, Original_SYOfferingFusedSubjectsPK, Original_syofferingFK, Original_subjectPK, Original_dateCreated, Original_SYOfferingFusedSubjectsPK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EnrollSubjects1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EnrollSubjects1"
            tableMapping.ColumnMappings.Add("enrollpk", "enrollpk")
            tableMapping.ColumnMappings.Add("yearpk", "yearpk")
            tableMapping.ColumnMappings.Add("sempk", "sempk")
            tableMapping.ColumnMappings.Add("studentpk", "studentpk")
            tableMapping.ColumnMappings.Add("date", "date")
            tableMapping.ColumnMappings.Add("transref", "transref")
            tableMapping.ColumnMappings.Add("subjectpk", "subjectpk")
            tableMapping.ColumnMappings.Add("syofferingpk", "syofferingpk")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("coursepk", "coursepk")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EnrollSubjects] WHERE (([enrollpk] = @Original_enrollpk) AND ([yearp"& _ 
                "k] = @Original_yearpk) AND ([sempk] = @Original_sempk) AND ([studentpk] = @Origi"& _ 
                "nal_studentpk) AND ([date] = @Original_date) AND ([transref] = @Original_transre"& _ 
                "f) AND ([subjectpk] = @Original_subjectpk) AND ([syofferingpk] = @Original_syoff"& _ 
                "eringpk) AND ([status] = @Original_status) AND ([coursepk] = @Original_coursepk)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [EnrollSubjects] ([yearpk], [sempk], [studentpk], [date], [transref],"& _ 
                " [subjectpk], [syofferingpk], [status], [coursepk]) VALUES (@yearpk, @sempk, @st"& _ 
                "udentpk, @date, @transref, @subjectpk, @syofferingpk, @status, @coursepk);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syofferingpk, "& _ 
                "status, coursepk FROM EnrollSubjects WHERE (enrollpk = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EnrollSubjects] SET [yearpk] = @yearpk, [sempk] = @sempk, [studentpk] = @"& _ 
                "studentpk, [date] = @date, [transref] = @transref, [subjectpk] = @subjectpk, [sy"& _ 
                "offeringpk] = @syofferingpk, [status] = @status, [coursepk] = @coursepk WHERE (("& _ 
                "[enrollpk] = @Original_enrollpk) AND ([yearpk] = @Original_yearpk) AND ([sempk] "& _ 
                "= @Original_sempk) AND ([studentpk] = @Original_studentpk) AND ([date] = @Origin"& _ 
                "al_date) AND ([transref] = @Original_transref) AND ([subjectpk] = @Original_subj"& _ 
                "ectpk) AND ([syofferingpk] = @Original_syofferingpk) AND ([status] = @Original_s"& _ 
                "tatus) AND ([coursepk] = @Original_coursepk));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT enrollpk, yearpk, sempk, "& _ 
                "studentpk, date, transref, subjectpk, syofferingpk, status, coursepk FROM Enroll"& _ 
                "Subjects WHERE (enrollpk = @enrollpk)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_enrollpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yearpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yearpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sempk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sempk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_studentpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_transref", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "transref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_subjectpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_syofferingpk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "syofferingpk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_coursepk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "coursepk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enrollpk", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "enrollpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        enrollpk, yearpk, sempk, studentpk, date, transref, subjectpk, syof"& _ 
                "feringpk, status, coursepk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            EnrollSubjects"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE         (stude"& _ 
                "ntpk = @student)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@student", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "studentpk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.EnrollSubjects1DataTable, ByVal student As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal student As Integer) As dsRegistrar.EnrollSubjects1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(student,Integer)
            Dim dataTable As dsRegistrar.EnrollSubjects1DataTable = New dsRegistrar.EnrollSubjects1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsRegistrar.EnrollSubjects1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsRegistrar) As Integer
            Return Me.Adapter.Update(dataSet, "EnrollSubjects1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYOfferingByFusedSubjectPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYOfferingByFusedSubjectPK"
            tableMapping.ColumnMappings.Add("dateCreated", "dateCreated")
            tableMapping.ColumnMappings.Add("MainSubject", "MainSubject")
            tableMapping.ColumnMappings.Add("FusedSubject", "FusedSubject")
            tableMapping.ColumnMappings.Add("Teacher", "Teacher")
            tableMapping.ColumnMappings.Add("SchoolYear", "SchoolYear")
            tableMapping.ColumnMappings.Add("SemesterName", "SemesterName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MMFCEnrollmentSystem.My.MySettings.Default.mmfcdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        SchoolYear.SchoolYear, Semester.SemesterName, SYOfferingFusedSubjec"& _ 
                "ts.dateCreated, Subjects.SubjectName AS MainSubject, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Subjects_1.SubjectName AS FusedSubject, Teachers.Name AS Teacher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  SYOfferingFusedSubjects INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SYOffering ON SYO"& _ 
                "fferingFusedSubjects.syofferingFK = SYOffering.syofferingpk INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 Subjects ON SYOffering.subjectpk = Subjects.SubjectPriKey INNER"& _ 
                " JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Subjects AS Subjects_1 ON SYOfferingFusedSubject"& _ 
                "s.subjectPK = Subjects_1.SubjectPriKey INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Teac"& _ 
                "hers ON SYOffering.teacherid = Teachers.TeacherPriKey INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           SchoolYear ON SYOffering.sypk = SchoolYear.sypk INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                Semester ON SYOffering.semesterpk = Semester.SemPK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE       "& _ 
                " (SYOfferingFusedSubjects.subjectPK = @subjectPK)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subjectPK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "subjectPK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRegistrar.SYOfferingByFusedSubjectPKDataTable, ByVal subjectPK As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (subjectPK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectPK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal subjectPK As Global.System.Nullable(Of Integer)) As dsRegistrar.SYOfferingByFusedSubjectPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (subjectPK.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(subjectPK.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsRegistrar.SYOfferingByFusedSubjectPKDataTable = New dsRegistrar.SYOfferingByFusedSubjectPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _studentsTableAdapter As StudentsTableAdapter
        
        Private _enrollSubjectsTableAdapter As EnrollSubjectsTableAdapter
        
        Private _sYOfferingSelectTableAdapter As SYOfferingSelectTableAdapter
        
        Private _sYOfferingbyPKTableAdapter As SYOfferingbyPKTableAdapter
        
        Private _ledgerSearchTableAdapter As LedgerSearchTableAdapter
        
        Private _ledgerbyTRTypeTableAdapter As LedgerbyTRTypeTableAdapter
        
        Private _sYOfferingbyResourceTableAdapter As SYOfferingbyResourceTableAdapter
        
        Private _templateResourceLoadTableAdapter As TemplateResourceLoadTableAdapter
        
        Private _templateSubjectLoadTableAdapter As TemplateSubjectLoadTableAdapter
        
        Private _sYOfferingbySubjectTableAdapter As SYOfferingbySubjectTableAdapter
        
        Private _studentsbyPKTableAdapter As StudentsbyPKTableAdapter
        
        Private _studentGradesTableAdapter As StudentGradesTableAdapter
        
        Private _templateGradeEntryTableAdapter As TemplateGradeEntryTableAdapter
        
        Private _blockSectionTuitionTableAdapter As BlockSectionTuitionTableAdapter
        
        Private _enrollHeaderTableAdapter As EnrollHeaderTableAdapter
        
        Private _blockSectionTuitionbyCourseTableAdapter As BlockSectionTuitionbyCourseTableAdapter
        
        Private _studentGradesbyStudentTableAdapter As StudentGradesbyStudentTableAdapter
        
        Private _enrollSubjectsbyClassTableAdapter As EnrollSubjectsbyClassTableAdapter
        
        Private _specialCourseGradesTableAdapter As SpecialCourseGradesTableAdapter
        
        Private _specialCourseGradesbySPKTableAdapter As SpecialCourseGradesbySPKTableAdapter
        
        Private _enrollSubjectsbyPkTableAdapter As EnrollSubjectsbyPkTableAdapter
        
        Private _specialCourseGradesbyEPKTableAdapter As SpecialCourseGradesbyEPKTableAdapter
        
        Private _whiteFormTableAdapter As WhiteFormTableAdapter
        
        Private _classListTableAdapter As ClassListTableAdapter
        
        Private _studentGradesbyStudentSubjectTableAdapter As StudentGradesbyStudentSubjectTableAdapter
        
        Private _enrollSubjectsCostTableAdapter As EnrollSubjectsCostTableAdapter
        
        Private _enrollSubjectsCostbyPKTableAdapter As EnrollSubjectsCostbyPKTableAdapter
        
        Private _studentGradesByPKTableAdapter As StudentGradesByPKTableAdapter
        
        Private _sYOfferingExtraHoursTableAdapter As SYOfferingExtraHoursTableAdapter
        
        Private _sYOfferingExtraHoursByFKTableAdapter As SYOfferingExtraHoursByFKTableAdapter
        
        Private _sYOfferingFusedSubjectsByFKTableAdapter As SYOfferingFusedSubjectsByFKTableAdapter
        
        Private _enrollSubjects1TableAdapter As EnrollSubjects1TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsTableAdapter() As StudentsTableAdapter
            Get
                Return Me._studentsTableAdapter
            End Get
            Set
                Me._studentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsTableAdapter() As EnrollSubjectsTableAdapter
            Get
                Return Me._enrollSubjectsTableAdapter
            End Get
            Set
                Me._enrollSubjectsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingSelectTableAdapter() As SYOfferingSelectTableAdapter
            Get
                Return Me._sYOfferingSelectTableAdapter
            End Get
            Set
                Me._sYOfferingSelectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingbyPKTableAdapter() As SYOfferingbyPKTableAdapter
            Get
                Return Me._sYOfferingbyPKTableAdapter
            End Get
            Set
                Me._sYOfferingbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LedgerSearchTableAdapter() As LedgerSearchTableAdapter
            Get
                Return Me._ledgerSearchTableAdapter
            End Get
            Set
                Me._ledgerSearchTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LedgerbyTRTypeTableAdapter() As LedgerbyTRTypeTableAdapter
            Get
                Return Me._ledgerbyTRTypeTableAdapter
            End Get
            Set
                Me._ledgerbyTRTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingbyResourceTableAdapter() As SYOfferingbyResourceTableAdapter
            Get
                Return Me._sYOfferingbyResourceTableAdapter
            End Get
            Set
                Me._sYOfferingbyResourceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TemplateResourceLoadTableAdapter() As TemplateResourceLoadTableAdapter
            Get
                Return Me._templateResourceLoadTableAdapter
            End Get
            Set
                Me._templateResourceLoadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TemplateSubjectLoadTableAdapter() As TemplateSubjectLoadTableAdapter
            Get
                Return Me._templateSubjectLoadTableAdapter
            End Get
            Set
                Me._templateSubjectLoadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingbySubjectTableAdapter() As SYOfferingbySubjectTableAdapter
            Get
                Return Me._sYOfferingbySubjectTableAdapter
            End Get
            Set
                Me._sYOfferingbySubjectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentsbyPKTableAdapter() As StudentsbyPKTableAdapter
            Get
                Return Me._studentsbyPKTableAdapter
            End Get
            Set
                Me._studentsbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentGradesTableAdapter() As StudentGradesTableAdapter
            Get
                Return Me._studentGradesTableAdapter
            End Get
            Set
                Me._studentGradesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TemplateGradeEntryTableAdapter() As TemplateGradeEntryTableAdapter
            Get
                Return Me._templateGradeEntryTableAdapter
            End Get
            Set
                Me._templateGradeEntryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BlockSectionTuitionTableAdapter() As BlockSectionTuitionTableAdapter
            Get
                Return Me._blockSectionTuitionTableAdapter
            End Get
            Set
                Me._blockSectionTuitionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollHeaderTableAdapter() As EnrollHeaderTableAdapter
            Get
                Return Me._enrollHeaderTableAdapter
            End Get
            Set
                Me._enrollHeaderTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BlockSectionTuitionbyCourseTableAdapter() As BlockSectionTuitionbyCourseTableAdapter
            Get
                Return Me._blockSectionTuitionbyCourseTableAdapter
            End Get
            Set
                Me._blockSectionTuitionbyCourseTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentGradesbyStudentTableAdapter() As StudentGradesbyStudentTableAdapter
            Get
                Return Me._studentGradesbyStudentTableAdapter
            End Get
            Set
                Me._studentGradesbyStudentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsbyClassTableAdapter() As EnrollSubjectsbyClassTableAdapter
            Get
                Return Me._enrollSubjectsbyClassTableAdapter
            End Get
            Set
                Me._enrollSubjectsbyClassTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SpecialCourseGradesTableAdapter() As SpecialCourseGradesTableAdapter
            Get
                Return Me._specialCourseGradesTableAdapter
            End Get
            Set
                Me._specialCourseGradesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SpecialCourseGradesbySPKTableAdapter() As SpecialCourseGradesbySPKTableAdapter
            Get
                Return Me._specialCourseGradesbySPKTableAdapter
            End Get
            Set
                Me._specialCourseGradesbySPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsbyPkTableAdapter() As EnrollSubjectsbyPkTableAdapter
            Get
                Return Me._enrollSubjectsbyPkTableAdapter
            End Get
            Set
                Me._enrollSubjectsbyPkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SpecialCourseGradesbyEPKTableAdapter() As SpecialCourseGradesbyEPKTableAdapter
            Get
                Return Me._specialCourseGradesbyEPKTableAdapter
            End Get
            Set
                Me._specialCourseGradesbyEPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WhiteFormTableAdapter() As WhiteFormTableAdapter
            Get
                Return Me._whiteFormTableAdapter
            End Get
            Set
                Me._whiteFormTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ClassListTableAdapter() As ClassListTableAdapter
            Get
                Return Me._classListTableAdapter
            End Get
            Set
                Me._classListTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentGradesbyStudentSubjectTableAdapter() As StudentGradesbyStudentSubjectTableAdapter
            Get
                Return Me._studentGradesbyStudentSubjectTableAdapter
            End Get
            Set
                Me._studentGradesbyStudentSubjectTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsCostTableAdapter() As EnrollSubjectsCostTableAdapter
            Get
                Return Me._enrollSubjectsCostTableAdapter
            End Get
            Set
                Me._enrollSubjectsCostTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjectsCostbyPKTableAdapter() As EnrollSubjectsCostbyPKTableAdapter
            Get
                Return Me._enrollSubjectsCostbyPKTableAdapter
            End Get
            Set
                Me._enrollSubjectsCostbyPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property StudentGradesByPKTableAdapter() As StudentGradesByPKTableAdapter
            Get
                Return Me._studentGradesByPKTableAdapter
            End Get
            Set
                Me._studentGradesByPKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingExtraHoursTableAdapter() As SYOfferingExtraHoursTableAdapter
            Get
                Return Me._sYOfferingExtraHoursTableAdapter
            End Get
            Set
                Me._sYOfferingExtraHoursTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingExtraHoursByFKTableAdapter() As SYOfferingExtraHoursByFKTableAdapter
            Get
                Return Me._sYOfferingExtraHoursByFKTableAdapter
            End Get
            Set
                Me._sYOfferingExtraHoursByFKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYOfferingFusedSubjectsByFKTableAdapter() As SYOfferingFusedSubjectsByFKTableAdapter
            Get
                Return Me._sYOfferingFusedSubjectsByFKTableAdapter
            End Get
            Set
                Me._sYOfferingFusedSubjectsByFKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EnrollSubjects1TableAdapter() As EnrollSubjects1TableAdapter
            Get
                Return Me._enrollSubjects1TableAdapter
            End Get
            Set
                Me._enrollSubjects1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingSelectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingSelectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingSelectTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingbyPKTableAdapter.Connection
                End If
                If ((Not (Me._ledgerSearchTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ledgerSearchTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ledgerSearchTableAdapter.Connection
                End If
                If ((Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ledgerbyTRTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ledgerbyTRTypeTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingbyResourceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingbyResourceTableAdapter.Connection
                End If
                If ((Not (Me._templateResourceLoadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._templateResourceLoadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._templateResourceLoadTableAdapter.Connection
                End If
                If ((Not (Me._templateSubjectLoadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._templateSubjectLoadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._templateSubjectLoadTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingbySubjectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingbySubjectTableAdapter.Connection
                End If
                If ((Not (Me._studentsbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentsbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentsbyPKTableAdapter.Connection
                End If
                If ((Not (Me._studentGradesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentGradesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentGradesTableAdapter.Connection
                End If
                If ((Not (Me._templateGradeEntryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._templateGradeEntryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._templateGradeEntryTableAdapter.Connection
                End If
                If ((Not (Me._blockSectionTuitionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._blockSectionTuitionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._blockSectionTuitionTableAdapter.Connection
                End If
                If ((Not (Me._enrollHeaderTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollHeaderTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollHeaderTableAdapter.Connection
                End If
                If ((Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._blockSectionTuitionbyCourseTableAdapter.Connection) Is Nothing)) Then
                    Return Me._blockSectionTuitionbyCourseTableAdapter.Connection
                End If
                If ((Not (Me._studentGradesbyStudentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentGradesbyStudentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentGradesbyStudentTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsbyClassTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsbyClassTableAdapter.Connection
                End If
                If ((Not (Me._specialCourseGradesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._specialCourseGradesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._specialCourseGradesTableAdapter.Connection
                End If
                If ((Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._specialCourseGradesbySPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._specialCourseGradesbySPKTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsbyPkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsbyPkTableAdapter.Connection
                End If
                If ((Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._specialCourseGradesbyEPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._specialCourseGradesbyEPKTableAdapter.Connection
                End If
                If ((Not (Me._whiteFormTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._whiteFormTableAdapter.Connection) Is Nothing)) Then
                    Return Me._whiteFormTableAdapter.Connection
                End If
                If ((Not (Me._classListTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._classListTableAdapter.Connection) Is Nothing)) Then
                    Return Me._classListTableAdapter.Connection
                End If
                If ((Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentGradesbyStudentSubjectTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentGradesbyStudentSubjectTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsCostTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsCostTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsCostTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjectsCostbyPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjectsCostbyPKTableAdapter.Connection
                End If
                If ((Not (Me._studentGradesByPKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentGradesByPKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentGradesByPKTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingExtraHoursTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingExtraHoursTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingExtraHoursByFKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingExtraHoursByFKTableAdapter.Connection
                End If
                If ((Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection
                End If
                If ((Not (Me._enrollSubjects1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enrollSubjects1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._enrollSubjects1TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._classListTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsRegistrar, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCost.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudentSubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentSubjectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCostbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentGradesByPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentGradesByPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyPkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbySPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbySPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbyEPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbyEPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._classListTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ClassList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._classListTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WhiteForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._whiteFormTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingFusedSubjectsByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingFusedSubjectsByFKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHoursByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursByFKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjects1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHours.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._specialCourseGradesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LedgerbyTRType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ledgerbyTRTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LedgerSearch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ledgerSearchTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyResource.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingbyResourceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TemplateSubjectLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._templateSubjectLoadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TemplateResourceLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._templateResourceLoadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingSelect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingSelectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYOfferingbySubjectTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollHeader.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollHeaderTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyCourseTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyClass.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyClassTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentGradesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TemplateGradeEntry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._templateGradeEntryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsRegistrar, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCost.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudentSubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentSubjectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCostbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentGradesByPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentGradesByPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyPkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbySPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbySPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbyEPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbyEPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._classListTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ClassList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._classListTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WhiteForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._whiteFormTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingFusedSubjectsByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingFusedSubjectsByFKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHoursByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursByFKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjects1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHours.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._specialCourseGradesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LedgerbyTRType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ledgerbyTRTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LedgerSearch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ledgerSearchTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyResource.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingbyResourceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TemplateSubjectLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._templateSubjectLoadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TemplateResourceLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._templateResourceLoadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingSelect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingSelectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYOfferingbySubjectTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollHeader.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollHeaderTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyCourseTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyClass.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyClassTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentGradesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TemplateGradeEntry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._templateGradeEntryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsRegistrar, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TemplateGradeEntry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._templateGradeEntryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentsbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentGradesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudent.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyClass.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyClassTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuitionbyCourse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionbyCourseTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BlockSectionTuition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._blockSectionTuitionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollHeader.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollHeaderTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbySubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingbySubjectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingSelect.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingSelectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Students.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TemplateResourceLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._templateResourceLoadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TemplateSubjectLoad.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._templateSubjectLoadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingbyResource.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingbyResourceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LedgerSearch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ledgerSearchTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LedgerbyTRType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ledgerbyTRTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGrades.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._specialCourseGradesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHours.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjects1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjects1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingExtraHoursByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingExtraHoursByFKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYOfferingFusedSubjectsByFK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYOfferingFusedSubjectsByFKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WhiteForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._whiteFormTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._classListTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ClassList.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._classListTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbyEPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbyEPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SpecialCourseGradesbySPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._specialCourseGradesbySPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsbyPk.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsbyPkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentGradesByPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentGradesByPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCostbyPK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostbyPKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.StudentGradesbyStudentSubject.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentGradesbyStudentSubjectTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EnrollSubjectsCost.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enrollSubjectsCostTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsRegistrar) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._studentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingSelectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingSelectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._ledgerSearchTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ledgerSearchTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ledgerbyTRTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingbyResourceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._templateResourceLoadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._templateResourceLoadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._templateSubjectLoadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._templateSubjectLoadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingbySubjectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentsbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentsbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentGradesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentGradesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._templateGradeEntryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._templateGradeEntryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._blockSectionTuitionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._blockSectionTuitionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollHeaderTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollHeaderTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._blockSectionTuitionbyCourseTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentGradesbyStudentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentGradesbyStudentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsbyClassTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._specialCourseGradesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._specialCourseGradesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._specialCourseGradesbySPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsbyPkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._specialCourseGradesbyEPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._whiteFormTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._whiteFormTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._classListTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._classListTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentGradesbyStudentSubjectTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsCostTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsCostTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjectsCostbyPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentGradesByPKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentGradesByPKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingExtraHoursTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingExtraHoursByFKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enrollSubjects1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enrollSubjects1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsTableAdapter, Me._studentsTableAdapter.Connection)
                    Me._studentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsTableAdapter, Me._enrollSubjectsTableAdapter.Connection)
                    Me._enrollSubjectsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingSelectTableAdapter, Me._sYOfferingSelectTableAdapter.Connection)
                    Me._sYOfferingSelectTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingSelectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingSelectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingSelectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingSelectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingbyPKTableAdapter, Me._sYOfferingbyPKTableAdapter.Connection)
                    Me._sYOfferingbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ledgerSearchTableAdapter, Me._ledgerSearchTableAdapter.Connection)
                    Me._ledgerSearchTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ledgerSearchTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ledgerSearchTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ledgerSearchTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ledgerSearchTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ledgerbyTRTypeTableAdapter, Me._ledgerbyTRTypeTableAdapter.Connection)
                    Me._ledgerbyTRTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ledgerbyTRTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ledgerbyTRTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ledgerbyTRTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ledgerbyTRTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingbyResourceTableAdapter, Me._sYOfferingbyResourceTableAdapter.Connection)
                    Me._sYOfferingbyResourceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyResourceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingbyResourceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingbyResourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingbyResourceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._templateResourceLoadTableAdapter, Me._templateResourceLoadTableAdapter.Connection)
                    Me._templateResourceLoadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._templateResourceLoadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._templateResourceLoadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._templateResourceLoadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._templateResourceLoadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._templateSubjectLoadTableAdapter, Me._templateSubjectLoadTableAdapter.Connection)
                    Me._templateSubjectLoadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._templateSubjectLoadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._templateSubjectLoadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._templateSubjectLoadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._templateSubjectLoadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingbySubjectTableAdapter, Me._sYOfferingbySubjectTableAdapter.Connection)
                    Me._sYOfferingbySubjectTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbySubjectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingbySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingbySubjectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingbySubjectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentsbyPKTableAdapter, Me._studentsbyPKTableAdapter.Connection)
                    Me._studentsbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentsbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentsbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentsbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentGradesTableAdapter, Me._studentGradesTableAdapter.Connection)
                    Me._studentGradesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentGradesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentGradesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentGradesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._templateGradeEntryTableAdapter, Me._templateGradeEntryTableAdapter.Connection)
                    Me._templateGradeEntryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._templateGradeEntryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._templateGradeEntryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._templateGradeEntryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._templateGradeEntryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._blockSectionTuitionTableAdapter, Me._blockSectionTuitionTableAdapter.Connection)
                    Me._blockSectionTuitionTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._blockSectionTuitionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._blockSectionTuitionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._blockSectionTuitionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollHeaderTableAdapter, Me._enrollHeaderTableAdapter.Connection)
                    Me._enrollHeaderTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollHeaderTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollHeaderTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollHeaderTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollHeaderTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._blockSectionTuitionbyCourseTableAdapter, Me._blockSectionTuitionbyCourseTableAdapter.Connection)
                    Me._blockSectionTuitionbyCourseTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionbyCourseTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._blockSectionTuitionbyCourseTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._blockSectionTuitionbyCourseTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._blockSectionTuitionbyCourseTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentGradesbyStudentTableAdapter, Me._studentGradesbyStudentTableAdapter.Connection)
                    Me._studentGradesbyStudentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesbyStudentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentGradesbyStudentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentGradesbyStudentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentGradesbyStudentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsbyClassTableAdapter, Me._enrollSubjectsbyClassTableAdapter.Connection)
                    Me._enrollSubjectsbyClassTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyClassTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsbyClassTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsbyClassTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsbyClassTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._specialCourseGradesTableAdapter, Me._specialCourseGradesTableAdapter.Connection)
                    Me._specialCourseGradesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._specialCourseGradesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._specialCourseGradesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._specialCourseGradesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._specialCourseGradesbySPKTableAdapter, Me._specialCourseGradesbySPKTableAdapter.Connection)
                    Me._specialCourseGradesbySPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesbySPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._specialCourseGradesbySPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._specialCourseGradesbySPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._specialCourseGradesbySPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsbyPkTableAdapter, Me._enrollSubjectsbyPkTableAdapter.Connection)
                    Me._enrollSubjectsbyPkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyPkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsbyPkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsbyPkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._specialCourseGradesbyEPKTableAdapter, Me._specialCourseGradesbyEPKTableAdapter.Connection)
                    Me._specialCourseGradesbyEPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesbyEPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._specialCourseGradesbyEPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._specialCourseGradesbyEPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._specialCourseGradesbyEPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._whiteFormTableAdapter, Me._whiteFormTableAdapter.Connection)
                    Me._whiteFormTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._whiteFormTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._whiteFormTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._whiteFormTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._whiteFormTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._classListTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._classListTableAdapter, Me._classListTableAdapter.Connection)
                    Me._classListTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._classListTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._classListTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._classListTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._classListTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentGradesbyStudentSubjectTableAdapter, Me._studentGradesbyStudentSubjectTableAdapter.Connection)
                    Me._studentGradesbyStudentSubjectTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesbyStudentSubjectTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentGradesbyStudentSubjectTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentGradesbyStudentSubjectTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentGradesbyStudentSubjectTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsCostTableAdapter, Me._enrollSubjectsCostTableAdapter.Connection)
                    Me._enrollSubjectsCostTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsCostTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsCostTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsCostTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsCostTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjectsCostbyPKTableAdapter, Me._enrollSubjectsCostbyPKTableAdapter.Connection)
                    Me._enrollSubjectsCostbyPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsCostbyPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjectsCostbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjectsCostbyPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjectsCostbyPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentGradesByPKTableAdapter, Me._studentGradesByPKTableAdapter.Connection)
                    Me._studentGradesByPKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesByPKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._studentGradesByPKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentGradesByPKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentGradesByPKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingExtraHoursTableAdapter, Me._sYOfferingExtraHoursTableAdapter.Connection)
                    Me._sYOfferingExtraHoursTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingExtraHoursTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingExtraHoursTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingExtraHoursTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingExtraHoursTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingExtraHoursByFKTableAdapter, Me._sYOfferingExtraHoursByFKTableAdapter.Connection)
                    Me._sYOfferingExtraHoursByFKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingExtraHoursByFKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingExtraHoursByFKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingExtraHoursByFKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingExtraHoursByFKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYOfferingFusedSubjectsByFKTableAdapter, Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection)
                    Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingFusedSubjectsByFKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYOfferingFusedSubjectsByFKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYOfferingFusedSubjectsByFKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYOfferingFusedSubjectsByFKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enrollSubjects1TableAdapter, Me._enrollSubjects1TableAdapter.Connection)
                    Me._enrollSubjects1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjects1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enrollSubjects1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enrollSubjects1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enrollSubjects1TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._studentsTableAdapter) Is Nothing) Then
                    Me._studentsTableAdapter.Connection = CType(revertConnections(Me._studentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingSelectTableAdapter) Is Nothing) Then
                    Me._sYOfferingSelectTableAdapter.Connection = CType(revertConnections(Me._sYOfferingSelectTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingSelectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingbyPKTableAdapter) Is Nothing) Then
                    Me._sYOfferingbyPKTableAdapter.Connection = CType(revertConnections(Me._sYOfferingbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ledgerSearchTableAdapter) Is Nothing) Then
                    Me._ledgerSearchTableAdapter.Connection = CType(revertConnections(Me._ledgerSearchTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ledgerSearchTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ledgerbyTRTypeTableAdapter) Is Nothing) Then
                    Me._ledgerbyTRTypeTableAdapter.Connection = CType(revertConnections(Me._ledgerbyTRTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ledgerbyTRTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingbyResourceTableAdapter) Is Nothing) Then
                    Me._sYOfferingbyResourceTableAdapter.Connection = CType(revertConnections(Me._sYOfferingbyResourceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbyResourceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._templateResourceLoadTableAdapter) Is Nothing) Then
                    Me._templateResourceLoadTableAdapter.Connection = CType(revertConnections(Me._templateResourceLoadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._templateResourceLoadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._templateSubjectLoadTableAdapter) Is Nothing) Then
                    Me._templateSubjectLoadTableAdapter.Connection = CType(revertConnections(Me._templateSubjectLoadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._templateSubjectLoadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingbySubjectTableAdapter) Is Nothing) Then
                    Me._sYOfferingbySubjectTableAdapter.Connection = CType(revertConnections(Me._sYOfferingbySubjectTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingbySubjectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentsbyPKTableAdapter) Is Nothing) Then
                    Me._studentsbyPKTableAdapter.Connection = CType(revertConnections(Me._studentsbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentsbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentGradesTableAdapter) Is Nothing) Then
                    Me._studentGradesTableAdapter.Connection = CType(revertConnections(Me._studentGradesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._templateGradeEntryTableAdapter) Is Nothing) Then
                    Me._templateGradeEntryTableAdapter.Connection = CType(revertConnections(Me._templateGradeEntryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._templateGradeEntryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._blockSectionTuitionTableAdapter) Is Nothing) Then
                    Me._blockSectionTuitionTableAdapter.Connection = CType(revertConnections(Me._blockSectionTuitionTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollHeaderTableAdapter) Is Nothing) Then
                    Me._enrollHeaderTableAdapter.Connection = CType(revertConnections(Me._enrollHeaderTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollHeaderTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._blockSectionTuitionbyCourseTableAdapter) Is Nothing) Then
                    Me._blockSectionTuitionbyCourseTableAdapter.Connection = CType(revertConnections(Me._blockSectionTuitionbyCourseTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._blockSectionTuitionbyCourseTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentGradesbyStudentTableAdapter) Is Nothing) Then
                    Me._studentGradesbyStudentTableAdapter.Connection = CType(revertConnections(Me._studentGradesbyStudentTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesbyStudentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsbyClassTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsbyClassTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsbyClassTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyClassTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._specialCourseGradesTableAdapter) Is Nothing) Then
                    Me._specialCourseGradesTableAdapter.Connection = CType(revertConnections(Me._specialCourseGradesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._specialCourseGradesbySPKTableAdapter) Is Nothing) Then
                    Me._specialCourseGradesbySPKTableAdapter.Connection = CType(revertConnections(Me._specialCourseGradesbySPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesbySPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsbyPkTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsbyPkTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsbyPkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsbyPkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._specialCourseGradesbyEPKTableAdapter) Is Nothing) Then
                    Me._specialCourseGradesbyEPKTableAdapter.Connection = CType(revertConnections(Me._specialCourseGradesbyEPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._specialCourseGradesbyEPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._whiteFormTableAdapter) Is Nothing) Then
                    Me._whiteFormTableAdapter.Connection = CType(revertConnections(Me._whiteFormTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._whiteFormTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._classListTableAdapter) Is Nothing) Then
                    Me._classListTableAdapter.Connection = CType(revertConnections(Me._classListTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._classListTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentGradesbyStudentSubjectTableAdapter) Is Nothing) Then
                    Me._studentGradesbyStudentSubjectTableAdapter.Connection = CType(revertConnections(Me._studentGradesbyStudentSubjectTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesbyStudentSubjectTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsCostTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsCostTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsCostTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsCostTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjectsCostbyPKTableAdapter) Is Nothing) Then
                    Me._enrollSubjectsCostbyPKTableAdapter.Connection = CType(revertConnections(Me._enrollSubjectsCostbyPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjectsCostbyPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentGradesByPKTableAdapter) Is Nothing) Then
                    Me._studentGradesByPKTableAdapter.Connection = CType(revertConnections(Me._studentGradesByPKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._studentGradesByPKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingExtraHoursTableAdapter) Is Nothing) Then
                    Me._sYOfferingExtraHoursTableAdapter.Connection = CType(revertConnections(Me._sYOfferingExtraHoursTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingExtraHoursTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingExtraHoursByFKTableAdapter) Is Nothing) Then
                    Me._sYOfferingExtraHoursByFKTableAdapter.Connection = CType(revertConnections(Me._sYOfferingExtraHoursByFKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingExtraHoursByFKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYOfferingFusedSubjectsByFKTableAdapter) Is Nothing) Then
                    Me._sYOfferingFusedSubjectsByFKTableAdapter.Connection = CType(revertConnections(Me._sYOfferingFusedSubjectsByFKTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYOfferingFusedSubjectsByFKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enrollSubjects1TableAdapter) Is Nothing) Then
                    Me._enrollSubjects1TableAdapter.Connection = CType(revertConnections(Me._enrollSubjects1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enrollSubjects1TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
